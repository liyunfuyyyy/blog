{"title":"TS面试题","uid":"2e2a8a1eab8c08452e6963881a3d432f","slug":"TS面试题","date":"2022-04-10T12:15:36.000Z","updated":"2022-04-10T12:16:07.874Z","comments":true,"path":"api/articles/TS面试题.json","keywords":null,"cover":null,"content":"<h3 id=\"第一题\"><a href=\"#第一题\" class=\"headerlink\" title=\"第一题\"></a>第一题</h3><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  kind<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">makeCustomer</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> User<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>u<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// Error（TS 编译器版本：v4.4.2）</span>\n  <span class=\"token comment\">// Type '&#123; id: number; kind: string; &#125;' is not assignable to type 'T'.</span>\n  <span class=\"token comment\">// '&#123; id: number; kind: string; &#125;' is assignable to the constraint of type 'T', </span>\n  <span class=\"token comment\">// but 'T' could be instantiated with a different subtype of constraint 'User'.</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    id<span class=\"token operator\">:</span> u<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n    kind<span class=\"token operator\">:</span> <span class=\"token string\">'customer'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上代码为什么会提示错误，应该如何解决上述问题？</p>\n<h3 id=\"第二题\"><a href=\"#第二题\" class=\"headerlink\" title=\"第二题\"></a>第二题</h3><p>本道题我们希望参数 <code>a</code> 和 <code>b</code> 的类型都是一致的，即 <code>a</code> 和 <code>b</code> 同时为 <code>number</code> 或 <code>string</code> 类型。当它们的类型不一致的值，TS 类型检查器能自动提示对应的错误信息。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> a <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> <span class=\"token string\">':'</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// no error but b can be number!</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// error as b can be number | string</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Ok</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第三题\"><a href=\"#第三题\" class=\"headerlink\" title=\"第三题\"></a>第三题</h3><p>在 <a href=\"https://link.juejin.cn/?target=https://mp.weixin.qq.com/s?__biz=MzI2MjcxNTQ0Nw==&mid=2247484142&idx=1&sn=946ba90d10e2625513f09e60a462b3a7&chksm=ea47a3b6dd302aa05af716d0bd70d8d7c682c9f4527a9a0c03cd107635711c394ab155127f9e&scene=21%23wechat_redirect\">掌握 TS 这些工具类型，让你开发事半功倍</a> 这篇文章中，阿宝哥介绍了 TS 内置的工具类型：<code>Partial&lt;T&gt;</code>，它的作用是将某个类型里的属性全部变为可选项 <code>?</code>。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">&#123;</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  description<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateTodo</span><span class=\"token punctuation\">(</span>todo<span class=\"token operator\">:</span> Todo<span class=\"token punctuation\">,</span> fieldsToUpdate<span class=\"token operator\">:</span> Partial<span class=\"token operator\">&lt;</span>Todo<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>todo<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>fieldsToUpdate <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// lib.es5.d.ts</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Partial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>那么如何定义一个 <code>SetOptional</code> 工具类型，支持把给定的 keys 对应的属性变成可选的？对应的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\ta<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\tb<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tc<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 测试用例</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">SomeOptional</span> <span class=\"token operator\">=</span> SetOptional<span class=\"token operator\">&lt;</span>Foo<span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// type SomeOptional = &#123;</span>\n<span class=\"token comment\">// \ta?: number; // 该属性已变成可选的</span>\n<span class=\"token comment\">// \tb?: string; // 保持不变</span>\n<span class=\"token comment\">// \tc: boolean; </span>\n<span class=\"token comment\">// &#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在实现 <code>SetOptional</code> 工具类型之后，如果你感兴趣，可以继续实现 <code>SetRequired</code> 工具类型，利用它可以把指定的 keys 对应的属性变成必填的。对应的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\ta<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\tb<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tc<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 测试用例</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">SomeRequired</span> <span class=\"token operator\">=</span> SetRequired<span class=\"token operator\">&lt;</span>Foo<span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'c'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type SomeRequired = &#123;</span>\n<span class=\"token comment\">// \ta?: number;</span>\n<span class=\"token comment\">// \tb: string; // 保持不变</span>\n<span class=\"token comment\">// \tc: boolean; // 该属性已变成必填</span>\n<span class=\"token comment\">// &#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第四题\"><a href=\"#第四题\" class=\"headerlink\" title=\"第四题\"></a>第四题</h3><p><code>Pick&lt;T, K extends keyof T&gt;</code> 的作用是将某个类型中的子属性挑出来，变成包含这个类型部分属性的子类型。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">&#123;</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  description<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  completed<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TodoPreview</span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>Todo<span class=\"token punctuation\">,</span> <span class=\"token string\">\"title\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"completed\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> todo<span class=\"token operator\">:</span> TodoPreview <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">\"Clean room\"</span><span class=\"token punctuation\">,</span>\n  completed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>那么如何定义一个 <code>ConditionalPick</code> 工具类型，支持根据指定的 <code>Condition</code> 条件来生成新的类型，对应的使用示例如下：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Example</span> <span class=\"token punctuation\">&#123;</span>\n\ta<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tb<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function-variable function\">c</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\td<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 测试用例：</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">StringKeysOnly</span> <span class=\"token operator\">=</span> ConditionalPick<span class=\"token operator\">&lt;</span>Example<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//=> &#123;a: string&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第五题\"><a href=\"#第五题\" class=\"headerlink\" title=\"第五题\"></a>第五题</h3><p>定义一个工具类型 <code>AppendArgument</code>，为已有的函数类型增加指定类型的参数，新增的参数名是 <code>x</code>，将作为新函数类型的第一个参数。具体的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">AppendArgument<span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token comment\">// 你的实现代码</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">FinalFn</span> <span class=\"token operator\">=</span> AppendArgument<span class=\"token operator\">&lt;</span>Fn<span class=\"token punctuation\">,</span> <span class=\"token builtin\">boolean</span><span class=\"token operator\">></span> \n<span class=\"token comment\">// (x: boolean, a: number, b: string) => number</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第六题\"><a href=\"#第六题\" class=\"headerlink\" title=\"第六题\"></a>第六题</h3><p>定义一个 NativeFlat 工具类型，支持把数组类型拍平（扁平化）。具体的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">NaiveFlat<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token comment\">// 你的实现代码</span>\n\n<span class=\"token comment\">// 测试用例：</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NaiveResult</span> <span class=\"token operator\">=</span> NaiveFlat<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n<span class=\"token comment\">// NaiveResult的结果： \"a\" | \"b\" | \"c\" | \"d\"</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在完成 <code>NaiveFlat</code> 工具类型之后，在继续实现 <code>DeepFlat</code> 工具类型，以支持多维数组类型：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">DeepFlat<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span> <span class=\"token comment\">// 你的实现代码</span>\n\n<span class=\"token comment\">// 测试用例</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Deep</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">DeepTestResult</span> <span class=\"token operator\">=</span> DeepFlat<span class=\"token operator\">&lt;</span>Deep<span class=\"token operator\">></span>  \n<span class=\"token comment\">// DeepTestResult: \"a\" | \"b\" | \"c\" | \"d\" | \"e\"</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第七题\"><a href=\"#第七题\" class=\"headerlink\" title=\"第七题\"></a>第七题</h3><p>使用类型别名定义一个 <code>EmptyObject</code> 类型，使得该类型只允许空对象赋值：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">EmptyObject</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> \n\n<span class=\"token comment\">// 测试用例</span>\n<span class=\"token keyword\">const</span> shouldPass<span class=\"token operator\">:</span> EmptyObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可以正常赋值</span>\n<span class=\"token keyword\">const</span> shouldFail<span class=\"token operator\">:</span> EmptyObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 将出现编译错误</span>\n  prop<span class=\"token operator\">:</span> <span class=\"token string\">\"TS\"</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在通过 <code>EmptyObject</code> 类型的测试用例检测后，我们来更改以下 <code>takeSomeTypeOnly</code> 函数的类型定义，让它的参数只允许严格SomeType类型的值。具体的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">SomeType</span> <span class=\"token operator\">=</span>  <span class=\"token punctuation\">&#123;</span>\n  prop<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 更改以下函数的类型定义，让它的参数只允许严格SomeType类型的值</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">takeSomeTypeOnly</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> SomeType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 测试用例：</span>\n<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">takeSomeTypeOnly</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 可以正常调用</span>\n\n<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> addditionalProp<span class=\"token operator\">:</span> <span class=\"token string\">'x'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">takeSomeTypeOnly</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 将出现编译错误</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第八题\"><a href=\"#第八题\" class=\"headerlink\" title=\"第八题\"></a>第八题</h3><p>定义 <code>NonEmptyArray</code> 工具类型，用于确保数据非空数组。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">NonEmptyArray<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token comment\">// 你的实现代码</span>\n\n<span class=\"token keyword\">const</span> a<span class=\"token operator\">:</span> NonEmptyArray<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 将出现编译错误</span>\n<span class=\"token keyword\">const</span> b<span class=\"token operator\">:</span> NonEmptyArray<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Hello TS'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 非空数据，正常使用</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>提示：该题目有多种解法，感兴趣小伙伴可以自行尝试一下。</p></blockquote>\n<h3 id=\"第九题\"><a href=\"#第九题\" class=\"headerlink\" title=\"第九题\"></a>第九题</h3><p>定义一个 <code>JoinStrArray</code> 工具类型，用于根据指定的 <code>Separator</code> 分隔符，对字符串数组类型进行拼接。具体的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">JoinStrArray<span class=\"token operator\">&lt;</span>Arr <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Separator <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> Result <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token comment\">// 你的实现代码</span>\n\n<span class=\"token comment\">// 测试用例</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Names</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Sem\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lolo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Kaquko\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NamesComma</span> <span class=\"token operator\">=</span> JoinStrArray<span class=\"token operator\">&lt;</span>Names<span class=\"token punctuation\">,</span> <span class=\"token string\">\",\"</span><span class=\"token operator\">></span> <span class=\"token comment\">// \"Sem,Lolo,Kaquko\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NamesSpace</span> <span class=\"token operator\">=</span> JoinStrArray<span class=\"token operator\">&lt;</span>Names<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token operator\">></span> <span class=\"token comment\">// \"Sem Lolo Kaquko\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NamesStars</span> <span class=\"token operator\">=</span> JoinStrArray<span class=\"token operator\">&lt;</span>Names<span class=\"token punctuation\">,</span> <span class=\"token string\">\"⭐️\"</span><span class=\"token operator\">></span> <span class=\"token comment\">// \"Sem⭐️Lolo⭐️Kaquko\"</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第十题\"><a href=\"#第十题\" class=\"headerlink\" title=\"第十题\"></a>第十题</h3><p>实现一个 <code>Trim</code> 工具类型，用于对字符串字面量类型进行去空格处理。具体的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Trim<span class=\"token operator\">&lt;</span><span class=\"token constant\">V</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token comment\">// 你的实现代码</span>\n\n<span class=\"token comment\">// 测试用例</span>\nTrim<span class=\"token operator\">&lt;</span><span class=\"token string\">' semlinker '</span><span class=\"token operator\">></span>\n<span class=\"token comment\">//=> 'semlinker'</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>提示：可以考虑先定义 TrimLeft 和 TrimRight 工具类型，再组合成 Trim 工具类型。</p></blockquote>\n<h3 id=\"第十一题\"><a href=\"#第十一题\" class=\"headerlink\" title=\"第十一题\"></a>第十一题</h3><p>实现一个 <code>IsEqual</code> 工具类型，用于比较两个类型是否相等。具体的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">IsEqual<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token comment\">// 你的实现代码</span>\n\n<span class=\"token comment\">// 测试用例</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">E0</span></span> <span class=\"token operator\">=</span> IsEqual<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">E1</span></span> <span class=\"token operator\">=</span> IsEqual<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">E2</span></span> <span class=\"token operator\">=</span> IsEqual<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第十二题\"><a href=\"#第十二题\" class=\"headerlink\" title=\"第十二题\"></a>第十二题</h3><p>实现一个 <code>Head</code> 工具类型，用于获取数组类型的第一个类型。具体的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Head<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">>></span></span> <span class=\"token operator\">=</span> <span class=\"token comment\">// 你的实现代码</span>\n\n<span class=\"token comment\">// 测试用例</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">H0</span></span> <span class=\"token operator\">=</span> Head<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// never</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">H1</span></span> <span class=\"token operator\">=</span> Head<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">H2</span></span> <span class=\"token operator\">=</span> Head<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// 3</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>提示：该题目有多种解法，感兴趣小伙伴可以自行尝试一下。</p></blockquote>\n<h3 id=\"第十三题\"><a href=\"#第十三题\" class=\"headerlink\" title=\"第十三题\"></a>第十三题</h3><p>实现一个 <code>Tail</code> 工具类型，用于获取数组类型除了第一个类型外，剩余的类型。具体的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Tail<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">>></span></span> <span class=\"token operator\">=</span>  <span class=\"token comment\">// 你的实现代码</span>\n\n<span class=\"token comment\">// 测试用例</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> Tail<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// []</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> Tail<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// [2]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T2</span></span> <span class=\"token operator\">=</span> Tail<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// [2, 3, 4, 5]</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>提示：该题目有多种解法，感兴趣小伙伴可以自行尝试一下。</p></blockquote>\n<h3 id=\"第十四题\"><a href=\"#第十四题\" class=\"headerlink\" title=\"第十四题\"></a>第十四题</h3><p>实现一个 <code>Unshift</code> 工具类型，用于把指定类型 <code>E</code> 作为第一个元素添加到 <code>T</code> 数组类型中。具体的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Unshift<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>  <span class=\"token comment\">// 你的实现代码</span>\n\n<span class=\"token comment\">// 测试用例</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Arr0</span> <span class=\"token operator\">=</span> Unshift<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Arr1</span> <span class=\"token operator\">=</span> Unshift<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [0, 1, 2, 3]</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>提示：该题目有多种解法，感兴趣小伙伴可以自行尝试一下。</p></blockquote>\n<h3 id=\"第十五题\"><a href=\"#第十五题\" class=\"headerlink\" title=\"第十五题\"></a>第十五题</h3><p>实现一个 <code>Shift</code> 工具类型，用于移除 <code>T</code> 数组类型中的第一个类型。具体的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Shift<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token comment\">// 你的实现代码</span>\n\n<span class=\"token comment\">// 测试用例</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">S0</span></span> <span class=\"token operator\">=</span> Shift<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// [2, 3]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">S1</span></span> <span class=\"token operator\">=</span> Shift<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// [number,boolean]</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第十六题\"><a href=\"#第十六题\" class=\"headerlink\" title=\"第十六题\"></a>第十六题</h3><p>实现一个 <code>Push</code> 工具类型，用于把指定类型 <code>E</code> 作为最后一个元素添加到 <code>T</code> 数组类型中。具体的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Push<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token comment\">// 你的实现代码</span>\n\n<span class=\"token comment\">// 测试用例</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Arr0</span> <span class=\"token operator\">=</span> Push<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">></span> <span class=\"token comment\">// [1]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Arr1</span> <span class=\"token operator\">=</span> Push<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">></span> <span class=\"token comment\">// [1, 2, 3, 4]</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第十七题\"><a href=\"#第十七题\" class=\"headerlink\" title=\"第十七题\"></a>第十七题</h3><p>实现一个 <code>Includes</code> 工具类型，用于判断指定的类型 <code>E</code> 是否包含在 <code>T</code> 数组类型中。具体的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Includes<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token comment\">// 你的实现代码</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">I0</span></span> <span class=\"token operator\">=</span> Includes<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">></span> <span class=\"token comment\">// false</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">I1</span></span> <span class=\"token operator\">=</span> Includes<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">></span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">I2</span></span> <span class=\"token operator\">=</span> Includes<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">></span> <span class=\"token comment\">// true</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>提示：该题目有多种解法，感兴趣小伙伴可以自行尝试一下。</p></blockquote>\n<h3 id=\"第十八题\"><a href=\"#第十八题\" class=\"headerlink\" title=\"第十八题\"></a>第十八题</h3><p>实现一个 <code>UnionToIntersection</code> 工具类型，用于把联合类型转换为交叉类型。具体的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">UnionToIntersection<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token comment\">// 你的实现代码</span>\n\n<span class=\"token comment\">// 测试用例</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">U0</span></span> <span class=\"token operator\">=</span> UnionToIntersection<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token comment\">// never</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">U1</span></span> <span class=\"token operator\">=</span> UnionToIntersection<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">&#123;</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span> <span class=\"token comment\">// &#123; name: string; &#125; &amp; &#123; age: number; &#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第十九题\"><a href=\"#第十九题\" class=\"headerlink\" title=\"第十九题\"></a>第十九题</h3><p>实现一个 <code>OptionalKeys</code> 工具类型，用来获取对象类型中声明的可选属性。具体的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Person</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  from<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  speak<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">OptionalKeys<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token comment\">// 你的实现代码</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PersonOptionalKeys</span> <span class=\"token operator\">=</span> OptionalKeys<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> <span class=\"token comment\">// \"from\" | \"speak\"</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>提示：该题目有多种解法，感兴趣小伙伴可以自行尝试一下。</p></blockquote>\n<h3 id=\"第二十题\"><a href=\"#第二十题\" class=\"headerlink\" title=\"第二十题\"></a>第二十题</h3><p>实现一个 <code>Curry</code> 工具类型，用来实现函数类型的柯里化处理。具体的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Curry<span class=\"token operator\">&lt;</span>\n  <span class=\"token constant\">F</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">P</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">any</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Parameters<span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> \n  <span class=\"token constant\">R</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token operator\">></span> \n<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token comment\">// 你的实现代码</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">F0</span></span> <span class=\"token operator\">=</span> Curry<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Date<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// () => Date</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">F1</span></span> <span class=\"token operator\">=</span> Curry<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Date<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (arg: number) => Date</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">F2</span></span> <span class=\"token operator\">=</span> Curry<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Date<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  (arg_0: number) => (b: string) => Date</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第二十一题\"><a href=\"#第二十一题\" class=\"headerlink\" title=\"第二十一题\"></a>第二十一题</h3><p>实现一个 <code>Merge</code> 工具类型，用于把两个类型合并成一个新的类型。第二种类型（SecondType）的 <code>Keys</code> 将会覆盖第一种类型（FirstType）的 <code>Keys</code>。具体的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\ta<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\tb<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Bar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\tb<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Merge<span class=\"token operator\">&lt;</span>FirstType<span class=\"token punctuation\">,</span> SecondType<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token comment\">// 你的实现代码</span>\n\n<span class=\"token keyword\">const</span> ab<span class=\"token operator\">:</span> Merge<span class=\"token operator\">&lt;</span>Foo<span class=\"token punctuation\">,</span> Bar<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第二十二题\"><a href=\"#第二十二题\" class=\"headerlink\" title=\"第二十二题\"></a>第二十二题</h3><p>实现一个 <code>RequireAtLeastOne</code> 工具类型，它将创建至少含有一个给定 <code>Keys</code> 的类型，其余的 <code>Keys</code> 保持原样。具体的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Responder</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\ttext<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tjson<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tsecure<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">RequireAtLeastOne<span class=\"token operator\">&lt;</span>\n\tObjectType<span class=\"token punctuation\">,</span>\n\tKeysType <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> ObjectType <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> ObjectType<span class=\"token punctuation\">,</span>\n<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token comment\">// 你的实现代码</span>\n\n<span class=\"token comment\">// 表示当前类型至少包含 'text' 或 'json' 键</span>\n<span class=\"token keyword\">const</span> responder<span class=\"token operator\">:</span> RequireAtLeastOne<span class=\"token operator\">&lt;</span>Responder<span class=\"token punctuation\">,</span> <span class=\"token string\">'text'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'json'</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function-variable function\">json</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'&#123;\"message\": \"ok\"&#125;'</span><span class=\"token punctuation\">,</span>\n\tsecure<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第二十三题\"><a href=\"#第二十三题\" class=\"headerlink\" title=\"第二十三题\"></a>第二十三题</h3><p>实现一个 <code>RemoveIndexSignature</code> 工具类型，用于移除已有类型中的索引签名。具体的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">RemoveIndexSignature<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token comment\">// 你的实现代码</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">FooWithOnlyBar</span> <span class=\"token operator\">=</span> RemoveIndexSignature<span class=\"token operator\">&lt;</span>Foo<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//&#123; bar: () => void; &#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第二十四题\"><a href=\"#第二十四题\" class=\"headerlink\" title=\"第二十四题\"></a>第二十四题</h3><p>实现一个 <code>Mutable</code> 工具类型，用于移除对象类型上所有属性或部分属性的 <code>readonly</code> 修饰符。具体的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">readonly</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">readonly</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">readonly</span> c<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Mutable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> Keys <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token comment\">// 你的实现代码</span>\n\n<span class=\"token keyword\">const</span> mutableFoo<span class=\"token operator\">:</span> Mutable<span class=\"token operator\">&lt;</span>Foo<span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nmutableFoo<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\nmutableFoo<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token string\">'6'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Cannot assign to 'b' because it is a read-only property.</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第二十五题\"><a href=\"#第二十五题\" class=\"headerlink\" title=\"第二十五题\"></a>第二十五题</h3><p>实现一个 <code>IsUnion</code> 工具类型，判断指定的类型是否为联合类型。具体的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">IsUnion<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token comment\">// 你的实现代码</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">I0</span></span> <span class=\"token operator\">=</span> IsUnion<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">|</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">I1</span></span> <span class=\"token operator\">=</span> IsUnion<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">|</span><span class=\"token builtin\">never</span><span class=\"token operator\">></span> <span class=\"token comment\">// false</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">I2</span></span> <span class=\"token operator\">=</span>IsUnion<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">|</span><span class=\"token builtin\">unknown</span><span class=\"token operator\">></span> <span class=\"token comment\">// false</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第二十六题\"><a href=\"#第二十六题\" class=\"headerlink\" title=\"第二十六题\"></a>第二十六题</h3><p>实现一个 <code>IsNever</code> 工具类型，判断指定的类型是否为 <code>never</code> 类型。具体的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">I0</span></span> <span class=\"token operator\">=</span> IsNever<span class=\"token operator\">&lt;</span><span class=\"token builtin\">never</span><span class=\"token operator\">></span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">I1</span></span> <span class=\"token operator\">=</span> IsNever<span class=\"token operator\">&lt;</span><span class=\"token builtin\">never</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token comment\">// false</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">I2</span></span> <span class=\"token operator\">=</span> IsNever<span class=\"token operator\">&lt;</span><span class=\"token keyword\">null</span><span class=\"token operator\">></span> <span class=\"token comment\">// false</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第二十七题\"><a href=\"#第二十七题\" class=\"headerlink\" title=\"第二十七题\"></a>第二十七题</h3><p>实现一个 <code>Reverse</code> 工具类型，用于对元组类型中元素的位置颠倒，并返回该数组。元组的第一个元素会变成最后一个，最后一个元素变成第一个。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Reverse<span class=\"token operator\">&lt;</span>\n  <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">R</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token comment\">// 你的实现代码</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">R0</span></span> <span class=\"token operator\">=</span> Reverse<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// []</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">R1</span></span> <span class=\"token operator\">=</span> Reverse<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// [3, 2, 1]</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第二十八题\"><a href=\"#第二十八题\" class=\"headerlink\" title=\"第二十八题\"></a>第二十八题</h3><p>实现一个 <code>Split</code> 工具类型，根据给定的分隔符（Delimiter）对包含分隔符的字符串进行切割。可用于定义 <code>String.prototype.split</code> 方法的返回值类型。具体的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Item</span> <span class=\"token operator\">=</span> <span class=\"token string\">'semlinker,lolo,kakuqo'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Split<span class=\"token operator\">&lt;</span>\n\t<span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> \n\tDelimiter <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token comment\">// 你的实现代码</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ElementType</span> <span class=\"token operator\">=</span> Split<span class=\"token operator\">&lt;</span>Item<span class=\"token punctuation\">,</span> <span class=\"token string\">','</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"semlinker\", \"lolo\", \"kakuqo\"]</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第二十九题\"><a href=\"#第二十九题\" class=\"headerlink\" title=\"第二十九题\"></a>第二十九题</h3><p>实现一个 <code>ToPath</code> 工具类型，用于把属性访问（<code>.</code> 或 <code>[]</code>）路径转换为元组的形式。具体的使用示例如下所示：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ToPath<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token comment\">// 你的实现代码</span>\n\nToPath<span class=\"token operator\">&lt;</span><span class=\"token string\">'foo.bar.baz'</span><span class=\"token operator\">></span> <span class=\"token comment\">//=> ['foo', 'bar', 'baz']</span>\nToPath<span class=\"token operator\">&lt;</span><span class=\"token string\">'foo[0].bar.baz'</span><span class=\"token operator\">></span> <span class=\"token comment\">//=> ['foo', '0', 'bar', 'baz']</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第三十题\"><a href=\"#第三十题\" class=\"headerlink\" title=\"第三十题\"></a>第三十题</h3><p>完善 <code>Chainable</code> 类型的定义，使得 TS 能成功推断出 <code>result</code> 变量的类型。调用 <code>option</code> 方法之后会不断扩展当前对象的类型，使得调用 <code>get</code> 方法后能获取正确的类型。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">const</span> config<span class=\"token operator\">:</span> Chainable\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Chainable</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">option</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n  <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> config\n  <span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'lolo'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">'address'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> value<span class=\"token operator\">:</span> <span class=\"token string\">'XiaMen'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ResultType</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> result  \n<span class=\"token comment\">// 期望 ResultType 的类型是：</span>\n<span class=\"token comment\">// &#123;</span>\n<span class=\"token comment\">//   age: number</span>\n<span class=\"token comment\">//   name: string</span>\n<span class=\"token comment\">//   address: &#123;</span>\n<span class=\"token comment\">//     value: string</span>\n<span class=\"token comment\">//   &#125;</span>\n<span class=\"token comment\">// &#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h2 id=\"ts中的访问修饰符\"><a href=\"#ts中的访问修饰符\" class=\"headerlink\" title=\"ts中的访问修饰符\"></a>ts中的访问修饰符</h2><ul>\n<li>public，任何地方</li>\n<li>private，只能在类的内部访问</li>\n<li>protected，能在类的内部访问和子类中访问</li>\n<li>readonly，属性设置为只读</li>\n</ul>\n<h2 id=\"const和readonly的区别\"><a href=\"#const和readonly的区别\" class=\"headerlink\" title=\"const和readonly的区别\"></a>const和readonly的区别</h2><ol>\n<li>const用于变量，readonly用于属性</li>\n<li>const在运行时检查，readonly在编译时检查</li>\n<li>使用const变量保存的数组，可以使用push，pop等方法。但是如果使用<code>ReadonlyArray&lt;number&gt;</code>声明的数组不能使用push，pop等方法。</li>\n</ol>\n<h2 id=\"枚举和常量枚举（const枚举）的区别\"><a href=\"#枚举和常量枚举（const枚举）的区别\" class=\"headerlink\" title=\"枚举和常量枚举（const枚举）的区别\"></a>枚举和常量枚举（const枚举）的区别</h2><ol>\n<li>枚举会被编译时会编译成一个对象，可以被当作对象使用</li>\n<li>const枚举会在ts编译期间被删除，避免额外的性能开销</li>\n</ol>\n<pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token comment\">// 普通枚举</span>\n<span class=\"token keyword\">enum</span> Witcher <span class=\"token punctuation\">&#123;</span>\n  Ciri <span class=\"token operator\">=</span> <span class=\"token string\">'Queen'</span><span class=\"token punctuation\">,</span>\n  Geralt <span class=\"token operator\">=</span> <span class=\"token string\">'Geralt of Rivia'</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getGeraltMessage</span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">.</span>Geralt\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">getGeraltMessage</span><span class=\"token punctuation\">(</span>Witcher<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Geralt of Rivia</span>\n复制代码\n<span class=\"token comment\">// const枚举</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">enum</span> Witcher <span class=\"token punctuation\">&#123;</span>\n  Ciri <span class=\"token operator\">=</span> <span class=\"token string\">'Queen'</span><span class=\"token punctuation\">,</span>\n  Geralt <span class=\"token operator\">=</span> <span class=\"token string\">'Geralt of Rivia'</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">const</span> witchers<span class=\"token operator\">:</span> Witcher<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>Witcher<span class=\"token punctuation\">.</span>Ciri<span class=\"token punctuation\">,</span> Witcher<span class=\"token punctuation\">.</span>Geralt<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// 编译后</span>\n<span class=\"token comment\">// const witchers = ['Queen', 'Geralt of Rivia'</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"ts中interface可以给Function-Array-Class做声明吗？\"><a href=\"#ts中interface可以给Function-Array-Class做声明吗？\" class=\"headerlink\" title=\"ts中interface可以给Function/Array/Class做声明吗？\"></a>ts中interface可以给Function/Array/Class做声明吗？</h2><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token comment\">// 函数类型</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">SearchFunc</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> subString<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> mySearch<span class=\"token operator\">:</span> SearchFunc<span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">mySearch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> subString<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>subString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码\n<span class=\"token comment\">// Array</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">StringArray</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">[</span>index<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> myArray<span class=\"token operator\">:</span> StringArray<span class=\"token punctuation\">;</span>\nmyArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Fred\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n复制代码\n<span class=\"token comment\">// Class, constructor存在于类的静态部分，所以不会检查</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ClockInterface</span> <span class=\"token punctuation\">&#123;</span>\n    currentTime<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ClockInterface</span> <span class=\"token punctuation\">&#123;</span>\n    currentTime<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentTime <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>h<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> m<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"ts中的this和js中的this有什么差异？\"><a href=\"#ts中的this和js中的this有什么差异？\" class=\"headerlink\" title=\"ts中的this和js中的this有什么差异？\"></a>ts中的this和js中的this有什么差异？</h2><p>不了解</p>\n<h2 id=\"ts中如何枚举联合类型的key\"><a href=\"#ts中如何枚举联合类型的key\" class=\"headerlink\" title=\"ts中如何枚举联合类型的key?\"></a>ts中如何枚举联合类型的key?</h2><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Name</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Age</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Union</span> <span class=\"token operator\">=</span> Name <span class=\"token operator\">|</span> Age\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">UnionKey<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">P</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token keyword\">infer</span></span> <span class=\"token constant\">P</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">P</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span> <span class=\"token operator\">=</span> UnionKey<span class=\"token operator\">&lt;</span>Union<span class=\"token operator\">></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"ts中-、-、-、-、-等符号的含义？\"><a href=\"#ts中-、-、-、-、-等符号的含义？\" class=\"headerlink\" title=\"ts中 ?.、??、!.、_、** 等符号的含义？\"></a>ts中 ?.、??、!.、_、** 等符号的含义？</h2><ul>\n<li>?.  可选链</li>\n<li>??  ?? 类似与短路或，??避免了一些意外情况0，NaN以及””,false被视为false值。只有undefind,null被视为false值。</li>\n<li>!.  在变量名后添加!，可以断言排除undefined和null类型</li>\n<li>_ , 声明该函数将被传递一个参数，但您并不关心它</li>\n<li>** 求幂</li>\n<li>!:，待会分配这个变量，ts不要担心</li>\n</ul>\n<pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token comment\">// ??</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> foo <span class=\"token operator\">??</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等价于</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> foo <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> foo <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> foo <span class=\"token operator\">:</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// !.</span>\n<span class=\"token keyword\">let</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span>\na<span class=\"token punctuation\">.</span>length <span class=\"token comment\">// error</span>\na<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>length <span class=\"token comment\">// ok</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"什么是抗变、双变、协变和逆变？\"><a href=\"#什么是抗变、双变、协变和逆变？\" class=\"headerlink\" title=\"什么是抗变、双变、协变和逆变？\"></a>什么是抗变、双变、协变和逆变？</h2><ul>\n<li>Covariant 协变，TS对象兼容性是协变，父类 &lt;= 子类，是可以的。子类 &lt;= 父类，错误。</li>\n<li>Contravariant 逆变，禁用<code>strictFunctionTypes</code>编译，函数参数类型是逆变的，父类 &lt;= 子类，是错误。子类 &lt;= 父类，是可以的。</li>\n<li>Bivariant 双向协变，函数参数的类型默认是双向协变的。父类 &lt;= 子类，是可以的。子类 &lt;= 父类，是可以的。</li>\n</ul>\n<h2 id=\"ts中同名的interface或者同名的interface和class可以合并吗？\"><a href=\"#ts中同名的interface或者同名的interface和class可以合并吗？\" class=\"headerlink\" title=\"ts中同名的interface或者同名的interface和class可以合并吗？\"></a>ts中同名的interface或者同名的interface和class可以合并吗？</h2><ol>\n<li>interface会合并</li>\n<li>class不可以合并</li>\n</ol>\n<h2 id=\"如何使ts项目引入并识别编译为js的npm库包？\"><a href=\"#如何使ts项目引入并识别编译为js的npm库包？\" class=\"headerlink\" title=\"如何使ts项目引入并识别编译为js的npm库包？\"></a>如何使ts项目引入并识别编译为js的npm库包？</h2><ol>\n<li><code>npm install @types/xxxx</code></li>\n<li>自己添加描述文件</li>\n</ol>\n<h2 id=\"ts如何自动生成库包的声明文件？\"><a href=\"#ts如何自动生成库包的声明文件？\" class=\"headerlink\" title=\"ts如何自动生成库包的声明文件？\"></a>ts如何自动生成库包的声明文件？</h2><p>可以配置<code>tsconfig.json</code>文件中的<code>declaration</code>和<code>outDir</code></p>\n<ol>\n<li>declaration: true, 将会自动生成声明文件</li>\n<li>outDir: ‘’, 指定目录</li>\n</ol>\n<h2 id=\"什么是泛型\"><a href=\"#什么是泛型\" class=\"headerlink\" title=\"什么是泛型\"></a>什么是泛型</h2><p>泛型用来来创建可重用的组件，一个组件可以支持多种类型的数据。这样用户就可以以自己的数据类型来使用组件。<strong>简单的说，“泛型就是把类型当成参数”。</strong></p>\n<h2 id=\"，-readonly-是什么含义\"><a href=\"#，-readonly-是什么含义\" class=\"headerlink\" title=\"-?，-readonly 是什么含义\"></a>-?，-readonly 是什么含义</h2><p>用于删除修饰符</p>\n<pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">D</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">E</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">-</span><span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"TS是基于结构类型兼容\"><a href=\"#TS是基于结构类型兼容\" class=\"headerlink\" title=\"TS是基于结构类型兼容\"></a>TS是基于结构类型兼容</h2><p>typescript的类型兼容是基于结构的，不是基于名义的。下面的代码在ts中是完全可以的，但在java等基于名义的语言则会抛错。</p>\n<pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Named</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> p<span class=\"token operator\">:</span> Named\n<span class=\"token comment\">// ok</span>\np <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"const断言\"><a href=\"#const断言\" class=\"headerlink\" title=\"const断言\"></a>const断言</h2><p>const断言，typescript会为变量添加一个自身的字面量类型</p>\n<ol>\n<li>对象字面量的属性，获得readonly的属性，成为只读属性</li>\n<li>数组字面量成为readonly tuple只读元组</li>\n<li>字面量类型不能被扩展（比如从hello类型到string类型）</li>\n</ol>\n<pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token comment\">// type '\"hello\"'</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span>\n<span class=\"token comment\">// type 'readonly [10, 20]'</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span>\n<span class=\"token comment\">// type '&#123; readonly text: \"hello\" &#125;'</span>\n<span class=\"token keyword\">let</span> z <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> text<span class=\"token operator\">:</span> <span class=\"token string\">\"hello\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"type-和-interface-的区别\"><a href=\"#type-和-interface-的区别\" class=\"headerlink\" title=\"type 和 interface 的区别\"></a>type 和 interface 的区别</h2><ol>\n<li>类型别名可以为任何类型引入名称。例如基本类型，联合类型等</li>\n<li>类型别名不支持继承</li>\n<li>类型别名不会创建一个真正的名字</li>\n<li>类型别名无法被实现(implements)，而接口可以被派生类实现</li>\n<li>类型别名重名时编译器会抛出错误，接口重名时会产生合并</li>\n</ol>\n<h2 id=\"implements-与-extends-的区别\"><a href=\"#implements-与-extends-的区别\" class=\"headerlink\" title=\"implements 与 extends 的区别\"></a>implements 与 extends 的区别</h2><ul>\n<li>extends, 子类会继承父类的所有属性和方法。</li>\n<li>implements，使用implements关键字的类将需要实现需要实现的类的所有属性和方法。</li>\n</ul>\n<h2 id=\"枚举和-object-的区别\"><a href=\"#枚举和-object-的区别\" class=\"headerlink\" title=\"枚举和 object 的区别\"></a>枚举和 object 的区别</h2><ol>\n<li>枚举可以通过枚举的名称，获取枚举的值。也可以通过枚举的值获取枚举的名称。</li>\n<li>object只能通过key获取value</li>\n<li>数字枚举在不指定初始值的情况下，枚举值会从0开始递增。</li>\n<li>虽然在运行时，枚举是一个真实存在的对象。但是使用keyof时的行为却和普通对象不一致。必须使用keyof typeof才可以获取枚举所有属性名。</li>\n</ol>\n<h2 id=\"never-void-的区别\"><a href=\"#never-void-的区别\" class=\"headerlink\" title=\"never, void 的区别\"></a>never, void 的区别</h2><ul>\n<li>never，never表示永远不存在的类型。比如一个函数总是抛出错误，而没有返回值。或者一个函数内部有死循环，永远不会有返回值。函数的返回值就是never类型。</li>\n<li>void, 没有显示的返回值的函数返回值为void类型。如果一个变量为void类型，只能赋予undefined或者null。</li>\n</ul>\n<h2 id=\"unknown-any的区别\"><a href=\"#unknown-any的区别\" class=\"headerlink\" title=\"unknown, any的区别\"></a>unknown, any的区别</h2><p>unknown类型和any类型类似。与any类型不同的是。unknown类型可以接受任意类型赋值，但是unknown类型赋值给其他类型前，必须被断言</p>\n<h2 id=\"如何在-window-扩展类型\"><a href=\"#如何在-window-扩展类型\" class=\"headerlink\" title=\"如何在 window 扩展类型\"></a>如何在 window 扩展类型</h2><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> global <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Window</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">myCustomFn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"复杂的类型推导题目\"><a href=\"#复杂的类型推导题目\" class=\"headerlink\" title=\"复杂的类型推导题目\"></a>复杂的类型推导题目</h2><h3 id=\"implement-UnionToIntersection\"><a href=\"#implement-UnionToIntersection\" class=\"headerlink\" title=\"implement UnionToIntersection\"></a>implement UnionToIntersection</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> UnionToIntersection<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">&#123;</span>b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">&#123;</span>c<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span> \n<span class=\"token comment\">// &#123;a: string&#125; &amp; &#123;b: string&#125; &amp; &#123;c: string&#125;</span>\n\n<span class=\"token comment\">// 实现UnionToIntersection&lt;T></span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">UnionToIntersection<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> \n  <span class=\"token punctuation\">(</span><span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">any</span></span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>k<span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">:</span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">I</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token constant\">I</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n<span class=\"token comment\">// https://stackoverflow.com/questions/50374908/transform-union-type-to-intersection-type</span>\n<span class=\"token comment\">// https://jkchao.github.io/typescript-book-chinese/tips/infer.html#%E4%B8%80%E4%BA%9B%E7%94%A8%E4%BE%8B</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-ToNumber\"><a href=\"#implement-ToNumber\" class=\"headerlink\" title=\"implement ToNumber\"></a>implement ToNumber</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> ToNumber<span class=\"token operator\">&lt;</span><span class=\"token string\">'1'</span><span class=\"token operator\">></span> <span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> ToNumber<span class=\"token operator\">&lt;</span><span class=\"token string\">'40'</span><span class=\"token operator\">></span> <span class=\"token comment\">// 40</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> ToNumber<span class=\"token operator\">&lt;</span><span class=\"token string\">'0'</span><span class=\"token operator\">></span> <span class=\"token comment\">// 0</span>\n\n<span class=\"token comment\">// 实现ToNumber</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ToNumber<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>\n    <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token constant\">R</span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> ToNumber<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token constant\">R</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-Add-lt-A-B-gt\"><a href=\"#implement-Add-lt-A-B-gt\" class=\"headerlink\" title=\"implement Add&lt;A, B&gt;\"></a>implement Add&lt;A, B&gt;</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> Add<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">></span> <span class=\"token comment\">// 3</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> Add<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token operator\">></span> <span class=\"token comment\">// 0</span>\n\n<span class=\"token comment\">// 实现ADD</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NumberToArray<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">R</span></span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token operator\">:</span> NumberToArray<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token constant\">R</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Add<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>NumberToArray<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>NumberToArray<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-SmallerThan-lt-A-B-gt\"><a href=\"#implement-SmallerThan-lt-A-B-gt\" class=\"headerlink\" title=\"implement SmallerThan&lt;A, B&gt;\"></a>implement SmallerThan&lt;A, B&gt;</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> SmallerThan<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">></span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> SmallerThan<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token operator\">></span> <span class=\"token comment\">// false</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> SmallerThan<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token operator\">></span> <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// 实现SmallerThan</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">SmallerThan<span class=\"token operator\">&lt;</span><span class=\"token constant\">N</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">M</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">L</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> \n    <span class=\"token constant\">N</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">L</span></span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> \n        <span class=\"token constant\">M</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">R</span></span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token operator\">:</span>\n        <span class=\"token constant\">M</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">R</span></span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> SmallerThan<span class=\"token operator\">&lt;</span><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token constant\">L</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token constant\">R</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-LargerThan-lt-A-B-gt\"><a href=\"#implement-LargerThan-lt-A-B-gt\" class=\"headerlink\" title=\"implement LargerThan&lt;A, B&gt;\"></a>implement LargerThan&lt;A, B&gt;</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> LargerThan<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">></span> <span class=\"token comment\">// false</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> LargerThan<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token operator\">></span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> LargerThan<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token operator\">></span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// 实现LargerThan</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">LargerThan<span class=\"token operator\">&lt;</span><span class=\"token constant\">N</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">M</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">L</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>\n    <span class=\"token constant\">N</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">L</span></span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span>\n        <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> <span class=\"token constant\">M</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">R</span></span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span>\n            <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> LargerThan<span class=\"token operator\">&lt;</span><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token constant\">L</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token constant\">R</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-IsAny\"><a href=\"#implement-IsAny\" class=\"headerlink\" title=\"implement IsAny\"></a>implement IsAny</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> IsAny<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token comment\">// false</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> IsAny<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> IsAny<span class=\"token operator\">&lt;</span><span class=\"token builtin\">unknown</span><span class=\"token operator\">></span> <span class=\"token comment\">// false</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">D</span></span> <span class=\"token operator\">=</span> IsAny<span class=\"token operator\">&lt;</span><span class=\"token builtin\">never</span><span class=\"token operator\">></span> <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// 实现IsAny</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">IsAny<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">never</span></span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span>\n                  <span class=\"token boolean\">false</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">never</span></span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span>\n                    <span class=\"token boolean\">true</span>\n                    <span class=\"token operator\">:</span>\n                    <span class=\"token boolean\">false</span>\n                  <span class=\"token operator\">:</span>\n                  <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 更简单的实现</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">IsAny<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">T</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-Filter-lt-T-A-gt\"><a href=\"#implement-Filter-lt-T-A-gt\" class=\"headerlink\" title=\"implement Filter&lt;T, A&gt;\"></a>implement Filter&lt;T, A&gt;</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> Filter<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'BFE'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dev'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token comment\">// [1, 2]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> Filter<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'BFE'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dev'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token comment\">// ['BFE', 'dev']</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> Filter<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'BFE'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dev'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token comment\">// ['BFE', any, 'dev']</span>\n\n<span class=\"token comment\">// 实现Filter</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Filter<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">N</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>\n    <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">Q</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span>\n        <span class=\"token number\">0</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">P</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> Filter<span class=\"token operator\">&lt;</span><span class=\"token constant\">Q</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> \n        <span class=\"token constant\">P</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">?</span> Filter<span class=\"token operator\">&lt;</span><span class=\"token constant\">Q</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> Filter<span class=\"token operator\">&lt;</span><span class=\"token constant\">Q</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">N</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">:</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-TupleToString\"><a href=\"#implement-TupleToString\" class=\"headerlink\" title=\"implement TupleToString\"></a>implement TupleToString</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> TupleToString<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// 'a'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> TupleToString<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// 'BFE'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> TupleToString<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// ''</span>\n\n<span class=\"token comment\">// 实现TupleToString</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TupleToString<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>\n    <span class=\"token constant\">A</span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">S</span> <span class=\"token operator\">:</span> TupleToString<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token constant\">S</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token constant\">A</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-RepeatString-lt-T-C-gt\"><a href=\"#implement-RepeatString-lt-T-C-gt\" class=\"headerlink\" title=\"implement RepeatString&lt;T, C&gt;\"></a>implement RepeatString&lt;T, C&gt;</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> RepeatString<span class=\"token operator\">&lt;</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token operator\">></span> <span class=\"token comment\">// 'aaa'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> RepeatString<span class=\"token operator\">&lt;</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token operator\">></span> <span class=\"token comment\">// ''</span>\n\n<span class=\"token comment\">// 实现RepeatString</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">RepeatString<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>\n    <span class=\"token constant\">A</span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">S</span> <span class=\"token operator\">:</span> RepeatString<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token constant\">T</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token constant\">S</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token constant\">A</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-Push-lt-T-I-gt\"><a href=\"#implement-Push-lt-T-I-gt\" class=\"headerlink\" title=\"implement Push&lt;T, I&gt;\"></a>implement Push&lt;T, I&gt;</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> Push<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">></span> <span class=\"token comment\">// [1,2,3,4]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> Push<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">></span> <span class=\"token comment\">// [1, 2]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> Push<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token comment\">// [string]</span>\n\n<span class=\"token comment\">// 实现Push</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Push<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">I</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">I</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">I</span><span class=\"token punctuation\">]</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-Flat\"><a href=\"#implement-Flat\" class=\"headerlink\" title=\"implement Flat\"></a>implement Flat</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> Flat<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// [1,2,3]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> Flat<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// [1,2,3,4,5,6]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> Flat<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// []</span>\n\n<span class=\"token comment\">// 实现Flat</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Flat<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>\n    <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">Q</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span>\n        <span class=\"token constant\">P</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">any</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>Flat<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>Flat<span class=\"token operator\">&lt;</span><span class=\"token constant\">Q</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>Flat<span class=\"token operator\">&lt;</span><span class=\"token constant\">Q</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span>\n        <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-Shift\"><a href=\"#implement-Shift\" class=\"headerlink\" title=\"implement Shift\"></a>implement Shift</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> Shift<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// [2,3]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> Shift<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// []</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> Shift<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// []</span>\n\n<span class=\"token comment\">// 实现Shift</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Shift<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">Q</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">Q</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-Repeat-lt-T-C-gt\"><a href=\"#implement-Repeat-lt-T-C-gt\" class=\"headerlink\" title=\"implement Repeat&lt;T, C&gt;\"></a>implement Repeat&lt;T, C&gt;</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> Repeat<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token operator\">></span> <span class=\"token comment\">// [number, number, number]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> Repeat<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">></span> <span class=\"token comment\">// [string, string]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> Repeat<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">></span> <span class=\"token comment\">// [1, 1]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">D</span></span> <span class=\"token operator\">=</span> Repeat<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token operator\">></span> <span class=\"token comment\">// []</span>\n\n<span class=\"token comment\">// 实现Repeat</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Repeat<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> \n    <span class=\"token constant\">R</span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token operator\">:</span> Repeat<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">R</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-ReverseTuple\"><a href=\"#implement-ReverseTuple\" class=\"headerlink\" title=\"implement ReverseTuple\"></a>implement ReverseTuple</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> ReverseTuple<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// [boolean, number, string]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> ReverseTuple<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// [3,2,1]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> ReverseTuple<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// []</span>\n\n<span class=\"token comment\">// 实现ReverseTuple</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ReverseTuple<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>\n    <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">Q</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> \n        <span class=\"token constant\">A</span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">A</span> <span class=\"token operator\">:</span> ReverseTuple<span class=\"token operator\">&lt;</span><span class=\"token constant\">Q</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-UnwrapPromise\"><a href=\"#implement-UnwrapPromise\" class=\"headerlink\" title=\"implement UnwrapPromise\"></a>implement UnwrapPromise</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> UnwrapPromise<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">>></span> <span class=\"token comment\">// string</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> UnwrapPromise<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">null</span><span class=\"token operator\">>></span> <span class=\"token comment\">// null</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> UnwrapPromise<span class=\"token operator\">&lt;</span><span class=\"token keyword\">null</span><span class=\"token operator\">></span> <span class=\"token comment\">// Error</span>\n\n<span class=\"token comment\">// 实现UnwrapPromise</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">UnwrapPromise<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token operator\">></span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">P</span> <span class=\"token operator\">:</span> Error<span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-LengthOfString\"><a href=\"#implement-LengthOfString\" class=\"headerlink\" title=\"implement LengthOfString\"></a>implement LengthOfString</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> LengthOfString<span class=\"token operator\">&lt;</span><span class=\"token string\">'BFE.dev'</span><span class=\"token operator\">></span> <span class=\"token comment\">// 7</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> LengthOfString<span class=\"token operator\">&lt;</span><span class=\"token string\">''</span><span class=\"token operator\">></span> <span class=\"token comment\">// 0</span>\n\n<span class=\"token comment\">// 实现LengthOfString</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">LengthOfString<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>\n    <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">Q</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">?</span> LengthOfString<span class=\"token operator\">&lt;</span><span class=\"token constant\">Q</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token constant\">A</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-StringToTuple\"><a href=\"#implement-StringToTuple\" class=\"headerlink\" title=\"implement StringToTuple\"></a>implement StringToTuple</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> StringToTuple<span class=\"token operator\">&lt;</span><span class=\"token string\">'BFE.dev'</span><span class=\"token operator\">></span> <span class=\"token comment\">// ['B', 'F', 'E', '.', 'd', 'e','v']</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> StringToTuple<span class=\"token operator\">&lt;</span><span class=\"token string\">''</span><span class=\"token operator\">></span> <span class=\"token comment\">// []</span>\n\n<span class=\"token comment\">// 实现</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">StringToTuple<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>\n    <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">K</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">?</span> StringToTuple<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-LengthOfTuple\"><a href=\"#implement-LengthOfTuple\" class=\"headerlink\" title=\"implement LengthOfTuple\"></a>implement LengthOfTuple</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> LengthOfTuple<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// 3</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> LengthOfTuple<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// 0</span>\n\n<span class=\"token comment\">// 实现</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">LengthOfTuple<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>\n    <span class=\"token constant\">R</span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> LengthOfTuple<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">R</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-LastItem\"><a href=\"#implement-LastItem\" class=\"headerlink\" title=\"implement LastItem\"></a>implement LastItem</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> LastItem<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// boolean</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> LastItem<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// 'E'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> LastItem<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// never</span>\n\n<span class=\"token comment\">// 实现LastItem</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">LastItem<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">Q</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">Q</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-FirstItem\"><a href=\"#implement-FirstItem\" class=\"headerlink\" title=\"implement FirstItem\"></a>implement FirstItem</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> FirstItem<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// string</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> FirstItem<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// 'B'</span>\n\n<span class=\"token comment\">// 实现FirstItem</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">FirstItem<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">Q</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">P</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-FirstChar\"><a href=\"#implement-FirstChar\" class=\"headerlink\" title=\"implement FirstChar\"></a>implement FirstChar</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> FirstChar<span class=\"token operator\">&lt;</span><span class=\"token string\">'BFE'</span><span class=\"token operator\">></span> <span class=\"token comment\">// 'B'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> FirstChar<span class=\"token operator\">&lt;</span><span class=\"token string\">'dev'</span><span class=\"token operator\">></span> <span class=\"token comment\">// 'd'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> FirstChar<span class=\"token operator\">&lt;</span><span class=\"token string\">''</span><span class=\"token operator\">></span> <span class=\"token comment\">// never</span>\n\n<span class=\"token comment\">// 实现FirstChar</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">FirstChar<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">Q</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">P</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-Pick-lt-T-K-gt\"><a href=\"#implement-Pick-lt-T-K-gt\" class=\"headerlink\" title=\"implement Pick&lt;T, K&gt;\"></a>implement Pick&lt;T, K&gt;</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  c<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> MyPick<span class=\"token operator\">&lt;</span>Foo<span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span><span class=\"token operator\">></span> <span class=\"token comment\">// &#123;a: string, b: number&#125;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> MyPick<span class=\"token operator\">&lt;</span>Foo<span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token operator\">></span> <span class=\"token comment\">// &#123;c: boolean&#125;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> MyPick<span class=\"token operator\">&lt;</span>Foo<span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token operator\">></span> <span class=\"token comment\">// Error</span>\n\n<span class=\"token comment\">// 实现MyPick&lt;T, K></span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyPick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span>Key <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-Readonly\"><a href=\"#implement-Readonly\" class=\"headerlink\" title=\"implement Readonly\"></a>implement Readonly</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> a<span class=\"token operator\">:</span>Foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  a<span class=\"token operator\">:</span> <span class=\"token string\">'BFE.dev'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\na<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token string\">'bigfrontend.dev'</span>\n<span class=\"token comment\">// OK</span>\n\n<span class=\"token keyword\">const</span> b<span class=\"token operator\">:</span>MyReadonly<span class=\"token operator\">&lt;</span>Foo<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  a<span class=\"token operator\">:</span> <span class=\"token string\">'BFE.dev'</span>\n<span class=\"token punctuation\">&#125;</span>\nb<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token string\">'bigfrontend.dev'</span>\n<span class=\"token comment\">// Error</span>\n\n<span class=\"token comment\">// 实现MyReadonly</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyReadonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-Record-lt-K-V-gt\"><a href=\"#implement-Record-lt-K-V-gt\" class=\"headerlink\" title=\"implement Record&lt;K, V&gt;\"></a>implement Record&lt;K, V&gt;</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Key</span> <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'c'</span>\n\n<span class=\"token keyword\">const</span> a<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span>Key<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  a<span class=\"token operator\">:</span> <span class=\"token string\">'BFE.dev'</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> <span class=\"token string\">'BFE.dev'</span><span class=\"token punctuation\">,</span>\n  c<span class=\"token operator\">:</span> <span class=\"token string\">'BFE.dev'</span>\n<span class=\"token punctuation\">&#125;</span>\na<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token string\">'bigfrontend.dev'</span> <span class=\"token comment\">// OK</span>\na<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">123</span> <span class=\"token comment\">// Error</span>\na<span class=\"token punctuation\">.</span>d <span class=\"token operator\">=</span> <span class=\"token string\">'BFE.dev'</span> <span class=\"token comment\">// Error</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Foo</span> <span class=\"token operator\">=</span> MyRecord<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token comment\">// Error</span>\n\n<span class=\"token comment\">// 实现MyRecord</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyRecord<span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">symbol</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span>Key <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">V</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-Exclude\"><a href=\"#implement-Exclude\" class=\"headerlink\" title=\"implement Exclude\"></a>implement Exclude</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'c'</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> MyExclude<span class=\"token operator\">&lt;</span>Foo<span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">></span> <span class=\"token comment\">// 'b' | 'c'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> MyExclude<span class=\"token operator\">&lt;</span>Foo<span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token operator\">></span> <span class=\"token comment\">// 'a' | 'b</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> MyExclude<span class=\"token operator\">&lt;</span>Foo<span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'d'</span><span class=\"token operator\">></span>  <span class=\"token comment\">// 'a' | 'b'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">D</span></span> <span class=\"token operator\">=</span> MyExclude<span class=\"token operator\">&lt;</span>Foo<span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'c'</span><span class=\"token operator\">></span>  <span class=\"token comment\">// never</span>\n\n<span class=\"token comment\">// 实现 MyExclude&lt;T, K></span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyExclude<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">K</span></span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-Extract-lt-T-U-gt\"><a href=\"#implement-Extract-lt-T-U-gt\" class=\"headerlink\" title=\"implement Extract&lt;T, U&gt;\"></a>implement Extract&lt;T, U&gt;</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'c'</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> MyExtract<span class=\"token operator\">&lt;</span>Foo<span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">></span> <span class=\"token comment\">// 'a'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> MyExtract<span class=\"token operator\">&lt;</span>Foo<span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span><span class=\"token operator\">></span> <span class=\"token comment\">// 'a' | 'b'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> MyExtract<span class=\"token operator\">&lt;</span>Foo<span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'c'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'d'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'e'</span><span class=\"token operator\">></span>  <span class=\"token comment\">// 'b' | 'c'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">D</span></span> <span class=\"token operator\">=</span> MyExtract<span class=\"token operator\">&lt;</span>Foo<span class=\"token punctuation\">,</span> <span class=\"token builtin\">never</span><span class=\"token operator\">></span>  <span class=\"token comment\">// never</span>\n\n<span class=\"token comment\">// 实现MyExtract&lt;T, U></span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyExtract<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">U</span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-Omit-lt-T-K-gt\"><a href=\"#implement-Omit-lt-T-K-gt\" class=\"headerlink\" title=\"implement Omit&lt;T, K&gt;\"></a>implement Omit&lt;T, K&gt;</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  c<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> MyOmit<span class=\"token operator\">&lt;</span>Foo<span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span><span class=\"token operator\">></span> <span class=\"token comment\">// &#123;c: boolean&#125;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> MyOmit<span class=\"token operator\">&lt;</span>Foo<span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token operator\">></span> <span class=\"token comment\">// &#123;a: string, b: number&#125;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> MyOmit<span class=\"token operator\">&lt;</span>Foo<span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'d'</span><span class=\"token operator\">></span> <span class=\"token comment\">// &#123;a: string, b: number&#125;</span>\n\n<span class=\"token comment\">// 实现MyOmit</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyOmit<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">symbol</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span>Key <span class=\"token keyword\">in</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyOmit<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">symbol</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">>></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-NonNullable\"><a href=\"#implement-NonNullable\" class=\"headerlink\" title=\"implement NonNullable\"></a>implement NonNullable</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> MyNonNullable<span class=\"token operator\">&lt;</span>Foo<span class=\"token operator\">></span> <span class=\"token comment\">// 'a' | 'b'</span>\n\n<span class=\"token comment\">// 实现NonNullable</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyNonNullable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token keyword\">null</span></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-Parameters\"><a href=\"#implement-Parameters\" class=\"headerlink\" title=\"implement Parameters\"></a>implement Parameters</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> MyParameters<span class=\"token operator\">&lt;</span>Foo<span class=\"token operator\">></span> <span class=\"token comment\">// [a:string, b: number, c:boolean]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// string</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> MyParameters<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span> <span class=\"token comment\">// Error</span>\n\n<span class=\"token comment\">// 实现MyParameters&lt;T></span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyParameters<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>params<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span>\n    <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>params<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span> <span class=\"token operator\">?</span> <span class=\"token constant\">P</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-ConstructorParameters\"><a href=\"#implement-ConstructorParameters\" class=\"headerlink\" title=\"implement ConstructorParameters\"></a>implement ConstructorParameters</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> MyConstructorParameters<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Foo<span class=\"token operator\">></span> \n<span class=\"token comment\">// [a: string, b: number, c: boolean]</span>\n\n<span class=\"token comment\">// 实现MyConstructorParameters&lt;T></span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyConstructorParameters<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>params<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span>\n    <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token keyword\">new</span></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>params<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span> <span class=\"token operator\">?</span> <span class=\"token constant\">P</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-ReturnType\"><a href=\"#implement-ReturnType\" class=\"headerlink\" title=\"implement ReturnType\"></a>implement ReturnType</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> MyReturnType<span class=\"token operator\">&lt;</span>Foo<span class=\"token operator\">></span> <span class=\"token comment\">// &#123;a: string&#125;</span>\n\n<span class=\"token comment\">// 实现MyReturnType&lt;T></span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyReturnType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>params<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span>\n    <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>params<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span> <span class=\"token operator\">?</span> <span class=\"token constant\">P</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-InstanceType\"><a href=\"#implement-InstanceType\" class=\"headerlink\" title=\"implement InstanceType\"></a>implement InstanceType</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> MyInstanceType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Foo<span class=\"token operator\">></span> <span class=\"token comment\">// Foo</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> MyInstanceType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token comment\">// Error</span>\n\n<span class=\"token comment\">// 实现MyInstanceType&lt;T></span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyInstanceType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>params<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span>\n    <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token keyword\">new</span></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>params<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span> <span class=\"token operator\">?</span> <span class=\"token constant\">P</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-ThisParameterType\"><a href=\"#implement-ThisParameterType\" class=\"headerlink\" title=\"implement ThisParameterType\"></a>implement ThisParameterType</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> MyThisParameterType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Foo<span class=\"token operator\">></span> <span class=\"token comment\">// &#123;a: string&#125;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> MyThisParameterType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Bar<span class=\"token operator\">></span> <span class=\"token comment\">// unknown</span>\n\n<span class=\"token comment\">// 实现MyThisParameterType&lt;T></span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyThisParameterType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>params<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span>\n    <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">:</span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>params<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span> <span class=\"token operator\">?</span> <span class=\"token constant\">P</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-TupleToUnion\"><a href=\"#implement-TupleToUnion\" class=\"headerlink\" title=\"implement TupleToUnion\"></a>implement TupleToUnion</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Bar</span> <span class=\"token operator\">=</span> TupleToUnion<span class=\"token operator\">&lt;</span>Foo<span class=\"token operator\">></span> <span class=\"token comment\">// string | number | boolean</span>\n\n<span class=\"token comment\">// 实现TupleToUnion&lt;T></span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TupleToUnion<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>\n    <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">Q</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> TupleToUnion<span class=\"token operator\">&lt;</span><span class=\"token constant\">Q</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span> <span class=\"token operator\">|</span> <span class=\"token constant\">P</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 其他回答</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TupleToUnion<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-Partial\"><a href=\"#implement-Partial\" class=\"headerlink\" title=\"implement Partial\"></a>implement Partial</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  c<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// below are all valid</span>\n\n<span class=\"token keyword\">const</span> a<span class=\"token operator\">:</span> MyPartial<span class=\"token operator\">&lt;</span>Foo<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> b<span class=\"token operator\">:</span> MyPartial<span class=\"token operator\">&lt;</span>Foo<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  a<span class=\"token operator\">:</span> <span class=\"token string\">'BFE.dev'</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> c<span class=\"token operator\">:</span> MyPartial<span class=\"token operator\">&lt;</span>Foo<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  b<span class=\"token operator\">:</span> <span class=\"token number\">123</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> d<span class=\"token operator\">:</span> MyPartial<span class=\"token operator\">&lt;</span>Foo<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  b<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n  c<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> e<span class=\"token operator\">:</span> MyPartial<span class=\"token operator\">&lt;</span>Foo<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  a<span class=\"token operator\">:</span> <span class=\"token string\">'BFE.dev'</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n  c<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 实现MyPartial&lt;T></span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyPartial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Required\"><a href=\"#Required\" class=\"headerlink\" title=\"Required\"></a>Required</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token comment\">// all properties are optional</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  a<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  b<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  c<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">const</span> a<span class=\"token operator\">:</span> MyRequired<span class=\"token operator\">&lt;</span>Foo<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// Error</span>\n\n<span class=\"token keyword\">const</span> b<span class=\"token operator\">:</span> MyRequired<span class=\"token operator\">&lt;</span>Foo<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  a<span class=\"token operator\">:</span> <span class=\"token string\">'BFE.dev'</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// Error</span>\n\n<span class=\"token keyword\">const</span> c<span class=\"token operator\">:</span> MyRequired<span class=\"token operator\">&lt;</span>Foo<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  b<span class=\"token operator\">:</span> <span class=\"token number\">123</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// Error</span>\n\n<span class=\"token keyword\">const</span> d<span class=\"token operator\">:</span> MyRequired<span class=\"token operator\">&lt;</span>Foo<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  b<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n  c<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// Error</span>\n\n<span class=\"token keyword\">const</span> e<span class=\"token operator\">:</span> MyRequired<span class=\"token operator\">&lt;</span>Foo<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  a<span class=\"token operator\">:</span> <span class=\"token string\">'BFE.dev'</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n  c<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// valid</span>\n\n<span class=\"token comment\">// 实现MyRequired&lt;T></span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyRequired<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-LastChar\"><a href=\"#implement-LastChar\" class=\"headerlink\" title=\"implement LastChar\"></a>implement LastChar</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> LastChar<span class=\"token operator\">&lt;</span><span class=\"token string\">'BFE'</span><span class=\"token operator\">></span> <span class=\"token comment\">// 'E'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> LastChar<span class=\"token operator\">&lt;</span><span class=\"token string\">'dev'</span><span class=\"token operator\">></span> <span class=\"token comment\">// 'v'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> LastChar<span class=\"token operator\">&lt;</span><span class=\"token string\">''</span><span class=\"token operator\">></span> <span class=\"token comment\">// never</span>\n\n<span class=\"token comment\">// 实现FirstChar&lt;T></span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">LastChar<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>\n    <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">Q</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">?</span>  LastChar<span class=\"token operator\">&lt;</span><span class=\"token constant\">Q</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span>\n        <span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">L</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n<span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-IsNever\"><a href=\"#implement-IsNever\" class=\"headerlink\" title=\"implement IsNever\"></a>implement IsNever</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token comment\">// https://stackoverflow.com/questions/53984650/typescript-never-type-inconsistently-matched-in-conditional-type</span>\n<span class=\"token comment\">// https://www.typescriptlang.org/docs/handbook/advanced-types.html#v</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> IsNever<span class=\"token operator\">&lt;</span><span class=\"token builtin\">never</span><span class=\"token operator\">></span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> IsNever<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token comment\">// false</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> IsNever<span class=\"token operator\">&lt;</span><span class=\"token keyword\">undefined</span><span class=\"token operator\">></span> <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// 实现IsNever&lt;T></span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">IsNever<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">T</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">never</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-KeysToUnion\"><a href=\"#implement-KeysToUnion\" class=\"headerlink\" title=\"implement KeysToUnion\"></a>implement KeysToUnion</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> KeyToUnion<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">&#123;</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  c<span class=\"token operator\">:</span> <span class=\"token builtin\">symbol</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n<span class=\"token comment\">// 'a' | 'b' | 'c'</span>\n\n<span class=\"token comment\">// 实现KeyToUnion</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">KeyToUnion<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-ValuesToUnion\"><a href=\"#implement-ValuesToUnion\" class=\"headerlink\" title=\"implement ValuesToUnion\"></a>implement ValuesToUnion</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> ValuesToUnion<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">&#123;</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  c<span class=\"token operator\">:</span> <span class=\"token builtin\">symbol</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n<span class=\"token comment\">// string | number | symbol</span>\n\n<span class=\"token comment\">// ValuesToUnion</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ValuesToUnion<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"FindIndex-lt-T-E-gt\"><a href=\"#FindIndex-lt-T-E-gt\" class=\"headerlink\" title=\"FindIndex&lt;T, E&gt;\"></a>FindIndex&lt;T, E&gt;</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://link.juejin.cn/?target=https://bigfrontend.dev/zh/typescript/Search\">bigfrontend.dev/zh/typescri…</a></p></blockquote>\n<pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">IsAny<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">T</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">IsNever<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">T</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">never</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TwoAny<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> IsAny<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IsAny<span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token operator\">></span></span> <span class=\"token operator\">?</span> IsAny<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TwoNever<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> IsNever<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IsNever<span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token operator\">></span></span> <span class=\"token operator\">?</span> IsNever<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">SingleAny<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> IsAny<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token boolean\">true</span></span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> IsAny<span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">SingleNever<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> IsNever<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token boolean\">true</span></span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> IsNever<span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token operator\">></span>\n\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">FindIndex<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>\n    <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">Q</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span>\n        TwoAny<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E</span><span class=\"token operator\">></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token boolean\">true</span></span> <span class=\"token operator\">?</span> \n            <span class=\"token constant\">A</span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span>\n            <span class=\"token operator\">:</span>\n            TwoNever<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E</span><span class=\"token operator\">></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token boolean\">true</span></span> <span class=\"token operator\">?</span>\n                <span class=\"token constant\">A</span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span>\n                <span class=\"token operator\">:</span>\n                SingleAny<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E</span><span class=\"token operator\">></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token boolean\">true</span></span> <span class=\"token operator\">?</span>\n                    FindIndex<span class=\"token operator\">&lt;</span><span class=\"token constant\">Q</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token constant\">A</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n                    <span class=\"token operator\">:</span>\n                    SingleNever<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E</span><span class=\"token operator\">></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token boolean\">true</span></span> <span class=\"token operator\">?</span>\n                        FindIndex<span class=\"token operator\">&lt;</span><span class=\"token constant\">Q</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token constant\">A</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n                        <span class=\"token operator\">:</span>\n                        <span class=\"token constant\">P</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">E</span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> FindIndex<span class=\"token operator\">&lt;</span><span class=\"token constant\">Q</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token constant\">A</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">:</span> \n        <span class=\"token builtin\">never</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"implement-Trim\"><a href=\"#implement-Trim\" class=\"headerlink\" title=\"implement Trim\"></a>implement Trim</h3><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> Trim<span class=\"token operator\">&lt;</span><span class=\"token string\">'    BFE.dev'</span><span class=\"token operator\">></span> <span class=\"token comment\">// 'BFE'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> Trim<span class=\"token operator\">&lt;</span><span class=\"token string\">' BFE. dev  '</span><span class=\"token operator\">></span> <span class=\"token comment\">// 'BFE. dev'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> Trim<span class=\"token operator\">&lt;</span><span class=\"token string\">'  BFE .   dev  '</span><span class=\"token operator\">></span> <span class=\"token comment\">// 'BFE .   dev'</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">StringToTuple<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>\n    <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">K</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">?</span> StringToTuple<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TupleToString<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>\n    <span class=\"token constant\">A</span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">S</span> <span class=\"token operator\">:</span> TupleToString<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token constant\">S</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token constant\">A</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Trim<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> StringToTuple<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span></span> <span class=\"token operator\">=</span>\n    <span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">Q</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span>\n        <span class=\"token constant\">P</span> <span class=\"token keyword\">extends</span> <span class=\"token string\">' '</span> <span class=\"token operator\">?</span>\n            Trim<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Q</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">:</span>\n            <span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> \n                <span class=\"token constant\">N</span> <span class=\"token keyword\">extends</span> <span class=\"token string\">' '</span> <span class=\"token operator\">?</span>\n                    Trim<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">M</span><span class=\"token operator\">></span>\n                    <span class=\"token operator\">:</span>\n                    TupleToString<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">:</span>\n                <span class=\"token string-property property\">''</span>\n        <span class=\"token operator\">:</span>\n        <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"第一题type User = &#123; id: number; kind: string; &#125;; function makeCustomer&lt;T extends User>(u: T): T &#123; // Error（TS 编译器版本：v4.4.2） /...","link":"","photos":[],"count_time":{"symbolsCount":"31k","symbolsTime":"28 mins."},"categories":[{"name":"知识点","slug":"知识点","count":18,"path":"api/categories/知识点.json"}],"tags":[{"name":"面试","slug":"面试","count":13,"path":"api/tags/面试.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E9%A2%98\"><span class=\"toc-text\">第一题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E9%A2%98\"><span class=\"toc-text\">第二题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E9%A2%98\"><span class=\"toc-text\">第三题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%9B%9B%E9%A2%98\"><span class=\"toc-text\">第四题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%94%E9%A2%98\"><span class=\"toc-text\">第五题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%85%AD%E9%A2%98\"><span class=\"toc-text\">第六题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%83%E9%A2%98\"><span class=\"toc-text\">第七题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%85%AB%E9%A2%98\"><span class=\"toc-text\">第八题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B9%9D%E9%A2%98\"><span class=\"toc-text\">第九题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%8D%81%E9%A2%98\"><span class=\"toc-text\">第十题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%8D%81%E4%B8%80%E9%A2%98\"><span class=\"toc-text\">第十一题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%8D%81%E4%BA%8C%E9%A2%98\"><span class=\"toc-text\">第十二题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%8D%81%E4%B8%89%E9%A2%98\"><span class=\"toc-text\">第十三题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%8D%81%E5%9B%9B%E9%A2%98\"><span class=\"toc-text\">第十四题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%8D%81%E4%BA%94%E9%A2%98\"><span class=\"toc-text\">第十五题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%8D%81%E5%85%AD%E9%A2%98\"><span class=\"toc-text\">第十六题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%8D%81%E4%B8%83%E9%A2%98\"><span class=\"toc-text\">第十七题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%8D%81%E5%85%AB%E9%A2%98\"><span class=\"toc-text\">第十八题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%8D%81%E4%B9%9D%E9%A2%98\"><span class=\"toc-text\">第十九题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E5%8D%81%E9%A2%98\"><span class=\"toc-text\">第二十题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E9%A2%98\"><span class=\"toc-text\">第二十一题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%8C%E9%A2%98\"><span class=\"toc-text\">第二十二题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%89%E9%A2%98\"><span class=\"toc-text\">第二十三题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%9B%9B%E9%A2%98\"><span class=\"toc-text\">第二十四题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%94%E9%A2%98\"><span class=\"toc-text\">第二十五题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%85%AD%E9%A2%98\"><span class=\"toc-text\">第二十六题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%83%E9%A2%98\"><span class=\"toc-text\">第二十七题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%85%AB%E9%A2%98\"><span class=\"toc-text\">第二十八题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B9%9D%E9%A2%98\"><span class=\"toc-text\">第二十九题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E5%8D%81%E9%A2%98\"><span class=\"toc-text\">第三十题</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ts%E4%B8%AD%E7%9A%84%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">ts中的访问修饰符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#const%E5%92%8Creadonly%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">const和readonly的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%9A%E4%B8%BE%E5%92%8C%E5%B8%B8%E9%87%8F%E6%9E%9A%E4%B8%BE%EF%BC%88const%E6%9E%9A%E4%B8%BE%EF%BC%89%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">枚举和常量枚举（const枚举）的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ts%E4%B8%ADinterface%E5%8F%AF%E4%BB%A5%E7%BB%99Function-Array-Class%E5%81%9A%E5%A3%B0%E6%98%8E%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">ts中interface可以给Function&#x2F;Array&#x2F;Class做声明吗？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ts%E4%B8%AD%E7%9A%84this%E5%92%8Cjs%E4%B8%AD%E7%9A%84this%E6%9C%89%E4%BB%80%E4%B9%88%E5%B7%AE%E5%BC%82%EF%BC%9F\"><span class=\"toc-text\">ts中的this和js中的this有什么差异？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ts%E4%B8%AD%E5%A6%82%E4%BD%95%E6%9E%9A%E4%B8%BE%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B%E7%9A%84key\"><span class=\"toc-text\">ts中如何枚举联合类型的key?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ts%E4%B8%AD-%E3%80%81-%E3%80%81-%E3%80%81-%E3%80%81-%E7%AD%89%E7%AC%A6%E5%8F%B7%E7%9A%84%E5%90%AB%E4%B9%89%EF%BC%9F\"><span class=\"toc-text\">ts中 ?.、??、!.、_、** 等符号的含义？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%8A%97%E5%8F%98%E3%80%81%E5%8F%8C%E5%8F%98%E3%80%81%E5%8D%8F%E5%8F%98%E5%92%8C%E9%80%86%E5%8F%98%EF%BC%9F\"><span class=\"toc-text\">什么是抗变、双变、协变和逆变？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ts%E4%B8%AD%E5%90%8C%E5%90%8D%E7%9A%84interface%E6%88%96%E8%80%85%E5%90%8C%E5%90%8D%E7%9A%84interface%E5%92%8Cclass%E5%8F%AF%E4%BB%A5%E5%90%88%E5%B9%B6%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">ts中同名的interface或者同名的interface和class可以合并吗？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E4%BD%BFts%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5%E5%B9%B6%E8%AF%86%E5%88%AB%E7%BC%96%E8%AF%91%E4%B8%BAjs%E7%9A%84npm%E5%BA%93%E5%8C%85%EF%BC%9F\"><span class=\"toc-text\">如何使ts项目引入并识别编译为js的npm库包？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ts%E5%A6%82%E4%BD%95%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%BA%93%E5%8C%85%E7%9A%84%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6%EF%BC%9F\"><span class=\"toc-text\">ts如何自动生成库包的声明文件？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%B3%9B%E5%9E%8B\"><span class=\"toc-text\">什么是泛型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EF%BC%8C-readonly-%E6%98%AF%E4%BB%80%E4%B9%88%E5%90%AB%E4%B9%89\"><span class=\"toc-text\">-?，-readonly 是什么含义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#TS%E6%98%AF%E5%9F%BA%E4%BA%8E%E7%BB%93%E6%9E%84%E7%B1%BB%E5%9E%8B%E5%85%BC%E5%AE%B9\"><span class=\"toc-text\">TS是基于结构类型兼容</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#const%E6%96%AD%E8%A8%80\"><span class=\"toc-text\">const断言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#type-%E5%92%8C-interface-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">type 和 interface 的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#implements-%E4%B8%8E-extends-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">implements 与 extends 的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%9A%E4%B8%BE%E5%92%8C-object-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">枚举和 object 的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#never-void-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">never, void 的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#unknown-any%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">unknown, any的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%9C%A8-window-%E6%89%A9%E5%B1%95%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">如何在 window 扩展类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E6%9D%82%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC%E9%A2%98%E7%9B%AE\"><span class=\"toc-text\">复杂的类型推导题目</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-UnionToIntersection\"><span class=\"toc-text\">implement UnionToIntersection</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-ToNumber\"><span class=\"toc-text\">implement ToNumber</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-Add-lt-A-B-gt\"><span class=\"toc-text\">implement Add&lt;A, B&gt;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-SmallerThan-lt-A-B-gt\"><span class=\"toc-text\">implement SmallerThan&lt;A, B&gt;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-LargerThan-lt-A-B-gt\"><span class=\"toc-text\">implement LargerThan&lt;A, B&gt;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-IsAny\"><span class=\"toc-text\">implement IsAny</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-Filter-lt-T-A-gt\"><span class=\"toc-text\">implement Filter&lt;T, A&gt;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-TupleToString\"><span class=\"toc-text\">implement TupleToString</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-RepeatString-lt-T-C-gt\"><span class=\"toc-text\">implement RepeatString&lt;T, C&gt;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-Push-lt-T-I-gt\"><span class=\"toc-text\">implement Push&lt;T, I&gt;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-Flat\"><span class=\"toc-text\">implement Flat</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-Shift\"><span class=\"toc-text\">implement Shift</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-Repeat-lt-T-C-gt\"><span class=\"toc-text\">implement Repeat&lt;T, C&gt;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-ReverseTuple\"><span class=\"toc-text\">implement ReverseTuple</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-UnwrapPromise\"><span class=\"toc-text\">implement UnwrapPromise</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-LengthOfString\"><span class=\"toc-text\">implement LengthOfString</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-StringToTuple\"><span class=\"toc-text\">implement StringToTuple</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-LengthOfTuple\"><span class=\"toc-text\">implement LengthOfTuple</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-LastItem\"><span class=\"toc-text\">implement LastItem</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-FirstItem\"><span class=\"toc-text\">implement FirstItem</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-FirstChar\"><span class=\"toc-text\">implement FirstChar</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-Pick-lt-T-K-gt\"><span class=\"toc-text\">implement Pick&lt;T, K&gt;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-Readonly\"><span class=\"toc-text\">implement Readonly</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-Record-lt-K-V-gt\"><span class=\"toc-text\">implement Record&lt;K, V&gt;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-Exclude\"><span class=\"toc-text\">implement Exclude</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-Extract-lt-T-U-gt\"><span class=\"toc-text\">implement Extract&lt;T, U&gt;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-Omit-lt-T-K-gt\"><span class=\"toc-text\">implement Omit&lt;T, K&gt;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-NonNullable\"><span class=\"toc-text\">implement NonNullable</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-Parameters\"><span class=\"toc-text\">implement Parameters</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-ConstructorParameters\"><span class=\"toc-text\">implement ConstructorParameters</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-ReturnType\"><span class=\"toc-text\">implement ReturnType</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-InstanceType\"><span class=\"toc-text\">implement InstanceType</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-ThisParameterType\"><span class=\"toc-text\">implement ThisParameterType</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-TupleToUnion\"><span class=\"toc-text\">implement TupleToUnion</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-Partial\"><span class=\"toc-text\">implement Partial</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Required\"><span class=\"toc-text\">Required</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-LastChar\"><span class=\"toc-text\">implement LastChar</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-IsNever\"><span class=\"toc-text\">implement IsNever</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-KeysToUnion\"><span class=\"toc-text\">implement KeysToUnion</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-ValuesToUnion\"><span class=\"toc-text\">implement ValuesToUnion</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#FindIndex-lt-T-E-gt\"><span class=\"toc-text\">FindIndex&lt;T, E&gt;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#implement-Trim\"><span class=\"toc-text\">implement Trim</span></a></li></ol>","author":{"name":"LIYUNFU","slug":"blog-author","avatar":"https://p26-passport.byteacctimg.com/img/user-avatar/c52fbf24fbba8a052c8dd93e8b978eac~300x300.image","link":"/","description":"一个正在重塑知识的切图仔 <br /> @ <b>公众号:伯nulee</b>","socials":{"github":"https://gitee.com/LUNIONT","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/2277843824292183","customs":{}}},"mapped":true,"prev_post":{"title":"vue面试题","uid":"4107f22ea5c4f17ae1d9ef16d88c06b2","slug":"vue面试题","date":"2022-04-10T12:16:33.000Z","updated":"2022-04-10T12:17:55.841Z","comments":true,"path":"api/articles/vue面试题.json","keywords":null,"cover":[],"text":"一、Vue 基础1. Vue的基本原理当一个Vue实例创建时，Vue会遍历data中的属性，用 Object.defineProperty（vue3.0使用proxy ）将它们转为 getter/setter，并且在内部追踪相关依赖，在属性被访问和修改时通知变化。 每个组件实例都...","link":"","photos":[],"count_time":{"symbolsCount":"62k","symbolsTime":"56 mins."},"categories":[{"name":"知识点","slug":"知识点","count":18,"path":"api/categories/知识点.json"}],"tags":[{"name":"面试","slug":"面试","count":13,"path":"api/tags/面试.json"}],"author":{"name":"LIYUNFU","slug":"blog-author","avatar":"https://p26-passport.byteacctimg.com/img/user-avatar/c52fbf24fbba8a052c8dd93e8b978eac~300x300.image","link":"/","description":"一个正在重塑知识的切图仔 <br /> @ <b>公众号:伯nulee</b>","socials":{"github":"https://gitee.com/LUNIONT","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/2277843824292183","customs":{}}}},"next_post":{"title":"常见面试题","uid":"6b84c0d3e410fe11d0fe91aaed5aa6b2","slug":"常见面试题","date":"2022-04-10T12:13:17.000Z","updated":"2022-04-10T12:14:09.277Z","comments":true,"path":"api/articles/常见面试题.json","keywords":null,"cover":[],"text":"1. 为什么 0.1+0.2!==0.3计算机使用二进制存储数据 整数转换二进制没有误差，如 9 转换为二进制是 1001 而小数可能无法用二进制准确表达，如 0.2 转换为 0.20000001 可以用math.js 库解决 2. Ajax-Fetch-Axios 三者有什么区...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"知识点","slug":"知识点","count":18,"path":"api/categories/知识点.json"}],"tags":[{"name":"面试","slug":"面试","count":13,"path":"api/tags/面试.json"}],"author":{"name":"LIYUNFU","slug":"blog-author","avatar":"https://p26-passport.byteacctimg.com/img/user-avatar/c52fbf24fbba8a052c8dd93e8b978eac~300x300.image","link":"/","description":"一个正在重塑知识的切图仔 <br /> @ <b>公众号:伯nulee</b>","socials":{"github":"https://gitee.com/LUNIONT","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/2277843824292183","customs":{}}}}}