{"title":"nestjs全解[windows版]","uid":"4edaeadfac9de456799e43869dc8071d","slug":"nestjs全解","date":"2022-04-23T01:38:46.000Z","updated":"2022-05-28T11:06:46.466Z","comments":true,"path":"api/articles/nestjs全解.json","keywords":null,"cover":[],"content":"<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><h3 id=\"基于docker配置数据库环境\"><a href=\"#基于docker配置数据库环境\" class=\"headerlink\" title=\"基于docker配置数据库环境\"></a>基于docker配置数据库环境</h3><ol>\n<li><p>进入docker官网下载docker desktop</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token literal-property property\">https</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>www<span class=\"token punctuation\">.</span>docker<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>get<span class=\"token operator\">-</span>started<span class=\"token operator\">/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>使用docker-compose简化运行方式</p>\n<p>由于docker desktop安装时已经自带docker-compose，我们只需要在<code>C:\\Users\\[yourname]\\.docker</code>  C盘你的用户目录下的<code>.docker</code> 文件夹下添加<code>docker-compose.yml</code> 即可</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3.8\"</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">mysql</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span>8.0.23\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>default<span class=\"token punctuation\">-</span>authentication<span class=\"token punctuation\">-</span>plugin=mysql_native_password\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">MYSQL_ROOT_PASSWORD</span><span class=\"token punctuation\">:</span> example\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 3306<span class=\"token punctuation\">:</span><span class=\"token number\">3306</span>\n\n  <span class=\"token key atrule\">postgres</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> postgres<span class=\"token punctuation\">:</span><span class=\"token number\">13.1</span>\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">POSTGRES_PASSWORD</span><span class=\"token punctuation\">:</span> example\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 5432<span class=\"token punctuation\">:</span><span class=\"token number\">5432</span>\n\n  <span class=\"token key atrule\">adminer</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> adminer\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 8080<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中<code>adminer</code> 为可视化数据库管理系统，当启动images时，可以在<code>localhost:8080</code> 访问页面，另外两个为数据库</p>\n</li>\n<li><p>在<code>C:\\Users\\[yourname]\\.docker</code> 当前目录下，执行<code>docker-compose up</code> 会自动拉取并执行images</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">docker<span class=\"token operator\">-</span>compose up<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"Nest-js\"><a href=\"#Nest-js\" class=\"headerlink\" title=\"Nest.js\"></a>Nest.js</h2><h3 id=\"认识Nest-js\"><a href=\"#认识Nest-js\" class=\"headerlink\" title=\"认识Nest.js\"></a>认识Nest.js</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><ol>\n<li><p>全局安装<code>@nestjs/cli</code> 工具，并新建项目<code>learn_nest</code> </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">npm i -g @nestjs&#x2F;cli<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">nest new learn_nest<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>安装好之后的<code>src</code> 核心文件</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">src\n<span class=\"token operator\">|</span><span class=\"token operator\">--</span> app<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span>spec<span class=\"token punctuation\">.</span>ts\n<span class=\"token operator\">|</span><span class=\"token operator\">--</span> app<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span>ts\n<span class=\"token operator\">|</span><span class=\"token operator\">--</span> app<span class=\"token punctuation\">.</span>module<span class=\"token punctuation\">.</span>ts\n<span class=\"token operator\">|</span><span class=\"token operator\">--</span> app<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>ts\n<span class=\"token operator\">|</span><span class=\"token operator\">--</span> main<span class=\"token punctuation\">.</span>ts<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>核心文件概述</p>\n<table>\n<thead>\n<tr>\n<th>核心文件</th>\n<th>概述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>app.controller.ts</code></td>\n<td>带有单个路由的基本控制器示例</td>\n</tr>\n<tr>\n<td><code>app.controller.spec.ts</code></td>\n<td>对于基本控制器的单元测试样例</td>\n</tr>\n<tr>\n<td><code>app.module.ts</code></td>\n<td>应用程序的跟模块</td>\n</tr>\n<tr>\n<td><code>app.service.ts</code></td>\n<td>带有单个方法的基本服务</td>\n</tr>\n<tr>\n<td><code>main.ts</code></td>\n<td>应用程序入口文件</td>\n</tr>\n</tbody></table>\n</li>\n<li><p><code>main.ts</code> 认识</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> NestFactory <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> AppModule <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.module'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> NestFactory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>AppModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 使用NestFactory来创建Nest应用实例，并监听3000端口</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h4 id=\"控制器controller\"><a href=\"#控制器controller\" class=\"headerlink\" title=\"控制器controller\"></a>控制器<code>controller</code></h4><p><img src=\"https://raw.githubusercontent.com/liyunfuyyyy/img-url/master/202204231011661.png\" alt=\"image-20220423101156577\"></p>\n<p>控制器负责处理传入的<code>请求</code> 和向客户端返回<code>响应</code> </p>\n<p>控制器的目的是接收应用的特定请求。<code>路由</code>机制控制哪个控制器接收哪些请求，通常，每个控制器有多个路由，不同的路由可以执行不同的操作。</p>\n<p>为了创建一个基本的控制器，我们使用类和<code>装饰器</code> 。装饰器将类与所需的元数据相关联，并使Nest能够创建路由映射(将请求绑定到相应的控制器)</p>\n<ol>\n<li><p>路由示例</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/* event.controller.ts */</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>Controller<span class=\"token punctuation\">,</span>Get<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/nestjs/common'</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Controller</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'event'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EventController</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'/list'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'this is event all'</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例就可以在postman中请求url<code>localhost:3000/event/list</code> 即可得到返回结果</p>\n</li>\n<li><p>Request示例</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/* event.controller.ts */</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>Controller<span class=\"token punctuation\">,</span>Get<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/nestjs/common'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>Request<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Controller</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'event'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EventController</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'/list'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Req</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> request<span class=\"token operator\">:</span>Request<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'this is event all'</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>常见底层装饰器对照表</strong></p>\n<table>\n<thead>\n<tr>\n<th>装饰器</th>\n<th>对象</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>@Request() , @Req()</code></td>\n<td>req</td>\n</tr>\n<tr>\n<td><code>@Response() , @Res()</code></td>\n<td>res</td>\n</tr>\n<tr>\n<td><code>@Next()</code></td>\n<td>next</td>\n</tr>\n<tr>\n<td><code>@Session()</code></td>\n<td><code>req.session</code></td>\n</tr>\n<tr>\n<td><code>@Param(key?:string)</code></td>\n<td><code>req.params/req.params[key]</code></td>\n</tr>\n<tr>\n<td><code>@Body(key?:string)</code></td>\n<td><code>req.body / req.body[key]</code></td>\n</tr>\n<tr>\n<td><code>@Query(key?:string)</code></td>\n<td><code>req.query / req.query[key]</code></td>\n</tr>\n<tr>\n<td><code>@Header(name?:string)</code></td>\n<td><code>req.headers / req.headers[key]</code></td>\n</tr>\n<tr>\n<td><code>@Ip()</code></td>\n<td><code>req.ip</code></td>\n</tr>\n<tr>\n<td><code>@HostParam()</code></td>\n<td><code>req.hosts</code></td>\n</tr>\n</tbody></table>\n</li>\n<li><p>资源路由<code>@Put()  @Delete() @Patch()  @Get()  @Post @All()</code></p>\n</li>\n<li><p> 路由通配符 (路由同样支持模式匹配，例如星号被用作通配符)<img src=\"https://raw.githubusercontent.com/liyunfuyyyy/img-url/master/202204231105247.png\" alt=\"image-20220423110559162\" style=\"zoom:67%;\" /></p>\n</li>\n<li><p>状态码</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Post</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">HttpCode</span></span><span class=\"token punctuation\">(</span><span class=\"token number\">204</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'This action adds a new cat'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>返回状态码204</p>\n</li>\n<li><p>Headers</p>\n<p>可以指定返回头</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Post</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Header</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'Cache-Control'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'This action adds a new cat'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>重定向</p>\n<p><code>@Redirect()</code>装饰器有两个参数，<code>url</code> 和<code>statusCode</code> ，如果省略，则<code>statusCode</code> 默认为<code>302</code> </p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Redirect</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://nestjs.com'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">301</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>有时候想要动态指定重定向地址，可以返回一个标准的对象，重定向到v5版本</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'docs'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Redirect</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://docs.nestjs.com'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">302</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">getDocs</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Query</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'version'</span><span class=\"token punctuation\">)</span> version<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>version <span class=\"token operator\">&amp;&amp;</span> version <span class=\"token operator\">===</span> <span class=\"token string\">'5'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> url<span class=\"token operator\">:</span> <span class=\"token string\">'https://docs.nestjs.com/v5/'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>路由参数</p>\n<p>当你需要接收<code>动态数据</code> 作为请求的一部分时，如<code>GET /event/1</code> 来获取id为1的event</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">':id'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Param</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> params<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this is return </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>params<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>或</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">':id'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Param</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>id<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this is return </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>id<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>子域路由</p>\n<p>即要求传入的<code>HTTP</code> 主机匹配某个特定的值才会响应</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Controller</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> host<span class=\"token operator\">:</span> <span class=\"token string\">':account.example.com'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountController</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">HostParam</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'account'</span><span class=\"token punctuation\">)</span> account<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> account<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>请求负载(规定接收的客户端参数)</p>\n<p>创建<code>create-event.dto.ts</code> </p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateEventDto</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  description<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  when<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  address<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在<code>event.controller.ts</code> 中使用</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Post</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Body</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> input<span class=\"token operator\">:</span> CreateEventDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">...</span>input<span class=\"token punctuation\">,</span>\n    when<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>when<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p>​    <strong>最后一步，需要在App.module.ts中添加自定义的controller</strong></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Module <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> CatsController <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./cats/cats.controller'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  controllers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>EventController<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"提供者Providers\"><a href=\"#提供者Providers\" class=\"headerlink\" title=\"提供者Providers\"></a>提供者Providers</h4><h4 id=\"模块Module\"><a href=\"#模块Module\" class=\"headerlink\" title=\"模块Module\"></a>模块Module</h4><h4 id=\"中间件-Middleware\"><a href=\"#中间件-Middleware\" class=\"headerlink\" title=\"中间件 Middleware\"></a>中间件 Middleware</h4><h4 id=\"异常过滤\"><a href=\"#异常过滤\" class=\"headerlink\" title=\"异常过滤\"></a>异常过滤</h4><h4 id=\"管道pipes\"><a href=\"#管道pipes\" class=\"headerlink\" title=\"管道pipes\"></a>管道pipes</h4><h4 id=\"守卫\"><a href=\"#守卫\" class=\"headerlink\" title=\"守卫\"></a>守卫</h4><h4 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h4><h4 id=\"自定义装饰器\"><a href=\"#自定义装饰器\" class=\"headerlink\" title=\"自定义装饰器\"></a>自定义装饰器</h4><h3 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h3><h3 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h3><h3 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h3>","text":"前期准备基于docker配置数据库环境 进入docker官网下载docker desktop https://www.docker.com/get-started/ 使用docker-compose简化运行方式 由于docker desktop安装时已经自带docker-comp...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"服务端","slug":"服务端","count":1,"path":"api/categories/服务端.json"}],"tags":[{"name":"数据库","slug":"数据库","count":3,"path":"api/tags/数据库.json"},{"name":"服务端","slug":"服务端","count":1,"path":"api/tags/服务端.json"},{"name":"nestjs","slug":"nestjs","count":1,"path":"api/tags/nestjs.json"},{"name":"node","slug":"node","count":1,"path":"api/tags/node.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87\"><span class=\"toc-text\">前期准备</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8Edocker%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">基于docker配置数据库环境</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Nest-js\"><span class=\"toc-text\">Nest.js</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A4%E8%AF%86Nest-js\"><span class=\"toc-text\">认识Nest.js</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">安装</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E5%99%A8controller\"><span class=\"toc-text\">控制器controller</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8F%90%E4%BE%9B%E8%80%85Providers\"><span class=\"toc-text\">提供者Providers</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97Module\"><span class=\"toc-text\">模块Module</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E9%97%B4%E4%BB%B6-Middleware\"><span class=\"toc-text\">中间件 Middleware</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8%E8%BF%87%E6%BB%A4\"><span class=\"toc-text\">异常过滤</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%A1%E9%81%93pipes\"><span class=\"toc-text\">管道pipes</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%88%E5%8D%AB\"><span class=\"toc-text\">守卫</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">拦截器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A3%85%E9%A5%B0%E5%99%A8\"><span class=\"toc-text\">自定义装饰器</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">基本原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">技术</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E5%85%A8\"><span class=\"toc-text\">安全</span></a></li></ol></li></ol>","author":{"name":"LIYUNFU","slug":"blog-author","avatar":"https://p26-passport.byteacctimg.com/img/user-avatar/c52fbf24fbba8a052c8dd93e8b978eac~300x300.image","link":"/","description":"一个正在重塑知识的切图仔 <br /> @ <b>公众号:伯nulee</b>","socials":{"github":"https://gitee.com/LUNIONT","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/2277843824292183","customs":{}}},"mapped":true,"prev_post":{"title":"标准化大厂编码规范解决方案","uid":"7bb7fcd214fc2de4ef1142bae196581d","slug":"标准化大厂编码规范解决方案","date":"2022-02-10T08:33:17.000Z","updated":"2022-05-28T11:06:46.470Z","comments":true,"path":"api/articles/标准化大厂编码规范解决方案.json","keywords":null,"cover":[],"text":"升级最新的vuenpm i vue@3.2.8 vue-router@4.0.11 vuex@4.0.2 ESLint规则// ESLint 配置文件遵循 commonJS 的导出规则，所导出的对象就是 ESLint 的配置对象 // 文档：https://eslint.boot...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"规范","slug":"规范","count":1,"path":"api/categories/规范.json"}],"tags":[{"name":"git","slug":"git","count":2,"path":"api/tags/git.json"},{"name":"规范","slug":"规范","count":1,"path":"api/tags/规范.json"}],"author":{"name":"LIYUNFU","slug":"blog-author","avatar":"https://p26-passport.byteacctimg.com/img/user-avatar/c52fbf24fbba8a052c8dd93e8b978eac~300x300.image","link":"/","description":"一个正在重塑知识的切图仔 <br /> @ <b>公众号:伯nulee</b>","socials":{"github":"https://gitee.com/LUNIONT","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/2277843824292183","customs":{}}},"feature":true},"next_post":{"title":"函数式编程范式","uid":"d7e719f5c11a6405545a398b1276387c","slug":"函数式编程范式","date":"2022-04-10T12:42:12.000Z","updated":"2022-05-28T11:06:46.467Z","comments":true,"path":"api/articles/函数式编程范式.json","keywords":null,"cover":null,"text":"函数式编程范式什么是函数式编程函数式编程就是利用纯函数实现细粒度的函数，通过函数组合组合成功能更强大的函数 函数式编程对运算过程进行抽象，面向对象编程对事物进行抽象 函数式编程中的函数指的不是程序中的函数，而是数学中的函数即映射关系 相同的输入始终要得到相同的输出 为什么要学习函...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"大前端","slug":"大前端","count":1,"path":"api/categories/大前端.json"}],"tags":[{"name":"大前端","slug":"大前端","count":1,"path":"api/tags/大前端.json"},{"name":"JavaScript","slug":"JavaScript","count":1,"path":"api/tags/JavaScript.json"}],"author":{"name":"LIYUNFU","slug":"blog-author","avatar":"https://p26-passport.byteacctimg.com/img/user-avatar/c52fbf24fbba8a052c8dd93e8b978eac~300x300.image","link":"/","description":"一个正在重塑知识的切图仔 <br /> @ <b>公众号:伯nulee</b>","socials":{"github":"https://gitee.com/LUNIONT","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/2277843824292183","customs":{}}}}}