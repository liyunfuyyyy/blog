{"title":"常用算法","uid":"50ba5796497ecb4fe11ec2fa6f32ff0a","slug":"常用算法","date":"2022-03-14T10:17:13.000Z","updated":"2022-03-16T03:56:04.199Z","comments":true,"path":"api/articles/常用算法.json","keywords":null,"cover":[],"content":"<h3 id=\"题目1-将一个数组旋转k步\"><a href=\"#题目1-将一个数组旋转k步\" class=\"headerlink\" title=\"题目1 - 将一个数组旋转k步\"></a>题目1 - 将一个数组旋转k步</h3><ul>\n<li><p>输入数组[1,2,3,4,5,6,7]</p>\n</li>\n<li><p>k=3,即旋转3步</p>\n</li>\n<li><p>输出[5,6,7,1,2,3,4]</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">rotate2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> k</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>k <span class=\"token operator\">||</span> length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> arr\n  <span class=\"token keyword\">const</span> step <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">%</span> length<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// abs 取绝对值</span>\n\n  <span class=\"token keyword\">const</span> part1 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>step<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> part2 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> length <span class=\"token operator\">-</span> step<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> part3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>part1<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>part2<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">return</span> part3\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token function\">rotate2</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"题目2-快速排序\"><a href=\"#题目2-快速排序\" class=\"headerlink\" title=\"题目2 - 快速排序\"></a>题目2 - 快速排序</h3><ul>\n<li><p>用JavaScipt 实现快速排序，并说明时间复杂度</p>\n</li>\n<li><p>找到中间位置midValue</p>\n</li>\n<li><p>遍历数组，小于midValue放在left，否则放在right</p>\n</li>\n<li><p>继续递归，最后concat拼接，返回</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> length<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>length<span class=\"token operator\">===</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> arr\n  \n  <span class=\"token keyword\">const</span> midIndex<span class=\"token operator\">=</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>length<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> midValue<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>midIndex<span class=\"token punctuation\">,</span>midIndex<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  \n  <span class=\"token keyword\">const</span> left<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> right<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  \n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!==</span>midIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> n<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">&lt;</span>midValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 小于midValue 则放在left</span>\n        left<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 大于 midValue 则放在right</span>\n        right<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>midValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"题目3-判断字符串是否括号匹配\"><a href=\"#题目3-判断字符串是否括号匹配\" class=\"headerlink\" title=\"题目3 - 判断字符串是否括号匹配\"></a>题目3 - 判断字符串是否括号匹配</h3><ul>\n<li><p>一个字符串s可能包含{} () [] 三种括号</p>\n</li>\n<li><p>判断s是否是括号匹配的</p>\n</li>\n<li><p>如(a{b}c)匹配，而{a(b或{a(b}c) 就不匹配</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isMatch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">===</span> <span class=\"token string\">'['</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">==</span> <span class=\"token string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">===</span> <span class=\"token string\">'&#123;'</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">==</span> <span class=\"token string\">'&#125;'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">===</span> <span class=\"token string\">'('</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">==</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">matchBracket</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\n  <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">const</span> leftSymbols <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;[('</span>\n  <span class=\"token keyword\">const</span> rightSymbols <span class=\"token operator\">=</span> <span class=\"token string\">'&#125;])'</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftSymbols<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 左括号</span>\n      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightSymbols<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 右括号，判断栈顶</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'右括号'</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> top <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isMatch</span><span class=\"token punctuation\">(</span>top<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;a(b[c])&#125;'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">matchBracket</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"题目4-反转单向链表\"><a href=\"#题目4-反转单向链表\" class=\"headerlink\" title=\"题目4 - 反转单向链表\"></a>题目4 - 反转单向链表</h3><ul>\n<li>输入一个单向链表，输出它的反转(头变尾，尾变头)</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ILinkListNode</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\n  next<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ILinkListNode\n<span class=\"token punctuation\">&#125;</span>\n <span class=\"token comment\">// 反转链表</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reverseLinkList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">listNode</span><span class=\"token operator\">:</span> ILinkListNode</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ILinkListNode <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 定义三个指针</span>\n  <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">prevNode</span><span class=\"token operator\">:</span> ILinkListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span>\n  <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">curNode</span><span class=\"token operator\">:</span> ILinkListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span>\n  <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">nextNode</span><span class=\"token operator\">:</span> ILinkListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> listNode\n\n  <span class=\"token comment\">// 以nextNode为主 遍历链表</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nextNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 第一个元素 删掉next 防止循环引用</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curNode <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>prevNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">delete</span> curNode<span class=\"token punctuation\">.</span>next\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 反转指针</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curNode <span class=\"token operator\">&amp;&amp;</span> prevNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      curNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> prevNode\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 整体向后移动</span>\n    prevNode <span class=\"token operator\">=</span> curNode\n    curNode <span class=\"token operator\">=</span> nextNode\n    nextNode <span class=\"token operator\">=</span> nextNode<span class=\"token operator\">?.</span>next\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 当nextNode空时</span>\n  curNode<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> prevNode\n\n  <span class=\"token keyword\">return</span> curNode\n<span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 创建链表</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createLinkList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ILinkListNode <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arr is empty'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">curNode</span><span class=\"token operator\">:</span> ILinkListNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> arr<span class=\"token punctuation\">[</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    curNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">next</span><span class=\"token operator\">:</span> curNode\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">return</span> curNode\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token function\">createLinkList</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> list1 <span class=\"token operator\">=</span> <span class=\"token function\">reverseLinkList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"题目5-用链表实现队列\"><a href=\"#题目5-用链表实现队列\" class=\"headerlink\" title=\"题目5 - 用链表实现队列\"></a>题目5 - 用链表实现队列</h3><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ILinkListNode</span> <span class=\"token punctuation\">&#123;</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n  next<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ILinkListNode\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyQueue</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> head<span class=\"token operator\">:</span> ILinkListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token keyword\">private</span> tail<span class=\"token operator\">:</span> ILinkListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token keyword\">private</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token comment\">// 入队 在tail位置</span>\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> newNode<span class=\"token operator\">:</span> ILinkListNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      value<span class=\"token operator\">:</span> n<span class=\"token punctuation\">,</span>\n      next<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 处理head</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> newNode\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 处理tail</span>\n    <span class=\"token keyword\">const</span> tailNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tailNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      tailNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> newNode\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> newNode\n\n    <span class=\"token comment\">// 记录长度</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>len<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 出队 在head位置</span>\n  <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> headNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>headNode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>len <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n\n    <span class=\"token comment\">// 取值</span>\n    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> headNode<span class=\"token punctuation\">.</span>value\n\n    <span class=\"token comment\">//处理head</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> headNode<span class=\"token punctuation\">.</span>next\n\n    <span class=\"token comment\">// 记录长度</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>len<span class=\"token operator\">--</span>\n\n    <span class=\"token keyword\">return</span> value\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// length要单独存储 不能遍历链表来存取 </span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>len\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> q <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'length1'</span><span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"题目6-用两个栈实现一个队列\"><a href=\"#题目6-用两个栈实现一个队列\" class=\"headerlink\" title=\"题目6 - 用两个栈实现一个队列\"></a>题目6 - 用两个栈实现一个队列</h3><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyQueue</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> stack1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">private</span> stack2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\">/**\n   * 入队\n   */</span>\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">/**\n   * 出队\n   */</span>\n  <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> res\n\n    <span class=\"token keyword\">const</span> stack1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack1\n    <span class=\"token keyword\">const</span> stack2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack2\n\n    <span class=\"token comment\">// 将stack1 所有元素移动到stack2中</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> stack1<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        stack2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// stack2 pop</span>\n    res <span class=\"token operator\">=</span> stack2<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 将stack2所有元素还给stack1</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> stack2<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        stack1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> res <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack1<span class=\"token punctuation\">.</span>length\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"题目7-用JS实现二分查找\"><a href=\"#题目7-用JS实现二分查找\" class=\"headerlink\" title=\"题目7 - 用JS实现二分查找\"></a>题目7 - 用JS实现二分查找</h3><ul>\n<li><p>递归 - 代码逻辑更加清晰</p>\n</li>\n<li><p>非递归 - 性能更好</p>\n</li>\n<li><p>时间复杂度O(logn)</p>\n</li>\n<li><p>循环查找</p>\n</li>\n<li><p>凡有序必二分，凡二分，时间复杂度必包含O(logn)</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">binarySearch1</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">let</span> startIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\">// 开始位置</span>\n  <span class=\"token keyword\">let</span> endIndex <span class=\"token operator\">=</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>  <span class=\"token comment\">// 结束位置</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>startIndex <span class=\"token operator\">&lt;=</span> endIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> midIndex <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>startIndex <span class=\"token operator\">+</span> endIndex<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> midValue <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>midIndex<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">&lt;</span> midValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 目标值较小 则继续在左侧查找</span>\n      endIndex <span class=\"token operator\">=</span> midIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">></span> midValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 目标值较大，则继续在右侧查找</span>\n      startIndex <span class=\"token operator\">=</span> midIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 相等 返回</span>\n      <span class=\"token keyword\">return</span> midIndex\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 功能测试</span>\n<span class=\"token keyword\">const</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">]</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">binarySearch1</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>递归查找</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">binarySearch2</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> startIndex<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> endIndex<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n  <span class=\"token comment\">// 开始和结束的范围</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>startIndex <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> startIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>endIndex <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> endIndex <span class=\"token operator\">=</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n  <span class=\"token comment\">// 如果start 和 end相遇，则结束</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>startIndex <span class=\"token operator\">></span> endIndex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n  <span class=\"token comment\">// 中间位置</span>\n  <span class=\"token keyword\">const</span> midIndex <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>startIndex <span class=\"token operator\">+</span> endIndex<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> midValue <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>midIndex<span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">&lt;</span> midValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 目标值较小 则继续在左侧查找</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">binarySearch2</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> startIndex<span class=\"token punctuation\">,</span> midIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">></span> midValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 目标值较大 则继续在右侧查找</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">binarySearch2</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> midIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> endIndex<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 相等 返回</span>\n    <span class=\"token keyword\">return</span> midIndex\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"题目8-给一个数组，找出其中和为n的两个元素\"><a href=\"#题目8-给一个数组，找出其中和为n的两个元素\" class=\"headerlink\" title=\"题目8 - 给一个数组，找出其中和为n的两个元素\"></a>题目8 - 给一个数组，找出其中和为n的两个元素</h3><ul>\n<li>有一个递增的数组[1,2,4,7,11,15] 和一个n=15</li>\n<li>数组中有两个数，和是n，即4+11===15</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">findTowNumber</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> res<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length\n\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\">// 头</span>\n  <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>  <span class=\"token comment\">//尾</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> n1 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">const</span> n2 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">></span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// sum大于n 则j要向前移动</span>\n      j<span class=\"token operator\">--</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// sum小于n 则i要向后移动</span>\n      i<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 相等</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>n2<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">]</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token function\">findTowNumber</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"题目9-求二叉搜索树的第k小值\"><a href=\"#题目9-求二叉搜索树的第k小值\" class=\"headerlink\" title=\"题目9 - 求二叉搜索树的第k小值\"></a>题目9 - 求二叉搜索树的第k小值</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/1356933/1647328406540-1455e742-a6eb-4e14-bd9f-07323a8426d9.png\" alt=\"img\"></p>\n<ul>\n<li>二叉搜索树BST即左边小于根，右边大于根</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ITreeNode</span> <span class=\"token punctuation\">&#123;</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  left<span class=\"token operator\">:</span> ITreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n  right<span class=\"token operator\">:</span> ITreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">preOrderTraverse</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> ITreeNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n  <span class=\"token comment\">// console.log(node.value)</span>\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">preOrderTraverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">preOrderTraverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">inOrderTraverse</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> ITreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n  <span class=\"token function\">inOrderTraverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// console.log(node.value)</span>\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">inOrderTraverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">postOrderTraverse</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> ITreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n  <span class=\"token function\">postOrderTraverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">postOrderTraverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// console.log(node.value)</span>\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getKthValue</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> ITreeNode<span class=\"token punctuation\">,</span> k<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">inOrderTraverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">const</span> tree<span class=\"token operator\">:</span> ITreeNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  value<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n  left<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    value<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    left<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      value<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      left<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      right<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    right<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      value<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n      left<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      right<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  right<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    value<span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    left<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      value<span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n      left<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      right<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    right<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      value<span class=\"token operator\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n      left<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      right<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getKthValue</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"题目10-求斐波那契数列的弟n值\"><a href=\"#题目10-求斐波那契数列的弟n值\" class=\"headerlink\" title=\"题目10 - 求斐波那契数列的弟n值\"></a>题目10 - 求斐波那契数列的弟n值</h3><ul>\n<li>用JS计算斐波那契数列的第n个值</li>\n<li>注意时间复杂度</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">===</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  \n  <span class=\"token keyword\">let</span> n1<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n  <span class=\"token keyword\">let</span> n2<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n  <span class=\"token keyword\">let</span> res<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n  \n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    res<span class=\"token operator\">=</span>n1<span class=\"token operator\">+</span>n2\n    \n    n1<span class=\"token operator\">=</span>n2\n    n2<span class=\"token operator\">=</span>res\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"题目11-青蛙跳台阶\"><a href=\"#题目11-青蛙跳台阶\" class=\"headerlink\" title=\"题目11 - 青蛙跳台阶\"></a>题目11 - 青蛙跳台阶</h3><ul>\n<li>一只青蛙，一次可跳1级，也可跳2级</li>\n<li>问：青蛙跳到n级台阶，总共有多少种方式</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">numWays</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">===</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    \n    <span class=\"token keyword\">let</span> n1<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">let</span> n2<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">let</span> res<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        res<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>n1<span class=\"token operator\">+</span>n2<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n        n1<span class=\"token operator\">=</span>n2\n        n2<span class=\"token operator\">=</span>res\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"题目12-将数组中的0移动到末尾\"><a href=\"#题目12-将数组中的0移动到末尾\" class=\"headerlink\" title=\"题目12 - 将数组中的0移动到末尾\"></a>题目12 - 将数组中的0移动到末尾</h3><ul>\n<li><p>如输入[1,0,3,0,11,0] ， 输出[1,3,11,0,0,0]</p>\n</li>\n<li><p>只移动0，其他顺序不变</p>\n</li>\n<li><p>必须在原数组进行操作</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">moveZero</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> length<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>length<span class=\"token operator\">===</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n  \n  <span class=\"token keyword\">let</span> i\n  j<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>  <span class=\"token comment\">//指向第一个0</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">===</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 第一个0</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        j<span class=\"token operator\">=</span>i\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!==</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> n<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n      arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n      arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>n\n      \n      j<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token function\">moveZero</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"题目13-求字符串中连续最多的字符，以及次数\"><a href=\"#题目13-求字符串中连续最多的字符，以及次数\" class=\"headerlink\" title=\"题目13 - 求字符串中连续最多的字符，以及次数\"></a>题目13 - 求字符串中连续最多的字符，以及次数</h3><ul>\n<li>如，输入’abbccddeeee1234’ ,计算得出</li>\n<li>连续最多的字符是’e’ 4次</li>\n</ul>\n<p><strong>双指针</strong></p>\n<ul>\n<li><p>定义指针<code>i</code>和<code>j</code>，<code>j</code>不动，<code>i</code>继续移动</p>\n</li>\n<li><p>如果<code>i</code>和 <code>j</code>的值一直相等，则<code>i</code>继续移动</p>\n</li>\n<li><p>直到<code>i</code>和<code>j</code>的值不相等，记录处理，让<code>j</code>追上<code>i</code>，继续第一步</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">findContinuousChar</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>IRes<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> res<span class=\"token operator\">:</span>IRes<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n    char<span class=\"token operator\">:</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    length<span class=\"token operator\">:</span><span class=\"token number\">0</span>\n  <span class=\"token punctuation\">&#125;</span>\n  \n  <span class=\"token keyword\">const</span> length<span class=\"token operator\">=</span>str<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>length<span class=\"token operator\">===</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> res\n  \n  <span class=\"token keyword\">let</span> tempLength<span class=\"token operator\">=</span><span class=\"token number\">0</span>  <span class=\"token comment\">// 临时记录当前连续字符的长度</span>\n  <span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n  <span class=\"token keyword\">let</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n  \n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">===</span>str<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      tempLength<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!==</span>str<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">||</span>i<span class=\"token operator\">===</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 不相等 或者i到了字符串的末尾</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tempLength<span class=\"token operator\">></span>res<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        res<span class=\"token punctuation\">.</span>char<span class=\"token operator\">=</span>str<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n        res<span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span>tempLength\n      <span class=\"token punctuation\">&#125;</span>\n      tempLength<span class=\"token operator\">=</span><span class=\"token number\">0</span>  <span class=\"token comment\">//reset</span>\n      \n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        j<span class=\"token operator\">=</span>i  <span class=\"token comment\">//让j追上 i</span>\n        i<span class=\"token operator\">--</span> <span class=\"token comment\">// 细节</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  \n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">findContinuousChar</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abaabbbbccddee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"题目14-获取1-10000之前所有的对称数-回文数\"><a href=\"#题目14-获取1-10000之前所有的对称数-回文数\" class=\"headerlink\" title=\"题目14 - 获取1-10000之前所有的对称数(回文数)\"></a>题目14 - 获取1-10000之前所有的对称数(回文数)</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">findPalindromeNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span>number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">res</span><span class=\"token operator\">:</span>number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>max<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> res\n  \n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>max<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> n<span class=\"token operator\">=</span>i\n    <span class=\"token keyword\">let</span> rev<span class=\"token operator\">=</span><span class=\"token number\">0</span>  <span class=\"token comment\">//存储反转数</span>\n    \n    <span class=\"token comment\">// 生成反转数</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      rev<span class=\"token operator\">=</span>rev<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token operator\">+</span>n<span class=\"token operator\">%</span><span class=\"token number\">10</span>\n      n<span class=\"token operator\">=</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">===</span>rev<span class=\"token punctuation\">)</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">findPalindromeNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/*\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191]\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"题目15-高效的英文单词前缀匹配\"><a href=\"#题目15-高效的英文单词前缀匹配\" class=\"headerlink\" title=\"题目15 - 高效的英文单词前缀匹配\"></a>题目15 - 高效的英文单词前缀匹配</h3><ul>\n<li><p>有一个英文单词库（数组），里面有几十万个英文单词</p>\n</li>\n<li><p>输入一个字符串，快速判断是不是某一个单词的前缀</p>\n</li>\n<li><p>（说明思路，不用写代码）</p>\n</li>\n</ul>\n<p><strong>实现方法</strong></p>\n<ol>\n<li><p>将二十六个字母拆分匹配成一个26叉树  -  这一步很长时间才更新一次，不算进算法中</p>\n</li>\n<li><p>使用hash key查找即可，例如<code>str.a.c.b.c.d</code></p>\n</li>\n<li><p>有明确范围的数据(如26个英文字母)，考虑使用哈希表(对象)</p>\n</li>\n</ol>\n<h3 id=\"题目16-数字千分位格式化\"><a href=\"#题目16-数字千分位格式化\" class=\"headerlink\" title=\"题目16 - 数字千分位格式化\"></a>题目16 - 数字千分位格式化</h3><ul>\n<li><p>将数字千分位格式化，输出字符串</p>\n</li>\n<li><p>如输入数字12050100，输出字符串12，050，100</p>\n</li>\n<li><p>（注意：逆序判断）</p>\n</li>\n</ul>\n<p><strong>常见思路</strong></p>\n<ul>\n<li>使用数组</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n    n <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 只考虑整数</span>\n\n    <span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> val <span class=\"token operator\">+</span> <span class=\"token string\">','</span> <span class=\"token operator\">+</span> prev\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> val\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> val <span class=\"token operator\">+</span> prev\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>使用字符串（推荐）</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n    n <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 只考虑整数</span>\n\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>length\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> j <span class=\"token operator\">=</span> length <span class=\"token operator\">-</span> i\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                res <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> res\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                res <span class=\"token operator\">=</span> <span class=\"token string\">','</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> res\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            res <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> res\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"题目17-切换字母大小写\"><a href=\"#题目17-切换字母大小写\" class=\"headerlink\" title=\"题目17 - 切换字母大小写\"></a>题目17 - 切换字母大小写</h3><ul>\n<li>输入一个字符串，切换其中字母的大小写</li>\n<li>如，输入字符串12bBc34，输出字符串12AbC34</li>\n</ul>\n<p><strong>常见思路</strong></p>\n<ul>\n<li>正则表达式</li>\n<li>ASCII表</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">switchLetterCase</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> res<span class=\"token operator\">=</span><span class=\"token string\">''</span>\n  \n  <span class=\"token keyword\">const</span> length<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>length<span class=\"token operator\">===</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> res\n  \n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> c<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">const</span> code<span class=\"token operator\">=</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>code<span class=\"token operator\">>=</span><span class=\"token number\">65</span><span class=\"token operator\">&amp;&amp;</span>code<span class=\"token operator\">&lt;=</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      res<span class=\"token operator\">+=</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>code<span class=\"token operator\">>=</span><span class=\"token number\">97</span><span class=\"token operator\">&amp;&amp;</span>code<span class=\"token operator\">&lt;=</span><span class=\"token number\">122</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      res<span class=\"token operator\">+=</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n      res<span class=\"token operator\">+=</span>c\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  \n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">switchLetterCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12bBc34'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"题目18-为什么0-1-0-2-0-3\"><a href=\"#题目18-为什么0-1-0-2-0-3\" class=\"headerlink\" title=\"题目18 - 为什么0.1+0.2!==0.3\"></a>题目18 - 为什么0.1+0.2!==0.3</h3><p><strong>计算机使用二进制存储数据</strong></p>\n<ul>\n<li><p>整数转换二进制没有误差，如9转换为二进制是1001</p>\n</li>\n<li><p>而小数可能无法用二进制准确表达，如0.2转换为0.20000001</p>\n</li>\n<li><p>可以用<code>math.js</code>库</p>\n</li>\n</ul>\n<h2 id=\"持续更新中……\"><a href=\"#持续更新中……\" class=\"headerlink\" title=\"持续更新中……\"></a>持续更新中……</h2>","text":"题目1 - 将一个数组旋转k步 输入数组[1,2,3,4,5,6,7] k=3,即旋转3步 输出[5,6,7,1,2,3,4] const arr = [1, 2, 3, 4, 5, 6, 7] function rotate2(arr, k) &#123; const leng...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[{"name":"知识点","slug":"知识点","count":7,"path":"api/categories/知识点.json"}],"tags":[{"name":"算法","slug":"算法","count":1,"path":"api/tags/算法.json"},{"name":"数据结构","slug":"数据结构","count":1,"path":"api/tags/数据结构.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE1-%E5%B0%86%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E6%97%8B%E8%BD%ACk%E6%AD%A5\"><span class=\"toc-text\">题目1 - 将一个数组旋转k步</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE2-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">题目2 - 快速排序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE3-%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">题目3 - 判断字符串是否括号匹配</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE4-%E5%8F%8D%E8%BD%AC%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">题目4 - 反转单向链表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE5-%E7%94%A8%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97\"><span class=\"toc-text\">题目5 - 用链表实现队列</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE6-%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%98%9F%E5%88%97\"><span class=\"toc-text\">题目6 - 用两个栈实现一个队列</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE7-%E7%94%A8JS%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE\"><span class=\"toc-text\">题目7 - 用JS实现二分查找</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE8-%E7%BB%99%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%EF%BC%8C%E6%89%BE%E5%87%BA%E5%85%B6%E4%B8%AD%E5%92%8C%E4%B8%BAn%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">题目8 - 给一个数组，找出其中和为n的两个元素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE9-%E6%B1%82%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%AC%ACk%E5%B0%8F%E5%80%BC\"><span class=\"toc-text\">题目9 - 求二叉搜索树的第k小值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE10-%E6%B1%82%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%9A%84%E5%BC%9Fn%E5%80%BC\"><span class=\"toc-text\">题目10 - 求斐波那契数列的弟n值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE11-%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6\"><span class=\"toc-text\">题目11 - 青蛙跳台阶</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE12-%E5%B0%86%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%840%E7%A7%BB%E5%8A%A8%E5%88%B0%E6%9C%AB%E5%B0%BE\"><span class=\"toc-text\">题目12 - 将数组中的0移动到末尾</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE13-%E6%B1%82%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E8%BF%9E%E7%BB%AD%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%97%E7%AC%A6%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%AC%A1%E6%95%B0\"><span class=\"toc-text\">题目13 - 求字符串中连续最多的字符，以及次数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE14-%E8%8E%B7%E5%8F%961-10000%E4%B9%8B%E5%89%8D%E6%89%80%E6%9C%89%E7%9A%84%E5%AF%B9%E7%A7%B0%E6%95%B0-%E5%9B%9E%E6%96%87%E6%95%B0\"><span class=\"toc-text\">题目14 - 获取1-10000之前所有的对称数(回文数)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE15-%E9%AB%98%E6%95%88%E7%9A%84%E8%8B%B1%E6%96%87%E5%8D%95%E8%AF%8D%E5%89%8D%E7%BC%80%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">题目15 - 高效的英文单词前缀匹配</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE16-%E6%95%B0%E5%AD%97%E5%8D%83%E5%88%86%E4%BD%8D%E6%A0%BC%E5%BC%8F%E5%8C%96\"><span class=\"toc-text\">题目16 - 数字千分位格式化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE17-%E5%88%87%E6%8D%A2%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%B0%8F%E5%86%99\"><span class=\"toc-text\">题目17 - 切换字母大小写</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE18-%E4%B8%BA%E4%BB%80%E4%B9%880-1-0-2-0-3\"><span class=\"toc-text\">题目18 - 为什么0.1+0.2!&#x3D;&#x3D;0.3</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD%E2%80%A6%E2%80%A6\"><span class=\"toc-text\">持续更新中……</span></a>","author":{"name":"LIYUNFU","slug":"blog-author","avatar":"https://gitee.com/LUNIONT/img-url/raw/master/202201011746808.jpg","link":"/","description":"一个正在重塑知识的切图仔 <br /> @ <b>公众号:伯nulee</b>","socials":{"github":"https://gitee.com/LUNIONT","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/2277843824292183","customs":{}}},"mapped":true,"prev_post":{"title":"HTML知识点","uid":"1b47919438b08a0e56e1fac60890eb9a","slug":"HTML知识点","date":"2022-03-15T01:13:09.000Z","updated":"2022-03-16T08:03:42.299Z","comments":true,"path":"api/articles/HTML知识点.json","keywords":null,"cover":null,"text":"1. 如何理解HTML语义化优点 对机器友好，更适合搜索引擎的爬取，有利于SEO。支持读屏软件，根据文章可以自动生成目录 对开发者友好，增强可读性，结构更加清晰，便于维护 常见语义化标签 &lt;header>头部&lt;/header> &lt;nav>导航栏&lt;/nav>...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"知识点","slug":"知识点","count":7,"path":"api/categories/知识点.json"}],"tags":[{"name":"面试","slug":"面试","count":3,"path":"api/tags/面试.json"},{"name":"HTML","slug":"HTML","count":1,"path":"api/tags/HTML.json"}],"author":{"name":"LIYUNFU","slug":"blog-author","avatar":"https://gitee.com/LUNIONT/img-url/raw/master/202201011746808.jpg","link":"/","description":"一个正在重塑知识的切图仔 <br /> @ <b>公众号:伯nulee</b>","socials":{"github":"https://gitee.com/LUNIONT","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/2277843824292183","customs":{}}}},"next_post":{"title":"ES6新特性","uid":"ce895751a313319f06b50d562f5dd5db","slug":"ES6新特性","date":"2022-03-12T10:48:14.000Z","updated":"2022-03-12T14:48:04.035Z","comments":true,"path":"api/articles/ES6新特性.json","keywords":null,"cover":null,"text":"let&amp;const解构赋值数组新特性 Array.of() ：将一组值转化为数组，返回一个新数组，并且不考虑参数的数量或类型 copyWithin() ：把指定位置的成员复制到其他位置，返回原数组 find() ：返回第一个符合条件的值 findIndex() ：返回第一...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"知识点","slug":"知识点","count":7,"path":"api/categories/知识点.json"}],"tags":[{"name":"ES6","slug":"ES6","count":1,"path":"api/tags/ES6.json"},{"name":"前瞻","slug":"前瞻","count":1,"path":"api/tags/前瞻.json"}],"author":{"name":"LIYUNFU","slug":"blog-author","avatar":"https://gitee.com/LUNIONT/img-url/raw/master/202201011746808.jpg","link":"/","description":"一个正在重塑知识的切图仔 <br /> @ <b>公众号:伯nulee</b>","socials":{"github":"https://gitee.com/LUNIONT","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/2277843824292183","customs":{}}}}}