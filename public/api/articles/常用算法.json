{"title":"常用算法","uid":"50ba5796497ecb4fe11ec2fa6f32ff0a","slug":"常用算法","date":"2022-03-14T10:17:13.000Z","updated":"2022-03-14T10:23:27.935Z","comments":true,"path":"api/articles/常用算法.json","keywords":null,"cover":null,"content":"<h2 id=\"题目1-将一个数组旋转k步\"><a href=\"#题目1-将一个数组旋转k步\" class=\"headerlink\" title=\"题目1 - 将一个数组旋转k步\"></a>题目1 - 将一个数组旋转k步</h2><ul>\n<li>输入数组[1,2,3,4,5,6,7]</li>\n<li>k=3，即旋转3步</li>\n<li>输出[5,6,7,1,2,3,4]</li>\n</ul>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">rotate2</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>k <span class=\"token operator\">||</span> length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> arr\n  <span class=\"token keyword\">const</span> step <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">%</span> length<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// abs 取绝对值</span>\n\n  <span class=\"token keyword\">const</span> part1 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>step<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> part2 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> length <span class=\"token operator\">-</span> step<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> part3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>part1<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>part2<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">return</span> part3\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token function\">rotate2</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"题目2-快速排序\"><a href=\"#题目2-快速排序\" class=\"headerlink\" title=\"题目2 - 快速排序\"></a>题目2 - 快速排序</h2><ul>\n<li>用JavaScript 实现快速排序，并说明时间复杂度</li>\n</ul>\n<h2 id=\"题目3-判断字符串是否括号匹配\"><a href=\"#题目3-判断字符串是否括号匹配\" class=\"headerlink\" title=\"题目3 - 判断字符串是否括号匹配\"></a>题目3 - 判断字符串是否括号匹配</h2><ul>\n<li>一个字符串s可能包括{} () []三种括号</li>\n<li>判断s是否是括号匹配</li>\n<li>如(a{b}c)匹配，而{a(b]c)}就不匹配</li>\n</ul>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">isMatch</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">===</span> <span class=\"token string\">'['</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">==</span> <span class=\"token string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">===</span> <span class=\"token string\">'&#123;'</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">==</span> <span class=\"token string\">'&#125;'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">===</span> <span class=\"token string\">'('</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">==</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">matchBracket</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\n  <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">const</span> leftSymbols <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;[('</span>\n  <span class=\"token keyword\">const</span> rightSymbols <span class=\"token operator\">=</span> <span class=\"token string\">'&#125;])'</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftSymbols<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 左括号</span>\n      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightSymbols<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 右括号，判断栈顶</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'右括号'</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> top <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isMatch</span><span class=\"token punctuation\">(</span>top<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;a(b[c])&#125;'</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">matchBracket</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"题目4-反转单向链表\"><a href=\"#题目4-反转单向链表\" class=\"headerlink\" title=\"题目4 - 反转单向链表\"></a>题目4 - 反转单向链表</h2><ul>\n<li>输入一个单向链表，输出它的反转(头变尾，尾变头)</li>\n</ul>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ILinkListNode</span> <span class=\"token punctuation\">&#123;</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n  next<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ILinkListNode\n<span class=\"token punctuation\">&#125;</span>\n <span class=\"token comment\">// 反转链表</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reverseLinkList</span><span class=\"token punctuation\">(</span>listNode<span class=\"token operator\">:</span> ILinkListNode<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ILinkListNode <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 定义三个指针</span>\n  <span class=\"token keyword\">let</span> prevNode<span class=\"token operator\">:</span> ILinkListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span>\n  <span class=\"token keyword\">let</span> curNode<span class=\"token operator\">:</span> ILinkListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span>\n  <span class=\"token keyword\">let</span> nextNode<span class=\"token operator\">:</span> ILinkListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> listNode\n\n  <span class=\"token comment\">// 以nextNode为主 遍历链表</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nextNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 第一个元素 删掉next 防止循环引用</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curNode <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>prevNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">delete</span> curNode<span class=\"token punctuation\">.</span>next\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 反转指针</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curNode <span class=\"token operator\">&amp;&amp;</span> prevNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      curNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> prevNode\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 整体向后移动</span>\n    prevNode <span class=\"token operator\">=</span> curNode\n    curNode <span class=\"token operator\">=</span> nextNode\n    nextNode <span class=\"token operator\">=</span> nextNode<span class=\"token operator\">?.</span>next\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 当nextNode空时</span>\n  curNode<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> prevNode\n\n  <span class=\"token keyword\">return</span> curNode\n<span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 创建链表</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createLinkList</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ILinkListNode <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arr is empty'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">let</span> curNode<span class=\"token operator\">:</span> ILinkListNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    value<span class=\"token operator\">:</span> arr<span class=\"token punctuation\">[</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    curNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      value<span class=\"token operator\">:</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      next<span class=\"token operator\">:</span> curNode\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">return</span> curNode\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token function\">createLinkList</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> list1 <span class=\"token operator\">=</span> <span class=\"token function\">reverseLinkList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"题目5-用链表实现队列\"><a href=\"#题目5-用链表实现队列\" class=\"headerlink\" title=\"题目5 - 用链表实现队列\"></a>题目5 - 用链表实现队列</h2><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ILinkListNode</span> <span class=\"token punctuation\">&#123;</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n  next<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ILinkListNode\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyQueue</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> head<span class=\"token operator\">:</span> ILinkListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token keyword\">private</span> tail<span class=\"token operator\">:</span> ILinkListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token keyword\">private</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token comment\">// 入队 在tail位置</span>\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> newNode<span class=\"token operator\">:</span> ILinkListNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      value<span class=\"token operator\">:</span> n<span class=\"token punctuation\">,</span>\n      next<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 处理head</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> newNode\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 处理tail</span>\n    <span class=\"token keyword\">const</span> tailNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tailNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      tailNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> newNode\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> newNode\n\n    <span class=\"token comment\">// 记录长度</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>len<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 出队 在head位置</span>\n  <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> headNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>headNode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>len <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n\n    <span class=\"token comment\">// 取值</span>\n    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> headNode<span class=\"token punctuation\">.</span>value\n\n    <span class=\"token comment\">//处理head</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> headNode<span class=\"token punctuation\">.</span>next\n\n    <span class=\"token comment\">// 记录长度</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>len<span class=\"token operator\">--</span>\n\n    <span class=\"token keyword\">return</span> value\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// length要单独存储 不能遍历链表来存取 </span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>len\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> q <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'length1'</span><span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"题目6-用两个栈实现一个队列\"><a href=\"#题目6-用两个栈实现一个队列\" class=\"headerlink\" title=\"题目6 - 用两个栈实现一个队列\"></a>题目6 - 用两个栈实现一个队列</h2><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyQueue</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> stack1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">private</span> stack2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\">/**\n   * 入队\n   */</span>\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">/**\n   * 出队\n   */</span>\n  <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> res\n\n    <span class=\"token keyword\">const</span> stack1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack1\n    <span class=\"token keyword\">const</span> stack2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack2\n\n    <span class=\"token comment\">// 将stack1 所有元素移动到stack2中</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> stack1<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        stack2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// stack2 pop</span>\n    res <span class=\"token operator\">=</span> stack2<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 将stack2所有元素还给stack1</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> stack2<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        stack1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> res <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack1<span class=\"token punctuation\">.</span>length\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","feature":true,"text":"题目1 - 将一个数组旋转k步 输入数组[1,2,3,4,5,6,7] k=3，即旋转3步 输出[5,6,7,1,2,3,4] const arr = [1, 2, 3, 4, 5, 6, 7] function rotate2(arr, k) &#123; const leng...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"知识点","slug":"知识点","count":4,"path":"api/categories/知识点.json"}],"tags":[{"name":"算法","slug":"算法","count":1,"path":"api/tags/算法.json"},{"name":"数据结构","slug":"数据结构","count":1,"path":"api/tags/数据结构.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE1-%E5%B0%86%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E6%97%8B%E8%BD%ACk%E6%AD%A5\"><span class=\"toc-text\">题目1 - 将一个数组旋转k步</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE2-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">题目2 - 快速排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE3-%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">题目3 - 判断字符串是否括号匹配</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE4-%E5%8F%8D%E8%BD%AC%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">题目4 - 反转单向链表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE5-%E7%94%A8%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97\"><span class=\"toc-text\">题目5 - 用链表实现队列</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE6-%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%98%9F%E5%88%97\"><span class=\"toc-text\">题目6 - 用两个栈实现一个队列</span></a></li></ol>","author":{"name":"LIYUNFU","slug":"blog-author","avatar":"https://gitee.com/LUNIONT/img-url/raw/master/202201011746808.jpg","link":"/","description":"一个正在重塑知识的切图仔 <br /> @ <b>公众号:伯nulee</b>","socials":{"github":"https://gitee.com/LUNIONT","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/2277843824292183","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"基于koa-generator搭建通用服务端","uid":"52748ea8c7aacb653b9bc3a082a7560f","slug":"基于koa-generator搭建通用服务端","date":"2022-03-05T02:51:22.000Z","updated":"2022-03-06T04:20:00.000Z","comments":true,"path":"api/articles/基于koa-generator搭建通用服务端.json","keywords":null,"cover":null,"text":"安装koa-generator全局安装koa-generatornpm i koa-generator -g 初始化项目koa2 goudong-server 进入并安装依赖cd goudong-server npm install 改造项目环境 在根目录下新建src目录 将pu...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"实战","slug":"实战","count":5,"path":"api/categories/实战.json"}],"tags":[{"name":"实战","slug":"实战","count":3,"path":"api/tags/实战.json"},{"name":"koa","slug":"koa","count":1,"path":"api/tags/koa.json"}],"author":{"name":"LIYUNFU","slug":"blog-author","avatar":"https://gitee.com/LUNIONT/img-url/raw/master/202201011746808.jpg","link":"/","description":"一个正在重塑知识的切图仔 <br /> @ <b>公众号:伯nulee</b>","socials":{"github":"https://gitee.com/LUNIONT","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/2277843824292183","customs":{}}},"feature":true}}