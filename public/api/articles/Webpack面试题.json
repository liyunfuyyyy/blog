{"title":"Webpack面试题","uid":"351e3c9d435f8ea85babffc9bf32b676","slug":"Webpack面试题","date":"2022-04-10T12:24:22.000Z","updated":"2022-04-10T12:24:43.384Z","comments":true,"path":"api/articles/Webpack面试题.json","keywords":null,"cover":null,"content":"<h2 id=\"0-有哪些常见的Loader？你用过哪些Loader？\"><a href=\"#0-有哪些常见的Loader？你用过哪些Loader？\" class=\"headerlink\" title=\"0.有哪些常见的Loader？你用过哪些Loader？\"></a>0.有哪些常见的Loader？你用过哪些Loader？</h2><p>(我开始熟悉的报起了菜名)</p>\n<ul>\n<li><code>raw-loader</code>：加载文件原始内容（utf-8）</li>\n<li><code>file-loader</code>：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件 (处理图片和字体)</li>\n<li><code>url-loader</code>：与 file-loader 类似，区别是用户可以设置一个阈值，大于阈值会交给 file-loader 处理，小于阈值时返回文件 base64 形式编码 (处理图片和字体)</li>\n<li><code>source-map-loader</code>：加载额外的 Source Map 文件，以方便断点调试</li>\n<li><code>svg-inline-loader</code>：将压缩后的 SVG 内容注入代码中</li>\n<li><code>image-loader</code>：加载并且压缩图片文件</li>\n<li><code>json-loader</code> 加载 JSON 文件（默认包含）</li>\n<li><code>handlebars-loader</code>: 将 Handlebars 模版编译成函数并返回</li>\n<li><code>babel-loader</code>：把 ES6 转换成 ES5</li>\n<li><code>ts-loader</code>: 将 TypeScript 转换成 JavaScript</li>\n<li><code>awesome-typescript-loader</code>：将 TypeScript 转换成 JavaScript，性能优于 ts-loader</li>\n<li><code>sass-loader</code>：将SCSS/SASS代码转换成CSS</li>\n<li><code>css-loader</code>：加载 CSS，支持模块化、压缩、文件导入等特性</li>\n<li><code>style-loader</code>：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS</li>\n<li><code>postcss-loader</code>：扩展 CSS 语法，使用下一代 CSS，可以配合 autoprefixer 插件自动补齐 CSS3 前缀</li>\n<li><code>eslint-loader</code>：通过 ESLint 检查 JavaScript 代码</li>\n<li><code>tslint-loader</code>：通过 TSLint检查 TypeScript 代码</li>\n<li><code>mocha-loader</code>：加载 Mocha 测试用例的代码</li>\n<li><code>coverjs-loader</code>：计算测试的覆盖率</li>\n<li><code>vue-loader</code>：加载 Vue.js 单文件组件</li>\n<li><code>i18n-loader</code>: 国际化</li>\n<li><code>cache-loader</code>: 可以在一些性能开销较大的 Loader 之前添加，目的是将结果缓存到磁盘里</li>\n</ul>\n<p>更多 Loader 请参考<a href=\"https://link.juejin.cn/?target=https://webpack.docschina.org/loaders/\">官网</a></p>\n<p>(面试官：挺好，知道的还挺多)</p>\n<h2 id=\"1-有哪些常见的Plugin？你用过哪些Plugin？\"><a href=\"#1-有哪些常见的Plugin？你用过哪些Plugin？\" class=\"headerlink\" title=\"1.有哪些常见的Plugin？你用过哪些Plugin？\"></a>1.有哪些常见的Plugin？你用过哪些Plugin？</h2><p>(这大兄弟好像听上瘾了，继续开启常规操作)</p>\n<ul>\n<li><code>define-plugin</code>：定义环境变量 (Webpack4 之后指定 mode 会自动配置)</li>\n<li><code>ignore-plugin</code>：忽略部分文件</li>\n<li><code>html-webpack-plugin</code>：简化 HTML 文件创建 (依赖于 html-loader)</li>\n<li><code>web-webpack-plugin</code>：可方便地为单页应用输出 HTML，比 html-webpack-plugin 好用</li>\n<li><code>uglifyjs-webpack-plugin</code>：不支持 ES6 压缩 (Webpack4 以前)</li>\n<li><code>terser-webpack-plugin</code>: 支持压缩 ES6 (Webpack4)</li>\n<li><code>webpack-parallel-uglify-plugin</code>: 多进程执行代码压缩，提升构建速度</li>\n<li><code>mini-css-extract-plugin</code>: 分离样式文件，CSS 提取为独立文件，支持按需加载 (替代extract-text-webpack-plugin)</li>\n<li><code>serviceworker-webpack-plugin</code>：为网页应用增加离线缓存功能</li>\n<li><code>clean-webpack-plugin</code>: 目录清理</li>\n<li><code>ModuleConcatenationPlugin</code>: 开启 Scope Hoisting</li>\n<li><code>speed-measure-webpack-plugin</code>: 可以看到每个 Loader 和 Plugin 执行耗时 (整个打包耗时、每个 Plugin 和 Loader 耗时)</li>\n<li><code>webpack-bundle-analyzer</code>: 可视化 Webpack 输出文件的体积 (业务组件、依赖第三方模块)</li>\n</ul>\n<p>更多 Plugin 请参考<a href=\"https://link.juejin.cn/?target=https://webpack.docschina.org/plugins/\">官网</a></p>\n<p>(Double Kill)</p>\n<h2 id=\"2-那你再说一说Loader和Plugin的区别？\"><a href=\"#2-那你再说一说Loader和Plugin的区别？\" class=\"headerlink\" title=\"2.那你再说一说Loader和Plugin的区别？\"></a>2.那你再说一说Loader和Plugin的区别？</h2><p>(就知道你会问这个，我用手掩盖着嘴角的微笑)</p>\n<p><code>Loader</code> 本质就是一个函数，在该函数中对接收到的内容进行转换，返回转换后的结果。 因为 Webpack 只认识 JavaScript，所以 Loader 就成了翻译官，对其他类型的资源进行转译的预处理工作。</p>\n<p><code>Plugin</code> 就是插件，基于事件流框架 <code>Tapable</code>，插件可以扩展 Webpack 的功能，在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</p>\n<p><code>Loader</code> 在 module.rules 中配置，作为模块的解析规则，类型为数组。每一项都是一个 Object，内部包含了 test(类型文件)、loader、options (参数)等属性。</p>\n<p><code>Plugin</code> 在 plugins 中单独配置，类型为数组，每一项是一个 Plugin 的实例，参数都通过构造函数传入。</p>\n<h2 id=\"3-Webpack构建流程简单说一下\"><a href=\"#3-Webpack构建流程简单说一下\" class=\"headerlink\" title=\"3.Webpack构建流程简单说一下\"></a>3.Webpack构建流程简单说一下</h2><p>Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：</p>\n<ul>\n<li><code>初始化参数</code>：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数</li>\n<li><code>开始编译</code>：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译</li>\n<li><code>确定入口</code>：根据配置中的 entry 找出所有的入口文件</li>\n<li><code>编译模块</code>：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理</li>\n<li><code>完成模块编译</code>：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系</li>\n<li><code>输出资源</code>：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会</li>\n<li><code>输出完成</code>：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</li>\n</ul>\n<p>在以上过程中，<code>Webpack</code> 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。</p>\n<p>简单说</p>\n<ul>\n<li>初始化：启动构建，读取与合并配置参数，加载 Plugin，实例化 Compiler</li>\n<li>编译：从 Entry 出发，针对每个 Module 串行调用对应的 Loader 去翻译文件的内容，再找到该 Module 依赖的 Module，递归地进行编译处理</li>\n<li>输出：将编译后的 Module 组合成 Chunk，将 Chunk 转换成文件，输出到文件系统中</li>\n</ul>\n<p>对源码感兴趣的同学可以移步我的另一篇专栏<a href=\"https://juejin.cn/post/6844904046294204429\">从源码窥探Webpack4.x原理</a></p>\n<h2 id=\"4-使用webpack开发时，你用过哪些可以提高效率的插件？\"><a href=\"#4-使用webpack开发时，你用过哪些可以提高效率的插件？\" class=\"headerlink\" title=\"4.使用webpack开发时，你用过哪些可以提高效率的插件？\"></a>4.使用webpack开发时，你用过哪些可以提高效率的插件？</h2><p>(这道题还蛮注重实际，用户的体验还是要从小抓起的)</p>\n<ul>\n<li><code>webpack-dashboard</code>：可以更友好的展示相关打包信息。</li>\n<li><code>webpack-merge</code>：提取公共配置，减少重复配置代码</li>\n<li><code>speed-measure-webpack-plugin</code>：简称 SMP，分析出 Webpack 打包过程中 Loader 和 Plugin 的耗时，有助于找到构建过程中的性能瓶颈。</li>\n<li><code>size-plugin</code>：监控资源体积变化，尽早发现问题</li>\n<li><code>HotModuleReplacementPlugin</code>：模块热替换</li>\n</ul>\n<h2 id=\"5-source-map是什么？生产环境怎么用？\"><a href=\"#5-source-map是什么？生产环境怎么用？\" class=\"headerlink\" title=\"5.source map是什么？生产环境怎么用？\"></a>5.source map是什么？生产环境怎么用？</h2><p><code>source map</code> 是将编译、打包、压缩后的代码映射回源代码的过程。打包压缩后的代码不具备良好的可读性，想要调试源码就需要 soucre map。</p>\n<p>map文件只要不打开开发者工具，浏览器是不会加载的。</p>\n<p>线上环境一般有三种处理方案：</p>\n<ul>\n<li><code>hidden-source-map</code>：借助第三方错误监控平台 Sentry 使用</li>\n<li><code>nosources-source-map</code>：只会显示具体行数以及查看源代码的错误栈。安全性比 sourcemap 高</li>\n<li><code>sourcemap</code>：通过 nginx 设置将 .map 文件只对白名单开放(公司内网)</li>\n</ul>\n<p>注意：避免在生产中使用 <code>inline-</code> 和 <code>eval-</code>，因为它们会增加 bundle 体积大小，并降低整体性能。</p>\n<h2 id=\"6-模块打包原理知道吗？\"><a href=\"#6-模块打包原理知道吗？\" class=\"headerlink\" title=\"6.模块打包原理知道吗？\"></a>6.模块打包原理知道吗？</h2><p>Webpack 实际上为每个模块创造了一个可以导出和导入的环境，本质上并没有修改 代码的执行逻辑，代码执行顺序与模块加载顺序也完全一致。</p>\n<h2 id=\"7-文件监听原理呢？\"><a href=\"#7-文件监听原理呢？\" class=\"headerlink\" title=\"7.文件监听原理呢？\"></a>7.文件监听原理呢？</h2><p>在发现源码发生变化时，自动重新构建出新的输出文件。</p>\n<p>Webpack开启监听模式，有两种方式：</p>\n<ul>\n<li>启动 webpack 命令时，带上 –watch 参数</li>\n<li>在配置 webpack.config.js 中设置 watch:true</li>\n</ul>\n<p>缺点：每次需要手动刷新浏览器</p>\n<p>原理：轮询判断文件的最后编辑时间是否变化，如果某个文件发生了变化，并不会立刻告诉监听者，而是先缓存起来，等 <code>aggregateTimeout</code> 后再执行。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">module.export &#x3D; &#123;\n    &#x2F;&#x2F; 默认false,也就是不开启\n    watch: true,\n    &#x2F;&#x2F; 只有开启监听模式时，watchOptions才有意义\n    watchOptions: &#123;\n        &#x2F;&#x2F; 默认为空，不监听的文件或者文件夹，支持正则匹配\n        ignored: &#x2F;node_modules&#x2F;,\n        &#x2F;&#x2F; 监听到变化发生后会等300ms再去执行，默认300ms\n        aggregateTimeout:300,\n        &#x2F;&#x2F; 判断文件是否发生变化是通过不停询问系统指定文件有没有变化实现的，默认每秒问1000次\n        poll:1000\n    &#125;\n&#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"8-说一下-Webpack-的热更新原理吧\"><a href=\"#8-说一下-Webpack-的热更新原理吧\" class=\"headerlink\" title=\"8.说一下 Webpack 的热更新原理吧\"></a>8.说一下 Webpack 的热更新原理吧</h2><p>(敲黑板，这道题必考)</p>\n<p><code>Webpack</code> 的热更新又称热替换（<code>Hot Module Replacement</code>），缩写为 <code>HMR</code>。 这个机制可以做到不用刷新浏览器而将新变更的模块替换掉旧的模块。</p>\n<p>HMR的核心就是客户端从服务端拉去更新后的文件，准确的说是 chunk diff (chunk 需要更新的部分)，实际上 WDS 与浏览器之间维护了一个 <code>Websocket</code>，当本地资源发生变化时，WDS 会向浏览器推送更新，并带上构建时的 hash，让客户端与上一次资源进行对比。客户端对比出差异后会向 WDS 发起 <code>Ajax</code> 请求来获取更改内容(文件列表、hash)，这样客户端就可以再借助这些信息继续向 WDS 发起 <code>jsonp</code> 请求获取该chunk的增量更新。</p>\n<p>后续的部分(拿到增量更新之后如何处理？哪些状态该保留？哪些又需要更新？)由 <code>HotModulePlugin</code> 来完成，提供了相关 API 以供开发者针对自身场景进行处理，像<code>react-hot-loader</code> 和 <code>vue-loader</code> 都是借助这些 API 实现 HMR。</p>\n<p>细节请参考<a href=\"https://link.juejin.cn/?target=https://zhuanlan.zhihu.com/p/30669007\">Webpack HMR 原理解析</a></p>\n<p>(面试官：不错不错，小伙子表达能力不错)</p>\n<p>(基操，勿6)</p>\n<h2 id=\"9-如何对bundle体积进行监控和分析？\"><a href=\"#9-如何对bundle体积进行监控和分析？\" class=\"headerlink\" title=\"9.如何对bundle体积进行监控和分析？\"></a>9.如何对bundle体积进行监控和分析？</h2><p><code>VSCode</code> 中有一个插件 <code>Import Cost</code> 可以帮助我们对引入模块的大小进行实时监测，还可以使用 <code>webpack-bundle-analyzer</code> 生成 <code>bundle</code> 的模块组成图，显示所占体积。</p>\n<p><code>bundlesize</code> 工具包可以进行自动化资源体积监控。</p>\n<h2 id=\"10-文件指纹是什么？怎么用？\"><a href=\"#10-文件指纹是什么？怎么用？\" class=\"headerlink\" title=\"10.文件指纹是什么？怎么用？\"></a>10.文件指纹是什么？怎么用？</h2><p>文件指纹是打包后输出的文件名的后缀。</p>\n<ul>\n<li><code>Hash</code>：和整个项目的构建相关，只要项目文件有修改，整个项目构建的 hash 值就会更改</li>\n<li><code>Chunkhash</code>：和 Webpack 打包的 chunk 有关，不同的 entry 会生出不同的 chunkhash</li>\n<li><code>Contenthash</code>：根据文件内容来定义 hash，文件内容不变，则 contenthash 不变</li>\n</ul>\n<h3 id=\"JS的文件指纹设置\"><a href=\"#JS的文件指纹设置\" class=\"headerlink\" title=\"JS的文件指纹设置\"></a>JS的文件指纹设置</h3><p>设置 output 的 filename，用 chunkhash。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">module.exports &#x3D; &#123;\n    entry: &#123;\n        app: &#39;.&#x2F;scr&#x2F;app.js&#39;,\n        search: &#39;.&#x2F;src&#x2F;search.js&#39;\n    &#125;,\n    output: &#123;\n        filename: &#39;[name][chunkhash:8].js&#39;,\n        path:__dirname + &#39;&#x2F;dist&#39;\n    &#125;\n&#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"CSS的文件指纹设置\"><a href=\"#CSS的文件指纹设置\" class=\"headerlink\" title=\"CSS的文件指纹设置\"></a>CSS的文件指纹设置</h3><p>设置 MiniCssExtractPlugin 的 filename，使用 contenthash。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">module.exports &#x3D; &#123;\n    entry: &#123;\n        app: &#39;.&#x2F;scr&#x2F;app.js&#39;,\n        search: &#39;.&#x2F;src&#x2F;search.js&#39;\n    &#125;,\n    output: &#123;\n        filename: &#39;[name][chunkhash:8].js&#39;,\n        path:__dirname + &#39;&#x2F;dist&#39;\n    &#125;,\n    plugins:[\n        new MiniCssExtractPlugin(&#123;\n            filename: &#96;[name][contenthash:8].css&#96;\n        &#125;)\n    ]\n&#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"图片的文件指纹设置\"><a href=\"#图片的文件指纹设置\" class=\"headerlink\" title=\"图片的文件指纹设置\"></a>图片的文件指纹设置</h3><p>设置file-loader的name，使用hash。</p>\n<p>占位符名称及含义</p>\n<ul>\n<li>ext     资源后缀名</li>\n<li>name    文件名称</li>\n<li>path    文件的相对路径</li>\n<li>folder  文件所在的文件夹</li>\n<li>contenthash   文件的内容hash，默认是md5生成</li>\n<li>hash         文件内容的hash，默认是md5生成</li>\n<li>emoji        一个随机的指代文件内容的emoj</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const path &#x3D; require(&#39;path&#39;);\n\nmodule.exports &#x3D; &#123;\n    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,\n    output: &#123;\n        filename:&#39;bundle.js&#39;,\n        path:path.resolve(__dirname, &#39;dist&#39;)\n    &#125;,\n    module:&#123;\n        rules:[&#123;\n            test:&#x2F;\\.(png|svg|jpg|gif)$&#x2F;,\n            use:[&#123;\n                loader:&#39;file-loader&#39;,\n                options:&#123;\n                    name:&#39;img&#x2F;[name][hash:8].[ext]&#39;\n                &#125;\n            &#125;]\n        &#125;]\n    &#125;\n&#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"11-在实际工程中，配置文件上百行乃是常事，如何保证各个loader按照预想方式工作？\"><a href=\"#11-在实际工程中，配置文件上百行乃是常事，如何保证各个loader按照预想方式工作？\" class=\"headerlink\" title=\"11.在实际工程中，配置文件上百行乃是常事，如何保证各个loader按照预想方式工作？\"></a>11.在实际工程中，配置文件上百行乃是常事，如何保证各个loader按照预想方式工作？</h2><p>可以使用 <code>enforce</code> 强制执行 <code>loader</code> 的作用顺序，<code>pre</code> 代表在所有正常 loader 之前执行，<code>post</code> 是所有 loader 之后执行。(inline 官方不推荐使用)</p>\n<h2 id=\"12-如何优化-Webpack-的构建速度？\"><a href=\"#12-如何优化-Webpack-的构建速度？\" class=\"headerlink\" title=\"12.如何优化 Webpack 的构建速度？\"></a>12.如何优化 Webpack 的构建速度？</h2><p>(这个问题就像能不能说一说<strong>「从URL输入到页面显示发生了什么」</strong>一样）</p>\n<p>(我只想说：您希望我讲多长时间呢？)</p>\n<p>(面试官：。。。)</p>\n<ul>\n<li>使用<code>高版本</code>的 Webpack 和 Node.js</li>\n<li><code>多进程/多实例构建</code>：HappyPack(不维护了)、thread-loader</li>\n<li><code>压缩代码</code><ul>\n<li>多进程并行压缩<ul>\n<li>webpack-paralle-uglify-plugin</li>\n<li>uglifyjs-webpack-plugin 开启 parallel 参数 (不支持ES6)</li>\n<li>terser-webpack-plugin 开启 parallel 参数</li>\n</ul>\n</li>\n<li>通过 mini-css-extract-plugin 提取 Chunk 中的 CSS 代码到单独文件，通过 css-loader 的 minimize 选项开启 cssnano 压缩 CSS。</li>\n</ul>\n</li>\n<li><code>图片压缩</code><ul>\n<li>使用基于 Node 库的 imagemin (很多定制选项、可以处理多种图片格式)</li>\n<li>配置 image-webpack-loader</li>\n</ul>\n</li>\n<li><code>缩小打包作用域</code>：<ul>\n<li>exclude/include (确定 loader 规则范围)</li>\n<li>resolve.modules 指明第三方模块的绝对路径 (减少不必要的查找)</li>\n<li>resolve.mainFields 只采用 main 字段作为入口文件描述字段 (减少搜索步骤，需要考虑到所有运行时依赖的第三方模块的入口文件描述字段)</li>\n<li>resolve.extensions 尽可能减少后缀尝试的可能性</li>\n<li>noParse 对完全不需要解析的库进行忽略 (不去解析但仍会打包到 bundle 中，注意被忽略掉的文件里不应该包含 import、require、define 等模块化语句)</li>\n<li>IgnorePlugin (完全排除模块)</li>\n<li>合理使用alias</li>\n</ul>\n</li>\n<li><code>提取页面公共资源</code>：<ul>\n<li>基础包分离：<ul>\n<li>使用 html-webpack-externals-plugin，将基础包通过 CDN 引入，不打入 bundle 中</li>\n<li>使用 SplitChunksPlugin 进行(公共脚本、基础包、页面公共文件)分离(Webpack4内置) ，替代了 CommonsChunkPlugin 插件</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>DLL</code>：<ul>\n<li>使用 DllPlugin 进行分包，使用 DllReferencePlugin(索引链接) 对 manifest.json 引用，让一些基本不会改动的代码先打包成静态资源，避免反复编译浪费时间。</li>\n<li>HashedModuleIdsPlugin 可以解决模块数字id问题</li>\n</ul>\n</li>\n<li><code>充分利用缓存提升二次构建速度</code>：<ul>\n<li>babel-loader 开启缓存</li>\n<li>terser-webpack-plugin 开启缓存</li>\n<li>使用 cache-loader 或者 hard-source-webpack-plugin</li>\n</ul>\n</li>\n<li><code>Tree shaking</code><ul>\n<li>打包过程中检测工程中没有引用过的模块并进行标记，在资源压缩时将它们从最终的bundle中去掉(只能对ES6 Modlue生效) 开发中尽可能使用ES6 Module的模块，提高tree shaking效率</li>\n<li>禁用 babel-loader 的模块依赖解析，否则 Webpack 接收到的就都是转换过的 CommonJS 形式的模块，无法进行 tree-shaking</li>\n<li>使用 PurifyCSS(不在维护) 或者 uncss 去除无用 CSS 代码<ul>\n<li>purgecss-webpack-plugin 和 mini-css-extract-plugin配合使用(建议)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>Scope hoisting</code><ul>\n<li>构建后的代码会存在大量闭包，造成体积增大，运行代码时创建的函数作用域变多，内存开销变大。Scope hoisting 将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量以防止变量名冲突</li>\n<li>必须是ES6的语法，因为有很多第三方库仍采用 CommonJS 语法，为了充分发挥 Scope hoisting 的作用，需要配置 mainFields 对第三方模块优先采用 jsnext:main 中指向的ES6模块化语法</li>\n</ul>\n</li>\n<li><code>动态Polyfill</code><ul>\n<li>建议采用 polyfill-service 只给用户返回需要的polyfill，社区维护。 (部分国内奇葩浏览器UA可能无法识别，但可以降级返回所需全部polyfill)</li>\n</ul>\n</li>\n</ul>\n<p>更多优化请参考<a href=\"https://link.juejin.cn/?target=https://www.webpackjs.com/guides/build-performance/\">官网-构建性能</a></p>\n<h2 id=\"13-你刚才也提到了代码分割，那代码分割的本质是什么？有什么意义呢？\"><a href=\"#13-你刚才也提到了代码分割，那代码分割的本质是什么？有什么意义呢？\" class=\"headerlink\" title=\"13.你刚才也提到了代码分割，那代码分割的本质是什么？有什么意义呢？\"></a>13.你刚才也提到了代码分割，那代码分割的本质是什么？有什么意义呢？</h2><p>代码分割的本质其实就是在<code>源代码直接上线</code>和<code>打包成唯一脚本main.bundle.js</code>这两种极端方案之间的一种更适合实际场景的中间状态。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">阿卡丽：荣耀剑下取，均衡乱中求<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>「用可接受的服务器性能压力增加来换取更好的用户体验。」</strong></p>\n<p>源代码直接上线：虽然过程可控，但是http请求多，性能开销大。</p>\n<p>打包成唯一脚本：一把梭完自己爽，服务器压力小，但是页面空白期长，用户体验不好。</p>\n<p>(Easy peezy right)</p>\n<h2 id=\"14-是否写过Loader？简单描述一下编写loader的思路？\"><a href=\"#14-是否写过Loader？简单描述一下编写loader的思路？\" class=\"headerlink\" title=\"14.是否写过Loader？简单描述一下编写loader的思路？\"></a>14.是否写过Loader？简单描述一下编写loader的思路？</h2><p>Loader 支持链式调用，所以开发上需要严格遵循“单一职责”，每个 Loader 只负责自己需要负责的事情。</p>\n<p><a href=\"https://link.juejin.cn/?target=https://www.webpackjs.com/api/loaders/\">Loader的API</a> 可以去官网查阅</p>\n<ul>\n<li>Loader 运行在 Node.js 中，我们可以调用任意 Node.js 自带的 API 或者安装第三方模块进行调用</li>\n<li>Webpack 传给 Loader 的原内容都是 UTF-8 格式编码的字符串，当某些场景下 Loader 处理二进制文件时，需要通过 exports.raw = true 告诉 Webpack 该 Loader 是否需要二进制数据</li>\n<li>尽可能的异步化 Loader，如果计算量很小，同步也可以</li>\n<li>Loader 是无状态的，我们不应该在 Loader 中保留状态</li>\n<li>使用 loader-utils 和 schema-utils 为我们提供的实用工具</li>\n<li>加载本地 Loader 方法<ul>\n<li>Npm link</li>\n<li>ResolveLoader</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"15-是否写过Plugin？简单描述一下编写Plugin的思路？\"><a href=\"#15-是否写过Plugin？简单描述一下编写Plugin的思路？\" class=\"headerlink\" title=\"15.是否写过Plugin？简单描述一下编写Plugin的思路？\"></a>15.是否写过Plugin？简单描述一下编写Plugin的思路？</h2><p>webpack在运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在特定的阶段钩入想要添加的自定义功能。Webpack 的 Tapable 事件流机制保证了插件的有序性，使得整个系统扩展性良好。</p>\n<p><a href=\"https://link.juejin.cn/?target=https://www.webpackjs.com/api/plugins/\">Plugin的API</a> 可以去官网查阅</p>\n<ul>\n<li>compiler 暴露了和 Webpack 整个生命周期相关的钩子</li>\n<li>compilation 暴露了与模块和依赖有关的粒度更小的事件钩子</li>\n<li>插件需要在其原型上绑定apply方法，才能访问 compiler 实例</li>\n<li>传给每个插件的 compiler 和 compilation对象都是同一个引用，若在一个插件中修改了它们身上的属性，会影响后面的插件</li>\n<li>找出合适的事件点去完成想要的功能<ul>\n<li>emit 事件发生时，可以读取到最终输出的资源、代码块、模块及其依赖，并进行修改(emit 事件是修改 Webpack 输出资源的最后时机)</li>\n<li>watch-run 当依赖的文件发生变化时会触发</li>\n</ul>\n</li>\n<li>异步的事件需要在插件处理完任务时调用回调函数通知 Webpack 进入下一个流程，不然会卡住</li>\n</ul>\n<h2 id=\"16-聊一聊Babel原理吧\"><a href=\"#16-聊一聊Babel原理吧\" class=\"headerlink\" title=\"16.聊一聊Babel原理吧\"></a>16.聊一聊Babel原理吧</h2><p>大多数JavaScript Parser遵循 <code>estree</code> 规范，Babel 最初基于 <code>acorn</code> 项目(轻量级现代 JavaScript 解析器) Babel大概分为三大部分：</p>\n<ul>\n<li>解析：将代码转换成 AST<ul>\n<li>词法分析：将代码(字符串)分割为token流，即语法单元成的数组</li>\n<li>语法分析：分析token流(上面生成的数组)并生成 AST</li>\n</ul>\n</li>\n<li>转换：访问 AST 的节点进行变换操作生产新的 AST<ul>\n<li><a href=\"https://link.juejin.cn/?target=https://github.com/NervJS/taro/blob/master/packages/taro-transformer-wx/src/index.ts%23L15\">Taro</a>就是利用 babel 完成的小程序语法转换</li>\n</ul>\n</li>\n<li>生成：以新的 AST 为基础生成代码</li>\n</ul>\n","text":"0.有哪些常见的Loader？你用过哪些Loader？(我开始熟悉的报起了菜名) raw-loader：加载文件原始内容（utf-8） file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件 (处理图片和字体) url-loader：与 fi...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"知识点","slug":"知识点","count":18,"path":"api/categories/知识点.json"}],"tags":[{"name":"面试","slug":"面试","count":13,"path":"api/tags/面试.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0-%E6%9C%89%E5%93%AA%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84Loader%EF%BC%9F%E4%BD%A0%E7%94%A8%E8%BF%87%E5%93%AA%E4%BA%9BLoader%EF%BC%9F\"><span class=\"toc-text\">0.有哪些常见的Loader？你用过哪些Loader？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E6%9C%89%E5%93%AA%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84Plugin%EF%BC%9F%E4%BD%A0%E7%94%A8%E8%BF%87%E5%93%AA%E4%BA%9BPlugin%EF%BC%9F\"><span class=\"toc-text\">1.有哪些常见的Plugin？你用过哪些Plugin？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E9%82%A3%E4%BD%A0%E5%86%8D%E8%AF%B4%E4%B8%80%E8%AF%B4Loader%E5%92%8CPlugin%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">2.那你再说一说Loader和Plugin的区别？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-Webpack%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B%E7%AE%80%E5%8D%95%E8%AF%B4%E4%B8%80%E4%B8%8B\"><span class=\"toc-text\">3.Webpack构建流程简单说一下</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E4%BD%BF%E7%94%A8webpack%E5%BC%80%E5%8F%91%E6%97%B6%EF%BC%8C%E4%BD%A0%E7%94%A8%E8%BF%87%E5%93%AA%E4%BA%9B%E5%8F%AF%E4%BB%A5%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E7%9A%84%E6%8F%92%E4%BB%B6%EF%BC%9F\"><span class=\"toc-text\">4.使用webpack开发时，你用过哪些可以提高效率的插件？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-source-map%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E6%80%8E%E4%B9%88%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">5.source map是什么？生产环境怎么用？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E6%A8%A1%E5%9D%97%E6%89%93%E5%8C%85%E5%8E%9F%E7%90%86%E7%9F%A5%E9%81%93%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">6.模块打包原理知道吗？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-%E6%96%87%E4%BB%B6%E7%9B%91%E5%90%AC%E5%8E%9F%E7%90%86%E5%91%A2%EF%BC%9F\"><span class=\"toc-text\">7.文件监听原理呢？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-%E8%AF%B4%E4%B8%80%E4%B8%8B-Webpack-%E7%9A%84%E7%83%AD%E6%9B%B4%E6%96%B0%E5%8E%9F%E7%90%86%E5%90%A7\"><span class=\"toc-text\">8.说一下 Webpack 的热更新原理吧</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-%E5%A6%82%E4%BD%95%E5%AF%B9bundle%E4%BD%93%E7%A7%AF%E8%BF%9B%E8%A1%8C%E7%9B%91%E6%8E%A7%E5%92%8C%E5%88%86%E6%9E%90%EF%BC%9F\"><span class=\"toc-text\">9.如何对bundle体积进行监控和分析？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-%E6%96%87%E4%BB%B6%E6%8C%87%E7%BA%B9%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E6%80%8E%E4%B9%88%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">10.文件指纹是什么？怎么用？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JS%E7%9A%84%E6%96%87%E4%BB%B6%E6%8C%87%E7%BA%B9%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">JS的文件指纹设置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CSS%E7%9A%84%E6%96%87%E4%BB%B6%E6%8C%87%E7%BA%B9%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">CSS的文件指纹设置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%87%E4%BB%B6%E6%8C%87%E7%BA%B9%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">图片的文件指纹设置</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-%E5%9C%A8%E5%AE%9E%E9%99%85%E5%B7%A5%E7%A8%8B%E4%B8%AD%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%8A%E7%99%BE%E8%A1%8C%E4%B9%83%E6%98%AF%E5%B8%B8%E4%BA%8B%EF%BC%8C%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%90%84%E4%B8%AAloader%E6%8C%89%E7%85%A7%E9%A2%84%E6%83%B3%E6%96%B9%E5%BC%8F%E5%B7%A5%E4%BD%9C%EF%BC%9F\"><span class=\"toc-text\">11.在实际工程中，配置文件上百行乃是常事，如何保证各个loader按照预想方式工作？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96-Webpack-%E7%9A%84%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6%EF%BC%9F\"><span class=\"toc-text\">12.如何优化 Webpack 的构建速度？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#13-%E4%BD%A0%E5%88%9A%E6%89%8D%E4%B9%9F%E6%8F%90%E5%88%B0%E4%BA%86%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2%EF%BC%8C%E9%82%A3%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2%E7%9A%84%E6%9C%AC%E8%B4%A8%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E6%9C%89%E4%BB%80%E4%B9%88%E6%84%8F%E4%B9%89%E5%91%A2%EF%BC%9F\"><span class=\"toc-text\">13.你刚才也提到了代码分割，那代码分割的本质是什么？有什么意义呢？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#14-%E6%98%AF%E5%90%A6%E5%86%99%E8%BF%87Loader%EF%BC%9F%E7%AE%80%E5%8D%95%E6%8F%8F%E8%BF%B0%E4%B8%80%E4%B8%8B%E7%BC%96%E5%86%99loader%E7%9A%84%E6%80%9D%E8%B7%AF%EF%BC%9F\"><span class=\"toc-text\">14.是否写过Loader？简单描述一下编写loader的思路？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#15-%E6%98%AF%E5%90%A6%E5%86%99%E8%BF%87Plugin%EF%BC%9F%E7%AE%80%E5%8D%95%E6%8F%8F%E8%BF%B0%E4%B8%80%E4%B8%8B%E7%BC%96%E5%86%99Plugin%E7%9A%84%E6%80%9D%E8%B7%AF%EF%BC%9F\"><span class=\"toc-text\">15.是否写过Plugin？简单描述一下编写Plugin的思路？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#16-%E8%81%8A%E4%B8%80%E8%81%8ABabel%E5%8E%9F%E7%90%86%E5%90%A7\"><span class=\"toc-text\">16.聊一聊Babel原理吧</span></a></li></ol>","author":{"name":"LIYUNFU","slug":"blog-author","avatar":"https://p26-passport.byteacctimg.com/img/user-avatar/c52fbf24fbba8a052c8dd93e8b978eac~300x300.image","link":"/","description":"一个正在重塑知识的切图仔 <br /> @ <b>公众号:伯nulee</b>","socials":{"github":"https://gitee.com/LUNIONT","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/2277843824292183","customs":{}}},"mapped":true,"prev_post":{"title":"NodeJS面试题","uid":"1978ad52226e2e5a45738891b7ab43e0","slug":"NodeJS面试题","date":"2022-04-10T12:25:21.000Z","updated":"2022-04-10T12:25:44.030Z","comments":true,"path":"api/articles/NodeJS面试题.json","keywords":null,"cover":[],"text":"1、Node模块机制1.1 请介绍一下node里的模块是什么Node中，每个文件模块都是一个对象，它的定义如下： function Module(id, parent) &#123; this.id &#x3D; id; this.exports &#x3D; &#123;&#1...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"知识点","slug":"知识点","count":18,"path":"api/categories/知识点.json"}],"tags":[{"name":"面试","slug":"面试","count":13,"path":"api/tags/面试.json"}],"author":{"name":"LIYUNFU","slug":"blog-author","avatar":"https://p26-passport.byteacctimg.com/img/user-avatar/c52fbf24fbba8a052c8dd93e8b978eac~300x300.image","link":"/","description":"一个正在重塑知识的切图仔 <br /> @ <b>公众号:伯nulee</b>","socials":{"github":"https://gitee.com/LUNIONT","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/2277843824292183","customs":{}}}},"next_post":{"title":"代码输出题","uid":"8f40b8c169f1805e005d621691667888","slug":"代码输出题","date":"2022-04-10T12:23:34.000Z","updated":"2022-04-10T12:23:59.389Z","comments":true,"path":"api/articles/代码输出题.json","keywords":null,"cover":[],"text":"一、异步&amp;事件循环1. 代码输出结果const promise = new Promise((resolve, reject) => &#123; console.log(1); console.log(2); &#125;); promise.then(() => &#...","link":"","photos":[],"count_time":{"symbolsCount":"38k","symbolsTime":"34 mins."},"categories":[{"name":"知识点","slug":"知识点","count":18,"path":"api/categories/知识点.json"}],"tags":[{"name":"面试","slug":"面试","count":13,"path":"api/tags/面试.json"}],"author":{"name":"LIYUNFU","slug":"blog-author","avatar":"https://p26-passport.byteacctimg.com/img/user-avatar/c52fbf24fbba8a052c8dd93e8b978eac~300x300.image","link":"/","description":"一个正在重塑知识的切图仔 <br /> @ <b>公众号:伯nulee</b>","socials":{"github":"https://gitee.com/LUNIONT","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/2277843824292183","customs":{}}}}}