{"title":"HTML-CSS面试题","uid":"ed3b51444b604120b43f719995ea1a51","slug":"HTML-CSS面试题","date":"2022-04-10T12:17:02.000Z","updated":"2022-04-10T12:19:06.115Z","comments":true,"path":"api/articles/HTML-CSS面试题.json","keywords":null,"cover":[],"content":"<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><h3 id=\"1-src和href的区别\"><a href=\"#1-src和href的区别\" class=\"headerlink\" title=\"1. src和href的区别\"></a>1. src和href的区别</h3><p>src和href都是<strong>用来引用外部的资源</strong>，它们的区别如下：</p>\n<ul>\n<li><strong>src：</strong> 表示对资源的引用，它指向的内容会嵌入到当前标签所在的位置。src会将其指向的资源下载并应⽤到⽂档内，如请求js脚本。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执⾏完毕，所以⼀般js脚本会放在页面底部。</li>\n<li><strong>href：</strong> 表示超文本引用，它指向一些网络资源，建立和当前元素或本文档的链接关系。当浏览器识别到它他指向的⽂件时，就会并⾏下载资源，不会停⽌对当前⽂档的处理。 常用在a、link等标签上。</li>\n</ul>\n<h3 id=\"2-对HTML语义化的理解\"><a href=\"#2-对HTML语义化的理解\" class=\"headerlink\" title=\"2. 对HTML语义化的理解\"></a>2. 对HTML语义化的理解</h3><p><strong>语义化是指根据内容的结构化（内容语义化），选择合适的标签（代码语义化）</strong>。通俗来讲就是用正确的标签做正确的事情。</p>\n<p>语义化的优点如下：</p>\n<ul>\n<li>对机器友好，带有语义的文字表现力丰富，更适合搜索引擎的爬虫爬取有效信息，有利于SEO。除此之外，语义类还支持读屏软件，根据文章可以自动生成目录；</li>\n<li>对开发者友好，使用语义类标签增强了可读性，结构更加清晰，开发者能清晰的看出网页的结构，便于团队的开发与维护。</li>\n</ul>\n<p>常见的语义化标签：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span>  头部\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nav</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nav</span><span class=\"token punctuation\">></span></span>  导航栏\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span>  区块（有语义化的div）\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">></span></span>  主要区域\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>article</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>article</span><span class=\"token punctuation\">></span></span>  主要内容\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>aside</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>aside</span><span class=\"token punctuation\">></span></span>  侧边栏\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>footer</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>footer</span><span class=\"token punctuation\">></span></span>  底部\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-DOCTYPE-⽂档类型-的作⽤\"><a href=\"#3-DOCTYPE-⽂档类型-的作⽤\" class=\"headerlink\" title=\"3. DOCTYPE(⽂档类型) 的作⽤\"></a>3. DOCTYPE(⽂档类型) 的作⽤</h3><p>DOCTYPE是HTML5中一种标准通用标记语言的文档类型声明，它的目的是<strong>告诉浏览器（解析器）应该以什么样（html或xhtml）的文档类型定义来解析文档</strong>，不同的渲染模式会影响浏览器对 CSS 代码甚⾄ JavaScript 脚本的解析。它必须声明在HTML⽂档的第⼀⾏。</p>\n<p>浏览器渲染页面的两种模式（可通过document.compatMode获取，比如，语雀官网的文档类型是<strong>CSS1Compat</strong>）：</p>\n<ul>\n<li><strong>CSS1Compat：标准模式（Strick mode）</strong>，默认模式，浏览器使用W3C的标准解析渲染页面。在标准模式中，浏览器以其支持的最高标准呈现页面。</li>\n<li>**BackCompat：怪异模式(混杂模式)(Quick mode)**，浏览器使用自己的怪异模式解析渲染页面。在怪异模式中，页面以一种比较宽松的向后兼容的方式显示。</li>\n</ul>\n<h3 id=\"4-script标签中defer和async的区别\"><a href=\"#4-script标签中defer和async的区别\" class=\"headerlink\" title=\"4. script标签中defer和async的区别\"></a>4. script标签中defer和async的区别</h3><p>如果没有defer或async属性，浏览器会立即加载并执行相应的脚本。它不会等待后续加载的文档元素，读取到就会开始加载和执行，这样就阻塞了后续文档的加载。</p>\n<p>下图可以直观的看出三者之间的区别: <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0a8a139519f46dfa2d1992c58eb5397~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"image.png\"> 其中蓝色代表js脚本网络加载时间，红色代表js脚本执行时间，绿色代表html解析。</p>\n<p><strong>defer 和 async属性都是去异步加载外部的JS脚本文件，它们都不会阻塞页面的解析</strong>，其区别如下：</p>\n<ul>\n<li><strong>执行顺序：</strong> 多个带async属性的标签，不能保证加载的顺序；多个带defer属性的标签，按照加载顺序执行；</li>\n<li>**脚本是否并行执行：**async属性，表示**后续文档的加载和执行与js脚本的加载和执行是并行进行的**，即异步执行；defer属性，加载后续文档的过程和js脚本的加载(此时仅加载不执行)是并行进行的(异步)，js脚本需要等到文档所有元素解析完成之后才执行，DOMContentLoaded事件触发执行之前。</li>\n</ul>\n<h3 id=\"5-常⽤的meta标签有哪些\"><a href=\"#5-常⽤的meta标签有哪些\" class=\"headerlink\" title=\"5. 常⽤的meta标签有哪些\"></a>5. 常⽤的meta标签有哪些</h3><p><code>meta</code> 标签由 <code>name</code> 和 <code>content</code> 属性定义，<strong>用来描述网页文档的属性</strong>，比如网页的作者，网页描述，关键词等，除了HTTP标准固定了一些<code>name</code>作为大家使用的共识，开发者还可以自定义name。</p>\n<p>常用的meta标签： （1）<code>charset</code>，用来描述HTML文档的编码类型：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>（2） <code>keywords</code>，页面关键词：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>keywords<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>关键词<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>（3）<code>description</code>，页面描述：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>页面描述内容<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>（4）<code>refresh</code>，页面重定向和刷新：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>refresh<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0;url=<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>（5）<code>viewport</code>，适配移动端，可以控制视口的大小和比例：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1, maximum-scale=1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>其中，<code>content</code> 参数有以下几种：</p>\n<ul>\n<li><code>width viewport</code> ：宽度(数值/device-width)</li>\n<li><code>height viewport</code> ：高度(数值/device-height)</li>\n<li><code>initial-scale</code> ：初始缩放比例</li>\n<li><code>maximum-scale</code> ：最大缩放比例</li>\n<li><code>minimum-scale</code> ：最小缩放比例</li>\n<li><code>user-scalable</code> ：是否允许用户缩放(yes/no）</li>\n</ul>\n<p>（6）搜索引擎索引方式：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>robots<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index,follow<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>其中，<code>content</code> 参数有以下几种：</p>\n<ul>\n<li><code>all</code>：文件将被检索，且页面上的链接可以被查询；</li>\n<li><code>none</code>：文件将不被检索，且页面上的链接不可以被查询；</li>\n<li><code>index</code>：文件将被检索；</li>\n<li><code>follow</code>：页面上的链接可以被查询；</li>\n<li><code>noindex</code>：文件将不被检索；</li>\n<li><code>nofollow</code>：页面上的链接不可以被查询。</li>\n</ul>\n<h3 id=\"6-HTML5有哪些更新\"><a href=\"#6-HTML5有哪些更新\" class=\"headerlink\" title=\"6. HTML5有哪些更新\"></a>6. HTML5有哪些更新</h3><h4 id=\"1-语义化标签\"><a href=\"#1-语义化标签\" class=\"headerlink\" title=\"1. 语义化标签\"></a>1. 语义化标签</h4><ul>\n<li>header：定义文档的页眉（头部）；</li>\n<li>nav：定义导航链接的部分；</li>\n<li>footer：定义文档或节的页脚（底部）；</li>\n<li>article：定义文章内容；</li>\n<li>section：定义文档中的节（section、区段）；</li>\n<li>aside：定义其所处内容之外的内容（侧边）；</li>\n</ul>\n<h4 id=\"2-媒体标签\"><a href=\"#2-媒体标签\" class=\"headerlink\" title=\"2. 媒体标签\"></a>2. 媒体标签</h4><p>（1） audio：音频</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>audio</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">controls</span> <span class=\"token attr-name\">autoplay</span> <span class=\"token attr-name\">loop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>true<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>audio</span><span class=\"token punctuation\">></span></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>属性：</p>\n<ul>\n<li>controls 控制面板</li>\n<li>autoplay 自动播放</li>\n<li>loop=‘true’ 循环播放</li>\n</ul>\n<p>（2）video视频</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">poster</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>imgs/aa.jpg<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">controls</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">></span></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>属性：</p>\n<ul>\n<li>poster：指定视频还没有完全下载完毕，或者用户还没有点击播放前显示的封面。默认显示当前视频文件的第一针画面，当然通过poster也可以自己指定。</li>\n<li>controls 控制面板</li>\n<li>width</li>\n<li>height</li>\n</ul>\n<p>（3）source标签 因为浏览器对视频格式支持程度不一样，为了能够兼容不同的浏览器，可以通过source来指定视频源。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span><span class=\"token punctuation\">></span></span>\n \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>aa.flv<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>video/flv<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>source</span><span class=\"token punctuation\">></span></span>\n \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>aa.mp4<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>video/mp4<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>source</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">></span></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-表单\"><a href=\"#3-表单\" class=\"headerlink\" title=\"3. 表单\"></a>3. 表单</h4><p><strong>表单类型：</strong></p>\n<ul>\n<li>email ：能够验证当前输入的邮箱地址是否合法</li>\n<li>url ： 验证URL</li>\n<li>number ： 只能输入数字，其他输入不了，而且自带上下增大减小箭头，max属性可以设置为最大值，min可以设置为最小值，value为默认值。</li>\n<li>search ： 输入框后面会给提供一个小叉，可以删除输入的内容，更加人性化。</li>\n<li>range ： 可以提供给一个范围，其中可以设置max和min以及value，其中value属性可以设置为默认值</li>\n<li>color ： 提供了一个颜色拾取器</li>\n<li>time ： 时分秒</li>\n<li>data ： 日期选择年月日</li>\n<li>datatime ： 时间和日期(目前只有Safari支持)</li>\n<li>datatime-local ：日期时间控件</li>\n<li>week ：周控件</li>\n<li>month：月控件</li>\n</ul>\n<p><strong>表单属性：</strong></p>\n<ul>\n<li>placeholder ：提示信息</li>\n<li>autofocus ：自动获取焦点</li>\n<li>autocomplete=“on” 或者 autocomplete=“off” 使用这个属性需要有两个前提：<ul>\n<li>表单必须提交过</li>\n<li>必须有name属性。</li>\n</ul>\n</li>\n<li>required：要求输入框不能为空，必须有值才能够提交。</li>\n<li>pattern=” “ 里面写入想要的正则模式，例如手机号patte=”^(+86)?\\d{10}$”</li>\n<li>multiple：可以选择多个文件或者多个邮箱</li>\n<li>form=” form表单的ID”</li>\n</ul>\n<p><strong>表单事件：</strong></p>\n<ul>\n<li>oninput 每当input里的输入框内容发生变化都会触发此事件。</li>\n<li>oninvalid 当验证不通过时触发此事件。</li>\n</ul>\n<h4 id=\"4-进度条、度量器\"><a href=\"#4-进度条、度量器\" class=\"headerlink\" title=\"4. 进度条、度量器\"></a>4. 进度条、度量器</h4><ul>\n<li>progress标签：用来表示任务的进度（IE、Safari不支持），max用来表示任务的进度，value表示已完成多少</li>\n<li>meter属性：用来显示剩余容量或剩余库存（IE、Safari不支持）<ul>\n<li>high/low：规定被视作高/低的范围</li>\n<li>max/min：规定最大/小值</li>\n<li>value：规定当前度量值</li>\n</ul>\n</li>\n</ul>\n<p>设置规则：min &lt; low &lt; high &lt; max</p>\n<h4 id=\"5-DOM查询操作\"><a href=\"#5-DOM查询操作\" class=\"headerlink\" title=\"5.DOM查询操作\"></a>5.DOM查询操作</h4><ul>\n<li>document.querySelector()</li>\n<li>document.querySelectorAll()</li>\n</ul>\n<p>它们选择的对象可以是标签，可以是类(需要加点)，可以是ID(需要加#)</p>\n<h4 id=\"6-Web存储\"><a href=\"#6-Web存储\" class=\"headerlink\" title=\"6. Web存储\"></a>6. Web存储</h4><p>HTML5 提供了两种在客户端存储数据的新方法：</p>\n<ul>\n<li>localStorage - 没有时间限制的数据存储</li>\n<li>sessionStorage - 针对一个 session 的数据存储</li>\n</ul>\n<h4 id=\"7-其他\"><a href=\"#7-其他\" class=\"headerlink\" title=\"7. 其他\"></a>7. 其他</h4><ul>\n<li>拖放：拖放是一种常见的特性，即抓取对象以后拖到另一个位置。设置元素可拖放：</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">draggable</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>画布（canvas ）： canvas 元素使用 JavaScript 在网页上绘制图像。画布是一个矩形区域，可以控制其每一像素。canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>canvas</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myCanvas<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>200<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>canvas</span><span class=\"token punctuation\">></span></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>SVG：SVG 指可伸缩矢量图形，用于定义用于网络的基于矢量的图形，使用 XML 格式定义图形，图像在放大或改变尺寸的情况下其图形质量不会有损失，它是万维网联盟的标准</li>\n<li>地理定位：Geolocation（地理定位）用于定位用户的位置。‘</li>\n</ul>\n<p><strong>总结：</strong> （1）新增语义化标签：nav、header、footer、aside、section、article （2）音频、视频标签：audio、video （3）数据存储：localStorage、sessionStorage （4）canvas（画布）、Geolocation（地理定位）、websocket（通信协议） （5）input标签新增属性：placeholder、autocomplete、autofocus、required （6）history API：go、forward、back、pushstate</p>\n<p><strong>移除的元素有：</strong></p>\n<ul>\n<li>纯表现的元素：basefont，big，center，font, s，strike，tt，u;</li>\n<li>对可用性产生负面影响的元素：frame，frameset，noframes；</li>\n</ul>\n<h3 id=\"7-img的srcset属性的作⽤？\"><a href=\"#7-img的srcset属性的作⽤？\" class=\"headerlink\" title=\"7. img的srcset属性的作⽤？\"></a>7. img的srcset属性的作⽤？</h3><p>响应式页面中经常用到根据屏幕密度设置不同的图片。这时就用到了 img 标签的srcset属性。srcset属性用于设置不同屏幕密度下，img 会自动加载不同的图片。用法如下：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image-128.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image-256.png 2x<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>使用上面的代码，就能实现在屏幕密度为1x的情况下加载image-128.png, 屏幕密度为2x时加载image-256.png。</p>\n<p>按照上面的实现，不同的屏幕密度都要设置图片地址，目前的屏幕密度有1x,2x,3x,4x四种，如果每一个图片都设置4张图片，加载就会很慢。所以就有了新的srcset标准。代码如下：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image-128.png<span class=\"token punctuation\">\"</span></span>\n     <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image-128.png 128w, image-256.png 256w, image-512.png 512w<span class=\"token punctuation\">\"</span></span>\n     <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(max-width: 360px) 340px, 128px<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中srcset指定图片的地址和对应的图片质量。sizes用来设置图片的尺寸零界点。对于 srcset 中的 w 单位，可以理解成图片质量。如果可视区域小于这个质量的值，就可以使用。浏览器会自动选择一个最小的可用图片。</p>\n<p>sizes语法如下：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">sizes=\"[media query] [length], [media query] [length] ... \"\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>sizes就是指默认显示128px, 如果视区宽度大于360px, 则显示340px。</p>\n<h3 id=\"8-行内元素有哪些？块级元素有哪些？-空-void-元素有那些？\"><a href=\"#8-行内元素有哪些？块级元素有哪些？-空-void-元素有那些？\" class=\"headerlink\" title=\"8.  行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？\"></a>8.  行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</h3><ul>\n<li>行内元素有：<code>a b span img input select strong</code>；</li>\n<li>块级元素有：<code>div ul ol li dl dt dd h1 h2 h3 h4 h5 h6 p</code>；</li>\n</ul>\n<p>空元素，即没有内容的HTML元素。空元素是在开始标签中关闭的，也就是空元素没有闭合标签：</p>\n<ul>\n<li>常见的有：<code>&lt;br&gt;</code>、<code>&lt;hr&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;meta&gt;</code>；</li>\n<li>鲜见的有：<code>&lt;area&gt;</code>、<code>&lt;base&gt;</code>、<code>&lt;col&gt;</code>、<code>&lt;colgroup&gt;</code>、<code>&lt;command&gt;</code>、<code>&lt;embed&gt;</code>、<code>&lt;keygen&gt;</code>、<code>&lt;param&gt;</code>、<code>&lt;source&gt;</code>、<code>&lt;track&gt;</code>、<code>&lt;wbr&gt;</code>。</li>\n</ul>\n<h3 id=\"9-说一下-web-worker\"><a href=\"#9-说一下-web-worker\" class=\"headerlink\" title=\"9. 说一下 web worker\"></a>9. 说一下 web worker</h3><p>在 HTML 页面中，如果在执行脚本时，页面的状态是不可相应的，直到脚本执行完成后，页面才变成可相应。web worker 是运行在后台的 js，独立于其他脚本，不会影响页面的性能。 并且通过 postMessage 将结果回传到主线程。这样在进行复杂操作的时候，就不会阻塞主线程了。</p>\n<p>如何创建 web worker：</p>\n<ol>\n<li>检测浏览器对于 web worker 的支持性</li>\n<li>创建 web worker 文件（js，回传函数等）</li>\n<li>创建 web worker 对象</li>\n</ol>\n<h3 id=\"10-HTML5的离线储存怎么使用，它的工作原理是什么\"><a href=\"#10-HTML5的离线储存怎么使用，它的工作原理是什么\" class=\"headerlink\" title=\"10. HTML5的离线储存怎么使用，它的工作原理是什么\"></a>10. HTML5的离线储存怎么使用，它的工作原理是什么</h3><p>离线存储指的是：在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。</p>\n<p><strong>原理：</strong>HTML5的离线存储是基于一个新建的 <code>.appcache</code> 文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示</p>\n<p><strong>使用方法：</strong> （1）创建一个和 html 同名的 manifest 文件，然后在页面头部加入 manifest 属性：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">manifest</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index.manifest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>（2）在 <code>cache.manifest</code> 文件中编写需要离线存储的资源：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">CACHE MANIFEST\n    #v0.11\n    CACHE:\n    js/app.js\n    css/style.css\n    NETWORK:\n    resourse/logo.png\n    FALLBACK:\n    / /offline.html\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>CACHE</strong>: 表示需要离线存储的资源列表，由于包含 manifest 文件的页面将被自动离线存储，所以不需要把页面自身也列出来。</li>\n<li><strong>NETWORK</strong>: 表示在它下面列出来的资源只有在在线的情况下才能访问，他们不会被离线存储，所以在离线情况下无法使用这些资源。不过，如果在 CACHE 和 NETWORK 中有一个相同的资源，那么这个资源还是会被离线存储，也就是说 CACHE 的优先级更高。</li>\n<li><strong>FALLBACK</strong>: 表示如果访问第一个资源失败，那么就使用第二个资源来替换他，比如上面这个文件表示的就是如果访问根目录下任何一个资源失败了，那么就去访问 offline.html 。</li>\n</ul>\n<p>（3）在离线状态时，操作 <code>window.applicationCache</code> 进行离线缓存的操作。</p>\n<p><strong>如何更新缓存：</strong></p>\n<p>（1）更新 manifest 文件</p>\n<p>（2）通过 javascript 操作</p>\n<p>（3）清除浏览器缓存</p>\n<p><strong>注意事项：</strong></p>\n<p>（1）浏览器对缓存数据的容量限制可能不太一样（某些浏览器设置的限制是每个站点 5MB）。</p>\n<p>（2）如果 manifest 文件，或者内部列举的某一个文件不能正常下载，整个更新过程都将失败，浏览器继续全部使用老的缓存。</p>\n<p>（3）引用 manifest 的 html 必须与 manifest 文件同源，在同一个域下。</p>\n<p>（4）FALLBACK 中的资源必须和 manifest 文件同源。</p>\n<p>（5）当一个资源被缓存后，该浏览器直接请求这个绝对路径也会访问缓存中的资源。</p>\n<p>（6）站点中的其他页面即使没有设置 manifest 属性，请求的资源如果在缓存中也从缓存中访问。</p>\n<p>（7）当 manifest 文件发生改变时，资源请求本身也会触发更新。</p>\n<h3 id=\"11-浏览器是如何对-HTML5-的离线储存资源进行管理和加载？\"><a href=\"#11-浏览器是如何对-HTML5-的离线储存资源进行管理和加载？\" class=\"headerlink\" title=\"11. 浏览器是如何对 HTML5 的离线储存资源进行管理和加载？\"></a>11. 浏览器是如何对 HTML5 的离线储存资源进行管理和加载？</h3><ul>\n<li><strong>在线的情况下</strong>，浏览器发现 html 头部有 manifest 属性，它会请求 manifest 文件，如果是第一次访问页面 ，那么浏览器就会根据 manifest 文件的内容下载相应的资源并且进行离线存储。如果已经访问过页面并且资源已经进行离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的 manifest 文件与旧的 manifest 文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，就会重新下载文件中的资源并进行离线存储。</li>\n<li><strong>离线的情况下</strong>，浏览器会直接使用离线存储的资源。</li>\n</ul>\n<h3 id=\"12-title与h1的区别、b与strong的区别、i与em的区别？\"><a href=\"#12-title与h1的区别、b与strong的区别、i与em的区别？\" class=\"headerlink\" title=\"12. title与h1的区别、b与strong的区别、i与em的区别？\"></a>12. title与h1的区别、b与strong的区别、i与em的区别？</h3><ul>\n<li>strong标签有语义，是起到加重语气的效果，而b标签是没有的，b标签只是一个简单加粗标签。b标签之间的字符都设为粗体，strong标签加强字符的语气都是通过粗体来实现的，而搜索引擎更侧重strong标签。</li>\n<li>title属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取有很大的影响</li>\n<li><strong>i内容展示为斜体，em表示强调的文本</strong></li>\n</ul>\n<h3 id=\"13-iframe-有那些优点和缺点？\"><a href=\"#13-iframe-有那些优点和缺点？\" class=\"headerlink\" title=\"13. iframe 有那些优点和缺点？\"></a>13. <strong>iframe 有那些优点和缺点？</strong></h3><p>iframe 元素会创建包含另外一个文档的内联框架（即行内框架）。</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>用来加载速度较慢的内容（如广告）</li>\n<li>可以使脚本可以并行下载</li>\n<li>可以实现跨子域通信</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>iframe 会阻塞主页面的 onload 事件</li>\n<li>无法被一些搜索引擎索识别</li>\n<li>会产生很多页面，不容易管理</li>\n</ul>\n<h3 id=\"14-label-的作用是什么？如何使用？\"><a href=\"#14-label-的作用是什么？如何使用？\" class=\"headerlink\" title=\"14. label 的作用是什么？如何使用？\"></a>14. label 的作用是什么？如何使用？</h3><p>label标签来定义表单控件的关系：当用户选择label标签时，浏览器会自动将焦点转到和label标签相关的表单控件上。</p>\n<ul>\n<li>使用方法1：</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mobile<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Number:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mobile<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>使用方法2：</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span>Date:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"15-Canvas和SVG的区别\"><a href=\"#15-Canvas和SVG的区别\" class=\"headerlink\" title=\"15. Canvas和SVG的区别\"></a>15. Canvas和SVG的区别</h3><p><strong>（1）SVG：</strong> SVG可缩放矢量图形（Scalable Vector Graphics）是基于可扩展标记语言XML描述的2D图形的语言，SVG基于XML就意味着SVG DOM中的每个元素都是可用的，可以为某个元素附加Javascript事件处理器。在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。</p>\n<p>其特点如下：</p>\n<ul>\n<li>不依赖分辨率</li>\n<li>支持事件处理器</li>\n<li>最适合带有大型渲染区域的应用程序（比如谷歌地图）</li>\n<li>复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）</li>\n<li>不适合游戏应用</li>\n</ul>\n<p><strong>（2）Canvas：</strong> Canvas是画布，通过Javascript来绘制2D图形，是逐像素进行渲染的。其位置发生改变，就会重新进行绘制。</p>\n<p>其特点如下：</p>\n<ul>\n<li>依赖分辨率</li>\n<li>不支持事件处理器</li>\n<li>弱的文本渲染能力</li>\n<li>能够以 .png 或 .jpg 格式保存结果图像</li>\n<li>最适合图像密集型的游戏，其中的许多对象会被频繁重绘</li>\n</ul>\n<p>注：矢量图，也称为面向对象的图像或绘图图像，在数学上定义为一系列由线连接的点。矢量文件中的图形元素称为对象。每个对象都是一个自成一体的实体，它具有颜色、形状、轮廓、大小和屏幕位置等属性。</p>\n<h3 id=\"16-head-标签有什么作用，其中什么标签必不可少？\"><a href=\"#16-head-标签有什么作用，其中什么标签必不可少？\" class=\"headerlink\" title=\"16. head 标签有什么作用，其中什么标签必不可少？\"></a>16. head 标签有什么作用，其中什么标签必不可少？</h3><p> 标签用于定义文档的头部，它是所有头部元素的容器。 中的元素可以引用脚本、指示浏览器在哪里找到样式表、提供元信息等。</p>\n<p>文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。</p>\n<p>下面这些标签可用在 head 部分：<code>&lt;base&gt;, &lt;link&gt;, &lt;meta&gt;, &lt;script&gt;, &lt;style&gt;, &lt;title&gt;</code>。</p>\n<p>其中 <code>&lt;title&gt;</code> 定义文档的标题，它是 head 部分中唯一必需的元素。</p>\n<h3 id=\"17-文档声明（Doctype）和-lt-Doctype-html-gt-有何作用-严格模式与混杂模式如何区分？它们有何意义\"><a href=\"#17-文档声明（Doctype）和-lt-Doctype-html-gt-有何作用-严格模式与混杂模式如何区分？它们有何意义\" class=\"headerlink\" title=\"17. 文档声明（Doctype）和&lt;!Doctype html&gt;有何作用? 严格模式与混杂模式如何区分？它们有何意义?\"></a>17. 文档声明（Doctype）和<code>&lt;!Doctype html&gt;</code>有何作用? 严格模式与混杂模式如何区分？它们有何意义?</h3><p><strong>文档声明的作用：</strong> 文档声明是为了告诉浏览器，当前<code>HTML</code>文档使用什么版本的<code>HTML</code>来写的，这样浏览器才能按照声明的版本来正确的解析。</p>\n<p><strong>的作用：</strong><code>&lt;!doctype html&gt;</code> 的作用就是让浏览器进入标准模式，使用最新的 <code>HTML5</code> 标准来解析渲染页面；如果不写，浏览器就会进入混杂模式，我们需要避免此类情况发生。</p>\n<p><strong>严格模式与混杂模式的区分：</strong></p>\n<ul>\n<li><strong>严格模式</strong>： 又称为标准模式，指浏览器按照<code>W3C</code>标准解析代码；</li>\n<li><strong>混杂模式</strong>： 又称怪异模式、兼容模式，是指浏览器用自己的方式解析代码。混杂模式通常模拟老式浏览器的行为，以防止老站点无法工作；</li>\n</ul>\n<p><strong>区分</strong>：网页中的<code>DTD</code>，直接影响到使用的是严格模式还是浏览模式，可以说<code>DTD</code>的使用与这两种方式的区别息息相关。</p>\n<ul>\n<li>如果文档包含严格的<code>DOCTYPE</code> ，那么它一般以严格模式呈现（<strong>严格 DTD ——严格模式</strong>）；</li>\n<li>包含过渡 <code>DTD</code> 和 <code>URI</code> 的 <code>DOCTYPE</code> ，也以严格模式呈现，但有过渡 <code>DTD</code> 而没有 <code>URI</code> （统一资源标识符，就是声明最后的地址）会导致页面以混杂模式呈现（<strong>有 URI 的过渡 DTD ——严格模式；没有 URI 的过渡 DTD ——混杂模式</strong>）；</li>\n<li><code>DOCTYPE</code> 不存在或形式不正确会导致文档以混杂模式呈现（<strong>DTD不存在或者格式不正确——混杂模式</strong>）；</li>\n<li><code>HTML5</code> 没有 <code>DTD</code> ，因此也就没有严格模式与混杂模式的区别，<code>HTML5</code> 有相对宽松的 法，实现时，已经尽可能大的实现了向后兼容(<strong>HTML5 没有严格和混杂之分</strong>)。</li>\n</ul>\n<p>总之，<strong>严格模式让各个浏览器统一执行一套规范兼容模式保证了旧网站的正常运行。</strong></p>\n<h3 id=\"18-浏览器乱码的原因是什么？如何解决？\"><a href=\"#18-浏览器乱码的原因是什么？如何解决？\" class=\"headerlink\" title=\"18. 浏览器乱码的原因是什么？如何解决？\"></a>18. 浏览器乱码的原因是什么？如何解决？</h3><p><strong>产生乱码的原因：</strong></p>\n<ul>\n<li>网页源代码是<code>gbk</code>的编码，而内容中的中文字是<code>utf-8</code>编码的，这样浏览器打开即会出现<code>html</code>乱码，反之也会出现乱码；</li>\n<li><code>html</code>网页编码是<code>gbk</code>，而程序从数据库中调出呈现是<code>utf-8</code>编码的内容也会造成编码乱码；</li>\n<li>浏览器不能自动检测网页编码，造成网页乱码。</li>\n</ul>\n<p><strong>解决办法：</strong></p>\n<ul>\n<li>使用软件编辑HTML网页内容；</li>\n<li>如果网页设置编码是<code>gbk</code>，而数据库储存数据编码格式是<code>UTF-8</code>，此时需要程序查询数据库数据显示数据前进程序转码；</li>\n<li>如果浏览器浏览时候出现网页乱码，在浏览器中找到转换编码的菜单进行转换。</li>\n</ul>\n<h3 id=\"19-渐进增强和优雅降级之间的区别\"><a href=\"#19-渐进增强和优雅降级之间的区别\" class=\"headerlink\" title=\"19. 渐进增强和优雅降级之间的区别\"></a>19. 渐进增强和优雅降级之间的区别</h3><p><strong>（1）渐进增强（progressive enhancement）</strong>：主要是针对低版本的浏览器进行页面重构，保证基本的功能情况下，再针对高级浏览器进行效果、交互等方面的改进和追加功能，以达到更好的用户体验。 <strong>（2）优雅降级 graceful degradation</strong>： 一开始就构建完整的功能，然后再针对低版本的浏览器进行兼容。</p>\n<p><strong>两者区别：</strong></p>\n<ul>\n<li>优雅降级是从复杂的现状开始的，并试图减少用户体验的供给；而渐进增强是从一个非常基础的，能够起作用的版本开始的，并在此基础上不断扩充，以适应未来环境的需要；</li>\n<li>降级（功能衰竭）意味着往回看，而渐进增强则意味着往前看，同时保证其根基处于安全地带。</li>\n</ul>\n<p>“优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。 在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。</p>\n<p>“渐进增强”观点则认为应关注于内容本身。内容是建立网站的诱因，有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。</p>\n<h3 id=\"20-说一下-HTML5-drag-API\"><a href=\"#20-说一下-HTML5-drag-API\" class=\"headerlink\" title=\"20. 说一下 HTML5 drag API\"></a>20. 说一下 HTML5 drag API</h3><ul>\n<li>dragstart：事件主体是被拖放元素，在开始拖放被拖放元素时触发。</li>\n<li>darg：事件主体是被拖放元素，在正在拖放被拖放元素时触发。</li>\n<li>dragenter：事件主体是目标元素，在被拖放元素进入某元素时触发。</li>\n<li>dragover：事件主体是目标元素，在被拖放在某元素内移动时触发。</li>\n<li>dragleave：事件主体是目标元素，在被拖放元素移出目标元素是触发。</li>\n<li>drop：事件主体是目标元素，在目标元素完全接受被拖放元素时触发。</li>\n<li>dragend：事件主体是被拖放元素，在整个拖放操作结束时触发。</li>\n</ul>\n<h2 id=\"一、CSS基础\"><a href=\"#一、CSS基础\" class=\"headerlink\" title=\"一、CSS基础\"></a>一、CSS基础</h2><h3 id=\"1-CSS选择器及其优先级\"><a href=\"#1-CSS选择器及其优先级\" class=\"headerlink\" title=\"1. CSS选择器及其优先级\"></a>1. CSS选择器及其优先级</h3><table>\n<thead>\n<tr>\n<th><strong>选择器</strong></th>\n<th><strong>格式</strong></th>\n<th><strong>优先级权重</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id选择器</td>\n<td>#id</td>\n<td>100</td>\n</tr>\n<tr>\n<td>类选择器</td>\n<td>#classname</td>\n<td>10</td>\n</tr>\n<tr>\n<td>属性选择器</td>\n<td>a[ref=“eee”]</td>\n<td>10</td>\n</tr>\n<tr>\n<td>伪类选择器</td>\n<td>li:last-child</td>\n<td>10</td>\n</tr>\n<tr>\n<td>标签选择器</td>\n<td>div</td>\n<td>1</td>\n</tr>\n<tr>\n<td>伪元素选择器</td>\n<td>li:after</td>\n<td>1</td>\n</tr>\n<tr>\n<td>相邻兄弟选择器</td>\n<td>h1+p</td>\n<td>0</td>\n</tr>\n<tr>\n<td>子选择器</td>\n<td>ul&gt;li</td>\n<td>0</td>\n</tr>\n<tr>\n<td>后代选择器</td>\n<td>li a</td>\n<td>0</td>\n</tr>\n<tr>\n<td>通配符选择器</td>\n<td>*</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p>对于选择器的<strong>优先级</strong>：</p>\n<ul>\n<li>标签选择器、伪元素选择器：1</li>\n<li>类选择器、伪类选择器、属性选择器：10</li>\n<li>id 选择器：100</li>\n<li>内联样式：1000</li>\n</ul>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>!important声明的样式的优先级最高；</li>\n<li>如果优先级相同，则最后出现的样式生效；</li>\n<li>继承得到的样式的优先级最低；</li>\n<li>通用选择器（*）、子选择器（&gt;）和相邻同胞选择器（+）并不在这四个等级中，所以它们的权值都为 0 ；</li>\n<li>样式表的来源不同时，优先级顺序为：内联样式 &gt; 内部样式 &gt; 外部样式 &gt; 浏览器用户自定义样式 &gt; 浏览器默认样式。</li>\n</ul>\n<h3 id=\"2-CSS中可继承与不可继承属性有哪些\"><a href=\"#2-CSS中可继承与不可继承属性有哪些\" class=\"headerlink\" title=\"2. CSS中可继承与不可继承属性有哪些\"></a>2. CSS中可继承与不可继承属性有哪些</h3><p><strong>一、无继承性的属性</strong></p>\n<ol>\n<li><strong>display</strong>：规定元素应该生成的框的类型</li>\n<li><strong>文本属性</strong>：</li>\n</ol>\n<ul>\n<li>vertical-align：垂直文本对齐</li>\n<li>text-decoration：规定添加到文本的装饰</li>\n<li>text-shadow：文本阴影效果</li>\n<li>white-space：空白符的处理</li>\n<li>unicode-bidi：设置文本的方向</li>\n</ul>\n<ol>\n<li><strong>盒子模型的属性</strong>：width、height、margin、border、padding</li>\n<li><strong>背景属性</strong>：background、background-color、background-image、background-repeat、background-position、background-attachment</li>\n<li><strong>定位属性</strong>：float、clear、position、top、right、bottom、left、min-width、min-height、max-width、max-height、overflow、clip、z-index</li>\n<li><strong>生成内容属性</strong>：content、counter-reset、counter-increment</li>\n<li><strong>轮廓样式属性</strong>：outline-style、outline-width、outline-color、outline</li>\n<li><strong>页面样式属性</strong>：size、page-break-before、page-break-after</li>\n<li><strong>声音样式属性</strong>：pause-before、pause-after、pause、cue-before、cue-after、cue、play-during</li>\n</ol>\n<p><strong>二、有继承性的属性</strong></p>\n<ol>\n<li><strong>字体系列属性</strong></li>\n</ol>\n<ul>\n<li>font-family：字体系列</li>\n<li>font-weight：字体的粗细</li>\n<li>font-size：字体的大小</li>\n<li>font-style：字体的风格</li>\n</ul>\n<ol>\n<li><strong>文本系列属性</strong></li>\n</ol>\n<ul>\n<li>text-indent：文本缩进</li>\n<li>text-align：文本水平对齐</li>\n<li>line-height：行高</li>\n<li>word-spacing：单词之间的间距</li>\n<li>letter-spacing：中文或者字母之间的间距</li>\n<li>text-transform：控制文本大小写（就是uppercase、lowercase、capitalize这三个）</li>\n<li>color：文本颜色</li>\n</ul>\n<ol>\n<li><strong>元素可见性</strong></li>\n</ol>\n<ul>\n<li>visibility：控制元素显示隐藏</li>\n</ul>\n<ol>\n<li><strong>列表布局属性</strong></li>\n</ol>\n<ul>\n<li>list-style：列表风格，包括list-style-type、list-style-image等</li>\n</ul>\n<ol>\n<li><strong>光标属性</strong></li>\n</ol>\n<ul>\n<li>cursor：光标显示为何种形态</li>\n</ul>\n<h3 id=\"3-display的属性值及其作用\"><a href=\"#3-display的属性值及其作用\" class=\"headerlink\" title=\"3. display的属性值及其作用\"></a>3. display的属性值及其作用</h3><table>\n<thead>\n<tr>\n<th><strong>属性值</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>none</td>\n<td>元素不显示，并且会从文档流中移除。</td>\n</tr>\n<tr>\n<td>block</td>\n<td>块类型。默认宽度为父元素宽度，可设置宽高，换行显示。</td>\n</tr>\n<tr>\n<td>inline</td>\n<td>行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。</td>\n</tr>\n<tr>\n<td>inline-block</td>\n<td>默认宽度为内容宽度，可以设置宽高，同行显示。</td>\n</tr>\n<tr>\n<td>list-item</td>\n<td>像块类型元素一样显示，并添加样式列表标记。</td>\n</tr>\n<tr>\n<td>table</td>\n<td>此元素会作为块级表格来显示。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定应该从父元素继承display属性的值。</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-display的block、inline和inline-block的区别\"><a href=\"#4-display的block、inline和inline-block的区别\" class=\"headerlink\" title=\"4. display的block、inline和inline-block的区别\"></a>4. display的block、inline和inline-block的区别</h3><p>（1）<strong>block：</strong> 会独占一行，多个元素会另起一行，可以设置width、height、margin和padding属性；</p>\n<p>（2）<strong>inline：</strong> 元素不会独占一行，设置width、height属性无效。但可以设置水平方向的margin和padding属性，不能设置垂直方向的padding和margin；</p>\n<p>（3）<strong>inline-block：</strong> 将对象设置为inline对象，但对象的内容作为block对象呈现，之后的内联对象会被排列在同一行内。</p>\n<p>对于行内元素和块级元素，其特点如下：</p>\n<p><strong>（1）行内元素</strong></p>\n<ul>\n<li>设置宽高无效；</li>\n<li>可以设置水平方向的margin和padding属性，不能设置垂直方向的padding和margin；</li>\n<li>不会自动换行；</li>\n</ul>\n<p><strong>（2）块级元素</strong></p>\n<ul>\n<li>可以设置宽高；</li>\n<li>设置margin和padding都有效；</li>\n<li>可以自动换行；</li>\n<li>多个块状，默认排列从上到下。</li>\n</ul>\n<h3 id=\"5-隐藏元素的方法有哪些\"><a href=\"#5-隐藏元素的方法有哪些\" class=\"headerlink\" title=\"5. 隐藏元素的方法有哪些\"></a>5. 隐藏元素的方法有哪些</h3><ul>\n<li><strong>display: none</strong>：渲染树不会包含该渲染对象，因此该元素不会在页面中占据位置，也不会响应绑定的监听事件。</li>\n<li><strong>visibility: hidden</strong>：元素在页面中仍占据空间，但是不会响应绑定的监听事件。</li>\n<li><strong>opacity: 0</strong>：将元素的透明度设置为 0，以此来实现元素的隐藏。元素在页面中仍然占据空间，并且能够响应元素绑定的监听事件。</li>\n<li><strong>position: absolute</strong>：通过使用绝对定位将元素移除可视区域内，以此来实现元素的隐藏。</li>\n<li><strong>z-index: 负值</strong>：来使其他元素遮盖住该元素，以此来实现隐藏。</li>\n<li><strong>clip/clip-path</strong> ：使用元素裁剪的方法来实现元素的隐藏，这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。</li>\n<li>**transform: scale(0,0)**：将元素缩放为 0，来实现元素的隐藏。这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。</li>\n</ul>\n<h3 id=\"6-link和-import的区别\"><a href=\"#6-link和-import的区别\" class=\"headerlink\" title=\"6. link和@import的区别\"></a>6. link和@import的区别</h3><p>两者都是外部引用CSS的方式，它们的区别如下：</p>\n<ul>\n<li>link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。</li>\n<li>link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。</li>\n<li>link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。</li>\n<li>link支持使用Javascript控制DOM去改变样式；而@import不支持。</li>\n</ul>\n<h3 id=\"7-transition和animation的区别\"><a href=\"#7-transition和animation的区别\" class=\"headerlink\" title=\"7. transition和animation的区别\"></a>7. transition和animation的区别</h3><ul>\n<li><strong>transition是过度属性</strong>，强调过度，它的实现需要触发一个事件（比如鼠标移动上去，焦点，点击等）才执行动画。它类似于flash的补间动画，设置一个开始关键帧，一个结束关键帧。</li>\n<li><strong>animation是动画属性</strong>，它的实现不需要触发事件，设定好时间之后可以自己执行，且可以循环一个动画。它也类似于flash的补间动画，但是它可以设置多个关键帧（用@keyframe定义）完成动画。</li>\n</ul>\n<h3 id=\"8-display-none与visibility-hidden的区别\"><a href=\"#8-display-none与visibility-hidden的区别\" class=\"headerlink\" title=\"8. display:none与visibility:hidden的区别\"></a>8. display:none与visibility:hidden的区别</h3><p>这两个属性都是让元素隐藏，不可见。<strong>两者区别如下：</strong></p>\n<p>（1）<strong>在渲染树中</strong></p>\n<ul>\n<li><code>display:none</code>会让元素完全从渲染树中消失，渲染时不会占据任何空间；</li>\n<li><code>visibility:hidden</code>不会让元素从渲染树中消失，渲染的元素还会占据相应的空间，只是内容不可见。</li>\n</ul>\n<p>（2）<strong>是否是继承属性</strong></p>\n<ul>\n<li><code>display:none</code>是非继承属性，子孙节点会随着父节点从渲染树消失，通过修改子孙节点的属性也无法显示；</li>\n<li><code>visibility:hidden</code>是继承属性，子孙节点消失是由于继承了<code>hidden</code>，通过设置<code>visibility:visible</code>可以让子孙节点显示；</li>\n</ul>\n<p>（3）修改常规文档流中元素的 <code>display</code> 通常会造成文档的重排，但是修改<code>visibility</code>属性只会造成本元素的重绘；</p>\n<p>（4）如果使用读屏器，设置为<code>display:none</code>的内容不会被读取，设置为<code>visibility:hidden</code>的内容会被读取。</p>\n<h3 id=\"9-伪元素和伪类的区别和作用？\"><a href=\"#9-伪元素和伪类的区别和作用？\" class=\"headerlink\" title=\"9. 伪元素和伪类的区别和作用？\"></a>9. <strong>伪元素和伪类的区别和作用？</strong></h3><ul>\n<li>伪元素：在内容元素的前后插入额外的元素或样式，但是这些元素实际上并不在文档中生成。它们只在外部显示可见，但不会在文档的源代码中找到它们，因此，称为“伪”元素。例如：</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">p::before</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">content</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"第一章：\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">p::after</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">content</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Hot!\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">p::first-line</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background</span><span class=\"token punctuation\">:</span>red<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">p::first-letter</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>30px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>伪类：将特殊的效果添加到特定选择器上。它是已有元素上添加类别的，不会产生新的元素。例如：</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">a:hover</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #FF00FF<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">p:first-child</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>总结：</strong> 伪类是通过在元素选择器上加⼊伪类改变元素状态，⽽伪元素通过对元素的操作进⾏对元素的改变。</p>\n<h3 id=\"10-对requestAnimationframe的理解\"><a href=\"#10-对requestAnimationframe的理解\" class=\"headerlink\" title=\"10. 对requestAnimationframe的理解\"></a>10. 对requestAnimationframe的理解</h3><p>实现动画效果的方法比较多，Javascript 中可以通过定时器 setTimeout 来实现，CSS3 中可以使用 transition 和 animation 来实现，HTML5 中的 canvas 也可以实现。除此之外，HTML5 提供一个专门用于请求动画的API，那就是 requestAnimationFrame，顾名思义就是<strong>请求动画帧</strong>。</p>\n<p>MDN对该方法的描述：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>window.requestAnimationFrame() 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。</p></blockquote>\n<p><strong>语法：</strong> <code>window.requestAnimationFrame(callback);</code>  其中，callback是<strong>下一次重绘之前更新动画帧所调用的函数</strong>(即上面所说的回调函数)。该回调函数会被传入DOMHighResTimeStamp参数，它表示requestAnimationFrame() 开始去执行回调函数的时刻。该方法属于<strong>宏任务</strong>，所以会在执行完微任务之后再去执行。</p>\n<p><strong>取消动画：</strong> 使用cancelAnimationFrame()来取消执行动画，该方法接收一个参数——requestAnimationFrame默认返回的id，只需要传入这个id就可以取消动画了。</p>\n<p><strong>优势：</strong></p>\n<ul>\n<li><strong>CPU节能</strong>：使用SetTinterval 实现的动画，当页面被隐藏或最小化时，SetTinterval 仍然在后台执行动画任务，由于此时页面处于不可见或不可用状态，刷新动画是没有意义的，完全是浪费CPU资源。而RequestAnimationFrame则完全不同，当页面处理未激活的状态下，该页面的屏幕刷新任务也会被系统暂停，因此跟着系统走的RequestAnimationFrame也会停止渲染，当页面被激活时，动画就从上次停留的地方继续执行，有效节省了CPU开销。</li>\n<li><strong>函数节流</strong>：在高频率事件( resize, scroll 等)中，为了防止在一个刷新间隔内发生多次函数执行，RequestAnimationFrame可保证每个刷新间隔内，函数只被执行一次，这样既能保证流畅性，也能更好的节省函数执行的开销，一个刷新间隔内函数执行多次时没有意义的，因为多数显示器每16.7ms刷新一次，多次绘制并不会在屏幕上体现出来。</li>\n<li><strong>减少DOM操作</strong>：requestAnimationFrame 会把每一帧中的所有DOM操作集中起来，在一次重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率，一般来说，这个频率为每秒60帧。</li>\n</ul>\n<p><strong>setTimeout执行动画的缺点</strong>：它通过设定间隔时间来不断改变图像位置，达到动画效果。但是容易出现卡顿、抖动的现象；原因是：</p>\n<ul>\n<li>settimeout任务被放入异步队列，只有当主线程任务执行完后才会执行队列中的任务，因此实际执行时间总是比设定时间要晚；</li>\n<li>settimeout的固定时间间隔不一定与屏幕刷新间隔时间相同，会引起丢帧。</li>\n</ul>\n<h3 id=\"11-对盒模型的理解\"><a href=\"#11-对盒模型的理解\" class=\"headerlink\" title=\"11. 对盒模型的理解\"></a>11. 对盒模型的理解</h3><p>CSS3中的盒模型有以下两种：标准盒子模型、IE盒子模型 <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4544d45b5a0c47a58c0c33a7d8fbac09~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"> <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4040de9fef1a49f4ae0ae66039edcfe0~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"> 盒模型都是由四个部分组成的，分别是margin、border、padding和content。</p>\n<p>标准盒模型和IE盒模型的区别在于设置width和height时，所对应的范围不同：</p>\n<ul>\n<li>标准盒模型的width和height属性的范围只包含了content，</li>\n<li>IE盒模型的width和height属性的范围包含了border、padding和content。</li>\n</ul>\n<p>可以通过修改元素的box-sizing属性来改变元素的盒模型：</p>\n<ul>\n<li><code>box-sizeing: content-box</code>表示标准盒模型（默认值）</li>\n<li><code>box-sizeing: border-box</code>表示IE盒模型（怪异盒模型）</li>\n</ul>\n<h3 id=\"12-为什么有时候⽤translate来改变位置⽽不是定位？\"><a href=\"#12-为什么有时候⽤translate来改变位置⽽不是定位？\" class=\"headerlink\" title=\"12. 为什么有时候⽤translate来改变位置⽽不是定位？\"></a>12. 为什么有时候⽤<strong>translate</strong>来改变位置⽽不是定位？</h3><p>translate 是 transform 属性的⼀个值。改变transform或opacity不会触发浏览器重新布局（reflow）或重绘（repaint），只会触发复合（compositions）。⽽改变绝对定位会触发重新布局，进⽽触发重绘和复合。transform使浏览器为元素创建⼀个 GPU 图层，但改变绝对定位会使⽤到 CPU。 因此translate()更⾼效，可以缩短平滑动画的绘制时间。 ⽽translate改变位置时，元素依然会占据其原始空间，绝对定位就不会发⽣这种情况。</p>\n<h3 id=\"13-li-与-li-之间有看不见的空白间隔是什么原因引起的？如何解决？\"><a href=\"#13-li-与-li-之间有看不见的空白间隔是什么原因引起的？如何解决？\" class=\"headerlink\" title=\"13. li 与 li 之间有看不见的空白间隔是什么原因引起的？如何解决？\"></a>13. li 与 li 之间有看不见的空白间隔是什么原因引起的？如何解决？</h3><p>浏览器会把inline内联元素间的空白字符（空格、换行、Tab等）渲染成一个空格。为了美观，通常是一个<code>&lt;li&gt;</code>放在一行，这导致<code>&lt;li&gt;</code>换行后产生换行字符，它变成一个空格，占用了一个字符的宽度。</p>\n<p><strong>解决办法：</strong></p>\n<p>（1）为<code>&lt;li&gt;</code>设置float:left。不足：有些容器是不能设置浮动，如左右切换的焦点图等。</p>\n<p>（2）将所有<code>&lt;li&gt;</code>写在同一行。不足：代码不美观。</p>\n<p>（3）将<code>&lt;ul&gt;</code>内的字符尺寸直接设为0，即font-size:0。不足：<code>&lt;ul&gt;</code>中的其他字符尺寸也被设为0，需要额外重新设定其他字符尺寸，且在Safari浏览器依然会出现空白间隔。</p>\n<p>（4）消除<code>&lt;ul&gt;</code>的字符间隔letter-spacing:-8px，不足：这也设置了<code>&lt;li&gt;</code>内的字符间隔，因此需要将<code>&lt;li&gt;</code>内的字符间隔设为默认letter-spacing:normal。</p>\n<h3 id=\"14-CSS3中有哪些新特性\"><a href=\"#14-CSS3中有哪些新特性\" class=\"headerlink\" title=\"14. CSS3中有哪些新特性\"></a>14. CSS3中有哪些新特性</h3><ul>\n<li>新增各种CSS选择器 （: not(.input)：所有 class 不是“input”的节点）</li>\n<li>圆角 （border-radius:8px）</li>\n<li>多列布局 （multi-column layout）</li>\n<li>阴影和反射 （Shadoweflect）</li>\n<li>文字特效 （text-shadow）</li>\n<li>文字渲染 （Text-decoration）</li>\n<li>线性渐变 （gradient）</li>\n<li>旋转 （transform）</li>\n<li>增加了旋转,缩放,定位,倾斜,动画,多背景</li>\n</ul>\n<h3 id=\"15-替换元素的概念及计算规则\"><a href=\"#15-替换元素的概念及计算规则\" class=\"headerlink\" title=\"15. 替换元素的概念及计算规则\"></a>15. 替换元素的概念及计算规则</h3><p>通过修改某个属性值呈现的内容就可以被替换的元素就称为“替换元素”。</p>\n<p>替换元素除了内容可替换这一特性以外，还有以下特性：</p>\n<ul>\n<li><strong>内容的外观不受页面上的CSS的影响</strong>：用专业的话讲就是在样式表现在CSS作用域之外。如何更改替换元素本身的外观需要类似appearance属性，或者浏览器自身暴露的一些样式接口。</li>\n<li><strong>有自己的尺寸</strong>：在Web中，很多替换元素在没有明确尺寸设定的情况下，其默认的尺寸（不包括边框）是300像素×150像素，如</li>\n<li><strong>在很多CSS属性上有自己的一套表现规则</strong>：比较具有代表性的就是vertical-align属性，对于替换元素和非替换元素，vertical-align属性值的解释是不一样的。比方说vertical-align的默认值的baseline，很简单的属性值，基线之意，被定义为字符x的下边缘，而替换元素的基线却被硬生生定义成了元素的下边缘。</li>\n<li><strong>所有的替换元素都是内联水平元素</strong>：也就是替换元素和替换元素、替换元素和文字都是可以在一行显示的。但是，替换元素默认的display值却是不一样的，有的是inline，有的是inline-block。</li>\n</ul>\n<p>替换元素的尺寸从内而外分为三类：</p>\n<ul>\n<li><strong>固有尺寸：</strong> 指的是替换内容原本的尺寸。例如，图片、视频作为一个独立文件存在的时候，都是有着自己的宽度和高度的。</li>\n<li><strong>HTML尺寸：</strong> 只能通过HTML原生属性改变，这些HTML原生属性包括的width和height属性、的size属性。</li>\n<li><strong>CSS尺寸：</strong> 特指可以通过CSS的width和height或者max-width/min-width和max-height/min-height设置的尺寸，对应盒尺寸中的content box。</li>\n</ul>\n<p>这三层结构的计算规则具体如下： （1）如果没有CSS尺寸和HTML尺寸，则使用固有尺寸作为最终的宽高。 （2）如果没有CSS尺寸，则使用HTML尺寸作为最终的宽高。 （3）如果有CSS尺寸，则最终尺寸由CSS属性决定。 （4）如果“固有尺寸”含有固有的宽高比例，同时仅设置了宽度或仅设置了高度，则元素依然按照固有的宽高比例显示。 （5）如果上面的条件都不符合，则最终宽度表现为300像素，高度为150像素。 （6）内联替换元素和块级替换元素使用上面同一套尺寸计算规则。</p>\n<h3 id=\"16-常见的图片格式及使用场景\"><a href=\"#16-常见的图片格式及使用场景\" class=\"headerlink\" title=\"16. 常见的图片格式及使用场景\"></a>16. 常见的图片格式及使用场景</h3><p>（1）<strong>BMP</strong>，是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以BMP格式的图片通常是较大的文件。</p>\n<p>（2）<strong>GIF</strong>是无损的、采用索引色的点阵图。采用LZW压缩算法进行编码。文件小，是GIF格式的优点，同时，GIF格式还具有支持动画以及透明的优点。但是GIF格式仅支持8bit的索引色，所以GIF格式适用于对色彩要求不高同时需要文件体积较小的场景。</p>\n<p>（3）<strong>JPEG</strong>是有损的、采用直接色的点阵图。JPEG的图片的优点是采用了直接色，得益于更丰富的色彩，JPEG非常适合用来存储照片，与GIF相比，JPEG不适合用来存储企业Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较GIF更大。</p>\n<p>（4）<strong>PNG-8</strong>是无损的、使用索引色的点阵图。PNG是一种比较新的图片格式，PNG-8是非常好的GIF格式替代者，在可能的情况下，应该尽可能的使用PNG-8而不是GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8还支持透明度的调节，而GIF并不支持。除非需要动画的支持，否则没有理由使用GIF而不是PNG-8。</p>\n<p>（5）<strong>PNG-24</strong>是无损的、使用直接色的点阵图。PNG-24的优点在于它压缩了图片的数据，使得同样效果的图片，PNG-24格式的文件大小要比BMP小得多。当然，PNG24的图片还是要比JPEG、GIF、PNG-8大得多。</p>\n<p>（6）<strong>SVG</strong>是无损的矢量图。SVG是矢量图意味着SVG图片由直线和曲线以及绘制它们的方法组成。当放大SVG图片时，看到的还是线和曲线，而不会出现像素点。SVG图片在放大时，不会失真，所以它适合用来绘制Logo、Icon等。</p>\n<p>（7）<strong>WebP</strong>是谷歌开发的一种新图片格式，WebP是同时支持有损和无损压缩的、使用直接色的点阵图。从名字就可以看出来它是为Web而生的，什么叫为Web而生呢？就是说相同质量的图片，WebP具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。目前只有Chrome浏览器和Opera浏览器支持WebP格式，兼容性不太好。</p>\n<ul>\n<li>在无损压缩的情况下，相同质量的WebP图片，文件大小要比PNG小26%；</li>\n<li>在有损压缩的情况下，具有相同图片精度的WebP图片，文件大小要比JPEG小25%~34%；</li>\n<li>WebP图片格式支持图片透明度，一个无损压缩的WebP图片，如果要支持透明度只需要22%的格外文件大小。</li>\n</ul>\n<h3 id=\"17-对-CSSSprites-的理解\"><a href=\"#17-对-CSSSprites-的理解\" class=\"headerlink\" title=\"17. 对 CSSSprites 的理解\"></a>17. 对 CSSSprites 的理解</h3><p>CSSSprites（精灵图），将一个页面涉及到的所有图片都包含到一张大图中去，然后利用CSS的 background-image，background-repeat，background-position属性的组合进行背景定位。</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>利用<code>CSS Sprites</code>能很好地减少网页的http请求，从而大大提高了页面的性能，这是<code>CSS Sprites</code>最大的优点；</li>\n<li><code>CSS Sprites</code>能减少图片的字节，把3张图片合并成1张图片的字节总是小于这3张图片的字节总和。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>在图片合并时，要把多张图片有序的、合理的合并成一张图片，还要留好足够的空间，防止板块内出现不必要的背景。在宽屏及高分辨率下的自适应页面，如果背景不够宽，很容易出现背景断裂；</li>\n<li><code>CSSSprites</code>在开发的时候相对来说有点麻烦，需要借助<code>photoshop</code>或其他工具来对每个背景单元测量其准确的位置。</li>\n<li>维护方面：<code>CSS Sprites</code>在维护的时候比较麻烦，页面背景有少许改动时，就要改这张合并的图片，无需改的地方尽量不要动，这样避免改动更多的<code>CSS</code>，如果在原来的地方放不下，又只能（最好）往下加图片，这样图片的字节就增加了，还要改动<code>CSS</code>。</li>\n</ul>\n<h3 id=\"18-什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到-3x-2x这种图片？\"><a href=\"#18-什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到-3x-2x这种图片？\" class=\"headerlink\" title=\"18. 什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x, @2x这种图片？\"></a>18. 什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x, @2x这种图片？</h3><p>以 iPhone XS 为例，当写 CSS 代码时，针对于单位 px，其宽度为 414px &amp; 896px，也就是说当赋予一个 DIV元素宽度为 414px，这个 DIV 就会填满手机的宽度；</p>\n<p>而如果有一把尺子来实际测量这部手机的物理像素，实际为 1242*2688 物理像素；经过计算可知，1242/414=3，也就是说，在单边上，一个逻辑像素=3个物理像素，就说这个屏幕的像素密度为 3，也就是常说的 3 倍屏。</p>\n<p>对于图片来说，为了保证其不失真，1 个图片像素至少要对应一个物理像素，假如原始图片是 500300 像素，那么在 3 倍屏上就要放一个 1500900 像素的图片才能保证 1 个物理像素至少对应一个图片像素，才能不失真。 <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f1da1cbae9b45528cc2b33f74eb32f2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"> 当然，也可以针对所有屏幕，都只提供最高清图片。虽然低密度屏幕用不到那么多图片像素，而且会因为下载多余的像素造成带宽浪费和下载延迟，但从结果上说能保证图片在所有屏幕上都不会失真。</p>\n<p>还可以使用 CSS 媒体查询来判断不同的像素密度，从而选择不同的图片:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">my<span class=\"token operator\">-</span>image <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>low<span class=\"token punctuation\">.</span>png<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n@media only screen <span class=\"token function\">and</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">min<span class=\"token operator\">-</span>device<span class=\"token operator\">-</span>pixel<span class=\"token operator\">-</span>ratio<span class=\"token operator\">:</span> <span class=\"token number\">1.5</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  #my<span class=\"token operator\">-</span>image <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>high<span class=\"token punctuation\">.</span>png<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"19-margin-和-padding-的使用场景\"><a href=\"#19-margin-和-padding-的使用场景\" class=\"headerlink\" title=\"19. margin 和 padding 的使用场景\"></a>19. <strong>margin 和 padding 的使用场景</strong></h3><ul>\n<li>需要在border外侧添加空白，且空白处不需要背景（色）时，使用 margin；</li>\n<li>需要在border内测添加空白，且空白处需要背景（色）时，使用 padding。</li>\n</ul>\n<h3 id=\"20-对line-height-的理解及其赋值方式\"><a href=\"#20-对line-height-的理解及其赋值方式\" class=\"headerlink\" title=\"20. 对line-height 的理解及其赋值方式\"></a>20. 对<strong>line-height 的理解及其赋值方式</strong></h3><p><strong>（1）line-height的概念：</strong></p>\n<ul>\n<li>line-height 指一行文本的高度，包含了字间距，实际上是下一行基线到上一行基线距离；</li>\n<li>如果一个标签没有定义 height 属性，那么其最终表现的高度由 line-height 决定；</li>\n<li>一个容器没有设置高度，那么撑开容器高度的是 line-height，而不是容器内的文本内容；</li>\n<li>把 line-height 值设置为 height 一样大小的值可以实现单行文字的垂直居中；</li>\n<li>line-height 和 height 都能撑开一个高度；</li>\n</ul>\n<p><strong>（2）line-height 的赋值方式：</strong></p>\n<ul>\n<li>带单位：px 是固定值，而 em 会参考父元素 font-size 值计算自身的行高</li>\n<li>纯数字：会把比例传递给后代。例如，父级行高为 1.5，子元素字体为 18px，则子元素行高为 1.5 * 18 = 27px</li>\n<li>百分比：将计算后的值传递给后代</li>\n</ul>\n<h3 id=\"21-CSS-优化和提高性能的方法有哪些？\"><a href=\"#21-CSS-优化和提高性能的方法有哪些？\" class=\"headerlink\" title=\"21. CSS 优化和提高性能的方法有哪些？\"></a>21. CSS 优化和提高性能的方法有哪些？</h3><p><strong>加载性能：</strong></p>\n<p>（1）css压缩：将写好的css进行打包压缩，可以减小文件体积。</p>\n<p>（2）css单一样式：当需要下边距和左边距的时候，很多时候会选择使用 margin:top 0 bottom 0；但margin-bottom:bottom;margin-left:left;执行效率会更高。</p>\n<p>（3）减少使用@import，建议使用link，因为后者在页面加载时一起加载，前者是等待页面加载完成之后再进行加载。</p>\n<p><strong>选择器性能：</strong></p>\n<p>（1）关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）。CSS选择符是从右到左进行匹配的。当使用后代选择器的时候，浏览器会遍历所有子元素来确定是否是指定的元素等等；</p>\n<p>（2）如果规则拥有ID选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）。</p>\n<p>（3）避免使用通配规则，如*{}计算次数惊人，只对需要用到的元素进行选择。</p>\n<p>（4）尽量少的去对标签进行选择，而是用class。</p>\n<p>（5）尽量少的去使用后代选择器，降低选择器的权重值。后代选择器的开销是最高的，尽量将选择器的深度降到最低，最高不要超过三层，更多的使用类来关联每一个标签元素。</p>\n<p>（6）了解哪些属性是可以通过继承而来的，然后避免对这些属性重复指定规则。</p>\n<p><strong>渲染性能：</strong></p>\n<p>（1）慎重使用高性能属性：浮动、定位。</p>\n<p>（2）尽量减少页面重排、重绘。</p>\n<p>（3）去除空规则：｛｝。空规则的产生原因一般来说是为了预留样式。去除这些空规则无疑能减少css文档体积。</p>\n<p>（4）属性值为0时，不加单位。</p>\n<p>（5）属性值为浮动小数0.**，可以省略小数点之前的0。</p>\n<p>（6）标准化各种浏览器前缀：带浏览器前缀的在前。标准属性在后。</p>\n<p>（7）不使用@import前缀，它会影响css的加载速度。</p>\n<p>（8）选择器优化嵌套，尽量避免层级过深。</p>\n<p>（9）css雪碧图，同一页面相近部分的小图标，方便使用，减少页面的请求次数，但是同时图片本身会变大，使用时，优劣考虑清楚，再使用。</p>\n<p>（10）正确使用display的属性，由于display的作用，某些样式组合会无效，徒增样式体积的同时也影响解析性能。</p>\n<p>（11）不滥用web字体。对于中文网站来说WebFonts可能很陌生，国外却很流行。web fonts通常体积庞大，而且一些浏览器在下载web fonts时会阻塞页面渲染损伤性能。</p>\n<p><strong>可维护性、健壮性：</strong></p>\n<p>（1）将具有相同属性的样式抽离出来，整合并通过class在页面中进行使用，提高css的可维护性。</p>\n<p>（2）样式与内容分离：将css代码定义到外部css中。</p>\n<h3 id=\"22-CSS预处理器-后处理器是什么？为什么要使用它们？\"><a href=\"#22-CSS预处理器-后处理器是什么？为什么要使用它们？\" class=\"headerlink\" title=\"22. CSS预处理器/后处理器是什么？为什么要使用它们？\"></a>22. CSS预处理器/后处理器是什么？为什么要使用它们？</h3><p><strong>预处理器，</strong> 如：<code>less</code>，<code>sass</code>，<code>stylus</code>，用来预编译<code>sass</code>或者<code>less</code>，增加了<code>css</code>代码的复用性。层级，<code>mixin</code>， 变量，循环， 函数等对编写以及开发UI组件都极为方便。</p>\n<p><strong>后处理器，</strong> 如： <code>postCss</code>，通常是在完成的样式表中根据<code>css</code>规范处理<code>css</code>，让其更加有效。目前最常做的是给<code>css</code>属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。</p>\n<p><code>css</code>预处理器为<code>css</code>增加一些编程特性，无需考虑浏览器的兼容问题，可以在<code>CSS</code>中使用变量，简单的逻辑程序，函数等在编程语言中的一些基本的性能，可以让<code>css</code>更加的简洁，增加适应性以及可读性，可维护性等。</p>\n<p>其它<code>css</code>预处理器语言：<code>Sass（Scss）</code>, <code>Less</code>, <code>Stylus</code>, <code>Turbine</code>, <code>Swithch css</code>, <code>CSS Cacheer</code>, <code>DT Css</code>。</p>\n<p>使用原因：</p>\n<ul>\n<li>结构清晰， 便于扩展</li>\n<li>可以很方便的屏蔽浏览器私有语法的差异</li>\n<li>可以轻松实现多重继承</li>\n<li>完美的兼容了<code>CSS</code>代码，可以应用到老项目中</li>\n</ul>\n<h3 id=\"23-before-和-after-的双冒号和单冒号有什么区别？\"><a href=\"#23-before-和-after-的双冒号和单冒号有什么区别？\" class=\"headerlink\" title=\"23. ::before 和 :after 的双冒号和单冒号有什么区别？\"></a>23. ::before 和 :after 的双冒号和单冒号有什么区别？</h3><p>（1）冒号(<code>:</code>)用于<code>CSS3</code>伪类，双冒号(<code>::</code>)用于<code>CSS3</code>伪元素。 （2）<code>::before</code>就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于<code>dom</code>之中，只存在在页面之中。</p>\n<p><strong>注意：</strong> <code>:before </code>和 <code>:after</code> 这两个伪元素，是在<code>CSS2.1</code>里新出现的。起初，伪元素的前缀使用的是单冒号语法，但随着<code>Web</code>的进化，在<code>CSS3</code>的规范里，伪元素的语法被修改成使用双冒号，成为<code>::before</code>、<code>::after</code>。</p>\n<h3 id=\"24-display-inline-block-什么时候会显示间隙？\"><a href=\"#24-display-inline-block-什么时候会显示间隙？\" class=\"headerlink\" title=\"24. display:inline-block 什么时候会显示间隙？\"></a>24. display:inline-block 什么时候会显示间隙？</h3><ul>\n<li>有空格时会有间隙，可以删除空格解决；</li>\n<li><code>margin</code>正值时，可以让<code>margin</code>使用负值解决；</li>\n<li>使用<code>font-size</code>时，可通过设置<code>font-size:0</code>、<code>letter-spacing</code>、<code>word-spacing</code>解决；</li>\n</ul>\n<h3 id=\"25-单行、多行文本溢出隐藏\"><a href=\"#25-单行、多行文本溢出隐藏\" class=\"headerlink\" title=\"25. 单行、多行文本溢出隐藏\"></a>25. 单行、多行文本溢出隐藏</h3><ul>\n<li>单行文本溢出</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>            // 溢出隐藏\n<span class=\"token property\">text-overflow</span><span class=\"token punctuation\">:</span> ellipsis<span class=\"token punctuation\">;</span>      // 溢出用省略号显示\n<span class=\"token property\">white-space</span><span class=\"token punctuation\">:</span> nowrap<span class=\"token punctuation\">;</span>         // 规定段落中的文本不进行换行\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>多行文本溢出</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>            // 溢出隐藏\n<span class=\"token property\">text-overflow</span><span class=\"token punctuation\">:</span> ellipsis<span class=\"token punctuation\">;</span>     // 溢出用省略号显示\n<span class=\"token property\">display</span><span class=\"token punctuation\">:</span>-webkit-box<span class=\"token punctuation\">;</span>         // 作为弹性伸缩盒子模型显示。\n<span class=\"token property\">-webkit-box-orient</span><span class=\"token punctuation\">:</span>vertical<span class=\"token punctuation\">;</span> // 设置伸缩盒子的子元素排列方式：从上到下垂直排列\n<span class=\"token property\">-webkit-line-clamp</span><span class=\"token punctuation\">:</span>3<span class=\"token punctuation\">;</span>        // 显示的行数\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意：由于上面的三个属性都是 CSS3 的属性，没有浏览器可以兼容，所以要在前面加一个<code>-webkit-</code> 来兼容一部分浏览器。</p>\n<h3 id=\"26-Sass、Less-是什么？为什么要使用他们？\"><a href=\"#26-Sass、Less-是什么？为什么要使用他们？\" class=\"headerlink\" title=\"26. Sass、Less 是什么？为什么要使用他们？\"></a>26. Sass、Less 是什么？为什么要使用他们？</h3><p>他们都是 CSS 预处理器，是 CSS 上的一种抽象层。他们是一种特殊的语法/语言编译成 CSS。 例如 Less 是一种动态样式语言，将 CSS 赋予了动态语言的特性，如变量，继承，运算， 函数，LESS 既可以在客户端上运行 (支持 IE 6+, Webkit, Firefox)，也可以在服务端运行 (借助 Node.js)。</p>\n<p><strong>为什么要使用它们？</strong></p>\n<ul>\n<li>结构清晰，便于扩展。 可以方便地屏蔽浏览器私有语法差异。封装对浏览器语法差异的重复处理， 减少无意义的机械劳动。</li>\n<li>可以轻松实现多重继承。 完全兼容 CSS 代码，可以方便地应用到老项目中。LESS 只是在 CSS 语法上做了扩展，所以老的 CSS 代码也可以与 LESS 代码一同编译。</li>\n</ul>\n<h3 id=\"27-对媒体查询的理解？\"><a href=\"#27-对媒体查询的理解？\" class=\"headerlink\" title=\"27. 对媒体查询的理解？\"></a>27. 对媒体查询的理解？</h3><p>媒体查询由⼀个可选的媒体类型和零个或多个使⽤媒体功能的限制了样式表范围的表达式组成，例如宽度、⾼度和颜⾊。媒体查询，添加⾃CSS3，允许内容的呈现针对⼀个特定范围的输出设备⽽进⾏裁剪，⽽不必改变内容本身，适合web⽹⻚应对不同型号的设备⽽做出对应的响应适配。</p>\n<p>媒体查询包含⼀个可选的媒体类型和满⾜CSS3规范的条件下，包含零个或多个表达式，这些表达式描述了媒体特征，最终会被解析为true或false。如果媒体查询中指定的媒体类型匹配展示⽂档所使⽤的设备类型，并且所有的表达式的值都是true，那么该媒体查询的结果为true。那么媒体查询内的样式将会⽣效。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> link元素中的<span class=\"token constant\">CSS</span>媒体查询 <span class=\"token operator\">--</span><span class=\"token operator\">></span> \n<span class=\"token operator\">&lt;</span>link rel<span class=\"token operator\">=</span><span class=\"token string\">\"stylesheet\"</span> media<span class=\"token operator\">=</span><span class=\"token string\">\"(max-width: 800px)\"</span> href<span class=\"token operator\">=</span><span class=\"token string\">\"example.css\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> \n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 样式表中的<span class=\"token constant\">CSS</span>媒体查询 <span class=\"token operator\">--</span><span class=\"token operator\">></span> \n<span class=\"token operator\">&lt;</span>style<span class=\"token operator\">></span> \n@<span class=\"token function\">media</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">max<span class=\"token operator\">-</span>width<span class=\"token operator\">:</span> 600px</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n  <span class=\"token punctuation\">.</span>facet_sidebar <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> none<span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">&#125;</span> \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>简单来说，使用 @media 查询，可以针对不同的媒体类型定义不同的样式。@media 可以针对不同的屏幕尺寸设置不同的样式，特别是需要设置设计响应式的页面，@media 是非常有用的。当重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。</p>\n<h3 id=\"28-对-CSS-工程化的理解\"><a href=\"#28-对-CSS-工程化的理解\" class=\"headerlink\" title=\"28. 对 CSS 工程化的理解\"></a>28. 对 CSS 工程化的理解</h3><p>CSS 工程化是为了解决以下问题：</p>\n<ol>\n<li><strong>宏观设计</strong>：CSS 代码如何组织、如何拆分、模块结构怎样设计？</li>\n<li><strong>编码优化</strong>：怎样写出更好的 CSS？</li>\n<li><strong>构建</strong>：如何处理我的 CSS，才能让它的打包结果最优？</li>\n<li><strong>可维护性</strong>：代码写完了，如何最小化它后续的变更成本？如何确保任何一个同事都能轻松接手？</li>\n</ol>\n<p>以下三个方向都是时下比较流行的、普适性非常好的 CSS 工程化实践：</p>\n<ul>\n<li>预处理器：Less、 Sass 等；</li>\n<li>重要的工程化插件： PostCss；</li>\n<li>Webpack loader 等 。</li>\n</ul>\n<p>基于这三个方向，可以衍生出一些具有典型意义的子问题，这里我们逐个来看：</p>\n<p><strong>（1）预处理器：为什么要用预处理器？它的出现是为了解决什么问题？</strong></p>\n<p>预处理器，其实就是 CSS 世界的“轮子”。预处理器支持我们写一种类似 CSS、但实际并不是 CSS 的语言，然后把它编译成 CSS 代码： <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d58c5313e884e38b1545a5896613250~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"> 那为什么写 CSS 代码写得好好的，偏偏要转去写“类 CSS”呢？这就和本来用 JS 也可以实现所有功能，但最后却写 React 的 jsx 或者 Vue 的模板语法一样——为了爽！要想知道有了预处理器有多爽，首先要知道的是传统 CSS 有多不爽。随着前端业务复杂度的提高，前端工程中对 CSS 提出了以下的诉求：</p>\n<ol>\n<li>宏观设计上：我们希望能优化 CSS 文件的目录结构，对现有的 CSS 文件实现复用；</li>\n<li>编码优化上：我们希望能写出结构清晰、简明易懂的 CSS，需要它具有一目了然的嵌套层级关系，而不是无差别的一铺到底写法；我们希望它具有变量特征、计算能力、循环能力等等更强的可编程性，这样我们可以少写一些无用的代码；</li>\n<li>可维护性上：更强的可编程性意味着更优质的代码结构，实现复用意味着更简单的目录结构和更强的拓展能力，这两点如果能做到，自然会带来更强的可维护性。</li>\n</ol>\n<p>这三点是传统 CSS 所做不到的，也正是预处理器所解决掉的问题。预处理器普遍会具备这样的特性：</p>\n<ul>\n<li>嵌套代码的能力，通过嵌套来反映不同 css 属性之间的层级关系 ；</li>\n<li>支持定义 css 变量；</li>\n<li>提供计算函数；</li>\n<li>允许对代码片段进行 extend 和 mixin；</li>\n<li>支持循环语句的使用；</li>\n<li>支持将 CSS 文件模块化，实现复用。</li>\n</ul>\n<p><strong>（2）PostCss：PostCss 是如何工作的？我们在什么场景下会使用 PostCss？</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2911f98bbacf4b1cbffbb9e1527a4977~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"> 它和预处理器的不同就在于，预处理器处理的是 类CSS，而 PostCss 处理的就是 CSS 本身。Babel 可以将高版本的 JS 代码转换为低版本的 JS 代码。PostCss 做的是类似的事情：它可以编译尚未被浏览器广泛支持的先进的 CSS 语法，还可以自动为一些需要额外兼容的语法增加前缀。更强的是，由于 PostCss 有着强大的插件机制，支持各种各样的扩展，极大地强化了 CSS 的能力。</p>\n<p>PostCss 在业务中的使用场景非常多：</p>\n<ul>\n<li>提高 CSS 代码的可读性：PostCss 其实可以做类似预处理器能做的工作；</li>\n<li>当我们的 CSS 代码需要适配低版本浏览器时，PostCss 的 <a href=\"https://link.juejin.cn/?target=https://github.com/postcss/autoprefixer\">Autoprefixer</a> 插件可以帮助我们自动增加浏览器前缀；</li>\n<li>允许我们编写面向未来的 CSS：PostCss 能够帮助我们编译 CSS next 代码；</li>\n</ul>\n<p><strong>（3）Webpack 能处理 CSS 吗？如何实现？</strong> Webpack 能处理 CSS 吗：</p>\n<ul>\n<li><strong>Webpack 在裸奔的状态下，是不能处理 CSS 的</strong>，Webpack 本身是一个面向 JavaScript 且只能处理 JavaScript 代码的模块化打包工具；</li>\n<li>Webpack 在 loader 的辅助下，是可以处理 CSS 的。</li>\n</ul>\n<p>如何用 Webpack 实现对 CSS 的处理：</p>\n<ul>\n<li>Webpack 中操作 CSS 需要使用的两个关键的 loader：css-loader 和 style-loader</li>\n<li>注意，答出“用什么”有时候可能还不够，面试官会怀疑你是不是在背答案，所以你还需要了解每个 loader 都做了什么事情：<ul>\n<li>css-loader：导入 CSS 模块，对 CSS 代码进行编译处理；</li>\n<li>style-loader：创建style标签，把 CSS 内容写入标签。</li>\n</ul>\n</li>\n</ul>\n<p>在实际使用中，<strong>css-loader 的执行顺序一定要安排在 style-loader 的前面</strong>。因为只有完成了编译过程，才可以对 css 代码进行插入；若提前插入了未编译的代码，那么 webpack 是无法理解这坨东西的，它会无情报错。</p>\n<h3 id=\"29-如何判断元素是否到达可视区域\"><a href=\"#29-如何判断元素是否到达可视区域\" class=\"headerlink\" title=\"29. 如何判断元素是否到达可视区域\"></a>29. 如何判断元素是否到达可视区域</h3><p>以图片显示为例：</p>\n<ul>\n<li><code>window.innerHeight</code> 是浏览器可视区的高度；</li>\n<li><code>document.body.scrollTop || document.documentElement.scrollTop</code> 是浏览器滚动的过的距离；</li>\n<li><code>imgs.offsetTop</code> 是元素顶部距离文档顶部的高度（包括滚动条的距离）；</li>\n<li>内容达到显示区域的：<code>img.offsetTop &lt; window.innerHeight + document.body.scrollTop;</code></li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c57fc165a4ce4d5b9a2885867d4f1cab~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n<h3 id=\"30-z-index属性在什么情况下会失效\"><a href=\"#30-z-index属性在什么情况下会失效\" class=\"headerlink\" title=\"30. z-index属性在什么情况下会失效\"></a>30. z-index属性在什么情况下会失效</h3><p>通常 z-index 的使用是在有两个重叠的标签，在一定的情况下控制其中一个在另一个的上方或者下方出现。z-index值越大就越是在上层。z-index元素的position属性需要是relative，absolute或是fixed。</p>\n<p>z-index属性在下列情况下会失效：</p>\n<ul>\n<li>父元素position为relative时，子元素的z-index失效。解决：父元素position改为absolute或static；</li>\n<li>元素没有设置position属性为非static属性。解决：设置该元素的position属性为relative，absolute或是fixed中的一种；</li>\n<li>元素在设置z-index的同时还设置了float浮动。解决：float去除，改为display：inline-block；</li>\n</ul>\n<h3 id=\"31-CSS3中的transform有哪些属性\"><a href=\"#31-CSS3中的transform有哪些属性\" class=\"headerlink\" title=\"31. CSS3中的transform有哪些属性\"></a>31. CSS3中的transform有哪些属性</h3><h2 id=\"二、页面布局\"><a href=\"#二、页面布局\" class=\"headerlink\" title=\"二、页面布局\"></a>二、页面布局</h2><h3 id=\"1-常见的CSS布局单位\"><a href=\"#1-常见的CSS布局单位\" class=\"headerlink\" title=\"1. 常见的CSS布局单位\"></a>1. 常见的CSS布局单位</h3><p>常用的布局单位包括像素（<code>px</code>），百分比（<code>%</code>），<code>em</code>，<code>rem</code>，<code>vw/vh</code>。</p>\n<p><strong>（1）像素</strong>（<code>px</code>）是页面布局的基础，一个像素表示终端（电脑、手机、平板等）屏幕所能显示的最小的区域，像素分为两种类型：CSS像素和物理像素：</p>\n<ul>\n<li><strong>CSS像素</strong>：为web开发者提供，在CSS中使用的一个抽象单位；</li>\n<li><strong>物理像素</strong>：只与设备的硬件密度有关，任何设备的物理像素都是固定的。</li>\n</ul>\n<p><strong>（2）百分比</strong>（<code>%</code>），当浏览器的宽度或者高度发生变化时，通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。一般认为子元素的百分比相对于直接父元素。</p>\n<p><strong>（3）em和rem</strong>相对于px更具灵活性，它们都是相对长度单位，它们之间的区别：<strong>em相对于父元素，rem相对于根元素。</strong></p>\n<ul>\n<li><strong>em：</strong> 文本相对长度单位。相对于当前对象内文本的字体尺寸。如果当前行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸(默认16px)。(相对父元素的字体大小倍数)。</li>\n<li><strong>rem：</strong> rem是CSS3新增的一个相对单位，相对于根元素（html元素）的font-size的倍数。<strong>作用</strong>：利用rem可以实现简单的响应式布局，可以利用html元素中字体的大小与屏幕间的比值来设置font-size的值，以此实现当屏幕分辨率变化时让元素也随之变化。</li>\n</ul>\n<p><strong>（4）vw/vh</strong>是与视图窗口有关的单位，vw表示相对于视图窗口的宽度，vh表示相对于视图窗口高度，除了vw和vh外，还有vmin和vmax两个相关的单位。</p>\n<ul>\n<li>vw：相对于视窗的宽度，视窗宽度是100vw；</li>\n<li>vh：相对于视窗的高度，视窗高度是100vh；</li>\n<li>vmin：vw和vh中的较小值；</li>\n<li>vmax：vw和vh中的较大值；</li>\n</ul>\n<p><strong>vw/vh</strong> 和百分比很类似，两者的区别：</p>\n<ul>\n<li>百分比（<code>%</code>）：大部分相对于祖先元素，也有相对于自身的情况比如（border-radius、translate等)</li>\n<li>vw/vm：相对于视窗的尺寸</li>\n</ul>\n<h3 id=\"2-px、em、rem的区别及使用场景\"><a href=\"#2-px、em、rem的区别及使用场景\" class=\"headerlink\" title=\"2. px、em、rem的区别及使用场景\"></a>2. px、em、rem的区别及使用场景</h3><p><strong>三者的区别：</strong></p>\n<ul>\n<li>px是固定的像素，一旦设置了就无法因为适应页面大小而改变。</li>\n<li>em和rem相对于px更具有灵活性，他们是相对长度单位，其长度不是固定的，更适用于响应式布局。</li>\n<li>em是相对于其父元素来设置字体大小，这样就会存在一个问题，进行任何元素设置，都有可能需要知道他父元素的大小。而rem是相对于根元素，这样就意味着，只需要在根元素确定一个参考值。</li>\n</ul>\n<p><strong>使用场景：</strong></p>\n<ul>\n<li>对于只需要适配少部分移动设备，且分辨率对页面影响不大的，使用px即可 。</li>\n<li>对于需要适配各种移动设备，使用rem，例如需要适配iPhone和iPad等分辨率差别比较挺大的设备。</li>\n</ul>\n<h3 id=\"3-两栏布局的实现\"><a href=\"#3-两栏布局的实现\" class=\"headerlink\" title=\"3. 两栏布局的实现\"></a>3. 两栏布局的实现</h3><p>一般两栏布局指的是<strong>左边一栏宽度固定，右边一栏宽度自适应</strong>，两栏布局的具体实现：</p>\n<ul>\n<li>利用浮动，将左边元素宽度设置为200px，并且设置向左浮动。将右边元素的margin-left设置为200px，宽度设置为auto（默认为auto，撑满整个父元素）。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.outer</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.left</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> tomato<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.right</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> gold<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>利用浮动，左侧元素设置固定大小，并左浮动，右侧元素设置overflow: hidden; 这样右边就触发了BFC，BFC的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.left</span><span class=\"token punctuation\">&#123;</span>\n     <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n     <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n     <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n     <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n <span class=\"token selector\">.right</span><span class=\"token punctuation\">&#123;</span>\n     <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n     <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n     <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>利用flex布局，将左边元素设置为固定宽度200px，将右边的元素设置为flex:1。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.outer</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.left</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> tomato<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.right</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> gold<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>利用绝对定位，将父级元素设置为相对定位。左边元素设置为absolute定位，并且宽度设置为200px。将右边元素的margin-left的值设置为200px。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.outer</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.left</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> tomato<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.right</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> gold<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>利用绝对定位，将父级元素设置为相对定位。左边元素宽度设置为200px，右边元素设置为绝对定位，左边定位为200px，其余方向定位为0。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.outer</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.left</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> tomato<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.right</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> gold<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-三栏布局的实现\"><a href=\"#4-三栏布局的实现\" class=\"headerlink\" title=\"4. 三栏布局的实现\"></a>4. 三栏布局的实现</h3><p>三栏布局一般指的是页面中一共有三栏，<strong>左右两栏宽度固定，中间自适应的布局</strong>，三栏布局的具体实现：</p>\n<ul>\n<li>利用<strong>绝对定位</strong>，左右两栏设置为绝对定位，中间设置对应方向大小的margin的值。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.outer</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.left</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> tomato<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.right</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> gold<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.center</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> lightgreen<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>利用flex布局，左右两栏设置固定大小，中间一栏设置为flex:1。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.outer</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.left</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> tomato<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.right</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> gold<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.center</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> lightgreen<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>利用浮动，左右两栏设置固定大小，并设置对应方向的浮动。中间一栏设置左右两个方向的margin值，注意这种方式<strong>，中间一栏必须放到最后：</strong></li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.outer</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.left</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> tomato<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.right</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> right<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> gold<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.center</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> lightgreen<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>圣杯布局，利用浮动和负边距来实现。父级元素设置左右的 padding，三列均设置向左浮动，中间一列放在最前面，宽度设置为父级元素的宽度，因此后面两列都被挤到了下一行，通过设置 margin 负值将其移动到上一行，再利用相对定位，定位到两边。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.outer</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-right</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.left</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> -100px<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -100%<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> tomato<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.right</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> right<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -200px<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> gold<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.center</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> lightgreen<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>双飞翼布局，双飞翼布局相对于圣杯布局来说，左右位置的保留是通过中间列的 margin 值来实现的，而不是通过父元素的 padding 来实现的。本质上来说，也是通过浮动和外边距负值来实现的。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.outer</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.left</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -100%<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> tomato<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.right</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -200px<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> gold<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.wrapper</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> lightgreen<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.center</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-水平垂直居中的实现\"><a href=\"#5-水平垂直居中的实现\" class=\"headerlink\" title=\"5. 水平垂直居中的实现\"></a>5. 水平垂直居中的实现</h3><ul>\n<li>利用绝对定位，先将元素的左上角通过top:50%和left:50%定位到页面的中心，然后再通过translate来调整元素的中心点到页面的中心。该方法需要<strong>考虑浏览器兼容问题。</strong></li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.parent</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token selector\">.child</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">,</span>-50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>利用绝对定位，设置四个方向的值都为0，并将margin设置为auto，由于宽高固定，因此对应方向实现平分，可以实现水平和垂直方向上的居中。该方法适用于<strong>盒子有宽高</strong>的情况：</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.parent</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token selector\">.child</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>利用绝对定位，先将元素的左上角通过top:50%和left:50%定位到页面的中心，然后再通过margin负值来调整元素的中心点到页面的中心。该方法适用于<strong>盒子宽高已知</strong>的情况</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.parent</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token selector\">.child</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> -50px<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* 自身 height 的一半 */</span>\n    <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -50px<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 自身 width 的一半 */</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>使用flex布局，通过align-items:center和justify-content:center设置容器的垂直和水平方向上为居中对齐，然后它的子元素也可以实现垂直和水平的居中。该方法要<strong>考虑兼容的问题</strong>，该方法在移动端用的较多：</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.parent</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"6-如何根据设计稿进行移动端适配？\"><a href=\"#6-如何根据设计稿进行移动端适配？\" class=\"headerlink\" title=\"6. 如何根据设计稿进行移动端适配？\"></a>6. 如何根据设计稿进行移动端适配？</h3><p>移动端适配主要有两个维度：</p>\n<ul>\n<li><strong>适配不同像素密度，</strong> 针对不同的像素密度，使用 CSS 媒体查询，选择不同精度的图片，以保证图片不会失真；</li>\n<li><strong>适配不同屏幕大小，</strong> 由于不同的屏幕有着不同的逻辑像素大小，所以如果直接使用 px 作为开发单位，会使得开发的页面在某一款手机上可以准确显示，但是在另一款手机上就会失真。为了适配不同屏幕的大小，应按照比例来还原设计稿的内容。</li>\n</ul>\n<p>为了能让页面的尺寸自适应，可以使用 rem，em，vw，vh 等相对单位。</p>\n<h3 id=\"7-对Flex布局的理解及其使用场景\"><a href=\"#7-对Flex布局的理解及其使用场景\" class=\"headerlink\" title=\"7. 对Flex布局的理解及其使用场景\"></a>7. 对Flex布局的理解及其使用场景</h3><p>Flex是FlexibleBox的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为Flex布局。行内元素也可以使用Flex布局。注意，设为Flex布局以后，<strong>子元素的float、clear和vertical-align属性将失效</strong>。采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis），项目默认沿水平主轴排列。</p>\n<p>以下6个属性设置在<strong>容器上</strong>：</p>\n<ul>\n<li>flex-direction属性决定主轴的方向（即项目的排列方向）。</li>\n<li>flex-wrap属性定义，如果一条轴线排不下，如何换行。</li>\n<li>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</li>\n<li>justify-content属性定义了项目在主轴上的对齐方式。</li>\n<li>align-items属性定义项目在交叉轴上如何对齐。</li>\n<li>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</li>\n</ul>\n<p>以下6个属性设置在<strong>项目上</strong>：</p>\n<ul>\n<li>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</li>\n<li>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</li>\n<li>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</li>\n<li>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</li>\n<li>flex属性是flex-grow，flex-shrink和flex-basis的简写，默认值为0 1 auto。</li>\n<li>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</li>\n</ul>\n<p><strong>简单来说：</strong> flex布局是CSS3新增的一种布局方式，可以通过将一个元素的display属性值设置为flex从而使它成为一个flex容器，它的所有子元素都会成为它的项目。一个容器默认有两条轴：一个是水平的主轴，一个是与主轴垂直的交叉轴。可以使用flex-direction来指定主轴的方向。可以使用justify-content来指定元素在主轴上的排列方式，使用align-items来指定元素在交叉轴上的排列方式。还可以使用flex-wrap来规定当一行排列不下时的换行方式。对于容器中的项目，可以使用order属性来指定项目的排列顺序，还可以使用flex-grow来指定当排列空间有剩余的时候，项目的放大比例，还可以使用flex-shrink来指定当排列空间不足时，项目的缩小比例。</p>\n<h3 id=\"8-响应式设计的概念及基本原理\"><a href=\"#8-响应式设计的概念及基本原理\" class=\"headerlink\" title=\"8. 响应式设计的概念及基本原理\"></a>8. 响应式设计的概念及基本原理</h3><p>响应式网站设计<code>（Responsive Web design</code>）是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本。</p>\n<p>关于原理： 基本原理是通过媒体查询<code>（@media）</code>查询检测不同的设备屏幕尺寸做处理。 关于兼容： 页面头部必须有mate声明的<code>viewport</code>。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>’viewport’<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>”width=device-width,<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">initial-scale</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">maximum-scale</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1,user-scalable=no”<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"三、定位与浮动\"><a href=\"#三、定位与浮动\" class=\"headerlink\" title=\"三、定位与浮动\"></a>三、定位与浮动</h2><h3 id=\"1-为什么需要清除浮动？清除浮动的方式\"><a href=\"#1-为什么需要清除浮动？清除浮动的方式\" class=\"headerlink\" title=\"1. 为什么需要清除浮动？清除浮动的方式\"></a>1. 为什么需要清除浮动？清除浮动的方式</h3><p><strong>浮动的定义：</strong> 非IE浏览器下，容器不设高度且子元素浮动时，容器高度不能被内容撑开。 此时，内容会溢出到容器外面而影响布局。这种现象被称为浮动（溢出）。</p>\n<p><strong>浮动的工作原理：</strong></p>\n<ul>\n<li>浮动元素脱离文档流，不占据空间（引起“高度塌陷”现象）</li>\n<li>浮动元素碰到包含它的边框或者其他浮动元素的边框停留</li>\n</ul>\n<p>浮动元素可以左右移动，直到遇到另一个浮动元素或者遇到它外边缘的包含框。浮动框不属于文档流中的普通流，当元素浮动之后，不会影响块级元素的布局，只会影响内联元素布局。此时文档流中的普通流就会表现得该浮动框不存在一样的布局模式。当包含框的高度小于浮动框的时候，此时就会出现“高度塌陷”。</p>\n<p><strong>浮动元素引起的问题？</strong></p>\n<ul>\n<li>父元素的高度无法被撑开，影响与父元素同级的元素</li>\n<li>与浮动元素同级的非浮动元素会跟随其后</li>\n<li>若浮动的元素不是第一个元素，则该元素之前的元素也要浮动，否则会影响页面的显示结构</li>\n</ul>\n<p><strong>清除浮动的方式如下：</strong></p>\n<ul>\n<li>给父级div定义<code>height</code>属性</li>\n<li>最后一个浮动元素之后添加一个空的div标签，并添加<code>clear:both</code>样式</li>\n<li>包含浮动元素的父级标签添加<code>overflow:hidden</code>或者<code>overflow:auto</code></li>\n<li>使用 :after 伪元素。由于IE6-7不支持 :after，使用 zoom:1 触发 hasLayout**</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.clearfix:after</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\\200B\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> table<span class=\"token punctuation\">;</span> \n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">clear</span><span class=\"token punctuation\">:</span> both<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.clearfix</span><span class=\"token punctuation\">&#123;</span>\n    *<span class=\"token property\">zoom</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-使用-clear-属性清除浮动的原理？\"><a href=\"#2-使用-clear-属性清除浮动的原理？\" class=\"headerlink\" title=\"2. 使用 clear 属性清除浮动的原理？\"></a>2. 使用 clear 属性清除浮动的原理？</h3><p>使用clear属性清除浮动，其语法如下：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token property\">clear</span><span class=\"token punctuation\">:</span>none|left|right|both\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果单看字面意思，clear:left 是“清除左浮动”，clear:right 是“清除右浮动”，实际上，这种解释是有问题的，因为浮动一直还在，并没有清除。</p>\n<p>官方对clear属性解释：“<strong>元素盒子的边不能和前面的浮动元素相邻</strong>”，对元素设置clear属性是为了避免浮动元素对该元素的影响，而不是清除掉浮动。</p>\n<p>还需要注意 clear 属性指的是元素盒子的边不能和前面的浮动元素相邻，注意这里“<strong>前面的</strong>”3个字，也就是clear属性对“后面的”浮动元素是不闻不问的。考虑到float属性要么是left，要么是right，不可能同时存在，同时由于clear属性对“后面的”浮动元素不闻不问，因此，当clear:left有效的时候，clear:right必定无效，也就是此时clear:left等同于设置clear:both；同样地，clear:right如果有效也是等同于设置clear:both。由此可见，clear:left和clear:right这两个声明就没有任何使用的价值，至少在CSS世界中是如此，直接使用clear:both吧。</p>\n<p>一般使用伪元素的方式清除浮动：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.clear::after</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span><span class=\"token string\">''</span><span class=\"token punctuation\">;</span>  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>   <span class=\"token property\">clear</span><span class=\"token punctuation\">:</span>both<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>clear属性只有块级元素才有效的，而::after等伪元素默认都是内联水平，这就是借助伪元素清除浮动影响时需要设置display属性值的原因。</p>\n<h3 id=\"3-对BFC的理解，如何创建BFC\"><a href=\"#3-对BFC的理解，如何创建BFC\" class=\"headerlink\" title=\"3. 对BFC的理解，如何创建BFC\"></a>3. 对BFC的理解，如何创建BFC</h3><p>先来看两个相关的概念：</p>\n<ul>\n<li>Box: Box 是 CSS 布局的对象和基本单位，⼀个⻚⾯是由很多个 Box 组成的，这个Box就是我们所说的盒模型。</li>\n<li>Formatting context：块级上下⽂格式化，它是⻚⾯中的⼀块渲染区域，并且有⼀套渲染规则，它决定了其⼦元素将如何定位，以及和其他元素的关系和相互作⽤。</li>\n</ul>\n<p>块格式化上下文（Block Formatting Context，BFC）是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。</p>\n<p>通俗来讲：BFC是一个独立的布局环境，可以理解为一个容器，在这个容器中按照一定规则进行物品摆放，并且不会影响其它环境中的物品。如果一个元素符合触发BFC的条件，则BFC中的元素布局不受外部影响。</p>\n<p><strong>创建BFC的条件：</strong></p>\n<ul>\n<li>根元素：body；</li>\n<li>元素设置浮动：float 除 none 以外的值；</li>\n<li>元素设置绝对定位：position (absolute、fixed)；</li>\n<li>display 值为：inline-block、table-cell、table-caption、flex等；</li>\n<li>overflow 值为：hidden、auto、scroll；</li>\n</ul>\n<p><strong>BFC的特点：</strong></p>\n<ul>\n<li>垂直方向上，自上而下排列，和文档流的排列方式一致。</li>\n<li>在BFC中上下相邻的两个容器的margin会重叠</li>\n<li>计算BFC的高度时，需要计算浮动元素的高度</li>\n<li>BFC区域不会与浮动的容器发生重叠</li>\n<li>BFC是独立的容器，容器内部元素不会影响外部元素</li>\n<li>每个元素的左margin值和容器的左border相接触</li>\n</ul>\n<p><strong>BFC的作用：</strong></p>\n<ul>\n<li><strong>解决margin的重叠问题</strong>：由于BFC是一个独立的区域，内部的元素和外部的元素互不影响，将两个元素变为两个BFC，就解决了margin重叠的问题。</li>\n<li><strong>解决高度塌陷的问题</strong>：在对子元素设置浮动后，父元素会发生高度塌陷，也就是父元素的高度变为0。解决这个问题，只需要把父元素变成一个BFC。常用的办法是给父元素设置<code>overflow:hidden</code>。</li>\n<li><strong>创建自适应两栏布局</strong>：可以用来创建自适应两栏布局：左边的宽度固定，右边的宽度自适应。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.left</span><span class=\"token punctuation\">&#123;</span>\n     <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n     <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n     <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n     <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n <span class=\"token selector\">.right</span><span class=\"token punctuation\">&#123;</span>\n     <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n     <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n     <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n \n&lt;div class=<span class=\"token string\">\"left\"</span>>&lt;/div>\n&lt;div class=<span class=\"token string\">\"right\"</span>>&lt;/div>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>左侧设置<code>float:left</code>，右侧设置<code>overflow: hidden</code>。这样右边就触发了BFC，BFC的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠，实现了自适应两栏布局。</p>\n<h3 id=\"4-什么是margin重叠问题？如何解决？\"><a href=\"#4-什么是margin重叠问题？如何解决？\" class=\"headerlink\" title=\"4. 什么是margin重叠问题？如何解决？\"></a>4. 什么是margin重叠问题？如何解决？</h3><p><strong>问题描述：</strong> 两个块级元素的上外边距和下外边距可能会合并（折叠）为一个外边距，其大小会取其中外边距值大的那个，这种行为就是外边距折叠。需要注意的是，<strong>浮动的元素和绝对定位</strong>这种脱离文档流的元素的外边距不会折叠。重叠只会出现在<strong>垂直方向</strong>。</p>\n<p><strong>计算原则：</strong> 折叠合并后外边距的计算原则如下：</p>\n<ul>\n<li>如果两者都是正数，那么就去最大者</li>\n<li>如果是一正一负，就会正值减去负值的绝对值</li>\n<li>两个都是负值时，用0减去两个中绝对值大的那个</li>\n</ul>\n<p><strong>解决办法：</strong> 对于折叠的情况，主要有两种：<strong>兄弟之间重叠</strong>和<strong>父子之间重叠</strong> （1）兄弟之间重叠</p>\n<ul>\n<li>底部元素变为行内盒子：<code>display: inline-block</code></li>\n<li>底部元素设置浮动：<code>float</code></li>\n<li>底部元素的position的值为<code>absolute/fixed</code></li>\n</ul>\n<p>（2）父子之间重叠</p>\n<ul>\n<li>父元素加入：<code>overflow: hidden</code></li>\n<li>父元素添加透明边框：<code>border:1px solid transparent</code></li>\n<li>子元素变为行内盒子：<code>display: inline-block</code></li>\n<li>子元素加入浮动属性或定位</li>\n</ul>\n<h3 id=\"5-元素的层叠顺序\"><a href=\"#5-元素的层叠顺序\" class=\"headerlink\" title=\"5. 元素的层叠顺序\"></a>5. 元素的层叠顺序</h3><p>层叠顺序，英文称作 stacking order，表示元素发生层叠时有着特定的垂直显示顺序。下面是盒模型的层叠规则： <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fbc59ae1adb5454c8c7f60582df10ff9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"> 对于上图，由上到下分别是： （1）背景和边框：建立当前层叠上下文元素的背景和边框。 （2）负的z-index：当前层叠上下文中，z-index属性值为负的元素。 （3）块级盒：文档流内非行内级非定位后代元素。 （4）浮动盒：非定位浮动元素。 （5）行内盒：文档流内行内级非定位后代元素。 （6）z-index:0：层叠级数为0的定位元素。 （7）正z-index：z-index属性值为正的定位元素。</p>\n<p><strong>注意:</strong> 当定位元素z-index:auto，生成盒在当前层叠上下文中的层级为 0，不会建立新的层叠上下文，除非是根元素。</p>\n<h3 id=\"6-position的属性有哪些，区别是什么\"><a href=\"#6-position的属性有哪些，区别是什么\" class=\"headerlink\" title=\"6. position的属性有哪些，区别是什么\"></a>6. position的属性有哪些，区别是什么</h3><p>position有以下属性值：</p>\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>概述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>absolute</td>\n<td>生成绝对定位的元素，相对于static定位以外的一个父元素进行定位。元素的位置通过left、top、right、bottom属性进行规定。</td>\n</tr>\n<tr>\n<td>relative</td>\n<td>生成相对定位的元素，相对于其原来的位置进行定位。元素的位置通过left、top、right、bottom属性进行规定。</td>\n</tr>\n<tr>\n<td>fixed</td>\n<td>生成绝对定位的元素，指定元素相对于屏幕视⼝（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变，⽐如回到顶部的按钮⼀般都是⽤此定位⽅式。</td>\n</tr>\n<tr>\n<td>static</td>\n<td>默认值，没有定位，元素出现在正常的文档流中，会忽略 top, bottom, left, right 或者 z-index 声明，块级元素从上往下纵向排布，⾏级元素从左向右排列。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定从父元素继承position属性的值</td>\n</tr>\n</tbody></table>\n<p>前面三者的定位方式如下：</p>\n<ul>\n<li><strong>relative：</strong> 元素的定位永远是相对于元素自身位置的，和其他元素没关系，也不会影响其他元素。</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6523548b65834c578202acc5e6388af4~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n<ul>\n<li><strong>fixed：</strong> 元素的定位是相对于 window （或者 iframe）边界的，和其他元素没有关系。但是它具有破坏性，会导致其他元素位置的变化。</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b35e646aa3c4d9cac803753d8b67c39~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n<ul>\n<li><strong>absolute：</strong> 元素的定位相对于前两者要复杂许多。如果为 absolute 设置了 top、left，浏览器会根据什么去确定它的纵向和横向的偏移量呢？答案是浏览器会递归查找该元素的所有父元素，如果找到一个设置了<code>position:relative/absolute/fixed</code>的元素，就以该元素为基准定位，如果没找到，就以浏览器边界定位。如下两个图所示：</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6d4f199b3f842f090890eea32318e11~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"> <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2c7150bd7614a548f04a2919f1ea12a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n<h3 id=\"7-display、float、position的关系\"><a href=\"#7-display、float、position的关系\" class=\"headerlink\" title=\"7. display、float、position的关系\"></a>7. <strong>display、float、position的关系</strong></h3><p>（1）首先判断display属性是否为none，如果为none，则position和float属性的值不影响元素最后的表现。</p>\n<p>（2）然后判断position的值是否为absolute或者fixed，如果是，则float属性失效，并且display的值应该被设置为table或者block，具体转换需要看初始转换值。</p>\n<p>（3）如果position的值不为absolute或者fixed，则判断float属性的值是否为none，如果不是，则display的值则按上面的规则转换。注意，如果position的值为relative并且float属性的值存在，则relative相对于浮动后的最终位置定位。</p>\n<p>（4）如果float的值为none，则判断元素是否为根元素，如果是根元素则display属性按照上面的规则转换，如果不是，则保持指定的display属性值不变。</p>\n<p>总的来说，可以把它看作是一个类似优先级的机制，”position:absolute”和”position:fixed”优先级最高，有它存在的时候，浮动不起作用，’display’的值也需要调整；其次，元素的’float’特性的值不是”none”的时候或者它是根元素的时候，调整’display’的值；最后，非根元素，并且非浮动元素，并且非绝对定位的元素，’display’特性值同设置值。</p>\n<h3 id=\"8-absolute与fixed共同点与不同点\"><a href=\"#8-absolute与fixed共同点与不同点\" class=\"headerlink\" title=\"8. absolute与fixed共同点与不同点\"></a>8. absolute与fixed共同点与不同点</h3><p><strong>共同点：</strong></p>\n<ul>\n<li>改变行内元素的呈现方式，将display置为inline-block </li>\n<li>使元素脱离普通文档流，不再占据文档物理空间</li>\n<li>覆盖非定位文档元素</li>\n</ul>\n<p><strong>不同点：</strong></p>\n<ul>\n<li>abuselute与fixed的根元素不同，abuselute的根元素可以设置，fixed根元素是浏览器。</li>\n<li>在有滚动条的页面中，absolute会跟着父元素进行移动，fixed固定在页面的具体位置。</li>\n</ul>\n<h3 id=\"9-对-sticky-定位的理解\"><a href=\"#9-对-sticky-定位的理解\" class=\"headerlink\" title=\"9. 对 sticky 定位的理解\"></a>9. 对 sticky 定位的理解</h3><p>sticky 英文字面意思是粘贴，所以可以把它称之为粘性定位。语法：<strong>position: sticky;</strong> 基于用户的滚动位置来定位。</p>\n<p>粘性定位的元素是依赖于用户的滚动，在 <strong>position:relative</strong> 与 <strong>position:fixed</strong> 定位之间切换。它的行为就像 <strong>position:relative;</strong> 而当页面滚动超出目标区域时，它的表现就像 **position:fixed;**，它会固定在目标位置。元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。这个特定阈值指的是 top, right, bottom 或 left 之一，换言之，指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。</p>\n<h2 id=\"四、场景应用\"><a href=\"#四、场景应用\" class=\"headerlink\" title=\"四、场景应用\"></a>四、场景应用</h2><h3 id=\"1-实现一个三角形\"><a href=\"#1-实现一个三角形\" class=\"headerlink\" title=\"1. 实现一个三角形\"></a>1. 实现一个三角形</h3><p>CSS绘制三角形主要用到的是border属性，也就是边框。</p>\n<p>平时在给盒子设置边框时，往往都设置很窄，就可能误以为边框是由矩形组成的。实际上，border属性是右三角形组成的，下面看一个例子：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 100px solid<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-color</span><span class=\"token punctuation\">:</span> orange blue red green<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>将元素的长宽都设置为0，显示出来的效果是这样的： <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cba8731fea9842a8b8103c2b387fe64f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"> 所以可以根据border这个特性来绘制三角形： <strong>（1）三角1</strong></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>    <span class=\"token property\">border-top</span><span class=\"token punctuation\">:</span> 50px solid red<span class=\"token punctuation\">;</span>    <span class=\"token property\">border-right</span><span class=\"token punctuation\">:</span> 50px solid transparent<span class=\"token punctuation\">;</span>    <span class=\"token property\">border-left</span><span class=\"token punctuation\">:</span> 50px solid transparent<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab996951a0cc42cf9e6d9e12eb827f8b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"> <strong>（2）三角2</strong></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-bottom</span><span class=\"token punctuation\">:</span> 50px solid red<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-right</span><span class=\"token punctuation\">:</span> 50px solid transparent<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-left</span><span class=\"token punctuation\">:</span> 50px solid transparent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/531c6c250dd8446fb0f264e7b3df6fba~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"> <strong>（3）三角3</strong></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-left</span><span class=\"token punctuation\">:</span> 50px solid red<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-top</span><span class=\"token punctuation\">:</span> 50px solid transparent<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-bottom</span><span class=\"token punctuation\">:</span> 50px solid transparent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4beaf4e4a0140ad9e7252f8a6e4e8e6~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"> <strong>（4）三角4</strong></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-right</span><span class=\"token punctuation\">:</span> 50px solid red<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-top</span><span class=\"token punctuation\">:</span> 50px solid transparent<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-bottom</span><span class=\"token punctuation\">:</span> 50px solid transparent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/445f50ad19164b0f863ad8dfef2a29b1~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"> <strong>（5）三角5</strong></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-top</span><span class=\"token punctuation\">:</span> 100px solid red<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-right</span><span class=\"token punctuation\">:</span> 100px solid transparent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a1ac630463164e42a027b54bb95f56ba~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"> 还有很多，就不一一实现了，总体的原则就是通过上下左右边框来控制三角形的方向，用边框的宽度比来控制三角形的角度。</p>\n<h3 id=\"2-实现一个扇形\"><a href=\"#2-实现一个扇形\" class=\"headerlink\" title=\"2. 实现一个扇形\"></a>2. 实现一个扇形</h3><p>用CSS实现扇形的思路和三角形基本一致，就是多了一个圆角的样式，实现一个90°的扇形：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 100px solid transparent<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">heigt</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-top-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db5e46aea0ce4805a0c2bbec2743546e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n<h3 id=\"3-实现一个宽高自适应的正方形\"><a href=\"#3-实现一个宽高自适应的正方形\" class=\"headerlink\" title=\"3. 实现一个宽高自适应的正方形\"></a>3. 实现一个宽高自适应的正方形</h3><ul>\n<li>利用vw来实现：</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.square</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 10%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 10vw<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> tomato<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>利用元素的margin/padding百分比是相对父元素width的性质来实现：</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.square</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 20%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 20%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> orange<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>利用子元素的margin-top的值来实现：</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.square</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 30%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.square::after</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-画一条0-5px的线\"><a href=\"#4-画一条0-5px的线\" class=\"headerlink\" title=\"4. 画一条0.5px的线\"></a>4. 画一条0.5px的线</h3><ul>\n<li><strong>采用transform: scale()的方式</strong>，该方法用来定义元素的2D 缩放转换：</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>0.5<span class=\"token punctuation\">,</span>0.5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>采用meta viewport的方式</strong></li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">&lt;meta name=<span class=\"token string\">\"viewport\"</span> content=<span class=\"token string\">\"width=device-width, initial-scale=0.5, minimum-scale=0.5, maximum-scale=0.5\"</span>/>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这样就能缩放到原来的0.5倍，如果是1px那么就会变成0.5px。viewport只针对于移动端，只在移动端上才能看到效果</p>\n<h3 id=\"5-设置小于12px的字体\"><a href=\"#5-设置小于12px的字体\" class=\"headerlink\" title=\"5. 设置小于12px的字体\"></a>5. 设置小于12px的字体</h3><p>在谷歌下css设置字体大小为12px及以下时，显示都是一样大小，都是默认12px。</p>\n<p><strong>解决办法：</strong></p>\n<ul>\n<li>使用Webkit的内核的-webkit-text-size-adjust的私有CSS属性来解决，只要加了-webkit-text-size-adjust:none;字体大小就不受限制了。但是chrome更新到27版本之后就不可以用了。所以高版本chrome谷歌浏览器已经不再支持-webkit-text-size-adjust样式，所以要使用时候慎用。</li>\n<li>使用css3的transform缩放属性-webkit-transform:scale(0.5); 注意-webkit-transform:scale(0.75);收缩的是整个元素的大小，这时候，如果是内联元素，必须要将内联元素转换成块元素，可以使用display：block/inline-block/…；</li>\n<li>使用图片：如果是内容固定不变情况下，使用将小于12px文字内容切出做图片，这样不影响兼容也不影响美观。</li>\n</ul>\n<h3 id=\"6-如何解决-1px-问题？\"><a href=\"#6-如何解决-1px-问题？\" class=\"headerlink\" title=\"6. 如何解决 1px 问题？\"></a>6. 如何解决 1px 问题？</h3><p>1px 问题指的是：在一些 <code>Retina屏幕</code> 的机型上，移动端页面的 1px 会变得很粗，呈现出不止 1px 的效果。原因很简单——CSS 中的 1px 并不能和移动设备上的 1px 划等号。它们之间的比例关系有一个专门的属性来描述：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">window.devicePixelRatio = 设备的物理像素 / CSS像素。\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>打开 Chrome 浏览器，启动移动端调试模式，在控制台去输出这个 <code>devicePixelRatio</code> 的值。这里选中 iPhone6/7/8 这系列的机型，输出的结果就是2： <img src=\"https://gitee.com/LUNIONT/img-url/raw/master/a8af7dca29f84b7e9d1f94232713ef07~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"> 这就意味着设置的 1px CSS 像素，在这个设备上实际会用 2 个物理像素单元来进行渲染，所以实际看到的一定会比 1px 粗一些。 <strong>解决1px 问题的三种思路：</strong></p>\n<h4 id=\"思路一：直接写-0-5px\"><a href=\"#思路一：直接写-0-5px\" class=\"headerlink\" title=\"思路一：直接写 0.5px\"></a>思路一：直接写 0.5px</h4><p>如果之前 1px 的样式这样写：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token property\">border</span><span class=\"token punctuation\">:</span>1px solid #333\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>可以先在 JS 中拿到 window.devicePixelRatio 的值，然后把这个值通过 JSX 或者模板语法给到 CSS 的 data 里，达到这样的效果（这里用 JSX 语法做示范）：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span> data<span class=\"token operator\">-</span>device<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>window<span class=\"token punctuation\">.</span>devicePixelRatio<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>然后就可以在 CSS 中用属性选择器来命中 devicePixelRatio 为某一值的情况，比如说这里尝试命中 devicePixelRatio 为2的情况：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">#container[data-device=\"2\"]</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span>0.5px solid #333\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>直接把 1px 改成 1/devicePixelRatio 后的值，这是目前为止最简单的一种方法。这种方法的缺陷在于兼容性不行，IOS 系统需要8及以上的版本，安卓系统则直接不兼容。</p>\n<h4 id=\"思路二：伪元素先放大后缩小\"><a href=\"#思路二：伪元素先放大后缩小\" class=\"headerlink\" title=\"思路二：伪元素先放大后缩小\"></a>思路二：伪元素先放大后缩小</h4><p>这个方法的可行性会更高，兼容性也更好。唯一的缺点是代码会变多。</p>\n<p>思路是<strong>先放大、后缩小：在目标元素的后面追加一个 ::after 伪元素，让这个元素布局为 absolute 之后、整个伸展开铺在目标元素上，然后把它的宽和高都设置为目标元素的两倍，border值设为 1px。接着借助 CSS 动画特效中的放缩能力，把整个伪元素缩小为原来的 50%。此时，伪元素的宽高刚好可以和原有的目标元素对齐，而 border 也缩小为了 1px 的二分之一，间接地实现了 0.5px 的效果。</strong></p>\n<p>代码如下：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">#container[data-device=\"2\"]</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">#container[data-device=\"2\"]::after</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">position</span><span class=\"token punctuation\">:</span>absolute<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200%<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200%<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">content</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>0.5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> left top<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid #333<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"思路三：viewport-缩放来解决\"><a href=\"#思路三：viewport-缩放来解决\" class=\"headerlink\" title=\"思路三：viewport 缩放来解决\"></a>思路三：viewport 缩放来解决</h4><p>这个思路就是对 meta 标签里几个关键属性下手：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这里针对像素比为2的页面，把整个页面缩放为了原来的1/2大小。这样，本来占用2个物理像素的 1px 样式，现在占用的就是标准的一个物理像素。根据像素比的不同，这个缩放比例可以被计算为不同的值，用 js 代码实现如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> scale <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> window<span class=\"token punctuation\">.</span>devicePixelRatio<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 这里 metaEl 指的是 meta 标签对应的 Dom</span>\nmetaEl<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'content'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">width=device-width,user-scalable=no,initial-scale=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>scale<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">,maximum-scale=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>scale<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">,minimum-scale=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>scale<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样解决了，但这样做的副作用也很大，整个页面被缩放了。这时 1px 已经被处理成物理像素大小，这样的大小在手机上显示边框很合适。但是，一些原本不需要被缩小的内容，比如文字、图片等，也被无差别缩小掉了。</p>\n","text":"HTML1. src和href的区别src和href都是用来引用外部的资源，它们的区别如下： src： 表示对资源的引用，它指向的内容会嵌入到当前标签所在的位置。src会将其指向的资源下载并应⽤到⽂档内，如请求js脚本。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该...","link":"","photos":[],"count_time":{"symbolsCount":"45k","symbolsTime":"41 mins."},"categories":[{"name":"知识点","slug":"知识点","count":18,"path":"api/categories/知识点.json"}],"tags":[{"name":"面试","slug":"面试","count":13,"path":"api/tags/面试.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HTML\"><span class=\"toc-text\">HTML</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-src%E5%92%8Chref%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">1. src和href的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%AF%B9HTML%E8%AF%AD%E4%B9%89%E5%8C%96%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">2. 对HTML语义化的理解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-DOCTYPE-%E2%BD%82%E6%A1%A3%E7%B1%BB%E5%9E%8B-%E7%9A%84%E4%BD%9C%E2%BD%A4\"><span class=\"toc-text\">3. DOCTYPE(⽂档类型) 的作⽤</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-script%E6%A0%87%E7%AD%BE%E4%B8%ADdefer%E5%92%8Casync%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">4. script标签中defer和async的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%B8%B8%E2%BD%A4%E7%9A%84meta%E6%A0%87%E7%AD%BE%E6%9C%89%E5%93%AA%E4%BA%9B\"><span class=\"toc-text\">5. 常⽤的meta标签有哪些</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-HTML5%E6%9C%89%E5%93%AA%E4%BA%9B%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">6. HTML5有哪些更新</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">1. 语义化标签</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%AA%92%E4%BD%93%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">2. 媒体标签</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E8%A1%A8%E5%8D%95\"><span class=\"toc-text\">3. 表单</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E8%BF%9B%E5%BA%A6%E6%9D%A1%E3%80%81%E5%BA%A6%E9%87%8F%E5%99%A8\"><span class=\"toc-text\">4. 进度条、度量器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-DOM%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">5.DOM查询操作</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-Web%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">6. Web存储</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-%E5%85%B6%E4%BB%96\"><span class=\"toc-text\">7. 其他</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-img%E7%9A%84srcset%E5%B1%9E%E6%80%A7%E7%9A%84%E4%BD%9C%E2%BD%A4%EF%BC%9F\"><span class=\"toc-text\">7. img的srcset属性的作⽤？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F-%E7%A9%BA-void-%E5%85%83%E7%B4%A0%E6%9C%89%E9%82%A3%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">8.  行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-%E8%AF%B4%E4%B8%80%E4%B8%8B-web-worker\"><span class=\"toc-text\">9. 说一下 web worker</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-HTML5%E7%9A%84%E7%A6%BB%E7%BA%BF%E5%82%A8%E5%AD%98%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8%EF%BC%8C%E5%AE%83%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">10. HTML5的离线储存怎么使用，它的工作原理是什么</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%AF%B9-HTML5-%E7%9A%84%E7%A6%BB%E7%BA%BF%E5%82%A8%E5%AD%98%E8%B5%84%E6%BA%90%E8%BF%9B%E8%A1%8C%E7%AE%A1%E7%90%86%E5%92%8C%E5%8A%A0%E8%BD%BD%EF%BC%9F\"><span class=\"toc-text\">11. 浏览器是如何对 HTML5 的离线储存资源进行管理和加载？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-title%E4%B8%8Eh1%E7%9A%84%E5%8C%BA%E5%88%AB%E3%80%81b%E4%B8%8Estrong%E7%9A%84%E5%8C%BA%E5%88%AB%E3%80%81i%E4%B8%8Eem%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">12. title与h1的区别、b与strong的区别、i与em的区别？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-iframe-%E6%9C%89%E9%82%A3%E4%BA%9B%E4%BC%98%E7%82%B9%E5%92%8C%E7%BC%BA%E7%82%B9%EF%BC%9F\"><span class=\"toc-text\">13. iframe 有那些优点和缺点？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-label-%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">14. label 的作用是什么？如何使用？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-Canvas%E5%92%8CSVG%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">15. Canvas和SVG的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#16-head-%E6%A0%87%E7%AD%BE%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%EF%BC%8C%E5%85%B6%E4%B8%AD%E4%BB%80%E4%B9%88%E6%A0%87%E7%AD%BE%E5%BF%85%E4%B8%8D%E5%8F%AF%E5%B0%91%EF%BC%9F\"><span class=\"toc-text\">16. head 标签有什么作用，其中什么标签必不可少？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17-%E6%96%87%E6%A1%A3%E5%A3%B0%E6%98%8E%EF%BC%88Doctype%EF%BC%89%E5%92%8C-lt-Doctype-html-gt-%E6%9C%89%E4%BD%95%E4%BD%9C%E7%94%A8-%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%B7%B7%E6%9D%82%E6%A8%A1%E5%BC%8F%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86%EF%BC%9F%E5%AE%83%E4%BB%AC%E6%9C%89%E4%BD%95%E6%84%8F%E4%B9%89\"><span class=\"toc-text\">17. 文档声明（Doctype）和&lt;!Doctype html&gt;有何作用? 严格模式与混杂模式如何区分？它们有何意义?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#18-%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B9%B1%E7%A0%81%E7%9A%84%E5%8E%9F%E5%9B%A0%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%EF%BC%9F\"><span class=\"toc-text\">18. 浏览器乱码的原因是什么？如何解决？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#19-%E6%B8%90%E8%BF%9B%E5%A2%9E%E5%BC%BA%E5%92%8C%E4%BC%98%E9%9B%85%E9%99%8D%E7%BA%A7%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">19. 渐进增强和优雅降级之间的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#20-%E8%AF%B4%E4%B8%80%E4%B8%8B-HTML5-drag-API\"><span class=\"toc-text\">20. 说一下 HTML5 drag API</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81CSS%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">一、CSS基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-CSS%E9%80%89%E6%8B%A9%E5%99%A8%E5%8F%8A%E5%85%B6%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">1. CSS选择器及其优先级</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-CSS%E4%B8%AD%E5%8F%AF%E7%BB%A7%E6%89%BF%E4%B8%8E%E4%B8%8D%E5%8F%AF%E7%BB%A7%E6%89%BF%E5%B1%9E%E6%80%A7%E6%9C%89%E5%93%AA%E4%BA%9B\"><span class=\"toc-text\">2. CSS中可继承与不可继承属性有哪些</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-display%E7%9A%84%E5%B1%9E%E6%80%A7%E5%80%BC%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">3. display的属性值及其作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-display%E7%9A%84block%E3%80%81inline%E5%92%8Cinline-block%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">4. display的block、inline和inline-block的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E9%9A%90%E8%97%8F%E5%85%83%E7%B4%A0%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B\"><span class=\"toc-text\">5. 隐藏元素的方法有哪些</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-link%E5%92%8C-import%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">6. link和@import的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-transition%E5%92%8Canimation%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">7. transition和animation的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-display-none%E4%B8%8Evisibility-hidden%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">8. display:none与visibility:hidden的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-%E4%BC%AA%E5%85%83%E7%B4%A0%E5%92%8C%E4%BC%AA%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E4%BD%9C%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">9. 伪元素和伪类的区别和作用？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-%E5%AF%B9requestAnimationframe%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">10. 对requestAnimationframe的理解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-%E5%AF%B9%E7%9B%92%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">11. 对盒模型的理解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E6%97%B6%E5%80%99%E2%BD%A4translate%E6%9D%A5%E6%94%B9%E5%8F%98%E4%BD%8D%E7%BD%AE%E2%BD%BD%E4%B8%8D%E6%98%AF%E5%AE%9A%E4%BD%8D%EF%BC%9F\"><span class=\"toc-text\">12. 为什么有时候⽤translate来改变位置⽽不是定位？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-li-%E4%B8%8E-li-%E4%B9%8B%E9%97%B4%E6%9C%89%E7%9C%8B%E4%B8%8D%E8%A7%81%E7%9A%84%E7%A9%BA%E7%99%BD%E9%97%B4%E9%9A%94%E6%98%AF%E4%BB%80%E4%B9%88%E5%8E%9F%E5%9B%A0%E5%BC%95%E8%B5%B7%E7%9A%84%EF%BC%9F%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%EF%BC%9F\"><span class=\"toc-text\">13. li 与 li 之间有看不见的空白间隔是什么原因引起的？如何解决？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-CSS3%E4%B8%AD%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">14. CSS3中有哪些新特性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-%E6%9B%BF%E6%8D%A2%E5%85%83%E7%B4%A0%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%8A%E8%AE%A1%E7%AE%97%E8%A7%84%E5%88%99\"><span class=\"toc-text\">15. 替换元素的概念及计算规则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#16-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">16. 常见的图片格式及使用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17-%E5%AF%B9-CSSSprites-%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">17. 对 CSSSprites 的理解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#18-%E4%BB%80%E4%B9%88%E6%98%AF%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%EF%BC%8C%E9%80%BB%E8%BE%91%E5%83%8F%E7%B4%A0%E5%92%8C%E5%83%8F%E7%B4%A0%E5%AF%86%E5%BA%A6%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E6%97%B6%E9%9C%80%E8%A6%81%E7%94%A8%E5%88%B0-3x-2x%E8%BF%99%E7%A7%8D%E5%9B%BE%E7%89%87%EF%BC%9F\"><span class=\"toc-text\">18. 什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x, @2x这种图片？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#19-margin-%E5%92%8C-padding-%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">19. margin 和 padding 的使用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#20-%E5%AF%B9line-height-%E7%9A%84%E7%90%86%E8%A7%A3%E5%8F%8A%E5%85%B6%E8%B5%8B%E5%80%BC%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">20. 对line-height 的理解及其赋值方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#21-CSS-%E4%BC%98%E5%8C%96%E5%92%8C%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">21. CSS 优化和提高性能的方法有哪些？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#22-CSS%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8-%E5%90%8E%E5%A4%84%E7%90%86%E5%99%A8%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E5%AE%83%E4%BB%AC%EF%BC%9F\"><span class=\"toc-text\">22. CSS预处理器&#x2F;后处理器是什么？为什么要使用它们？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#23-before-%E5%92%8C-after-%E7%9A%84%E5%8F%8C%E5%86%92%E5%8F%B7%E5%92%8C%E5%8D%95%E5%86%92%E5%8F%B7%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">23. ::before 和 :after 的双冒号和单冒号有什么区别？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#24-display-inline-block-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%98%BE%E7%A4%BA%E9%97%B4%E9%9A%99%EF%BC%9F\"><span class=\"toc-text\">24. display:inline-block 什么时候会显示间隙？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#25-%E5%8D%95%E8%A1%8C%E3%80%81%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E9%9A%90%E8%97%8F\"><span class=\"toc-text\">25. 单行、多行文本溢出隐藏</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#26-Sass%E3%80%81Less-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E4%BB%96%E4%BB%AC%EF%BC%9F\"><span class=\"toc-text\">26. Sass、Less 是什么？为什么要使用他们？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#27-%E5%AF%B9%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F\"><span class=\"toc-text\">27. 对媒体查询的理解？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#28-%E5%AF%B9-CSS-%E5%B7%A5%E7%A8%8B%E5%8C%96%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">28. 对 CSS 工程化的理解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#29-%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E5%85%83%E7%B4%A0%E6%98%AF%E5%90%A6%E5%88%B0%E8%BE%BE%E5%8F%AF%E8%A7%86%E5%8C%BA%E5%9F%9F\"><span class=\"toc-text\">29. 如何判断元素是否到达可视区域</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#30-z-index%E5%B1%9E%E6%80%A7%E5%9C%A8%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E4%BC%9A%E5%A4%B1%E6%95%88\"><span class=\"toc-text\">30. z-index属性在什么情况下会失效</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#31-CSS3%E4%B8%AD%E7%9A%84transform%E6%9C%89%E5%93%AA%E4%BA%9B%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">31. CSS3中的transform有哪些属性</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80\"><span class=\"toc-text\">二、页面布局</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%B8%B8%E8%A7%81%E7%9A%84CSS%E5%B8%83%E5%B1%80%E5%8D%95%E4%BD%8D\"><span class=\"toc-text\">1. 常见的CSS布局单位</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-px%E3%80%81em%E3%80%81rem%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">2. px、em、rem的区别及使用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%B8%A4%E6%A0%8F%E5%B8%83%E5%B1%80%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">3. 两栏布局的实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">4. 三栏布局的实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">5. 水平垂直居中的实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E5%A6%82%E4%BD%95%E6%A0%B9%E6%8D%AE%E8%AE%BE%E8%AE%A1%E7%A8%BF%E8%BF%9B%E8%A1%8C%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%EF%BC%9F\"><span class=\"toc-text\">6. 如何根据设计稿进行移动端适配？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E5%AF%B9Flex%E5%B8%83%E5%B1%80%E7%9A%84%E7%90%86%E8%A7%A3%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">7. 对Flex布局的理解及其使用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E5%93%8D%E5%BA%94%E5%BC%8F%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">8. 响应式设计的概念及基本原理</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8\"><span class=\"toc-text\">三、定位与浮动</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%EF%BC%9F%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">1. 为什么需要清除浮动？清除浮动的方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8-clear-%E5%B1%9E%E6%80%A7%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E5%8E%9F%E7%90%86%EF%BC%9F\"><span class=\"toc-text\">2. 使用 clear 属性清除浮动的原理？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%AF%B9BFC%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%8C%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BABFC\"><span class=\"toc-text\">3. 对BFC的理解，如何创建BFC</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BB%80%E4%B9%88%E6%98%AFmargin%E9%87%8D%E5%8F%A0%E9%97%AE%E9%A2%98%EF%BC%9F%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%EF%BC%9F\"><span class=\"toc-text\">4. 什么是margin重叠问题？如何解决？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%85%83%E7%B4%A0%E7%9A%84%E5%B1%82%E5%8F%A0%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">5. 元素的层叠顺序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-position%E7%9A%84%E5%B1%9E%E6%80%A7%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%8C%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">6. position的属性有哪些，区别是什么</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-display%E3%80%81float%E3%80%81position%E7%9A%84%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">7. display、float、position的关系</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-absolute%E4%B8%8Efixed%E5%85%B1%E5%90%8C%E7%82%B9%E4%B8%8E%E4%B8%8D%E5%90%8C%E7%82%B9\"><span class=\"toc-text\">8. absolute与fixed共同点与不同点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-%E5%AF%B9-sticky-%E5%AE%9A%E4%BD%8D%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">9. 对 sticky 定位的理解</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E5%9C%BA%E6%99%AF%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">四、场景应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E4%B8%89%E8%A7%92%E5%BD%A2\"><span class=\"toc-text\">1. 实现一个三角形</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%89%87%E5%BD%A2\"><span class=\"toc-text\">2. 实现一个扇形</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%AE%BD%E9%AB%98%E8%87%AA%E9%80%82%E5%BA%94%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2\"><span class=\"toc-text\">3. 实现一个宽高自适应的正方形</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%94%BB%E4%B8%80%E6%9D%A10-5px%E7%9A%84%E7%BA%BF\"><span class=\"toc-text\">4. 画一条0.5px的线</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E8%AE%BE%E7%BD%AE%E5%B0%8F%E4%BA%8E12px%E7%9A%84%E5%AD%97%E4%BD%93\"><span class=\"toc-text\">5. 设置小于12px的字体</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3-1px-%E9%97%AE%E9%A2%98%EF%BC%9F\"><span class=\"toc-text\">6. 如何解决 1px 问题？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E4%B8%80%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%99-0-5px\"><span class=\"toc-text\">思路一：直接写 0.5px</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E4%BA%8C%EF%BC%9A%E4%BC%AA%E5%85%83%E7%B4%A0%E5%85%88%E6%94%BE%E5%A4%A7%E5%90%8E%E7%BC%A9%E5%B0%8F\"><span class=\"toc-text\">思路二：伪元素先放大后缩小</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E4%B8%89%EF%BC%9Aviewport-%E7%BC%A9%E6%94%BE%E6%9D%A5%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">思路三：viewport 缩放来解决</span></a></li></ol></li></ol></li></ol>","author":{"name":"LIYUNFU","slug":"blog-author","avatar":"https://p26-passport.byteacctimg.com/img/user-avatar/c52fbf24fbba8a052c8dd93e8b978eac~300x300.image","link":"/","description":"一个正在重塑知识的切图仔 <br /> @ <b>公众号:伯nulee</b>","socials":{"github":"https://gitee.com/LUNIONT","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/2277843824292183","customs":{}}},"mapped":true,"prev_post":{"title":"JavaScript面试题","uid":"f9ba258d0c41d5b94c171702acf48433","slug":"JavaScript面试题","date":"2022-04-10T12:17:20.000Z","updated":"2022-04-10T12:19:49.477Z","comments":true,"path":"api/articles/JavaScript面试题.json","keywords":null,"cover":[],"text":"一、数据类型1. JavaScript有哪些数据类型，它们的区别？JavaScript共有八种数据类型，分别是 Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt。 其中 Symbol 和 BigInt 是ES6 中...","link":"","photos":[],"count_time":{"symbolsCount":"78k","symbolsTime":"1:11"},"categories":[{"name":"知识点","slug":"知识点","count":18,"path":"api/categories/知识点.json"}],"tags":[{"name":"面试","slug":"面试","count":13,"path":"api/tags/面试.json"}],"author":{"name":"LIYUNFU","slug":"blog-author","avatar":"https://p26-passport.byteacctimg.com/img/user-avatar/c52fbf24fbba8a052c8dd93e8b978eac~300x300.image","link":"/","description":"一个正在重塑知识的切图仔 <br /> @ <b>公众号:伯nulee</b>","socials":{"github":"https://gitee.com/LUNIONT","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/2277843824292183","customs":{}}}},"next_post":{"title":"React面试题","uid":"c1e8ab70e0a19618b82b65eaec3559f1","slug":"React面试题","date":"2022-04-10T12:16:43.000Z","updated":"2022-04-10T12:18:28.307Z","comments":true,"path":"api/articles/React面试题.json","keywords":null,"cover":[],"text":"一、组件基础1. React 事件机制&lt;div onClick=&#123;this.handleClick.bind(this)&#125;>点我&lt;/div> React并不是将click事件绑定到了div的真实DOM上，而是在document处监听了所有的事件，当...","link":"","photos":[],"count_time":{"symbolsCount":"107k","symbolsTime":"1:38"},"categories":[{"name":"知识点","slug":"知识点","count":18,"path":"api/categories/知识点.json"}],"tags":[{"name":"面试","slug":"面试","count":13,"path":"api/tags/面试.json"}],"author":{"name":"LIYUNFU","slug":"blog-author","avatar":"https://p26-passport.byteacctimg.com/img/user-avatar/c52fbf24fbba8a052c8dd93e8b978eac~300x300.image","link":"/","description":"一个正在重塑知识的切图仔 <br /> @ <b>公众号:伯nulee</b>","socials":{"github":"https://gitee.com/LUNIONT","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/2277843824292183","customs":{}}}}}