{"title":"NodeJS面试题","uid":"1978ad52226e2e5a45738891b7ab43e0","slug":"NodeJS面试题","date":"2022-04-10T12:25:21.000Z","updated":"2022-04-10T12:25:44.030Z","comments":true,"path":"api/articles/NodeJS面试题.json","keywords":null,"cover":[],"content":"<h2 id=\"1、Node模块机制\"><a href=\"#1、Node模块机制\" class=\"headerlink\" title=\"1、Node模块机制\"></a>1、Node模块机制</h2><h3 id=\"1-1-请介绍一下node里的模块是什么\"><a href=\"#1-1-请介绍一下node里的模块是什么\" class=\"headerlink\" title=\"1.1 请介绍一下node里的模块是什么\"></a>1.1 请介绍一下node里的模块是什么</h3><p>Node中，每个文件模块都是一个对象，它的定义如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function Module(id, parent) &#123;\n  this.id &#x3D; id;\n  this.exports &#x3D; &#123;&#125;;\n  this.parent &#x3D; parent;\n  this.filename &#x3D; null;\n  this.loaded &#x3D; false;\n  this.children &#x3D; [];\n&#125;\n\nmodule.exports &#x3D; Module;\n\nvar module &#x3D; new Module(filename, parent);\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所有的模块都是 Module 的实例。可以看到，当前模块（module.js）也是 Module 的一个实例。</p>\n<h3 id=\"1-2-请介绍一下require的模块加载机制\"><a href=\"#1-2-请介绍一下require的模块加载机制\" class=\"headerlink\" title=\"1.2 请介绍一下require的模块加载机制\"></a>1.2 请介绍一下require的模块加载机制</h3><p>这道题基本上就可以了解到面试者对Node模块机制的了解程度 基本上面试提到</p>\n<ul>\n<li>1、先计算模块路径</li>\n<li>2、如果模块在缓存里面，取出缓存</li>\n<li>3、加载模块</li>\n<li>4、的输出模块的exports属性即可</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; require 其实内部调用 Module._load 方法\nModule._load &#x3D; function(request, parent, isMain) &#123;\n  &#x2F;&#x2F;  计算绝对路径\n  var filename &#x3D; Module._resolveFilename(request, parent);\n\n  &#x2F;&#x2F;  第一步：如果有缓存，取出缓存\n  var cachedModule &#x3D; Module._cache[filename];\n  if (cachedModule) &#123;\n    return cachedModule.exports;\n\n  &#x2F;&#x2F; 第二步：是否为内置模块\n  if (NativeModule.exists(filename)) &#123;\n    return NativeModule.require(filename);\n  &#125;\n  \n  &#x2F;********************************这里注意了**************************&#x2F;\n  &#x2F;&#x2F; 第三步：生成模块实例，存入缓存\n  &#x2F;&#x2F; 这里的Module就是我们上面的1.1定义的Module\n  var module &#x3D; new Module(filename, parent);\n  Module._cache[filename] &#x3D; module;\n\n  &#x2F;********************************这里注意了**************************&#x2F;\n  &#x2F;&#x2F; 第四步：加载模块\n  &#x2F;&#x2F; 下面的module.load实际上是Module原型上有一个方法叫Module.prototype.load\n  try &#123;\n    module.load(filename);\n    hadException &#x3D; false;\n  &#125; finally &#123;\n    if (hadException) &#123;\n      delete Module._cache[filename];\n    &#125;\n  &#125;\n\n  &#x2F;&#x2F; 第五步：输出模块的exports属性\n  return module.exports;\n&#125;;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接着上一题继续发问</p>\n<h3 id=\"1-3-加载模块时，为什么每个模块都有-dirname-filename属性呢，new-Module的时候我们看到1-1部分没有这两个属性的，那么这两个属性是从哪里来的\"><a href=\"#1-3-加载模块时，为什么每个模块都有-dirname-filename属性呢，new-Module的时候我们看到1-1部分没有这两个属性的，那么这两个属性是从哪里来的\" class=\"headerlink\" title=\"1.3 加载模块时，为什么每个模块都有__dirname,__filename属性呢，new Module的时候我们看到1.1部分没有这两个属性的，那么这两个属性是从哪里来的\"></a>1.3 加载模块时，为什么每个模块都有__dirname,__filename属性呢，new Module的时候我们看到1.1部分没有这两个属性的，那么这两个属性是从哪里来的</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 上面(1.2部分)的第四步module.load(filename)\n&#x2F;&#x2F; 这一步，module模块相当于被包装了，包装形式如下\n&#x2F;&#x2F; 加载js模块，相当于下面的代码（加载node模块和json模块逻辑不一样）\n(function (exports, require, module, __filename, __dirname) &#123;\n  &#x2F;&#x2F; 模块源码\n  &#x2F;&#x2F; 假如模块代码如下\n  var math &#x3D; require(&#39;math&#39;);\n  exports.area &#x3D; function(radius)&#123;\n      return Math.PI * radius * radius\n  &#125;\n&#125;);\n\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>也就是说，每个module里面都会传入__filename, __dirname参数，这两个参数并不是module本身就有的，是外界传入的</p>\n<h3 id=\"1-4-我们知道node导出模块有两种方式，一种是exports-xxx-xxx和Module-exports-有什么区别吗\"><a href=\"#1-4-我们知道node导出模块有两种方式，一种是exports-xxx-xxx和Module-exports-有什么区别吗\" class=\"headerlink\" title=\"1.4 我们知道node导出模块有两种方式，一种是exports.xxx=xxx和Module.exports={}有什么区别吗\"></a>1.4 我们知道node导出模块有两种方式，一种是exports.xxx=xxx和Module.exports={}有什么区别吗</h3><ul>\n<li>exports其实就是module.exports</li>\n<li>其实1.3问题的代码已经说明问题了，接着我引用廖雪峰大神的讲解，希望能讲的更清楚</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">module.exports vs exports\n很多时候，你会看到，在Node环境中，有两种方法可以在一个模块中输出变量：\n\n方法一：对module.exports赋值：\n\n&#x2F;&#x2F; hello.js\n\nfunction hello() &#123;\n    console.log(&#39;Hello, world!&#39;);\n&#125;\n\nfunction greet(name) &#123;\n    console.log(&#39;Hello, &#39; + name + &#39;!&#39;);\n&#125;\n\nmodule.exports &#x3D; &#123;\n    hello: hello,\n    greet: greet\n&#125;;\n方法二：直接使用exports：\n\n&#x2F;&#x2F; hello.js\n\nfunction hello() &#123;\n    console.log(&#39;Hello, world!&#39;);\n&#125;\n\nfunction greet(name) &#123;\n    console.log(&#39;Hello, &#39; + name + &#39;!&#39;);\n&#125;\n\nfunction hello() &#123;\n    console.log(&#39;Hello, world!&#39;);\n&#125;\n\nexports.hello &#x3D; hello;\nexports.greet &#x3D; greet;\n但是你不可以直接对exports赋值：\n\n&#x2F;&#x2F; 代码可以执行，但是模块并没有输出任何变量:\nexports &#x3D; &#123;\n    hello: hello,\n    greet: greet\n&#125;;\n如果你对上面的写法感到十分困惑，不要着急，我们来分析Node的加载机制：\n\n首先，Node会把整个待加载的hello.js文件放入一个包装函数load中执行。在执行这个load()函数前，Node准备好了module变量：\n\nvar module &#x3D; &#123;\n    id: &#39;hello&#39;,\n    exports: &#123;&#125;\n&#125;;\nload()函数最终返回module.exports：\n\nvar load &#x3D; function (exports, module) &#123;\n    &#x2F;&#x2F; hello.js的文件内容\n    ...\n    &#x2F;&#x2F; load函数返回:\n    return module.exports;\n&#125;;\n\nvar exportes &#x3D; load(module.exports, module);\n也就是说，默认情况下，Node准备的exports变量和module.exports变量实际上是同一个变量，并且初始化为空对象&#123;&#125;，于是，我们可以写：\n\nexports.foo &#x3D; function () &#123; return &#39;foo&#39;; &#125;;\nexports.bar &#x3D; function () &#123; return &#39;bar&#39;; &#125;;\n也可以写：\n\nmodule.exports.foo &#x3D; function () &#123; return &#39;foo&#39;; &#125;;\nmodule.exports.bar &#x3D; function () &#123; return &#39;bar&#39;; &#125;;\n换句话说，Node默认给你准备了一个空对象&#123;&#125;，这样你可以直接往里面加东西。\n\n但是，如果我们要输出的是一个函数或数组，那么，只能给module.exports赋值：\n\nmodule.exports &#x3D; function () &#123; return &#39;foo&#39;; &#125;;\n给exports赋值是无效的，因为赋值后，module.exports仍然是空对象&#123;&#125;。\n\n结论\n如果要输出一个键值对象&#123;&#125;，可以利用exports这个已存在的空对象&#123;&#125;，并继续在上面添加新的键值；\n\n如果要输出一个函数或数组，必须直接对module.exports对象赋值。\n\n所以我们可以得出结论：直接对module.exports赋值，可以应对任何情况：\n\nmodule.exports &#x3D; &#123;\n    foo: function () &#123; return &#39;foo&#39;; &#125;\n&#125;;\n或者：\n\nmodule.exports &#x3D; function () &#123; return &#39;foo&#39;; &#125;;\n最终，我们强烈建议使用module.exports &#x3D; xxx的方式来输出模块变量，这样，你只需要记忆一种方法。\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"2、Node的异步I-O\"><a href=\"#2、Node的异步I-O\" class=\"headerlink\" title=\"2、Node的异步I/O\"></a>2、Node的异步I/O</h2><p>本章的答题思路大多借鉴于朴灵大神的《深入浅出的NodeJS》</p>\n<h3 id=\"2-1-请介绍一下Node事件循环的流程\"><a href=\"#2-1-请介绍一下Node事件循环的流程\" class=\"headerlink\" title=\"2.1 请介绍一下Node事件循环的流程\"></a>2.1 请介绍一下Node事件循环的流程</h3><ul>\n<li>在进程启动时，Node便会创建一个类似于while(true)的循环，每执行一次循环体的过程我们成为Tick。</li>\n<li>每个Tick的过程就是查看是否有事件待处理。如果有就取出事件及其相关的回调函数。然后进入下一个循环，如果不再有事件处理，就退出进程。</li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/19/16c090d08e336752~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n<h3 id=\"2-2-在每个tick的过程中，如何判断是否有事件需要处理呢？\"><a href=\"#2-2-在每个tick的过程中，如何判断是否有事件需要处理呢？\" class=\"headerlink\" title=\"2.2 在每个tick的过程中，如何判断是否有事件需要处理呢？\"></a>2.2 在每个tick的过程中，如何判断是否有事件需要处理呢？</h3><ul>\n<li>每个事件循环中有一个或者多个观察者，而判断是否有事件需要处理的过程就是向这些观察者询问是否有要处理的事件。</li>\n<li>在Node中，事件主要来源于网络请求、文件的I/O等，这些事件对应的观察者有文件I/O观察者，网络I/O的观察者。</li>\n<li>事件循环是一个典型的生产者/消费者模型。异步I/O，网络请求等则是事件的生产者，源源不断为Node提供不同类型的事件，这些事件被传递到对应的观察者那里，事件循环则从观察者那里取出事件并处理。</li>\n<li>在windows下，这个循环基于IOCP创建，在*nix下则基于多线程创建</li>\n</ul>\n<h3 id=\"2-3-请描述一下整个异步I-O的流程\"><a href=\"#2-3-请描述一下整个异步I-O的流程\" class=\"headerlink\" title=\"2.3 请描述一下整个异步I/O的流程\"></a>2.3 请描述一下整个异步I/O的流程</h3><p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/19/16c091766912eef7~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n<h2 id=\"3、V8的垃圾回收机制\"><a href=\"#3、V8的垃圾回收机制\" class=\"headerlink\" title=\"3、V8的垃圾回收机制\"></a>3、V8的垃圾回收机制</h2><h3 id=\"3-1-如何查看V8的内存使用情况\"><a href=\"#3-1-如何查看V8的内存使用情况\" class=\"headerlink\" title=\"3.1 如何查看V8的内存使用情况\"></a>3.1 如何查看V8的内存使用情况</h3><p>使用process.memoryUsage(),返回如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;\n  rss: 4935680,\n  heapTotal: 1826816,\n  heapUsed: 650472,\n  external: 49879\n&#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>heapTotal 和 heapUsed 代表V8的内存使用情况。 external代表V8管理的，绑定到Javascript的C++对象的内存使用情况。 rss, 驻留集大小, 是给这个进程分配了多少物理内存(占总分配内存的一部分) 这些物理内存中包含堆，栈，和代码段。</p>\n<h3 id=\"3-2-V8的内存限制是多少，为什么V8这样设计\"><a href=\"#3-2-V8的内存限制是多少，为什么V8这样设计\" class=\"headerlink\" title=\"3.2 V8的内存限制是多少，为什么V8这样设计\"></a>3.2 V8的内存限制是多少，为什么V8这样设计</h3><p>64位系统下是1.4GB， 32位系统下是0.7GB。因为1.5GB的垃圾回收堆内存，V8需要花费50毫秒以上，做一次非增量式的垃圾回收甚至要1秒以上。这是垃圾回收中引起Javascript线程暂停执行的事件，在这样的花销下，应用的性能和影响力都会直线下降。</p>\n<h3 id=\"3-3-V8的内存分代和回收算法请简单讲一讲\"><a href=\"#3-3-V8的内存分代和回收算法请简单讲一讲\" class=\"headerlink\" title=\"3.3 V8的内存分代和回收算法请简单讲一讲\"></a>3.3 V8的内存分代和回收算法请简单讲一讲</h3><p>在V8中，主要将内存分为新生代和老生代两代。新生代中的对象存活时间较短的对象，老生代中的对象存活时间较长，或常驻内存的对象。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/22/16c17670e2c0fcbd~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n<h4 id=\"3-3-1-新生代\"><a href=\"#3-3-1-新生代\" class=\"headerlink\" title=\"3.3.1 新生代\"></a>3.3.1 新生代</h4><p>新生代中的对象主要通过Scavenge算法进行垃圾回收。这是一种采用复制的方式实现的垃圾回收算法。它将堆内存一份为二，每一部分空间成为semispace。在这两个semispace空间中，只有一个处于使用中，另一个处于闲置状态。处于使用状态的semispace空间称为From空间，处于闲置状态的空间称为To空间。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/22/16c176726dc85756~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n<ul>\n<li>当开始垃圾回收的时候，会检查From空间中的存活对象，这些存活对象将被复制到To空间中，而非存活对象占用的空间将会被释放。完成复制后，From空间和To空间发生角色对换。</li>\n<li>应为新生代中对象的生命周期比较短，就比较适合这个算法。</li>\n<li>当一个对象经过多次复制依然存活，它将会被认为是生命周期较长的对象。这种新生代中生命周期较长的对象随后会被移到老生代中。</li>\n</ul>\n<h4 id=\"3-3-2-老生代\"><a href=\"#3-3-2-老生代\" class=\"headerlink\" title=\"3.3.2 老生代\"></a>3.3.2 老生代</h4><p>老生代主要采取的是标记清除的垃圾回收算法。与Scavenge复制活着的对象不同，标记清除算法在标记阶段遍历堆中的所有对象，并标记活着的对象，只清理死亡对象。活对象在新生代中只占叫小部分，死对象在老生代中只占较小部分，这是为什么采用标记清除算法的原因。</p>\n<h4 id=\"3-3-3-标记清楚算法的问题\"><a href=\"#3-3-3-标记清楚算法的问题\" class=\"headerlink\" title=\"3.3.3 标记清楚算法的问题\"></a>3.3.3 标记清楚算法的问题</h4><p>主要问题是每一次进行标记清除回收后，内存空间会出现不连续的状态</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/22/16c176daf6c88bc8~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n<ul>\n<li>这种内存碎片会对后续内存分配造成问题，很可能出现需要分配一个大对象的情况，这时所有的碎片空间都无法完成此次分配，就会提前触发垃圾回收，而这次回收是不必要的。</li>\n<li>为了解决碎片问题，标记整理被提出来。就是在对象被标记死亡后，在整理的过程中，将活着的对象往一端移动，移动完成后，直接清理掉边界外的内存。</li>\n</ul>\n<h4 id=\"3-3-4-哪些情况会造成V8无法立即回收内存\"><a href=\"#3-3-4-哪些情况会造成V8无法立即回收内存\" class=\"headerlink\" title=\"3.3.4 哪些情况会造成V8无法立即回收内存\"></a>3.3.4 哪些情况会造成V8无法立即回收内存</h4><p>闭包和全局变量</p>\n<h4 id=\"3-3-5-请谈一下内存泄漏是什么，以及常见内存泄漏的原因，和排查的方法\"><a href=\"#3-3-5-请谈一下内存泄漏是什么，以及常见内存泄漏的原因，和排查的方法\" class=\"headerlink\" title=\"3.3.5 请谈一下内存泄漏是什么，以及常见内存泄漏的原因，和排查的方法\"></a>3.3.5 请谈一下内存泄漏是什么，以及常见内存泄漏的原因，和排查的方法</h4><p><strong>什么是内存泄漏</strong></p>\n<ul>\n<li>内存泄漏(Memory Leak)指由于疏忽或错误造成程序未能释放已经不再使用的内存的情况。</li>\n<li>如果内存泄漏的位置比较关键，那么随着处理的进行可能持有越来越多的无用内存，这些无用的内存变多会引起服务器响应速度变慢。</li>\n<li>严重的情况下导致内存达到某个极限(可能是进程的上限，如 v8 的上限;也可能是系统可提供的内存上限)会使得应用程序崩溃。 常见内存泄漏的原因 内存泄漏的几种情况:</li>\n</ul>\n<p><strong>一、全局变量</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">a &#x3D; 10;  \n&#x2F;&#x2F;未声明对象。  \nglobal.b &#x3D; 11;  \n&#x2F;&#x2F;全局变量引用 \n这种比较简单的原因，全局变量直接挂在 root 对象上，不会被清除掉。\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>二、闭包</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function out() &#123;  \n    const bigData &#x3D; new Buffer(100);  \n    inner &#x3D; function () &#123;  \n        \n    &#125;  \n&#125; \n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>闭包会引用到父级函数中的变量，如果闭包未释放，就会导致内存泄漏。上面例子是 inner 直接挂在了 root 上，那么每次执行 out 函数所产生的 bigData 都不会释放，从而导致内存泄漏。</p>\n<p>需要注意的是，这里举得例子只是简单的将引用挂在全局对象上，实际的业务情况可能是挂在某个可以从 root 追溯到的对象上导致的。</p>\n<p><strong>三、事件监听</strong></p>\n<p>Node.js 的事件监听也可能出现的内存泄漏。例如对同一个事件重复监听，忘记移除(removeListener)，将造成内存泄漏。这种情况很容易在复用对象上添加事件时出现，所以事件重复监听可能收到如下警告：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">emitter.setMaxListeners() to increase limit \n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>例如，Node.js 中 Agent 的 keepAlive 为 true 时，可能造成的内存泄漏。当 Agent keepAlive 为 true 的时候，将会复用之前使用过的 socket，如果在 socket 上添加事件监听，忘记清除的话，因为 socket 的复用，将导致事件重复监听从而产生内存泄漏。</p>\n<p>原理上与前一个添加事件监听的时候忘了清除是一样的。在使用 Node.js 的 http 模块时，不通过 keepAlive 复用是没有问题的，复用了以后就会可能产生内存泄漏。所以，你需要了解添加事件监听的对象的生命周期，并注意自行移除。</p>\n<p><strong>排查方法</strong></p>\n<p>想要定位内存泄漏，通常会有两种情况：</p>\n<ul>\n<li>对于只要正常使用就可以重现的内存泄漏，这是很简单的情况只要在测试环境模拟就可以排查了。</li>\n<li>对于偶然的内存泄漏，一般会与特殊的输入有关系。想稳定重现这种输入是很耗时的过程。如果不能通过代码的日志定位到这个特殊的输入，那么推荐去生产环境打印内存快照了。</li>\n<li>需要注意的是，打印内存快照是很耗 CPU 的操作，可能会对线上业务造成影响。 快照工具推荐使用 heapdump 用来保存内存快照，使用 devtool 来查看内存快照。</li>\n<li>使用 heapdump 保存内存快照时，只会有 Node.js 环境中的对象，不会受到干扰(如果使用 node-inspector 的话，快照中会有前端的变量干扰)。</li>\n<li>PS：安装 heapdump 在某些 Node.js 版本上可能出错，建议使用 npm install heapdump -target=Node.js 版本来安装。</li>\n</ul>\n<h2 id=\"4、Buffer模块\"><a href=\"#4、Buffer模块\" class=\"headerlink\" title=\"4、Buffer模块\"></a>4、Buffer模块</h2><h3 id=\"4-1-新建Buffer会占用V8分配的内存吗\"><a href=\"#4-1-新建Buffer会占用V8分配的内存吗\" class=\"headerlink\" title=\"4.1 新建Buffer会占用V8分配的内存吗\"></a>4.1 新建Buffer会占用V8分配的内存吗</h3><p>不会，Buffer属于堆外内存，不是V8分配的。</p>\n<h3 id=\"4-2-Buffer-alloc和Buffer-allocUnsafe的区别\"><a href=\"#4-2-Buffer-alloc和Buffer-allocUnsafe的区别\" class=\"headerlink\" title=\"4.2 Buffer.alloc和Buffer.allocUnsafe的区别\"></a>4.2 Buffer.alloc和Buffer.allocUnsafe的区别</h3><p>Buffer.allocUnsafe创建的 Buffer 实例的底层内存是未初始化的。 新创建的 Buffer 的内容是未知的，可能包含敏感数据。 使用 Buffer.alloc() 可以创建以零初始化的 Buffer 实例。</p>\n<h3 id=\"4-3-Buffer的内存分配机制\"><a href=\"#4-3-Buffer的内存分配机制\" class=\"headerlink\" title=\"4.3 Buffer的内存分配机制\"></a>4.3 Buffer的内存分配机制</h3><p>为了高效的使用申请来的内存，Node采用了slab分配机制。slab是一种动态的内存管理机制。 Node以8kb为界限来来区分Buffer为大对象还是小对象，如果是小于8kb就是小Buffer，大于8kb就是大Buffer。</p>\n<p>例如第一次分配一个1024字节的Buffer，Buffer.alloc(1024),那么这次分配就会用到一个slab，接着如果继续Buffer.alloc(1024),那么上一次用的slab的空间还没有用完，因为总共是8kb，1024+1024 = 2048个字节，没有8kb，所以就继续用这个slab给Buffer分配空间。</p>\n<p>如果超过8kb，那么直接用C++底层地宫的SlowBuffer来给Buffer对象提供空间。</p>\n<h3 id=\"4-4-Buffer乱码问题\"><a href=\"#4-4-Buffer乱码问题\" class=\"headerlink\" title=\"4.4 Buffer乱码问题\"></a>4.4 Buffer乱码问题</h3><p>例如一个份文件test.md里的内容如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">床前明月光，疑是地上霜，举头望明月，低头思故乡\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>我们这样读取就会出现乱码：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var rs &#x3D; require(&#39;fs&#39;).createReadStream(&#39;test.md&#39;, &#123;highWaterMark: 11&#125;);\n&#x2F;&#x2F; 床前明???光，疑???地上霜，举头???明月，???头思故乡\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>一般情况下，只需要设置rs.setEncoding(‘utf8’)即可解决乱码问题</p>\n<h2 id=\"5、webSocket\"><a href=\"#5、webSocket\" class=\"headerlink\" title=\"5、webSocket\"></a>5、webSocket</h2><h3 id=\"5-1-webSocket与传统的http有什么优势\"><a href=\"#5-1-webSocket与传统的http有什么优势\" class=\"headerlink\" title=\"5.1 webSocket与传统的http有什么优势\"></a>5.1 webSocket与传统的http有什么优势</h3><ul>\n<li>客户端与服务器只需要一个TCP连接，比http长轮询使用更少的连接</li>\n<li>webSocket服务端可以推送数据到客户端</li>\n<li>更轻量的协议头，减少数据传输量</li>\n</ul>\n<h3 id=\"5-2-webSocket协议升级时什么，能简述一下吗？\"><a href=\"#5-2-webSocket协议升级时什么，能简述一下吗？\" class=\"headerlink\" title=\"5.2 webSocket协议升级时什么，能简述一下吗？\"></a>5.2 webSocket协议升级时什么，能简述一下吗？</h3><p>首先，WebSocket连接必须由浏览器发起，因为请求协议是一个标准的HTTP请求，格式如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">GET ws:&#x2F;&#x2F;localhost:3000&#x2F;ws&#x2F;chat HTTP&#x2F;1.1\nHost: localhost\nUpgrade: websocket\nConnection: Upgrade\nOrigin: http:&#x2F;&#x2F;localhost:3000\nSec-WebSocket-Key: client-random-string\nSec-WebSocket-Version: 13\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>该请求和普通的HTTP请求有几点不同：</p>\n<ul>\n<li>GET请求的地址不是类似/path/，而是以ws://开头的地址；</li>\n<li>请求头Upgrade: websocket和Connection: Upgrade表示这个连接将要被转换为WebSocket连接；</li>\n<li>Sec-WebSocket-Key是用于标识这个连接，并非用于加密数据；</li>\n<li>Sec-WebSocket-Version指定了WebSocket的协议版本。</li>\n</ul>\n<p>随后，服务器如果接受该请求，就会返回如下响应：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">HTTP&#x2F;1.1 101 Switching Protocols\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Accept: server-random-string\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>该响应代码101表示本次连接的HTTP协议即将被更改，更改后的协议就是Upgrade: websocket指定的WebSocket协议。</p>\n<h2 id=\"6、https\"><a href=\"#6、https\" class=\"headerlink\" title=\"6、https\"></a>6、https</h2><h3 id=\"6-1-https用哪些端口进行通信，这些端口分别有什么用\"><a href=\"#6-1-https用哪些端口进行通信，这些端口分别有什么用\" class=\"headerlink\" title=\"6.1 https用哪些端口进行通信，这些端口分别有什么用\"></a>6.1 https用哪些端口进行通信，这些端口分别有什么用</h3><ul>\n<li>443端口用来验证服务器端和客户端的身份，比如验证证书的合法性</li>\n<li>80端口用来传输数据（在验证身份合法的情况下，用来数据传输）</li>\n</ul>\n<h3 id=\"6-2-身份验证过程中会涉及到密钥，-对称加密，非对称加密，摘要的概念，请解释一下\"><a href=\"#6-2-身份验证过程中会涉及到密钥，-对称加密，非对称加密，摘要的概念，请解释一下\" class=\"headerlink\" title=\"6.2 身份验证过程中会涉及到密钥， 对称加密，非对称加密，摘要的概念，请解释一下\"></a>6.2 身份验证过程中会涉及到密钥， 对称加密，非对称加密，摘要的概念，请解释一下</h3><ul>\n<li>密钥：密钥是一种参数，它是在明文转换为密文或将密文转换为明文的算法中输入的参数。密钥分为对称密钥与非对称密钥，分别应用在对称加密和非对称加密上。</li>\n<li>对称加密：对称加密又叫做私钥加密，即信息的发送方和接收方使用同一个密钥去加密和解密数据。对称加密的特点是算法公开、加密和解密速度快，适合于对大数据量进行加密，常见的对称加密算法有DES、3DES、TDEA、Blowfish、RC5和IDEA。</li>\n<li>非对称加密：非对称加密也叫做公钥加密。非对称加密与对称加密相比，其安全性更好。对称加密的通信双方使用相同的密钥，如果一方的密钥遭泄露，那么整个通信就会被破解。而非对称加密使用一对密钥，即公钥和私钥，且二者成对出现。私钥被自己保存，不能对外泄露。公钥指的是公共的密钥，任何人都可以获得该密钥。用公钥或私钥中的任何一个进行加密，用另一个进行解密。</li>\n<li>摘要： 摘要算法又称哈希/散列算法。它通过一个函数，把任意长度的数据转换为一个长度固定的数据串（通常用16进制的字符串表示）。算法不可逆。</li>\n</ul>\n<h3 id=\"6-3-为什么需要CA机构对证书签名\"><a href=\"#6-3-为什么需要CA机构对证书签名\" class=\"headerlink\" title=\"6.3 为什么需要CA机构对证书签名\"></a>6.3 为什么需要CA机构对证书签名</h3><p>如果不签名会存在中间人攻击的风险，签名之后保证了证书里的信息，比如公钥、服务器信息、企业信息等不被篡改，能够验证客户端和服务器端的“合法性”。</p>\n<h3 id=\"6-4-https验证身份也就是TSL-SSL身份验证的过程\"><a href=\"#6-4-https验证身份也就是TSL-SSL身份验证的过程\" class=\"headerlink\" title=\"6.4 https验证身份也就是TSL/SSL身份验证的过程\"></a>6.4 https验证身份也就是TSL/SSL身份验证的过程</h3><p>简要图解如下</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/15/16c9306c20ab2b9b~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n<h2 id=\"7、进程通信\"><a href=\"#7、进程通信\" class=\"headerlink\" title=\"7、进程通信\"></a>7、进程通信</h2><h3 id=\"7-1-请简述一下node的多进程架构\"><a href=\"#7-1-请简述一下node的多进程架构\" class=\"headerlink\" title=\"7.1 请简述一下node的多进程架构\"></a>7.1 请简述一下node的多进程架构</h3><p>面对node单线程对多核CPU使用不足的情况，Node提供了child_process模块，来实现进程的复制，node的多进程架构是主从模式，如下所示：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/21/16cb28a827528118~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var fork &#x3D; require(&#39;child_process&#39;).fork;\nvar cpus &#x3D; require(&#39;os&#39;).cpus();\nfor(var i &#x3D; 0; i &lt; cpus.length; i++)&#123;\n    fork(&#39;.&#x2F;worker.js&#39;);\n&#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在linux中，我们通过ps aux | grep worker.js查看进程</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/21/16cb28906902daf2~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n<p>这就是著名的主从模式，Master-Worker</p>\n<h3 id=\"7-2-请问创建子进程的方法有哪些，简单说一下它们的区别\"><a href=\"#7-2-请问创建子进程的方法有哪些，简单说一下它们的区别\" class=\"headerlink\" title=\"7.2 请问创建子进程的方法有哪些，简单说一下它们的区别\"></a>7.2 请问创建子进程的方法有哪些，简单说一下它们的区别</h3><p>创建子进程的方法大致有：</p>\n<ul>\n<li>spawn()： 启动一个子进程来执行命令</li>\n<li>exec(): 启动一个子进程来执行命令，与spawn()不同的是其接口不同，它有一个回调函数获知子进程的状况</li>\n<li>execFlie(): 启动一个子进程来执行可执行文件</li>\n<li>fork(): 与spawn()类似，不同电在于它创建Node子进程需要执行js文件</li>\n<li>spawn()与exec()、execFile()不同的是，后两者创建时可以指定timeout属性设置超时时间，一旦创建的进程超过设定的时间就会被杀死</li>\n<li>exec()与execFile()不同的是，exec()适合执行已有命令，execFile()适合执行文件。</li>\n</ul>\n<h3 id=\"7-3-请问你知道spawn在创建子进程的时候，第三个参数有一个stdio选项吗，这个选项的作用是什么，默认的值是什么。\"><a href=\"#7-3-请问你知道spawn在创建子进程的时候，第三个参数有一个stdio选项吗，这个选项的作用是什么，默认的值是什么。\" class=\"headerlink\" title=\"7.3 请问你知道spawn在创建子进程的时候，第三个参数有一个stdio选项吗，这个选项的作用是什么，默认的值是什么。\"></a>7.3 请问你知道spawn在创建子进程的时候，第三个参数有一个stdio选项吗，这个选项的作用是什么，默认的值是什么。</h3><ul>\n<li>选项用于配置在父进程和子进程之间建立的管道。</li>\n<li>默认情况下，子进程的 stdin、 stdout 和 stderr 会被重定向到 ChildProcess 对象上相应的 subprocess.stdin、subprocess.stdout 和 subprocess.stderr 流。</li>\n<li>这相当于将 options.stdio 设置为 [‘pipe’, ‘pipe’, ‘pipe’]。</li>\n</ul>\n<h3 id=\"7-4-请问实现一个node子进程被杀死，然后自动重启代码的思路\"><a href=\"#7-4-请问实现一个node子进程被杀死，然后自动重启代码的思路\" class=\"headerlink\" title=\"7.4 请问实现一个node子进程被杀死，然后自动重启代码的思路\"></a>7.4 请问实现一个node子进程被杀死，然后自动重启代码的思路</h3><ul>\n<li>在创建子进程的时候就让子进程监听exit事件，如果被杀死就重新fork一下</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var createWorker &#x3D; function()&#123;\n    var worker &#x3D; fork(__dirname + &#39;worker.js&#39;)\n    worker.on(&#39;exit&#39;, function()&#123;\n        console.log(&#39;Worker&#39; + worker.pid + &#39;exited&#39;);\n        &#x2F;&#x2F; 如果退出就创建新的worker\n        createWorker()\n    &#125;)\n&#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"7-5-在7-4的基础上，实现限量重启，比如我最多让其在1分钟内重启5次，超过了就报警给运维\"><a href=\"#7-5-在7-4的基础上，实现限量重启，比如我最多让其在1分钟内重启5次，超过了就报警给运维\" class=\"headerlink\" title=\"7.5 在7.4的基础上，实现限量重启，比如我最多让其在1分钟内重启5次，超过了就报警给运维\"></a>7.5 在7.4的基础上，实现限量重启，比如我最多让其在1分钟内重启5次，超过了就报警给运维</h3><ul>\n<li>思路大概是在创建worker的时候，就判断创建的这个worker是否在1分钟内重启次数超过5次</li>\n<li>所以每一次创建worker的时候都要记录这个worker 创建时间，放入一个数组队列里面，每次创建worker都去取队列里前5条记录</li>\n<li>如果这5条记录的时间间隔小于1分钟，就说明到了报警的时候了</li>\n</ul>\n<h3 id=\"7-6-如何实现进程间的状态共享，或者数据共享\"><a href=\"#7-6-如何实现进程间的状态共享，或者数据共享\" class=\"headerlink\" title=\"7.6 如何实现进程间的状态共享，或者数据共享\"></a>7.6 如何实现进程间的状态共享，或者数据共享</h3><p>我自己没用过Kafka这类消息队列工具，问了java,可以用类似工具来实现进程间通信，更好的方法欢迎留言</p>\n<h2 id=\"8、中间件\"><a href=\"#8、中间件\" class=\"headerlink\" title=\"8、中间件\"></a>8、中间件</h2><h3 id=\"8-1-如果使用过koa、egg这两个Node框架，请简述其中的中间件原理，最好用代码表示一下\"><a href=\"#8-1-如果使用过koa、egg这两个Node框架，请简述其中的中间件原理，最好用代码表示一下\" class=\"headerlink\" title=\"8.1 如果使用过koa、egg这两个Node框架，请简述其中的中间件原理，最好用代码表示一下\"></a>8.1 如果使用过koa、egg这两个Node框架，请简述其中的中间件原理，最好用代码表示一下</h3><p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/20/16cae0e64433e9b2~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n<ul>\n<li>上面是在网上找的一个示意图，就是说中间件执行就像洋葱一样，最早use的中间件，就放在最外层。处理顺序从左到右，左边接收一个request，右边输出返回response</li>\n<li>一般的中间件都会执行两次，调用next之前为第一次，调用next时把控制传递给下游的下一个中间件。当下游不再有中间件或者没有执行next函数时，就将依次恢复上游中间件的行为，让上游中间件执行next之后的代码</li>\n<li>例如下面这段代码</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const Koa &#x3D; require(&#39;koa&#39;)\nconst app &#x3D; new Koa()\napp.use((ctx, next) &#x3D;&gt; &#123;\n    console.log(1)\n    next()\n    console.log(3)\n&#125;)\napp.use((ctx) &#x3D;&gt; &#123;\n    console.log(2)\n&#125;)\napp.listen(3001)\n执行结果是1&#x3D;&gt;2&#x3D;&gt;3\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>koa中间件实现源码大致思路如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 注意其中的compose函数，这个函数是实现中间件洋葱模型的关键\n&#x2F;&#x2F; 场景模拟\n&#x2F;&#x2F; 异步 promise 模拟\nconst delay &#x3D; async () &#x3D;&gt; &#123;\n  return new Promise((resolve, reject) &#x3D;&gt; &#123;\n    setTimeout(() &#x3D;&gt; &#123;\n      resolve();\n    &#125;, 2000);\n  &#125;);\n&#125;\n&#x2F;&#x2F; 中间间模拟\nconst fn1 &#x3D; async (ctx, next) &#x3D;&gt; &#123;\n  console.log(1);\n  await next();\n  console.log(2);\n&#125;\nconst fn2 &#x3D; async (ctx, next) &#x3D;&gt; &#123;\n  console.log(3);\n  await delay();\n  await next();\n  console.log(4);\n&#125;\nconst fn3 &#x3D; async (ctx, next) &#x3D;&gt; &#123;\n  console.log(5);\n&#125;\n\nconst middlewares &#x3D; [fn1, fn2, fn3];\n\n&#x2F;&#x2F; compose 实现洋葱模型\nconst compose &#x3D; (middlewares, ctx) &#x3D;&gt; &#123;\n  const dispatch &#x3D; (i) &#x3D;&gt; &#123;\n    let fn &#x3D; middlewares[i];\n    if(!fn)&#123; return Promise.resolve() &#125;\n    return Promise.resolve(fn(ctx, () &#x3D;&gt; &#123;\n      return dispatch(i+1);\n    &#125;));\n  &#125;\n  return dispatch(0);\n&#125;\n\ncompose(middlewares, 1);\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"9、其它\"><a href=\"#9、其它\" class=\"headerlink\" title=\"9、其它\"></a>9、其它</h2><p>现在在重新过一遍node 12版本的主要API，有很多新发现，比如说</p>\n<ul>\n<li>fs.watch这个模块，事件的回调函数有一个参数是触发的事件名称，但是呢，无论我增删改，都是触发rename事件（如果更改是update事件，删除delete事件，重命名是rename事件，这样语义明晰该多好）。后来网上找到一个node-watch模块，此模块增删改都有对应的事件， 并且还高效的支持递归watch 文件。</li>\n<li>util模块有个promisify方法，可以让一个遵循异常优先的回调风格的函数，即 (err, value) =&gt; … 回调函数是最后一个参数，返回一个返回值是一个 promise 版本的函数。</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const util &#x3D; require(&#39;util&#39;);\nconst fs &#x3D; require(&#39;fs&#39;);\n\nconst stat &#x3D; util.promisify(fs.stat);\nstat(&#39;.&#39;).then((stats) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 处理 &#96;stats&#96;。\n&#125;).catch((error) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 处理错误。\n&#125;);\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"9-1-杂想\"><a href=\"#9-1-杂想\" class=\"headerlink\" title=\"9.1 杂想\"></a>9.1 杂想</h4><ul>\n<li>crypto模块，可以考察基础的加密学知识，比如摘要算法有哪些（md5, sha1, sha256，加盐的md5,sha256等等）,接着可以问如何用md5自己模拟一个加盐的md5算法， 接着可以问加密算法（crypto.createCiphe）中的aes,eds算法的区别，分组加密模式有哪些（比如ECB,CBC,为什么ECB不推荐），node里的分组加密模式是哪种（CMM），这些加密算法里的填充和向量是什么意思，接着可以问数字签名和https的流程（为什么需要CA，为什么要对称加密来加密公钥等等）</li>\n<li>tcp/ip，可以问很多基础问题，比如链路层通过什么协议根据IP地址获取物理地址（arp），网关是什么，ip里的ICMP协议有什么用，tcp的三次握手，四次分手的过程是什么，tcp如何控制重发，网络堵塞TCP会怎么办等等，udp和tcp的区别，udp里的广播和组播是什么，组播在node里通过什么模块实现。</li>\n<li>os，操作系统相关基础，io的流程是什么（从硬盘里读取数据到内核的内存中，然后内核的内存将数据传入到调用io的应用程序的进程内存中），冯诺依曼体系是什么，进程和线程的区别等等（我最近在看马哥linux教程，因为自己不是科班出身，听了很多基础的计算机知识，受益匪浅，建议去bilibili看）</li>\n<li>linux相关操作知识（node涉及到后台，虽然是做中台，不涉及数据库，但是基本的linux操作还是要会的）</li>\n<li>node性能监控（自己也正在学习中）</li>\n<li>测试，因为用的egg框架，有很完善的学习单元测试的文档，省略这部分</li>\n<li>数据库可以问一些比如事务的等级有哪些，mysql默认的事务等级是什么，会产生什么问题，然后考一些mysql查询的笔试题。。。和常用优化技巧，node的mysql的orm工具使用过没有。。。（比如我自己是看的尚硅谷mysql初级+高级视频，书是看的mysql必知必会，我自己出于爱好学习一下。。。没有实战过）</li>\n</ul>\n","text":"1、Node模块机制1.1 请介绍一下node里的模块是什么Node中，每个文件模块都是一个对象，它的定义如下： function Module(id, parent) &#123; this.id &#x3D; id; this.exports &#x3D; &#123;&#1...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"知识点","slug":"知识点","count":18,"path":"api/categories/知识点.json"}],"tags":[{"name":"面试","slug":"面试","count":13,"path":"api/tags/面试.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81Node%E6%A8%A1%E5%9D%97%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">1、Node模块机制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E8%AF%B7%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8Bnode%E9%87%8C%E7%9A%84%E6%A8%A1%E5%9D%97%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">1.1 请介绍一下node里的模块是什么</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E8%AF%B7%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8Brequire%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">1.2 请介绍一下require的模块加载机制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%9D%97%E6%97%B6%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E6%AF%8F%E4%B8%AA%E6%A8%A1%E5%9D%97%E9%83%BD%E6%9C%89-dirname-filename%E5%B1%9E%E6%80%A7%E5%91%A2%EF%BC%8Cnew-Module%E7%9A%84%E6%97%B6%E5%80%99%E6%88%91%E4%BB%AC%E7%9C%8B%E5%88%B01-1%E9%83%A8%E5%88%86%E6%B2%A1%E6%9C%89%E8%BF%99%E4%B8%A4%E4%B8%AA%E5%B1%9E%E6%80%A7%E7%9A%84%EF%BC%8C%E9%82%A3%E4%B9%88%E8%BF%99%E4%B8%A4%E4%B8%AA%E5%B1%9E%E6%80%A7%E6%98%AF%E4%BB%8E%E5%93%AA%E9%87%8C%E6%9D%A5%E7%9A%84\"><span class=\"toc-text\">1.3 加载模块时，为什么每个模块都有__dirname,__filename属性呢，new Module的时候我们看到1.1部分没有这两个属性的，那么这两个属性是从哪里来的</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-%E6%88%91%E4%BB%AC%E7%9F%A5%E9%81%93node%E5%AF%BC%E5%87%BA%E6%A8%A1%E5%9D%97%E6%9C%89%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%8C%E4%B8%80%E7%A7%8D%E6%98%AFexports-xxx-xxx%E5%92%8CModule-exports-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%E5%90%97\"><span class=\"toc-text\">1.4 我们知道node导出模块有两种方式，一种是exports.xxx&#x3D;xxx和Module.exports&#x3D;{}有什么区别吗</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81Node%E7%9A%84%E5%BC%82%E6%AD%A5I-O\"><span class=\"toc-text\">2、Node的异步I&#x2F;O</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E8%AF%B7%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8BNode%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E7%9A%84%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">2.1 请介绍一下Node事件循环的流程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E5%9C%A8%E6%AF%8F%E4%B8%AAtick%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%AD%EF%BC%8C%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%9C%89%E4%BA%8B%E4%BB%B6%E9%9C%80%E8%A6%81%E5%A4%84%E7%90%86%E5%91%A2%EF%BC%9F\"><span class=\"toc-text\">2.2 在每个tick的过程中，如何判断是否有事件需要处理呢？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E8%AF%B7%E6%8F%8F%E8%BF%B0%E4%B8%80%E4%B8%8B%E6%95%B4%E4%B8%AA%E5%BC%82%E6%AD%A5I-O%E7%9A%84%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">2.3 请描述一下整个异步I&#x2F;O的流程</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81V8%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">3、V8的垃圾回收机制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8BV8%E7%9A%84%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5\"><span class=\"toc-text\">3.1 如何查看V8的内存使用情况</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-V8%E7%9A%84%E5%86%85%E5%AD%98%E9%99%90%E5%88%B6%E6%98%AF%E5%A4%9A%E5%B0%91%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88V8%E8%BF%99%E6%A0%B7%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">3.2 V8的内存限制是多少，为什么V8这样设计</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-V8%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E5%92%8C%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%E8%AF%B7%E7%AE%80%E5%8D%95%E8%AE%B2%E4%B8%80%E8%AE%B2\"><span class=\"toc-text\">3.3 V8的内存分代和回收算法请简单讲一讲</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-1-%E6%96%B0%E7%94%9F%E4%BB%A3\"><span class=\"toc-text\">3.3.1 新生代</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-2-%E8%80%81%E7%94%9F%E4%BB%A3\"><span class=\"toc-text\">3.3.2 老生代</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-3-%E6%A0%87%E8%AE%B0%E6%B8%85%E6%A5%9A%E7%AE%97%E6%B3%95%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">3.3.3 标记清楚算法的问题</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-4-%E5%93%AA%E4%BA%9B%E6%83%85%E5%86%B5%E4%BC%9A%E9%80%A0%E6%88%90V8%E6%97%A0%E6%B3%95%E7%AB%8B%E5%8D%B3%E5%9B%9E%E6%94%B6%E5%86%85%E5%AD%98\"><span class=\"toc-text\">3.3.4 哪些情况会造成V8无法立即回收内存</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-5-%E8%AF%B7%E8%B0%88%E4%B8%80%E4%B8%8B%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E5%8E%9F%E5%9B%A0%EF%BC%8C%E5%92%8C%E6%8E%92%E6%9F%A5%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">3.3.5 请谈一下内存泄漏是什么，以及常见内存泄漏的原因，和排查的方法</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81Buffer%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">4、Buffer模块</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E6%96%B0%E5%BB%BABuffer%E4%BC%9A%E5%8D%A0%E7%94%A8V8%E5%88%86%E9%85%8D%E7%9A%84%E5%86%85%E5%AD%98%E5%90%97\"><span class=\"toc-text\">4.1 新建Buffer会占用V8分配的内存吗</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-Buffer-alloc%E5%92%8CBuffer-allocUnsafe%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">4.2 Buffer.alloc和Buffer.allocUnsafe的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-Buffer%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">4.3 Buffer的内存分配机制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-Buffer%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">4.4 Buffer乱码问题</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81webSocket\"><span class=\"toc-text\">5、webSocket</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-webSocket%E4%B8%8E%E4%BC%A0%E7%BB%9F%E7%9A%84http%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">5.1 webSocket与传统的http有什么优势</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-webSocket%E5%8D%8F%E8%AE%AE%E5%8D%87%E7%BA%A7%E6%97%B6%E4%BB%80%E4%B9%88%EF%BC%8C%E8%83%BD%E7%AE%80%E8%BF%B0%E4%B8%80%E4%B8%8B%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">5.2 webSocket协议升级时什么，能简述一下吗？</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81https\"><span class=\"toc-text\">6、https</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-1-https%E7%94%A8%E5%93%AA%E4%BA%9B%E7%AB%AF%E5%8F%A3%E8%BF%9B%E8%A1%8C%E9%80%9A%E4%BF%A1%EF%BC%8C%E8%BF%99%E4%BA%9B%E7%AB%AF%E5%8F%A3%E5%88%86%E5%88%AB%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8\"><span class=\"toc-text\">6.1 https用哪些端口进行通信，这些端口分别有什么用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-2-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E8%BF%87%E7%A8%8B%E4%B8%AD%E4%BC%9A%E6%B6%89%E5%8F%8A%E5%88%B0%E5%AF%86%E9%92%A5%EF%BC%8C-%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%EF%BC%8C%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%EF%BC%8C%E6%91%98%E8%A6%81%E7%9A%84%E6%A6%82%E5%BF%B5%EF%BC%8C%E8%AF%B7%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%8B\"><span class=\"toc-text\">6.2 身份验证过程中会涉及到密钥， 对称加密，非对称加密，摘要的概念，请解释一下</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-3-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81CA%E6%9C%BA%E6%9E%84%E5%AF%B9%E8%AF%81%E4%B9%A6%E7%AD%BE%E5%90%8D\"><span class=\"toc-text\">6.3 为什么需要CA机构对证书签名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-4-https%E9%AA%8C%E8%AF%81%E8%BA%AB%E4%BB%BD%E4%B9%9F%E5%B0%B1%E6%98%AFTSL-SSL%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%9A%84%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">6.4 https验证身份也就是TSL&#x2F;SSL身份验证的过程</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7%E3%80%81%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">7、进程通信</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-1-%E8%AF%B7%E7%AE%80%E8%BF%B0%E4%B8%80%E4%B8%8Bnode%E7%9A%84%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">7.1 请简述一下node的多进程架构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-2-%E8%AF%B7%E9%97%AE%E5%88%9B%E5%BB%BA%E5%AD%90%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%8C%E7%AE%80%E5%8D%95%E8%AF%B4%E4%B8%80%E4%B8%8B%E5%AE%83%E4%BB%AC%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">7.2 请问创建子进程的方法有哪些，简单说一下它们的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-3-%E8%AF%B7%E9%97%AE%E4%BD%A0%E7%9F%A5%E9%81%93spawn%E5%9C%A8%E5%88%9B%E5%BB%BA%E5%AD%90%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0%E6%9C%89%E4%B8%80%E4%B8%AAstdio%E9%80%89%E9%A1%B9%E5%90%97%EF%BC%8C%E8%BF%99%E4%B8%AA%E9%80%89%E9%A1%B9%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8C%E9%BB%98%E8%AE%A4%E7%9A%84%E5%80%BC%E6%98%AF%E4%BB%80%E4%B9%88%E3%80%82\"><span class=\"toc-text\">7.3 请问你知道spawn在创建子进程的时候，第三个参数有一个stdio选项吗，这个选项的作用是什么，默认的值是什么。</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-4-%E8%AF%B7%E9%97%AE%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAnode%E5%AD%90%E8%BF%9B%E7%A8%8B%E8%A2%AB%E6%9D%80%E6%AD%BB%EF%BC%8C%E7%84%B6%E5%90%8E%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF%E4%BB%A3%E7%A0%81%E7%9A%84%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">7.4 请问实现一个node子进程被杀死，然后自动重启代码的思路</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-5-%E5%9C%A87-4%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%EF%BC%8C%E5%AE%9E%E7%8E%B0%E9%99%90%E9%87%8F%E9%87%8D%E5%90%AF%EF%BC%8C%E6%AF%94%E5%A6%82%E6%88%91%E6%9C%80%E5%A4%9A%E8%AE%A9%E5%85%B6%E5%9C%A81%E5%88%86%E9%92%9F%E5%86%85%E9%87%8D%E5%90%AF5%E6%AC%A1%EF%BC%8C%E8%B6%85%E8%BF%87%E4%BA%86%E5%B0%B1%E6%8A%A5%E8%AD%A6%E7%BB%99%E8%BF%90%E7%BB%B4\"><span class=\"toc-text\">7.5 在7.4的基础上，实现限量重启，比如我最多让其在1分钟内重启5次，超过了就报警给运维</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-6-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E7%8A%B6%E6%80%81%E5%85%B1%E4%BA%AB%EF%BC%8C%E6%88%96%E8%80%85%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB\"><span class=\"toc-text\">7.6 如何实现进程间的状态共享，或者数据共享</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8%E3%80%81%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">8、中间件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-1-%E5%A6%82%E6%9E%9C%E4%BD%BF%E7%94%A8%E8%BF%87koa%E3%80%81egg%E8%BF%99%E4%B8%A4%E4%B8%AANode%E6%A1%86%E6%9E%B6%EF%BC%8C%E8%AF%B7%E7%AE%80%E8%BF%B0%E5%85%B6%E4%B8%AD%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%8E%9F%E7%90%86%EF%BC%8C%E6%9C%80%E5%A5%BD%E7%94%A8%E4%BB%A3%E7%A0%81%E8%A1%A8%E7%A4%BA%E4%B8%80%E4%B8%8B\"><span class=\"toc-text\">8.1 如果使用过koa、egg这两个Node框架，请简述其中的中间件原理，最好用代码表示一下</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9%E3%80%81%E5%85%B6%E5%AE%83\"><span class=\"toc-text\">9、其它</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-1-%E6%9D%82%E6%83%B3\"><span class=\"toc-text\">9.1 杂想</span></a></li></ol></li></ol></li></ol>","author":{"name":"LIYUNFU","slug":"blog-author","avatar":"https://p26-passport.byteacctimg.com/img/user-avatar/c52fbf24fbba8a052c8dd93e8b978eac~300x300.image","link":"/","description":"一个正在重塑知识的切图仔 <br /> @ <b>公众号:伯nulee</b>","socials":{"github":"https://gitee.com/LUNIONT","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/2277843824292183","customs":{}}},"mapped":true,"prev_post":{"title":"标准化大厂编码规范解决方案","uid":"7bb7fcd214fc2de4ef1142bae196581d","slug":"标准化大厂编码规范解决方案","date":"2022-02-10T08:33:17.000Z","updated":"2022-03-26T11:17:44.295Z","comments":true,"path":"api/articles/标准化大厂编码规范解决方案.json","keywords":null,"cover":[],"text":"升级最新的vuenpm i vue@3.2.8 vue-router@4.0.11 vuex@4.0.2 ESLint规则// ESLint 配置文件遵循 commonJS 的导出规则，所导出的对象就是 ESLint 的配置对象 // 文档：https://eslint.boot...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"规范","slug":"规范","count":1,"path":"api/categories/规范.json"}],"tags":[{"name":"git","slug":"git","count":2,"path":"api/tags/git.json"},{"name":"规范","slug":"规范","count":1,"path":"api/tags/规范.json"}],"author":{"name":"LIYUNFU","slug":"blog-author","avatar":"https://p26-passport.byteacctimg.com/img/user-avatar/c52fbf24fbba8a052c8dd93e8b978eac~300x300.image","link":"/","description":"一个正在重塑知识的切图仔 <br /> @ <b>公众号:伯nulee</b>","socials":{"github":"https://gitee.com/LUNIONT","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/2277843824292183","customs":{}}},"feature":true},"next_post":{"title":"Webpack面试题","uid":"351e3c9d435f8ea85babffc9bf32b676","slug":"Webpack面试题","date":"2022-04-10T12:24:22.000Z","updated":"2022-04-10T12:24:43.384Z","comments":true,"path":"api/articles/Webpack面试题.json","keywords":null,"cover":null,"text":"0.有哪些常见的Loader？你用过哪些Loader？(我开始熟悉的报起了菜名) raw-loader：加载文件原始内容（utf-8） file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件 (处理图片和字体) url-loader：与 fi...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"知识点","slug":"知识点","count":18,"path":"api/categories/知识点.json"}],"tags":[{"name":"面试","slug":"面试","count":13,"path":"api/tags/面试.json"}],"author":{"name":"LIYUNFU","slug":"blog-author","avatar":"https://p26-passport.byteacctimg.com/img/user-avatar/c52fbf24fbba8a052c8dd93e8b978eac~300x300.image","link":"/","description":"一个正在重塑知识的切图仔 <br /> @ <b>公众号:伯nulee</b>","socials":{"github":"https://gitee.com/LUNIONT","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/2277843824292183","customs":{}}}}}