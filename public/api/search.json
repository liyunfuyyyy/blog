[{"id":"d7e719f5c11a6405545a398b1276387c","title":"函数式编程范式","content":"函数式编程范式什么是函数式编程函数式编程就是利用纯函数实现细粒度的函数，通过函数组合组合成功能更强大的函数\n\n函数式编程对运算过程进行抽象，面向对象编程对事物进行抽象\n函数式编程中的函数指的不是程序中的函数，而是数学中的函数即映射关系\n相同的输入始终要得到相同的输出\n\n为什么要学习函数式编程\n函数式编程是随着React的流行受到越来越多关注\nVue3也开始拥抱函数式编程\n函数式编程可以抛弃this\n打包过程中可以更好的利用tree shaking过滤无用代码\n方便测试、方便并行处理\n有很多库可以帮助我们进行函数式开发：lodash、underscore、ramda\n\n函数是一等公民\n函数可以存储在变量中\n函数作为参数\n函数作为返回值\n\n高阶函数什么是高阶函数\n高阶函数(Higher-order function)\n\n\n可以把函数作为参数传递给另一个函数\n可以把函数作为另一个函数的返回结果\n\n\n函数作为参数\n\n\n高阶函数模拟forEach\n\n\n\nfunction forEach(arr,fn)&#123;\n    for(let i=0;i&lt;arr.length;i++)&#123;\n        fn(arr[i])\n    &#125;\n&#125;\n\n// 测试\nlet arr=[1,3,4,6,7]\nforEach(arr,function(item)&#123;\n    console.log(item)\n&#125;)\n\n\n\n高阶函数模拟filter\n\n\n\n// filter\nfunction filter(arr,fn)&#123;\n    let results=[]\n    for(let i=0;i&lt;arr.length;i++)&#123;\n        if(fn(arr[i]))&#123;\n            results.push(arr[i])\n        &#125;\n    &#125;\n    return results\n&#125;\n\n// 测试\nconsole.log(filter(arr,function(item)&#123;\n    return item%2===0\n&#125;))\n\n\n函数作为返回值\n\n\n高阶函数模拟once\n\n\n\nfunction once(fn)&#123;\n    let done=false\n    return function()&#123;\n        if(!done)&#123;\n            done=true\n            return fn.apply(this,arguments)\n        &#125;\n    &#125;\n&#125;\n\nlet pay=once(function(money)&#123;\n    console.log(`支付：$&#123;money&#125; RMB`)\n&#125;)\n\n// 只会支付一次\npay(5)\npay(5)\npay(5)\n\n使用高阶函数的意义\n抽象可以帮我们屏蔽细节，只需要关注我们的目标\n高阶函数是用来抽象通用的问题\n\n常用高阶函数\nforEach\n\nmap\n\nfilter\n\nevery\n\nsome\n\nfind/findIndex\n\nreduce\n\nsort\n\n\n高阶函数实现map\n\n\n\n// map\nconst map=(arr,fn)=>&#123;\n    let results=[]\n    for(const value of arr)&#123;\n        results.push(fn(value))\n    &#125;\n    return results\n&#125;\n\n// 测试\nconst arr=[1,2,3,4,5]\nconsole.log(map(arr,function(item)&#123;\n    return item*2\n&#125;))\n\n\n\n高阶函数实现every 判断数组的元素是否都匹配\n\n\n\n//every\nconst every=(arr,fn)=>&#123;\n    let result=true\n    for(const value of arr)&#123;\n        result=fn(value)\n        if(!result)&#123;\n            break\n        &#125;\n    &#125;\n    return result\n&#125;\n\n// 测试\nconsole.log(every(arr,function(item)&#123;\n    return item>0\n&#125;))\n\n\n\n高阶函数实现some检测数组的元素是否有一个满足条件\n\n\n\n// some\nconst some=(arr,fn)=>&#123;\n    let result=false\n    for(const value of arr)&#123;\n        result=fn(value)\n        if(result)&#123;\n            break\n        &#125;\n    &#125;\n    return result\n&#125;\n\nconsole.log(some(arr,function(item)&#123;\n    return item%2===0\n&#125;))\n\n闭包什么是闭包可以在另一个作用域中调用一个函数的内部函数并访问到该函数的作用域中的对象\n\n闭包的本质：函数在执行的时候会放在一个执行栈上当函数执行完毕之后会从执行栈上移出，但是堆上的作用域成员因为被外部引用不能释放，因此内部函数依然可以访问外部函数的成员\n\n闭包案例封装一个求次方的方法\n// 生成计算数字的多少次幂的函数\nfunction makePower (power)&#123;\n    return function(x)&#123;\n        return Math.pow(x,power)\n    &#125;\n&#125;\n\nlet pow2=makePower(2)\nlet pow3=makePower(3)\n\nconsole.log(pow2(4))\nconsole.log(pow3(4))\n\n封装一个根据基本工资和绩效工资求实际工资\nfunction makeSalary(x)&#123;\n    return function(y)&#123;\n        return x+y\n    &#125;\n&#125;\n\nlet salaryLevel1=makeSalary(1500)\nlet salaryLevel2=makeSalary(2000)\n\nconsole.log(salaryLevel1(2000))\nconsole.log(salaryLevel2(4000))\n\n纯函数什么是纯函数\n相同的输入永远会得到相同的输出，而且没有任何可观察的副作用\n数组的slice和splice分别是纯函数和不纯的函数\n\nlet numbers = [1, 2, 3, 4, 5]\n// 纯函数\nnumbers.slice(0, 3)\n// => [1, 2, 3]\nnumbers.slice(0, 3)\n// => [1, 2, 3]\nnumbers.slice(0, 3)\n// => [1, 2, 3]\n// 不纯的函数\nnumbers.splice(0, 3)\n// => [1, 2, 3]\nnumbers.splice(0, 3)\n// => [4, 5]\nnumbers.splice(0, 3)\n// => []\n\n纯函数的好处\n可缓存\n\n\n因为纯函数对相同的输入始终有相同的结果，所以可以把纯函数的结果缓存起来\n模拟memoize记忆函数\n\n\n\n// 模拟memoize方法的实现\nfunction memoize(fn)&#123;\n    let cache=&#123;&#125;\n    return function()&#123;\n        // 转为字符串\n        let key=JSON.stringify(arguments)\n        cache[key]=cache[key]||fn.apply(fn,arguments)\n        return cache[key]\n    &#125;\n&#125;\n\nlet getAreaWithMemory=memoize(getArea)\nconsole.log(getAreaWithMemory(4))\nconsole.log(getAreaWithMemory(4))\nconsole.log(getAreaWithMemory(4))\n\n\n可测试\n\n并行处理\n\n\n在多线程环境下并行操作共享的内存数据很可能会出现意外情况\n纯函数不需要访问共享的内容数据，所以在并行环境下可以任意运行纯函数(Web Worker)\n\n\n\n副作用副作用让一个函数变得不纯，纯函数的根据相同的输入返回相同的输出，如果函数依赖于外部的状态就无法保证输出相同，就会带来副作用\n柯里化什么是柯里化\n当一个函数有多个参数的时候先传递一部分参数调用它(这部分参数以后永远不变)\n然后返回一个新的函数接收剩余的参数，返回结果\n\nfunction checkAge(min)&#123;\n    return function(age)&#123;\n        return age>=min\n    &#125;\n&#125;\n\nconst checkAge18=checkAge(18)\nconsole.log(checkAge18(20))\n\nlodash中的柯里化\n_.curry(fn)\n\n\n功能：创建一个函数，该函数接收一个或多个fn的参数，如果fn所需要的参数都被提供则执行fn并返回执行的结果，否则继续返回该函数并等待接收剩余的参数\n参数：需要柯里化的函数\n返回值：柯里化后的函数\n\n\n\nimport _ from 'lodash'\n\nfunction getSum(a,b,c)&#123;\n    return a+b+c\n&#125;\n\nconst curried=_.curry(getSum)\n\nconsole.log(curried(1,2,3))\nconsole.log(curried(1)(2)(3))\nconsole.log(curried(1,2)(3))\n\n柯里化案例\n判断一个字符串中是否有空白字符\n\nconst _ = require('lodash')\nconst match = _.curry(function (reg, str) &#123;\nreturn str.match(reg)\n&#125;)\nconst haveSpace = match(/\\s+/g)\nconst haveNumber = match(/\\d+/g)\nconsole.log(haveSpace('hello world'))\nconsole.log(haveNumber('25$'))\nconst filter = _.curry(function (func, array) &#123;\nreturn array.filter(func)\n&#125;)\nconsole.log(filter(haveSpace, ['John Connor', 'John_Donne']))\nconst findSpace = filter(haveSpace)\nconsole.log(findSpace(['John Connor', 'John_Donne']))\n\n模拟_.curry()的实现function curry (func) &#123;\nreturn function curriedFn (...args) &#123;\n// 判断实参和形参的个数\nif (args.length &lt; func.length) &#123;\nreturn function () &#123;\nreturn curriedFn(...args.concat(Array.from(arguments)))\n&#125;\n&#125;\n// 实参和形参个数相同，调用 func，返回结果\nreturn func(...args)\n&#125;\n&#125;\n\n总结\n柯里化可以让我们给一个函数传递较少的参数得到一个已经记住某些固定参数的新函数\n这是一种对函数参数的缓存\n让函数变得更灵活，让函数的粒度更小\n可以把多元函数转换成一元函数，可以组合使用函数产生强大的功能\n\n","slug":"函数式编程范式","date":"2022-04-10T12:42:12.000Z","categories_index":"大前端","tags_index":"大前端,JavaScript","author_index":"LIYUNFU"},{"id":"52748ea8c7aacb653b9bc3a082a7560f","title":"基于koa-generator搭建通用服务端","content":"安装koa-generator全局安装koa-generatornpm i koa-generator -g\n\n初始化项目koa2 goudong-server \n\n进入并安装依赖cd goudong-server \nnpm install\n\n\n\n改造项目环境\n在根目录下新建src目录\n\n将public 、routes 、views 、app.js拖入src目录\n\n修改bin/www中的var app = require(&#39;../app&#39;);为var app = require(&#39;../src/app&#39;);\n\n改造后目录\n\n```shell|- bin  |- www|-node_modules|-src  |-public  |-routes  |-views  |-app.js|-package.json\n\n- 在&#96;src&#96;目录下创建四个目录&#96;controller&#96; 、&#96;db&#96; 、&#96;middleware&#96;、&#96;models&#96;\n\n\n\n\n\n## 实现登录功能\n\n### 配置开发环境\n\n#### 安装&#96;koa-generic-session&#96;依赖\n\n&#96;&#96;&#96;shell\nni koa-generic-session \n\n使用const session = require('koa-generic-session')\n\n//session配置\napp.keys = ['liyunfuAAA'] //密钥用于加密\napp.use(session(&#123;\n  //配置cookie\n  cookie: &#123;\n    path: '/',\n    httpOnly: true,\n    maxAge: 24 * 60 * 60 * 1000\n  &#125;\n&#125;))\n\n\n\n跨域安装koa2-cors依赖ni koa2-cors\n\n使用const cors = require('koa2-cors')\n\n//cors配置\napp.use(cors(&#123;\n  origin: 'http://localhost:8080',  //前端origin\n  credentials: true //允许跨域带cookie\n&#125;))\n\n连接数据库安装mongooseni mongoose\n\n在db目录下新建db.js/**\n * @description mongoose 连接数据库\n * @author liyunfu\n */\nconst mongoose = require('mongoose')\n\nconst DB_URL = 'mongodb://root:example@47.99.147.11.27017/jingdong?authSource=admin'\n\n// 开始连接\nmongoose.connect(DB_URL, &#123;\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n&#125;)\n\n// 连接对象\nconst db = mongoose.connection\n\ndb.on('error', err => &#123;\n  console.error('mongoose connect error', err)\n&#125;)\ndb.once('open', () => &#123;\n  console.log('mongoose 连接成功')\n&#125;)\n\nmodule.exports = mongoose\n\n\n\n设计Schema和Model\n在models目录下新建User.js\n/**\n * @description user Model\n * @author liyunfu\n */\n\nconst mongoose = require('../db/db')\n\nconst Schema = mongoose.Schema(&#123;\n  username: &#123;\n    type: String,\n    require: true,\n    unique: true\n  &#125;,\n  password: String\n&#125;, &#123; timestamps: true &#125;)\n\nconst User = mongoose.model('user', Schema)\n\nmodule.exports = User\n在models下新建Address.js\n/**\n * @description Address Model\n * @author liyunfu\n */\n\nconst mongoose = require('../db/db')\n\nconst Schema = mongoose.Schema(&#123;\n  username: &#123;\n    type: String,\n    require: true\n  &#125;,\n  city: String,\n  department: String,\n  houseNumber: String,\n  name: String,\n  phone: String\n&#125;, &#123; timeStamps: true &#125;)\n\nconst Address = mongoose.model('address', Schema)\n\nmodule.exports = Address\n在models下新建Shop.js\n/**\n * @description Shop Model\n * @author liyunfu\n */\n\nconst mongoose = require('../db/db')\n\nconst Schema = mongoose.Schema(&#123;\n  name: String,\n  imgUrl: String,\n  sales: Number,\n  expressLimit: &#123;\n    type: Number,\n    default: 0\n  &#125;,\n  expressPrice: Number,\n  slogan: String\n&#125;, &#123; timeStamps: true &#125;)\n\nconst Shop = mongoose.model('shop', Schema)\n\nmodule.exports = Shop\n在models下新建Product.js\n/**\n * @description Product Model\n * @author liyunfu\n */\n\nconst mongoose = require('../db/db')\n\nconst Schema = mongoose.Schema(&#123;\n  ShopId: &#123;\n    type: String,\n    require: true\n  &#125;,\n  name: String,\n  imgUrl: String,\n  sales: Number,\n  price: Number,\n  oldPrice: Number,\n  tabs: [String]  //示例 tabs:['all','seckill']\n&#125;, &#123; timestamps: true &#125;)\n\nconst Product = mongoose.model('product', Schema)\n\nmodule.exports = Product\n在models下新建Order.js \n/**\n * @description Order Model\n * @author liyunfu\n */\n\nconst mongoose = require('../db/db')\n\nconst Schema = mongoose.Schema(&#123;\n  username: &#123;\n    type: String,\n    require: true\n  &#125;,\n  shopId: String,\n  shopName: String,\n\n  idCanceled: &#123;\n    type: Boolean,\n    default: false\n  &#125;,\n  address: &#123;\n    username: String,\n    city: String,\n    department: String,\n    houseNumber: String,\n    name: String,\n    phone: String\n  &#125;,\n  products: [\n    &#123;\n      product: &#123;\n        shopId: &#123;\n          type: String,\n          require: true\n        &#125;,\n        name: String,\n        imgUrl: String,\n        sales: Number,\n        price: Number,\n        oldPrice: Number,\n        tabs: [String]\n      &#125;,\n      orderSales: Number\n    &#125;\n  ]\n&#125;, &#123; timestamps: true &#125;)\n\nconst Order = mongoose.model('order', Schema)\n\nmodule.exports = Order\n在models 下新建index.js \n/**\n * @description Model 入口文件\n * @author liyunfu\n */\nconst Address = require('./Address')\nconst Order = require('./Order')\nconst Product = require('./Product')\nconst Shop = require('./Shop')\nconst User = require(\"./User\")\n\nmodule.exports = &#123;\n  Address,\n  Order,\n  Product,\n  Shop,\n  User\n&#125;\n\n标准化请求成功与失败的响应信息\n在res-model 下新建ErrorModel.js\n/**\n * @description 错误返回的数据结构\n * @author liyunfu\n */\n\nclass ErrorModel &#123;\n  constructor(errno = -1, message = 'error') &#123;\n    this.errno = errno\n    this.message = message\n  &#125;\n&#125;\n\nmodule.exports = ErrorModel\n在res-model 下新建SuccessModel.js\n/**\n * @description 成功返回的数据类型\n * @author liyunfu\n */\n\nclass SuccessModel &#123;\n  constructor(data) &#123;\n    this.errno = 0\n    if (data !== null) &#123;\n      this.data = data\n    &#125;\n  &#125;\n&#125;\n\nmodule.exports = SuccessModel\n在res-model 下新建入口文件index.js\n/**\n * @description 返回数据类型 入口文件\n * @author liyunfu\n */\nconst SuccessModel = require('./SuccessModel')\nconst ErrorModel = require('./ErrorModel')\n\nmodule.exports = &#123; SuccessModel, ErrorModel &#125;\n\n编写登录验证中间件\n在middleware 下新建loginCheck.js\n/**\n * @description 登录验证中间件\n * @author liyunfu\n */\n\nconst &#123; ErrorModel &#125; = require('../res-model/index')\n\nmodule.exports = async (ctx, next) => &#123;\n  const session = ctx.session\n\n  if (session &amp;&amp; session.userInfo) &#123;\n    await next()\n    return\n  &#125;\n  ctx.body = new ErrorModel(10003, '中间件登录验证失败')\n&#125;\n\n用户操作接口\n在controller 下新建 user.js\n/**\n * @description user controller\n * @author liyunfu\n */\n\nconst &#123; User &#125; = require('../models/index')\n\n/**\n * 注册方法\n * @param &#123;Object&#125; userInfo 用户信息\n * @returns \n */\nasync function register(userInfo = &#123;&#125;) &#123;\n  // 注意验证一下username unique\n  const newUser = await User.create(userInfo)\n  return newUser\n&#125;\n\nasync function login(username, password) &#123;\n  const user = await User.findOne(&#123; username, password &#125;)\n  if (user != null) &#123;\n    // 登录成功\n    return true\n  &#125;\n  return false\n&#125;\n\nmodule.exports = &#123;\n  register, login\n&#125;\n在routes 下新建users.js\nconst router = require('koa-router')()\n\n\nconst &#123; register, login &#125; = require('../controller/user')\nconst &#123; SuccessModel, ErrorModel &#125; = require('../res-model/index')\nconst loginCheck = require('../middleware/loginCheck')\n\nrouter.prefix('/api/user')\n\n// 注册\nrouter.post('/register', async function (ctx, next) &#123;\n  const userInfo = ctx.request.body\n  try &#123;\n    await register(userInfo)\n    // 返回成功\n    ctx.body = new SuccessModel()\n  &#125; catch (ex) &#123;\n    console.log(ex)\n    // 返回失败\n    ctx.body = new ErrorModel(10001, `注册失败 - $&#123;ex.message&#125;`)\n  &#125;\n&#125;)\n\n// 登录\nrouter.post('/login', async (ctx, next) => &#123;\n  const &#123; username, password &#125; = ctx.request.body\n  // 查询单个用户\n  const res = await login(username, password)\n\n  if (res) &#123;\n    // 登录成功\n    ctx.session.userInfo = &#123; username &#125;  //设置session\n\n    ctx.body = new SuccessModel()\n  &#125; else &#123;\n    ctx.body = new ErrorModel(10002, `登录验证失败`)\n  &#125;\n&#125;)\n\nrouter.get('/info', loginCheck, async function (ctx, next) &#123;\n  // 加了loginCheck之后，因为保证了必须登录\n  const session = ctx.session\n  ctx.body = new SuccessModel(session.userInfo)\n&#125;)\nmodule.exports = router\n\n地址操作接口\n在controller 下新建address.js\n/**\n * @description address controller\n * @author liyunfu\n */\n\nconst &#123; Address &#125; = require('../models/index')\n\n/**\n * 创建地址 \n * @param &#123;string&#125; username 用户名\n * @param &#123;Object&#125; data 地址的详细信息\n * @returns \n */\nasync function createAddress(username, data) &#123;\n  const address = await Address.create(&#123; username, ...data &#125;)\n\n  return address\n&#125;\n\n/**\n * 获取地址列表\n * @param &#123;string&#125; username 用户名\n * @returns \n */\nasync function getAddressList(username) &#123;\n  const list = await Address.find(&#123; username &#125;).sort(&#123; updatedAt: -1 &#125;)\n  return list\n&#125;\n\n/**\n * 获取单个收获地址\n * @param &#123;string&#125; id id\n * @returns \n */\nasync function getAddressById(id) &#123;\n  const address = await Address.findById(id)\n  return address\n&#125;\n\nasync function updateAddress(id, username, data) &#123;\n  const address = await Address.findOneAndUpdate(\n    &#123;\n      // 查询条件\n      _id: id,\n      username,\n    &#125;,\n    &#123;\n      username, ...data\n    &#125;,\n    &#123;\n      new: true  //返回更新之后的最新数据，默认时false，返回更新之前的数据\n    &#125;\n  )\n  return address\n&#125;\n\nmodule.exports = &#123;\n  createAddress,\n  getAddressList,\n  getAddressById,\n  updateAddress\n&#125;\n在routes 下新建address.js\n/**\n * @description address router\n * @author liyunfu\n */\n\nconst router = require('koa-router')()\nconst &#123; createAddress, getAddressList, getAddressById, updateAddress &#125; = require('../controller/address')\nconst &#123; SuccessModel, ErrorModel &#125; = require('../res-model/index')\nconst loginCheck = require('../middleware/loginCheck')\n\nrouter.prefix('/api/user/address')\n\n// 创建收货地址\nrouter.post('/', loginCheck, async (ctx, next) => &#123;\n  // 获取用户信息\n  const userInfo = ctx.session.userInfo\n  const username = userInfo.username\n  const data = ctx.request.body\n\n  // 创建数据\n  try &#123;\n    const newAddress = await createAddress(username, data)\n    ctx.body = new SuccessModel(newAddress)\n  &#125; catch (error) &#123;\n    console.log(error)\n    ctx.body = new ErrorModel(10004, '创建收货地址失败')\n  &#125;\n&#125;)\n\n// 获取收货地址列表\nrouter.get('/', loginCheck, async (ctx, next) => &#123;\n  const userInfo = ctx.session.userInfo\n  const username = userInfo.username\n\n  // 获取列表\n  const list = await getAddressList(username)\n  ctx.body = new SuccessModel(list)\n&#125;)\n\n// 获取单个收获地址\nrouter.get('/:id', loginCheck, async (ctx, next) => &#123;\n  const id = ctx.params.id\n  const address = await getAddressById(id)\n\n  ctx.body = new SuccessModel(address)\n&#125;)\n\n// 更新收货地址\nrouter.patch('/:id', loginCheck, async (ctx, next) => &#123;\n  const id = ctx.params.id\n  const data = ctx.request.body\n  const userInfo = ctx.session.userInfo\n  const username = userInfo.username\n  // 更新\n  const newAddress = await updateAddress(id, username, data)\n  ctx.body = new SuccessModel(newAddress)\n&#125;)\n\nmodule.exports = router\n\n商店商品接口\n在controller 下新建shop.js\n/**\n * @description shop controller\n * @author liyunfu\n */\n\nconst &#123; &#125; = require('../models/index')\n\n// 热门商店列表\nasync function getHotList() &#123;\n  const list = await Shop.find().sort(&#123; _id: -1 &#125;) //逆序\n  return list\n&#125;\n\n// 根据id获取单个商店信息\nasync function getShopInfo(id) &#123;\n  const shop = await Shop.findById(id)\n  return shop\n&#125;\n\n// 根据商店id获取商品\nasync function getProductByShopId(id, tab = '') &#123;\n  const pList = await Product.find(&#123;\n    shopId: id,\n    tabs: &#123;\n      $in: tab  //匹配tabs\n    &#125;\n  &#125;).sort(&#123; _id: -1 &#125;)  //逆序\n  return pList\n&#125;\n\nmodule.exports = &#123;\n  getHotList,\n  getShopInfo,\n  getProductByShopId\n&#125;\n在routes下新建shop.js\nconst router = require('koa-router')()\n\nconst &#123; SuccessModel &#125; = require('../res-model/SuccessModel')\n\nconst &#123;\n  getHotList,\n  getShopInfo,\n  getProductByShopId\n&#125; = require('../controller/shop')\n\nrouter.prefix('/api/shop')\n\n// 热门商店（首页商店列表）\nrouter.get('/hot-list', async function (ctx, next) &#123;\n  const list = await getHotList()\n  ctx.body = new SuccessModel(list)\n&#125;)\n\n// 根据 id 查询单个商店信息\nrouter.get('/:id', async function (ctx, next) &#123;\n  const id = ctx.params.id  //商店id\n  const shop = await getShopInfo(id)\n  ctx.body = new SuccessModel(shop)\n&#125;)\n\nrouter.get('/:id/product', async function (ctx, next) &#123;\n  const id = ctx.params.id\n  const tab = ctx.query.tab || 'all'\n  const products = await getProductByShopId(id, tab)\n  ctx.body = new SuccessModel(products)\n&#125;)\n\n订单接口\n在controller 下新建order.js\n/**\n * @description order controller\n * @author liyunfu\n */\n\nconst &#123; Order, Product, Address &#125; = require('../models/index')\n\n// 创建订单(要从Address，Product里拷贝数据，比较麻烦)\nasync function createOrder(username, data = &#123;&#125;) &#123;\n  console.log(username, data)\n  // 结构data(前端传来的订单信息)\n  const &#123;\n    addressId,\n    shopId,\n    shopName,\n    isCanceled = false,\n    products = []\n  &#125; = data\n\n  // 根据addressId获取地址信息\n  const address = await Address.findById(addressId)\n\n  // 获取商品列表\n  const pIds = products.map(p => p.id)\n  const productList = await Product.find(&#123;\n    // 条件1：商品id\n    _id: &#123;\n      $in: pIds\n    &#125;,\n    // 条件2：商店id\n    shopId\n  &#125;)\n\n  // 给商品列表增加销售数量(订单里，每个商品都有销量)\n  const productListWithSales = productList.map(p => &#123;\n    // 商品id\n    const id = p._id.toString()\n\n    // 找到商品销量\n    const filterProducts = products.filter(item => item.id === id)\n    if (filterProducts.length === 0) &#123;\n      // 没有找到匹配的数量 报错\n      throw new Error('未找到匹配的销量数据')\n    &#125;\n\n    return &#123;\n      orderSales: filterProducts[0].num,\n      product: p\n    &#125;\n  &#125;)\n\n  // 创建订单\n  const newOrder = await Order.create(&#123;\n    username,\n    address,\n    shopId,\n    shopName,\n    isCanceled,\n    products: productListWithSales\n  &#125;)\n  return newOrder\n&#125;\n\n// 获取订单列表\nasync function getOrderList(username) &#123;\n  console.log('username', username)\n  const list = await Order.find(&#123; username &#125;).sort(&#123; _id: -1 &#125;)\n  console.log('list', 'list')\n  return list\n&#125;\n\nmodule.exports = &#123;\n  createOrder,\n  getOrderList\n&#125;\n在routes 下新建order.js\nconst router = require('koa-router')()\n\nconst &#123; SuccessModel, ErrorModel &#125; = require('../res-model/index')\nconst loginCheck = require('../middleware/loginCheck')\nconst &#123; createOrder, getOrderList &#125; = require('../controller/order')\n\nrouter.prefix('/api/order')\n\n// 创建订单\nrouter.post('/', loginCheck, async function (ctx, next) &#123;\n  // 有登录验证 可以直接获取session\n  const userInfo = ctx.session.userInfo\n  const username = userInfo.username\n\n  // 订单数据\n  const data = ctx.request.body\n\n  try &#123;\n    const newOrder = await createOrder(username, data)\n    ctx.body = new SuccessModel(newOrder)\n  &#125; catch (ex) &#123;\n    console.error(ex)\n    ctx.body = new ErrorModel(10005, '订单创建失败')\n  &#125;\n&#125;)\n\n// 获取订单列表\nrouter.get('/', loginCheck, async function (ctx, next) &#123;\n  // 有登录验证，可以直接获取session\n  const userInfo = ctx.session.userInfo\n  const username = userInfo.username\n\n  const list = await getOrderList(username)\n\n  ctx.body = new SuccessModel(list)\n&#125;)\n\nmodule.exports = router\n\n改为适合部署到Vercel的项目\n在根目录下新建vercel.json\n&#123;\n  \"version\": 2,\n  \"builds\": [\n    &#123;\n      \"src\": \"./index.js\",\n      \"use\": \"@vercel/node\"\n    &#125;\n  ],\n  \"routes\": [\n    &#123;\n      \"src\": \"/(.*)\",\n      \"dest\": \"/\"\n    &#125;\n  ]\n&#125;\n在根目录下新建index.js 将原bin/www内容移到此处\n\n修改package.json\n\"start\": \"node index.js\",\n\"dev\": \"./node_modules/.bin/nodemon index.js\",\n\"prd\": \"pm2 start index.js\",\n\n改造项目，实现跨域\n修改根目录下vercel.json\n&#123;\n  \"version\": 2,\n  \"builds\": [\n    &#123;\n      \"src\": \"./index.js\",\n      \"use\": \"@vercel/node\"\n    &#125;\n  ],\n  \"routes\": [\n    &#123;\n      \"src\": \"/(.*)\",\n      \"dest\": \"/\",\n      \"headers\": &#123;\n        \"Access-Control-Allow-Credentials\": \"true\",\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Methods\": \"GET,OPTIONS,PATCH,DELETE,POST,PUT\",\n        \"Access-Control-Allow-Headers\": \"X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version\"\n      &#125;\n    &#125;\n  ]\n&#125;\n\n​      \n","slug":"基于koa-generator搭建通用服务端","date":"2022-03-05T02:51:22.000Z","categories_index":"实战","tags_index":"实战,koa","author_index":"LIYUNFU"},{"id":"7bb7fcd214fc2de4ef1142bae196581d","title":"标准化大厂编码规范解决方案","content":"升级最新的vuenpm i vue@3.2.8 vue-router@4.0.11 vuex@4.0.2\n\nESLint规则// ESLint 配置文件遵循 commonJS 的导出规则，所导出的对象就是 ESLint 的配置对象\n// 文档：https://eslint.bootcss.com/docs/user-guide/configuring\nmodule.exports = &#123;\n  // 表示当前目录即为根目录，ESLint 规则将被限制到该目录下\n  root: true,\n  // env 表示启用 ESLint 检测的环境\n  env: &#123;\n    // 在 node 环境下启动 ESLint 检测\n    node: true\n  &#125;,\n  // ESLint 中基础配置需要继承的配置\n  extends: [\"plugin:vue/vue3-essential\", \"@vue/standard\"],\n  // 解析器\n  parserOptions: &#123;\n    parser: \"babel-eslint\"\n  &#125;,\n  // 需要修改的启用规则及其各自的错误级别\n  /**\n   * 错误级别分为三种：\n   * \"off\" 或 0 - 关闭规则\n   * \"warn\" 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)\n   * \"error\" 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)\n   */\n  rules: &#123;\n    \"no-console\": process.env.NODE_ENV === \"production\" ? \"warn\" : \"off\",\n    \"no-debugger\": process.env.NODE_ENV === \"production\" ? \"warn\" : \"off\",\n    'space-before-function-paren': 0  //函数参数前括号没有空格\n  &#125;\n&#125;;\n\nPrettier配置.prettierrc\n&#123;\n  // 不尾随分号\n  \"semi\": false,\n  // 使用单引号\n  \"singleQuote\": true,\n  // 多行逗号分割的语法中，最后一行不加逗号\n  \"trailingComma\": \"none\"\n&#125;\n\n修改VSCode的TabSize\n配置大厂git提交规范全局安装Commitizennpm install -g commitizen@4.2.4\n\n安装并配置 cz-customizable 插件安装npm i cz-customizable@6.3.0 --save-dev\n\n添加以下配置到 package.json 中\"config\": &#123;\n  \"commitizen\": &#123;\n    \"path\": \"node_modules/cz-customizable\"\n  &#125;\n&#125;\n\n项目根目录下创建 .cz-config.js 自定义提示文件module.exports = &#123;\n  // 可选类型\n  types: [\n    &#123; value: 'feat', name: 'feat:     新功能' &#125;,\n    &#123; value: 'fix', name: 'fix:      修复' &#125;,\n    &#123; value: 'docs', name: 'docs:     文档变更' &#125;,\n    &#123; value: 'style', name: 'style:    代码格式(不影响代码运行的变动)' &#125;,\n    &#123;\n      value: 'refactor',\n      name: 'refactor: 重构(既不是增加feature，也不是修复bug)'\n    &#125;,\n    &#123; value: 'perf', name: 'perf:     性能优化' &#125;,\n    &#123; value: 'test', name: 'test:     增加测试' &#125;,\n    &#123; value: 'chore', name: 'chore:    构建过程或辅助工具的变动' &#125;,\n    &#123; value: 'revert', name: 'revert:   回退' &#125;,\n    &#123; value: 'build', name: 'build:    打包' &#125;\n  ],\n  // 消息步骤\n  messages: &#123;\n    type: '请选择提交类型:',\n    customScope: '请输入修改范围(可选):',\n    subject: '请简要描述提交(必填):',\n    body: '请输入详细描述(可选):',\n    footer: '请输入要关闭的issue(可选):',\n    confirmCommit: '确认使用以上信息提交？(y/n/e/h)'\n  &#125;,\n  // 跳过问题\n  skipQuestions: ['body', 'footer'],\n  // subject文字长度默认是72\n  subjectLimit: 72\n&#125;\n\n使用 git cz 代替 git commit使用 husky + commitlint 检查提交描述是否符合规范要求commitlint安装依赖：npm install --save-dev @commitlint/config-conventional@12.1.4 @commitlint/cli@12.1.4\n\n根目录下创建 commitlint.config.js 文件module.exports = &#123;\n  // 继承的规则\n  extends: ['@commitlint/config-conventional'],\n  // 定义规则类型\n  rules: &#123;\n    // type 类型定义，表示 git 提交的 type 必须在以下类型范围内\n    'type-enum': [\n      2,\n      'always',\n      [\n        'feat', // 新功能 feature\n        'fix', // 修复 bug\n        'docs', // 文档注释\n        'style', // 代码格式(不影响代码运行的变动)\n        'refactor', // 重构(既不增加新功能，也不是修复bug)\n        'perf', // 性能优化\n        'test', // 增加测试\n        'chore', // 构建过程或辅助工具的变动\n        'revert', // 回退\n        'build' // 打包\n      ]\n    ],\n    // subject 大小写不做校验\n    'subject-case': [0]\n  &#125;\n&#125;\n\n注意：确保保存为 UTF-8 的编码格式，否则可能会出现以下错误：\n\nhusky安装依赖：npm install husky@7.0.1 --save-dev\n\n启动 hooks ， 生成 .husky 文件夹npx husky install\n\n在 package.json 中生成 prepare 指令\n执行 prepare 指令npm run prepare\n\n执行成功，提示\n添加 commitlint 的 hook 到 husky中，并指令在 commit-msg 的 hooks 下执行 npx –no-install commitlint –edit “$1” 指令npx husky add .husky/commit-msg 'npx --no-install commitlint --edit \"$1\"'\n\n此时的 .husky 的文件结构\n至此， 不符合规范的 commit 将不再可提交\n通过 pre-commit 检测提交时代码规范我们期望通过 husky 监测 pre-commit 钩子，在该钩子下执行 npx eslint –ext .js,.vue src 指令来去进行相关检测：\n\n 执行 npx husky add .husky/pre-commit &quot;npx eslint --ext .js,.vue src&quot; 添加 commit 时的 hook （npx eslint --ext .js,.vue src 会在执行到该 hook 时运行） \n 该操作会生成对应文件 pre-commit： \n\n\nlint-staged 自动修复格式错误lint-staged 可以让你当前的代码检查 只检查本次修改更新的代码，并在出现错误的时候，自动修复并且推送lint-staged 无需单独安装，我们生成项目时，vue-cli 已经帮助我们安装过了，所以我们直接使用就可以了\n修改 package.json 配置\"lint-staged\": &#123;\n    \"src/**/*.&#123;js,vue&#125;\": [\n      \"eslint --fix\",\n      \"git add\"\n    ]\n  &#125;\n\n修改 .husky/pre-commit 文件#!/bin/sh\n. \"$(dirname \"$0\")/_/husky.sh\"\n\nnpx lint-staged\n","slug":"标准化大厂编码规范解决方案","date":"2022-02-10T08:33:17.000Z","categories_index":"规范","tags_index":"git,规范","author_index":"LIYUNFU"},{"id":"1978ad52226e2e5a45738891b7ab43e0","title":"NodeJS面试题","content":"1、Node模块机制1.1 请介绍一下node里的模块是什么Node中，每个文件模块都是一个对象，它的定义如下：\nfunction Module(id, parent) &#123;\n  this.id &#x3D; id;\n  this.exports &#x3D; &#123;&#125;;\n  this.parent &#x3D; parent;\n  this.filename &#x3D; null;\n  this.loaded &#x3D; false;\n  this.children &#x3D; [];\n&#125;\n\nmodule.exports &#x3D; Module;\n\nvar module &#x3D; new Module(filename, parent);\n复制代码\n\n所有的模块都是 Module 的实例。可以看到，当前模块（module.js）也是 Module 的一个实例。\n1.2 请介绍一下require的模块加载机制这道题基本上就可以了解到面试者对Node模块机制的了解程度 基本上面试提到\n\n1、先计算模块路径\n2、如果模块在缓存里面，取出缓存\n3、加载模块\n4、的输出模块的exports属性即可\n\n&#x2F;&#x2F; require 其实内部调用 Module._load 方法\nModule._load &#x3D; function(request, parent, isMain) &#123;\n  &#x2F;&#x2F;  计算绝对路径\n  var filename &#x3D; Module._resolveFilename(request, parent);\n\n  &#x2F;&#x2F;  第一步：如果有缓存，取出缓存\n  var cachedModule &#x3D; Module._cache[filename];\n  if (cachedModule) &#123;\n    return cachedModule.exports;\n\n  &#x2F;&#x2F; 第二步：是否为内置模块\n  if (NativeModule.exists(filename)) &#123;\n    return NativeModule.require(filename);\n  &#125;\n  \n  &#x2F;********************************这里注意了**************************&#x2F;\n  &#x2F;&#x2F; 第三步：生成模块实例，存入缓存\n  &#x2F;&#x2F; 这里的Module就是我们上面的1.1定义的Module\n  var module &#x3D; new Module(filename, parent);\n  Module._cache[filename] &#x3D; module;\n\n  &#x2F;********************************这里注意了**************************&#x2F;\n  &#x2F;&#x2F; 第四步：加载模块\n  &#x2F;&#x2F; 下面的module.load实际上是Module原型上有一个方法叫Module.prototype.load\n  try &#123;\n    module.load(filename);\n    hadException &#x3D; false;\n  &#125; finally &#123;\n    if (hadException) &#123;\n      delete Module._cache[filename];\n    &#125;\n  &#125;\n\n  &#x2F;&#x2F; 第五步：输出模块的exports属性\n  return module.exports;\n&#125;;\n复制代码\n\n接着上一题继续发问\n1.3 加载模块时，为什么每个模块都有__dirname,__filename属性呢，new Module的时候我们看到1.1部分没有这两个属性的，那么这两个属性是从哪里来的&#x2F;&#x2F; 上面(1.2部分)的第四步module.load(filename)\n&#x2F;&#x2F; 这一步，module模块相当于被包装了，包装形式如下\n&#x2F;&#x2F; 加载js模块，相当于下面的代码（加载node模块和json模块逻辑不一样）\n(function (exports, require, module, __filename, __dirname) &#123;\n  &#x2F;&#x2F; 模块源码\n  &#x2F;&#x2F; 假如模块代码如下\n  var math &#x3D; require(&#39;math&#39;);\n  exports.area &#x3D; function(radius)&#123;\n      return Math.PI * radius * radius\n  &#125;\n&#125;);\n\n复制代码\n\n也就是说，每个module里面都会传入__filename, __dirname参数，这两个参数并不是module本身就有的，是外界传入的\n1.4 我们知道node导出模块有两种方式，一种是exports.xxx=xxx和Module.exports={}有什么区别吗\nexports其实就是module.exports\n其实1.3问题的代码已经说明问题了，接着我引用廖雪峰大神的讲解，希望能讲的更清楚\n\nmodule.exports vs exports\n很多时候，你会看到，在Node环境中，有两种方法可以在一个模块中输出变量：\n\n方法一：对module.exports赋值：\n\n&#x2F;&#x2F; hello.js\n\nfunction hello() &#123;\n    console.log(&#39;Hello, world!&#39;);\n&#125;\n\nfunction greet(name) &#123;\n    console.log(&#39;Hello, &#39; + name + &#39;!&#39;);\n&#125;\n\nmodule.exports &#x3D; &#123;\n    hello: hello,\n    greet: greet\n&#125;;\n方法二：直接使用exports：\n\n&#x2F;&#x2F; hello.js\n\nfunction hello() &#123;\n    console.log(&#39;Hello, world!&#39;);\n&#125;\n\nfunction greet(name) &#123;\n    console.log(&#39;Hello, &#39; + name + &#39;!&#39;);\n&#125;\n\nfunction hello() &#123;\n    console.log(&#39;Hello, world!&#39;);\n&#125;\n\nexports.hello &#x3D; hello;\nexports.greet &#x3D; greet;\n但是你不可以直接对exports赋值：\n\n&#x2F;&#x2F; 代码可以执行，但是模块并没有输出任何变量:\nexports &#x3D; &#123;\n    hello: hello,\n    greet: greet\n&#125;;\n如果你对上面的写法感到十分困惑，不要着急，我们来分析Node的加载机制：\n\n首先，Node会把整个待加载的hello.js文件放入一个包装函数load中执行。在执行这个load()函数前，Node准备好了module变量：\n\nvar module &#x3D; &#123;\n    id: &#39;hello&#39;,\n    exports: &#123;&#125;\n&#125;;\nload()函数最终返回module.exports：\n\nvar load &#x3D; function (exports, module) &#123;\n    &#x2F;&#x2F; hello.js的文件内容\n    ...\n    &#x2F;&#x2F; load函数返回:\n    return module.exports;\n&#125;;\n\nvar exportes &#x3D; load(module.exports, module);\n也就是说，默认情况下，Node准备的exports变量和module.exports变量实际上是同一个变量，并且初始化为空对象&#123;&#125;，于是，我们可以写：\n\nexports.foo &#x3D; function () &#123; return &#39;foo&#39;; &#125;;\nexports.bar &#x3D; function () &#123; return &#39;bar&#39;; &#125;;\n也可以写：\n\nmodule.exports.foo &#x3D; function () &#123; return &#39;foo&#39;; &#125;;\nmodule.exports.bar &#x3D; function () &#123; return &#39;bar&#39;; &#125;;\n换句话说，Node默认给你准备了一个空对象&#123;&#125;，这样你可以直接往里面加东西。\n\n但是，如果我们要输出的是一个函数或数组，那么，只能给module.exports赋值：\n\nmodule.exports &#x3D; function () &#123; return &#39;foo&#39;; &#125;;\n给exports赋值是无效的，因为赋值后，module.exports仍然是空对象&#123;&#125;。\n\n结论\n如果要输出一个键值对象&#123;&#125;，可以利用exports这个已存在的空对象&#123;&#125;，并继续在上面添加新的键值；\n\n如果要输出一个函数或数组，必须直接对module.exports对象赋值。\n\n所以我们可以得出结论：直接对module.exports赋值，可以应对任何情况：\n\nmodule.exports &#x3D; &#123;\n    foo: function () &#123; return &#39;foo&#39;; &#125;\n&#125;;\n或者：\n\nmodule.exports &#x3D; function () &#123; return &#39;foo&#39;; &#125;;\n最终，我们强烈建议使用module.exports &#x3D; xxx的方式来输出模块变量，这样，你只需要记忆一种方法。\n复制代码\n\n2、Node的异步I/O本章的答题思路大多借鉴于朴灵大神的《深入浅出的NodeJS》\n2.1 请介绍一下Node事件循环的流程\n在进程启动时，Node便会创建一个类似于while(true)的循环，每执行一次循环体的过程我们成为Tick。\n每个Tick的过程就是查看是否有事件待处理。如果有就取出事件及其相关的回调函数。然后进入下一个循环，如果不再有事件处理，就退出进程。\n\n\n2.2 在每个tick的过程中，如何判断是否有事件需要处理呢？\n每个事件循环中有一个或者多个观察者，而判断是否有事件需要处理的过程就是向这些观察者询问是否有要处理的事件。\n在Node中，事件主要来源于网络请求、文件的I/O等，这些事件对应的观察者有文件I/O观察者，网络I/O的观察者。\n事件循环是一个典型的生产者/消费者模型。异步I/O，网络请求等则是事件的生产者，源源不断为Node提供不同类型的事件，这些事件被传递到对应的观察者那里，事件循环则从观察者那里取出事件并处理。\n在windows下，这个循环基于IOCP创建，在*nix下则基于多线程创建\n\n2.3 请描述一下整个异步I/O的流程\n3、V8的垃圾回收机制3.1 如何查看V8的内存使用情况使用process.memoryUsage(),返回如下\n&#123;\n  rss: 4935680,\n  heapTotal: 1826816,\n  heapUsed: 650472,\n  external: 49879\n&#125;\n复制代码\n\nheapTotal 和 heapUsed 代表V8的内存使用情况。 external代表V8管理的，绑定到Javascript的C++对象的内存使用情况。 rss, 驻留集大小, 是给这个进程分配了多少物理内存(占总分配内存的一部分) 这些物理内存中包含堆，栈，和代码段。\n3.2 V8的内存限制是多少，为什么V8这样设计64位系统下是1.4GB， 32位系统下是0.7GB。因为1.5GB的垃圾回收堆内存，V8需要花费50毫秒以上，做一次非增量式的垃圾回收甚至要1秒以上。这是垃圾回收中引起Javascript线程暂停执行的事件，在这样的花销下，应用的性能和影响力都会直线下降。\n3.3 V8的内存分代和回收算法请简单讲一讲在V8中，主要将内存分为新生代和老生代两代。新生代中的对象存活时间较短的对象，老生代中的对象存活时间较长，或常驻内存的对象。\n\n3.3.1 新生代新生代中的对象主要通过Scavenge算法进行垃圾回收。这是一种采用复制的方式实现的垃圾回收算法。它将堆内存一份为二，每一部分空间成为semispace。在这两个semispace空间中，只有一个处于使用中，另一个处于闲置状态。处于使用状态的semispace空间称为From空间，处于闲置状态的空间称为To空间。\n\n\n当开始垃圾回收的时候，会检查From空间中的存活对象，这些存活对象将被复制到To空间中，而非存活对象占用的空间将会被释放。完成复制后，From空间和To空间发生角色对换。\n应为新生代中对象的生命周期比较短，就比较适合这个算法。\n当一个对象经过多次复制依然存活，它将会被认为是生命周期较长的对象。这种新生代中生命周期较长的对象随后会被移到老生代中。\n\n3.3.2 老生代老生代主要采取的是标记清除的垃圾回收算法。与Scavenge复制活着的对象不同，标记清除算法在标记阶段遍历堆中的所有对象，并标记活着的对象，只清理死亡对象。活对象在新生代中只占叫小部分，死对象在老生代中只占较小部分，这是为什么采用标记清除算法的原因。\n3.3.3 标记清楚算法的问题主要问题是每一次进行标记清除回收后，内存空间会出现不连续的状态\n\n\n这种内存碎片会对后续内存分配造成问题，很可能出现需要分配一个大对象的情况，这时所有的碎片空间都无法完成此次分配，就会提前触发垃圾回收，而这次回收是不必要的。\n为了解决碎片问题，标记整理被提出来。就是在对象被标记死亡后，在整理的过程中，将活着的对象往一端移动，移动完成后，直接清理掉边界外的内存。\n\n3.3.4 哪些情况会造成V8无法立即回收内存闭包和全局变量\n3.3.5 请谈一下内存泄漏是什么，以及常见内存泄漏的原因，和排查的方法什么是内存泄漏\n\n内存泄漏(Memory Leak)指由于疏忽或错误造成程序未能释放已经不再使用的内存的情况。\n如果内存泄漏的位置比较关键，那么随着处理的进行可能持有越来越多的无用内存，这些无用的内存变多会引起服务器响应速度变慢。\n严重的情况下导致内存达到某个极限(可能是进程的上限，如 v8 的上限;也可能是系统可提供的内存上限)会使得应用程序崩溃。 常见内存泄漏的原因 内存泄漏的几种情况:\n\n一、全局变量\na &#x3D; 10;  \n&#x2F;&#x2F;未声明对象。  \nglobal.b &#x3D; 11;  \n&#x2F;&#x2F;全局变量引用 \n这种比较简单的原因，全局变量直接挂在 root 对象上，不会被清除掉。\n复制代码\n\n二、闭包\nfunction out() &#123;  \n    const bigData &#x3D; new Buffer(100);  \n    inner &#x3D; function () &#123;  \n        \n    &#125;  \n&#125; \n复制代码\n\n闭包会引用到父级函数中的变量，如果闭包未释放，就会导致内存泄漏。上面例子是 inner 直接挂在了 root 上，那么每次执行 out 函数所产生的 bigData 都不会释放，从而导致内存泄漏。\n需要注意的是，这里举得例子只是简单的将引用挂在全局对象上，实际的业务情况可能是挂在某个可以从 root 追溯到的对象上导致的。\n三、事件监听\nNode.js 的事件监听也可能出现的内存泄漏。例如对同一个事件重复监听，忘记移除(removeListener)，将造成内存泄漏。这种情况很容易在复用对象上添加事件时出现，所以事件重复监听可能收到如下警告：\nemitter.setMaxListeners() to increase limit \n复制代码\n\n例如，Node.js 中 Agent 的 keepAlive 为 true 时，可能造成的内存泄漏。当 Agent keepAlive 为 true 的时候，将会复用之前使用过的 socket，如果在 socket 上添加事件监听，忘记清除的话，因为 socket 的复用，将导致事件重复监听从而产生内存泄漏。\n原理上与前一个添加事件监听的时候忘了清除是一样的。在使用 Node.js 的 http 模块时，不通过 keepAlive 复用是没有问题的，复用了以后就会可能产生内存泄漏。所以，你需要了解添加事件监听的对象的生命周期，并注意自行移除。\n排查方法\n想要定位内存泄漏，通常会有两种情况：\n\n对于只要正常使用就可以重现的内存泄漏，这是很简单的情况只要在测试环境模拟就可以排查了。\n对于偶然的内存泄漏，一般会与特殊的输入有关系。想稳定重现这种输入是很耗时的过程。如果不能通过代码的日志定位到这个特殊的输入，那么推荐去生产环境打印内存快照了。\n需要注意的是，打印内存快照是很耗 CPU 的操作，可能会对线上业务造成影响。 快照工具推荐使用 heapdump 用来保存内存快照，使用 devtool 来查看内存快照。\n使用 heapdump 保存内存快照时，只会有 Node.js 环境中的对象，不会受到干扰(如果使用 node-inspector 的话，快照中会有前端的变量干扰)。\nPS：安装 heapdump 在某些 Node.js 版本上可能出错，建议使用 npm install heapdump -target=Node.js 版本来安装。\n\n4、Buffer模块4.1 新建Buffer会占用V8分配的内存吗不会，Buffer属于堆外内存，不是V8分配的。\n4.2 Buffer.alloc和Buffer.allocUnsafe的区别Buffer.allocUnsafe创建的 Buffer 实例的底层内存是未初始化的。 新创建的 Buffer 的内容是未知的，可能包含敏感数据。 使用 Buffer.alloc() 可以创建以零初始化的 Buffer 实例。\n4.3 Buffer的内存分配机制为了高效的使用申请来的内存，Node采用了slab分配机制。slab是一种动态的内存管理机制。 Node以8kb为界限来来区分Buffer为大对象还是小对象，如果是小于8kb就是小Buffer，大于8kb就是大Buffer。\n例如第一次分配一个1024字节的Buffer，Buffer.alloc(1024),那么这次分配就会用到一个slab，接着如果继续Buffer.alloc(1024),那么上一次用的slab的空间还没有用完，因为总共是8kb，1024+1024 = 2048个字节，没有8kb，所以就继续用这个slab给Buffer分配空间。\n如果超过8kb，那么直接用C++底层地宫的SlowBuffer来给Buffer对象提供空间。\n4.4 Buffer乱码问题例如一个份文件test.md里的内容如下：\n床前明月光，疑是地上霜，举头望明月，低头思故乡\n复制代码\n\n我们这样读取就会出现乱码：\nvar rs &#x3D; require(&#39;fs&#39;).createReadStream(&#39;test.md&#39;, &#123;highWaterMark: 11&#125;);\n&#x2F;&#x2F; 床前明???光，疑???地上霜，举头???明月，???头思故乡\n复制代码\n\n一般情况下，只需要设置rs.setEncoding(‘utf8’)即可解决乱码问题\n5、webSocket5.1 webSocket与传统的http有什么优势\n客户端与服务器只需要一个TCP连接，比http长轮询使用更少的连接\nwebSocket服务端可以推送数据到客户端\n更轻量的协议头，减少数据传输量\n\n5.2 webSocket协议升级时什么，能简述一下吗？首先，WebSocket连接必须由浏览器发起，因为请求协议是一个标准的HTTP请求，格式如下：\nGET ws:&#x2F;&#x2F;localhost:3000&#x2F;ws&#x2F;chat HTTP&#x2F;1.1\nHost: localhost\nUpgrade: websocket\nConnection: Upgrade\nOrigin: http:&#x2F;&#x2F;localhost:3000\nSec-WebSocket-Key: client-random-string\nSec-WebSocket-Version: 13\n复制代码\n\n该请求和普通的HTTP请求有几点不同：\n\nGET请求的地址不是类似/path/，而是以ws://开头的地址；\n请求头Upgrade: websocket和Connection: Upgrade表示这个连接将要被转换为WebSocket连接；\nSec-WebSocket-Key是用于标识这个连接，并非用于加密数据；\nSec-WebSocket-Version指定了WebSocket的协议版本。\n\n随后，服务器如果接受该请求，就会返回如下响应：\nHTTP&#x2F;1.1 101 Switching Protocols\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Accept: server-random-string\n复制代码\n\n该响应代码101表示本次连接的HTTP协议即将被更改，更改后的协议就是Upgrade: websocket指定的WebSocket协议。\n6、https6.1 https用哪些端口进行通信，这些端口分别有什么用\n443端口用来验证服务器端和客户端的身份，比如验证证书的合法性\n80端口用来传输数据（在验证身份合法的情况下，用来数据传输）\n\n6.2 身份验证过程中会涉及到密钥， 对称加密，非对称加密，摘要的概念，请解释一下\n密钥：密钥是一种参数，它是在明文转换为密文或将密文转换为明文的算法中输入的参数。密钥分为对称密钥与非对称密钥，分别应用在对称加密和非对称加密上。\n对称加密：对称加密又叫做私钥加密，即信息的发送方和接收方使用同一个密钥去加密和解密数据。对称加密的特点是算法公开、加密和解密速度快，适合于对大数据量进行加密，常见的对称加密算法有DES、3DES、TDEA、Blowfish、RC5和IDEA。\n非对称加密：非对称加密也叫做公钥加密。非对称加密与对称加密相比，其安全性更好。对称加密的通信双方使用相同的密钥，如果一方的密钥遭泄露，那么整个通信就会被破解。而非对称加密使用一对密钥，即公钥和私钥，且二者成对出现。私钥被自己保存，不能对外泄露。公钥指的是公共的密钥，任何人都可以获得该密钥。用公钥或私钥中的任何一个进行加密，用另一个进行解密。\n摘要： 摘要算法又称哈希/散列算法。它通过一个函数，把任意长度的数据转换为一个长度固定的数据串（通常用16进制的字符串表示）。算法不可逆。\n\n6.3 为什么需要CA机构对证书签名如果不签名会存在中间人攻击的风险，签名之后保证了证书里的信息，比如公钥、服务器信息、企业信息等不被篡改，能够验证客户端和服务器端的“合法性”。\n6.4 https验证身份也就是TSL/SSL身份验证的过程简要图解如下\n\n7、进程通信7.1 请简述一下node的多进程架构面对node单线程对多核CPU使用不足的情况，Node提供了child_process模块，来实现进程的复制，node的多进程架构是主从模式，如下所示：\n\nvar fork &#x3D; require(&#39;child_process&#39;).fork;\nvar cpus &#x3D; require(&#39;os&#39;).cpus();\nfor(var i &#x3D; 0; i &lt; cpus.length; i++)&#123;\n    fork(&#39;.&#x2F;worker.js&#39;);\n&#125;\n复制代码\n\n在linux中，我们通过ps aux | grep worker.js查看进程\n\n这就是著名的主从模式，Master-Worker\n7.2 请问创建子进程的方法有哪些，简单说一下它们的区别创建子进程的方法大致有：\n\nspawn()： 启动一个子进程来执行命令\nexec(): 启动一个子进程来执行命令，与spawn()不同的是其接口不同，它有一个回调函数获知子进程的状况\nexecFlie(): 启动一个子进程来执行可执行文件\nfork(): 与spawn()类似，不同电在于它创建Node子进程需要执行js文件\nspawn()与exec()、execFile()不同的是，后两者创建时可以指定timeout属性设置超时时间，一旦创建的进程超过设定的时间就会被杀死\nexec()与execFile()不同的是，exec()适合执行已有命令，execFile()适合执行文件。\n\n7.3 请问你知道spawn在创建子进程的时候，第三个参数有一个stdio选项吗，这个选项的作用是什么，默认的值是什么。\n选项用于配置在父进程和子进程之间建立的管道。\n默认情况下，子进程的 stdin、 stdout 和 stderr 会被重定向到 ChildProcess 对象上相应的 subprocess.stdin、subprocess.stdout 和 subprocess.stderr 流。\n这相当于将 options.stdio 设置为 [‘pipe’, ‘pipe’, ‘pipe’]。\n\n7.4 请问实现一个node子进程被杀死，然后自动重启代码的思路\n在创建子进程的时候就让子进程监听exit事件，如果被杀死就重新fork一下\n\nvar createWorker &#x3D; function()&#123;\n    var worker &#x3D; fork(__dirname + &#39;worker.js&#39;)\n    worker.on(&#39;exit&#39;, function()&#123;\n        console.log(&#39;Worker&#39; + worker.pid + &#39;exited&#39;);\n        &#x2F;&#x2F; 如果退出就创建新的worker\n        createWorker()\n    &#125;)\n&#125;\n复制代码\n\n7.5 在7.4的基础上，实现限量重启，比如我最多让其在1分钟内重启5次，超过了就报警给运维\n思路大概是在创建worker的时候，就判断创建的这个worker是否在1分钟内重启次数超过5次\n所以每一次创建worker的时候都要记录这个worker 创建时间，放入一个数组队列里面，每次创建worker都去取队列里前5条记录\n如果这5条记录的时间间隔小于1分钟，就说明到了报警的时候了\n\n7.6 如何实现进程间的状态共享，或者数据共享我自己没用过Kafka这类消息队列工具，问了java,可以用类似工具来实现进程间通信，更好的方法欢迎留言\n8、中间件8.1 如果使用过koa、egg这两个Node框架，请简述其中的中间件原理，最好用代码表示一下\n\n上面是在网上找的一个示意图，就是说中间件执行就像洋葱一样，最早use的中间件，就放在最外层。处理顺序从左到右，左边接收一个request，右边输出返回response\n一般的中间件都会执行两次，调用next之前为第一次，调用next时把控制传递给下游的下一个中间件。当下游不再有中间件或者没有执行next函数时，就将依次恢复上游中间件的行为，让上游中间件执行next之后的代码\n例如下面这段代码\n\nconst Koa &#x3D; require(&#39;koa&#39;)\nconst app &#x3D; new Koa()\napp.use((ctx, next) &#x3D;&gt; &#123;\n    console.log(1)\n    next()\n    console.log(3)\n&#125;)\napp.use((ctx) &#x3D;&gt; &#123;\n    console.log(2)\n&#125;)\napp.listen(3001)\n执行结果是1&#x3D;&gt;2&#x3D;&gt;3\n复制代码\n\nkoa中间件实现源码大致思路如下：\n&#x2F;&#x2F; 注意其中的compose函数，这个函数是实现中间件洋葱模型的关键\n&#x2F;&#x2F; 场景模拟\n&#x2F;&#x2F; 异步 promise 模拟\nconst delay &#x3D; async () &#x3D;&gt; &#123;\n  return new Promise((resolve, reject) &#x3D;&gt; &#123;\n    setTimeout(() &#x3D;&gt; &#123;\n      resolve();\n    &#125;, 2000);\n  &#125;);\n&#125;\n&#x2F;&#x2F; 中间间模拟\nconst fn1 &#x3D; async (ctx, next) &#x3D;&gt; &#123;\n  console.log(1);\n  await next();\n  console.log(2);\n&#125;\nconst fn2 &#x3D; async (ctx, next) &#x3D;&gt; &#123;\n  console.log(3);\n  await delay();\n  await next();\n  console.log(4);\n&#125;\nconst fn3 &#x3D; async (ctx, next) &#x3D;&gt; &#123;\n  console.log(5);\n&#125;\n\nconst middlewares &#x3D; [fn1, fn2, fn3];\n\n&#x2F;&#x2F; compose 实现洋葱模型\nconst compose &#x3D; (middlewares, ctx) &#x3D;&gt; &#123;\n  const dispatch &#x3D; (i) &#x3D;&gt; &#123;\n    let fn &#x3D; middlewares[i];\n    if(!fn)&#123; return Promise.resolve() &#125;\n    return Promise.resolve(fn(ctx, () &#x3D;&gt; &#123;\n      return dispatch(i+1);\n    &#125;));\n  &#125;\n  return dispatch(0);\n&#125;\n\ncompose(middlewares, 1);\n复制代码\n\n9、其它现在在重新过一遍node 12版本的主要API，有很多新发现，比如说\n\nfs.watch这个模块，事件的回调函数有一个参数是触发的事件名称，但是呢，无论我增删改，都是触发rename事件（如果更改是update事件，删除delete事件，重命名是rename事件，这样语义明晰该多好）。后来网上找到一个node-watch模块，此模块增删改都有对应的事件， 并且还高效的支持递归watch 文件。\nutil模块有个promisify方法，可以让一个遵循异常优先的回调风格的函数，即 (err, value) =&gt; … 回调函数是最后一个参数，返回一个返回值是一个 promise 版本的函数。\n\nconst util &#x3D; require(&#39;util&#39;);\nconst fs &#x3D; require(&#39;fs&#39;);\n\nconst stat &#x3D; util.promisify(fs.stat);\nstat(&#39;.&#39;).then((stats) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 处理 &#96;stats&#96;。\n&#125;).catch((error) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 处理错误。\n&#125;);\n复制代码\n\n9.1 杂想\ncrypto模块，可以考察基础的加密学知识，比如摘要算法有哪些（md5, sha1, sha256，加盐的md5,sha256等等）,接着可以问如何用md5自己模拟一个加盐的md5算法， 接着可以问加密算法（crypto.createCiphe）中的aes,eds算法的区别，分组加密模式有哪些（比如ECB,CBC,为什么ECB不推荐），node里的分组加密模式是哪种（CMM），这些加密算法里的填充和向量是什么意思，接着可以问数字签名和https的流程（为什么需要CA，为什么要对称加密来加密公钥等等）\ntcp/ip，可以问很多基础问题，比如链路层通过什么协议根据IP地址获取物理地址（arp），网关是什么，ip里的ICMP协议有什么用，tcp的三次握手，四次分手的过程是什么，tcp如何控制重发，网络堵塞TCP会怎么办等等，udp和tcp的区别，udp里的广播和组播是什么，组播在node里通过什么模块实现。\nos，操作系统相关基础，io的流程是什么（从硬盘里读取数据到内核的内存中，然后内核的内存将数据传入到调用io的应用程序的进程内存中），冯诺依曼体系是什么，进程和线程的区别等等（我最近在看马哥linux教程，因为自己不是科班出身，听了很多基础的计算机知识，受益匪浅，建议去bilibili看）\nlinux相关操作知识（node涉及到后台，虽然是做中台，不涉及数据库，但是基本的linux操作还是要会的）\nnode性能监控（自己也正在学习中）\n测试，因为用的egg框架，有很完善的学习单元测试的文档，省略这部分\n数据库可以问一些比如事务的等级有哪些，mysql默认的事务等级是什么，会产生什么问题，然后考一些mysql查询的笔试题。。。和常用优化技巧，node的mysql的orm工具使用过没有。。。（比如我自己是看的尚硅谷mysql初级+高级视频，书是看的mysql必知必会，我自己出于爱好学习一下。。。没有实战过）\n\n","slug":"NodeJS面试题","date":"2022-04-10T12:25:21.000Z","categories_index":"知识点","tags_index":"面试","author_index":"LIYUNFU"},{"id":"351e3c9d435f8ea85babffc9bf32b676","title":"Webpack面试题","content":"0.有哪些常见的Loader？你用过哪些Loader？(我开始熟悉的报起了菜名)\n\nraw-loader：加载文件原始内容（utf-8）\nfile-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件 (处理图片和字体)\nurl-loader：与 file-loader 类似，区别是用户可以设置一个阈值，大于阈值会交给 file-loader 处理，小于阈值时返回文件 base64 形式编码 (处理图片和字体)\nsource-map-loader：加载额外的 Source Map 文件，以方便断点调试\nsvg-inline-loader：将压缩后的 SVG 内容注入代码中\nimage-loader：加载并且压缩图片文件\njson-loader 加载 JSON 文件（默认包含）\nhandlebars-loader: 将 Handlebars 模版编译成函数并返回\nbabel-loader：把 ES6 转换成 ES5\nts-loader: 将 TypeScript 转换成 JavaScript\nawesome-typescript-loader：将 TypeScript 转换成 JavaScript，性能优于 ts-loader\nsass-loader：将SCSS/SASS代码转换成CSS\ncss-loader：加载 CSS，支持模块化、压缩、文件导入等特性\nstyle-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS\npostcss-loader：扩展 CSS 语法，使用下一代 CSS，可以配合 autoprefixer 插件自动补齐 CSS3 前缀\neslint-loader：通过 ESLint 检查 JavaScript 代码\ntslint-loader：通过 TSLint检查 TypeScript 代码\nmocha-loader：加载 Mocha 测试用例的代码\ncoverjs-loader：计算测试的覆盖率\nvue-loader：加载 Vue.js 单文件组件\ni18n-loader: 国际化\ncache-loader: 可以在一些性能开销较大的 Loader 之前添加，目的是将结果缓存到磁盘里\n\n更多 Loader 请参考官网\n(面试官：挺好，知道的还挺多)\n1.有哪些常见的Plugin？你用过哪些Plugin？(这大兄弟好像听上瘾了，继续开启常规操作)\n\ndefine-plugin：定义环境变量 (Webpack4 之后指定 mode 会自动配置)\nignore-plugin：忽略部分文件\nhtml-webpack-plugin：简化 HTML 文件创建 (依赖于 html-loader)\nweb-webpack-plugin：可方便地为单页应用输出 HTML，比 html-webpack-plugin 好用\nuglifyjs-webpack-plugin：不支持 ES6 压缩 (Webpack4 以前)\nterser-webpack-plugin: 支持压缩 ES6 (Webpack4)\nwebpack-parallel-uglify-plugin: 多进程执行代码压缩，提升构建速度\nmini-css-extract-plugin: 分离样式文件，CSS 提取为独立文件，支持按需加载 (替代extract-text-webpack-plugin)\nserviceworker-webpack-plugin：为网页应用增加离线缓存功能\nclean-webpack-plugin: 目录清理\nModuleConcatenationPlugin: 开启 Scope Hoisting\nspeed-measure-webpack-plugin: 可以看到每个 Loader 和 Plugin 执行耗时 (整个打包耗时、每个 Plugin 和 Loader 耗时)\nwebpack-bundle-analyzer: 可视化 Webpack 输出文件的体积 (业务组件、依赖第三方模块)\n\n更多 Plugin 请参考官网\n(Double Kill)\n2.那你再说一说Loader和Plugin的区别？(就知道你会问这个，我用手掩盖着嘴角的微笑)\nLoader 本质就是一个函数，在该函数中对接收到的内容进行转换，返回转换后的结果。 因为 Webpack 只认识 JavaScript，所以 Loader 就成了翻译官，对其他类型的资源进行转译的预处理工作。\nPlugin 就是插件，基于事件流框架 Tapable，插件可以扩展 Webpack 的功能，在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。\nLoader 在 module.rules 中配置，作为模块的解析规则，类型为数组。每一项都是一个 Object，内部包含了 test(类型文件)、loader、options (参数)等属性。\nPlugin 在 plugins 中单独配置，类型为数组，每一项是一个 Plugin 的实例，参数都通过构造函数传入。\n3.Webpack构建流程简单说一下Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：\n\n初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数\n开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译\n确定入口：根据配置中的 entry 找出所有的入口文件\n编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理\n完成模块编译：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系\n输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会\n输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统\n\n在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。\n简单说\n\n初始化：启动构建，读取与合并配置参数，加载 Plugin，实例化 Compiler\n编译：从 Entry 出发，针对每个 Module 串行调用对应的 Loader 去翻译文件的内容，再找到该 Module 依赖的 Module，递归地进行编译处理\n输出：将编译后的 Module 组合成 Chunk，将 Chunk 转换成文件，输出到文件系统中\n\n对源码感兴趣的同学可以移步我的另一篇专栏从源码窥探Webpack4.x原理\n4.使用webpack开发时，你用过哪些可以提高效率的插件？(这道题还蛮注重实际，用户的体验还是要从小抓起的)\n\nwebpack-dashboard：可以更友好的展示相关打包信息。\nwebpack-merge：提取公共配置，减少重复配置代码\nspeed-measure-webpack-plugin：简称 SMP，分析出 Webpack 打包过程中 Loader 和 Plugin 的耗时，有助于找到构建过程中的性能瓶颈。\nsize-plugin：监控资源体积变化，尽早发现问题\nHotModuleReplacementPlugin：模块热替换\n\n5.source map是什么？生产环境怎么用？source map 是将编译、打包、压缩后的代码映射回源代码的过程。打包压缩后的代码不具备良好的可读性，想要调试源码就需要 soucre map。\nmap文件只要不打开开发者工具，浏览器是不会加载的。\n线上环境一般有三种处理方案：\n\nhidden-source-map：借助第三方错误监控平台 Sentry 使用\nnosources-source-map：只会显示具体行数以及查看源代码的错误栈。安全性比 sourcemap 高\nsourcemap：通过 nginx 设置将 .map 文件只对白名单开放(公司内网)\n\n注意：避免在生产中使用 inline- 和 eval-，因为它们会增加 bundle 体积大小，并降低整体性能。\n6.模块打包原理知道吗？Webpack 实际上为每个模块创造了一个可以导出和导入的环境，本质上并没有修改 代码的执行逻辑，代码执行顺序与模块加载顺序也完全一致。\n7.文件监听原理呢？在发现源码发生变化时，自动重新构建出新的输出文件。\nWebpack开启监听模式，有两种方式：\n\n启动 webpack 命令时，带上 –watch 参数\n在配置 webpack.config.js 中设置 watch:true\n\n缺点：每次需要手动刷新浏览器\n原理：轮询判断文件的最后编辑时间是否变化，如果某个文件发生了变化，并不会立刻告诉监听者，而是先缓存起来，等 aggregateTimeout 后再执行。\nmodule.export &#x3D; &#123;\n    &#x2F;&#x2F; 默认false,也就是不开启\n    watch: true,\n    &#x2F;&#x2F; 只有开启监听模式时，watchOptions才有意义\n    watchOptions: &#123;\n        &#x2F;&#x2F; 默认为空，不监听的文件或者文件夹，支持正则匹配\n        ignored: &#x2F;node_modules&#x2F;,\n        &#x2F;&#x2F; 监听到变化发生后会等300ms再去执行，默认300ms\n        aggregateTimeout:300,\n        &#x2F;&#x2F; 判断文件是否发生变化是通过不停询问系统指定文件有没有变化实现的，默认每秒问1000次\n        poll:1000\n    &#125;\n&#125;\n复制代码\n\n8.说一下 Webpack 的热更新原理吧(敲黑板，这道题必考)\nWebpack 的热更新又称热替换（Hot Module Replacement），缩写为 HMR。 这个机制可以做到不用刷新浏览器而将新变更的模块替换掉旧的模块。\nHMR的核心就是客户端从服务端拉去更新后的文件，准确的说是 chunk diff (chunk 需要更新的部分)，实际上 WDS 与浏览器之间维护了一个 Websocket，当本地资源发生变化时，WDS 会向浏览器推送更新，并带上构建时的 hash，让客户端与上一次资源进行对比。客户端对比出差异后会向 WDS 发起 Ajax 请求来获取更改内容(文件列表、hash)，这样客户端就可以再借助这些信息继续向 WDS 发起 jsonp 请求获取该chunk的增量更新。\n后续的部分(拿到增量更新之后如何处理？哪些状态该保留？哪些又需要更新？)由 HotModulePlugin 来完成，提供了相关 API 以供开发者针对自身场景进行处理，像react-hot-loader 和 vue-loader 都是借助这些 API 实现 HMR。\n细节请参考Webpack HMR 原理解析\n(面试官：不错不错，小伙子表达能力不错)\n(基操，勿6)\n9.如何对bundle体积进行监控和分析？VSCode 中有一个插件 Import Cost 可以帮助我们对引入模块的大小进行实时监测，还可以使用 webpack-bundle-analyzer 生成 bundle 的模块组成图，显示所占体积。\nbundlesize 工具包可以进行自动化资源体积监控。\n10.文件指纹是什么？怎么用？文件指纹是打包后输出的文件名的后缀。\n\nHash：和整个项目的构建相关，只要项目文件有修改，整个项目构建的 hash 值就会更改\nChunkhash：和 Webpack 打包的 chunk 有关，不同的 entry 会生出不同的 chunkhash\nContenthash：根据文件内容来定义 hash，文件内容不变，则 contenthash 不变\n\nJS的文件指纹设置设置 output 的 filename，用 chunkhash。\nmodule.exports &#x3D; &#123;\n    entry: &#123;\n        app: &#39;.&#x2F;scr&#x2F;app.js&#39;,\n        search: &#39;.&#x2F;src&#x2F;search.js&#39;\n    &#125;,\n    output: &#123;\n        filename: &#39;[name][chunkhash:8].js&#39;,\n        path:__dirname + &#39;&#x2F;dist&#39;\n    &#125;\n&#125;\n复制代码\n\nCSS的文件指纹设置设置 MiniCssExtractPlugin 的 filename，使用 contenthash。\nmodule.exports &#x3D; &#123;\n    entry: &#123;\n        app: &#39;.&#x2F;scr&#x2F;app.js&#39;,\n        search: &#39;.&#x2F;src&#x2F;search.js&#39;\n    &#125;,\n    output: &#123;\n        filename: &#39;[name][chunkhash:8].js&#39;,\n        path:__dirname + &#39;&#x2F;dist&#39;\n    &#125;,\n    plugins:[\n        new MiniCssExtractPlugin(&#123;\n            filename: &#96;[name][contenthash:8].css&#96;\n        &#125;)\n    ]\n&#125;\n复制代码\n\n图片的文件指纹设置设置file-loader的name，使用hash。\n占位符名称及含义\n\next     资源后缀名\nname    文件名称\npath    文件的相对路径\nfolder  文件所在的文件夹\ncontenthash   文件的内容hash，默认是md5生成\nhash         文件内容的hash，默认是md5生成\nemoji        一个随机的指代文件内容的emoj\n\nconst path &#x3D; require(&#39;path&#39;);\n\nmodule.exports &#x3D; &#123;\n    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,\n    output: &#123;\n        filename:&#39;bundle.js&#39;,\n        path:path.resolve(__dirname, &#39;dist&#39;)\n    &#125;,\n    module:&#123;\n        rules:[&#123;\n            test:&#x2F;\\.(png|svg|jpg|gif)$&#x2F;,\n            use:[&#123;\n                loader:&#39;file-loader&#39;,\n                options:&#123;\n                    name:&#39;img&#x2F;[name][hash:8].[ext]&#39;\n                &#125;\n            &#125;]\n        &#125;]\n    &#125;\n&#125;\n复制代码\n\n11.在实际工程中，配置文件上百行乃是常事，如何保证各个loader按照预想方式工作？可以使用 enforce 强制执行 loader 的作用顺序，pre 代表在所有正常 loader 之前执行，post 是所有 loader 之后执行。(inline 官方不推荐使用)\n12.如何优化 Webpack 的构建速度？(这个问题就像能不能说一说「从URL输入到页面显示发生了什么」一样）\n(我只想说：您希望我讲多长时间呢？)\n(面试官：。。。)\n\n使用高版本的 Webpack 和 Node.js\n多进程/多实例构建：HappyPack(不维护了)、thread-loader\n压缩代码\n多进程并行压缩\nwebpack-paralle-uglify-plugin\nuglifyjs-webpack-plugin 开启 parallel 参数 (不支持ES6)\nterser-webpack-plugin 开启 parallel 参数\n\n\n通过 mini-css-extract-plugin 提取 Chunk 中的 CSS 代码到单独文件，通过 css-loader 的 minimize 选项开启 cssnano 压缩 CSS。\n\n\n图片压缩\n使用基于 Node 库的 imagemin (很多定制选项、可以处理多种图片格式)\n配置 image-webpack-loader\n\n\n缩小打包作用域：\nexclude/include (确定 loader 规则范围)\nresolve.modules 指明第三方模块的绝对路径 (减少不必要的查找)\nresolve.mainFields 只采用 main 字段作为入口文件描述字段 (减少搜索步骤，需要考虑到所有运行时依赖的第三方模块的入口文件描述字段)\nresolve.extensions 尽可能减少后缀尝试的可能性\nnoParse 对完全不需要解析的库进行忽略 (不去解析但仍会打包到 bundle 中，注意被忽略掉的文件里不应该包含 import、require、define 等模块化语句)\nIgnorePlugin (完全排除模块)\n合理使用alias\n\n\n提取页面公共资源：\n基础包分离：\n使用 html-webpack-externals-plugin，将基础包通过 CDN 引入，不打入 bundle 中\n使用 SplitChunksPlugin 进行(公共脚本、基础包、页面公共文件)分离(Webpack4内置) ，替代了 CommonsChunkPlugin 插件\n\n\n\n\nDLL：\n使用 DllPlugin 进行分包，使用 DllReferencePlugin(索引链接) 对 manifest.json 引用，让一些基本不会改动的代码先打包成静态资源，避免反复编译浪费时间。\nHashedModuleIdsPlugin 可以解决模块数字id问题\n\n\n充分利用缓存提升二次构建速度：\nbabel-loader 开启缓存\nterser-webpack-plugin 开启缓存\n使用 cache-loader 或者 hard-source-webpack-plugin\n\n\nTree shaking\n打包过程中检测工程中没有引用过的模块并进行标记，在资源压缩时将它们从最终的bundle中去掉(只能对ES6 Modlue生效) 开发中尽可能使用ES6 Module的模块，提高tree shaking效率\n禁用 babel-loader 的模块依赖解析，否则 Webpack 接收到的就都是转换过的 CommonJS 形式的模块，无法进行 tree-shaking\n使用 PurifyCSS(不在维护) 或者 uncss 去除无用 CSS 代码\npurgecss-webpack-plugin 和 mini-css-extract-plugin配合使用(建议)\n\n\n\n\nScope hoisting\n构建后的代码会存在大量闭包，造成体积增大，运行代码时创建的函数作用域变多，内存开销变大。Scope hoisting 将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量以防止变量名冲突\n必须是ES6的语法，因为有很多第三方库仍采用 CommonJS 语法，为了充分发挥 Scope hoisting 的作用，需要配置 mainFields 对第三方模块优先采用 jsnext:main 中指向的ES6模块化语法\n\n\n动态Polyfill\n建议采用 polyfill-service 只给用户返回需要的polyfill，社区维护。 (部分国内奇葩浏览器UA可能无法识别，但可以降级返回所需全部polyfill)\n\n\n\n更多优化请参考官网-构建性能\n13.你刚才也提到了代码分割，那代码分割的本质是什么？有什么意义呢？代码分割的本质其实就是在源代码直接上线和打包成唯一脚本main.bundle.js这两种极端方案之间的一种更适合实际场景的中间状态。\n阿卡丽：荣耀剑下取，均衡乱中求\n\n「用可接受的服务器性能压力增加来换取更好的用户体验。」\n源代码直接上线：虽然过程可控，但是http请求多，性能开销大。\n打包成唯一脚本：一把梭完自己爽，服务器压力小，但是页面空白期长，用户体验不好。\n(Easy peezy right)\n14.是否写过Loader？简单描述一下编写loader的思路？Loader 支持链式调用，所以开发上需要严格遵循“单一职责”，每个 Loader 只负责自己需要负责的事情。\nLoader的API 可以去官网查阅\n\nLoader 运行在 Node.js 中，我们可以调用任意 Node.js 自带的 API 或者安装第三方模块进行调用\nWebpack 传给 Loader 的原内容都是 UTF-8 格式编码的字符串，当某些场景下 Loader 处理二进制文件时，需要通过 exports.raw = true 告诉 Webpack 该 Loader 是否需要二进制数据\n尽可能的异步化 Loader，如果计算量很小，同步也可以\nLoader 是无状态的，我们不应该在 Loader 中保留状态\n使用 loader-utils 和 schema-utils 为我们提供的实用工具\n加载本地 Loader 方法\nNpm link\nResolveLoader\n\n\n\n15.是否写过Plugin？简单描述一下编写Plugin的思路？webpack在运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在特定的阶段钩入想要添加的自定义功能。Webpack 的 Tapable 事件流机制保证了插件的有序性，使得整个系统扩展性良好。\nPlugin的API 可以去官网查阅\n\ncompiler 暴露了和 Webpack 整个生命周期相关的钩子\ncompilation 暴露了与模块和依赖有关的粒度更小的事件钩子\n插件需要在其原型上绑定apply方法，才能访问 compiler 实例\n传给每个插件的 compiler 和 compilation对象都是同一个引用，若在一个插件中修改了它们身上的属性，会影响后面的插件\n找出合适的事件点去完成想要的功能\nemit 事件发生时，可以读取到最终输出的资源、代码块、模块及其依赖，并进行修改(emit 事件是修改 Webpack 输出资源的最后时机)\nwatch-run 当依赖的文件发生变化时会触发\n\n\n异步的事件需要在插件处理完任务时调用回调函数通知 Webpack 进入下一个流程，不然会卡住\n\n16.聊一聊Babel原理吧大多数JavaScript Parser遵循 estree 规范，Babel 最初基于 acorn 项目(轻量级现代 JavaScript 解析器) Babel大概分为三大部分：\n\n解析：将代码转换成 AST\n词法分析：将代码(字符串)分割为token流，即语法单元成的数组\n语法分析：分析token流(上面生成的数组)并生成 AST\n\n\n转换：访问 AST 的节点进行变换操作生产新的 AST\nTaro就是利用 babel 完成的小程序语法转换\n\n\n生成：以新的 AST 为基础生成代码\n\n","slug":"Webpack面试题","date":"2022-04-10T12:24:22.000Z","categories_index":"知识点","tags_index":"面试","author_index":"LIYUNFU"},{"id":"8f40b8c169f1805e005d621691667888","title":"代码输出题","content":"一、异步&amp;事件循环1. 代码输出结果const promise = new Promise((resolve, reject) => &#123;\n  console.log(1);\n  console.log(2);\n&#125;);\npromise.then(() => &#123;\n  console.log(3);\n&#125;);\nconsole.log(4);\n复制代码\n\n输出结果如下：\n1 \n2 \n4\n复制代码\n\npromise.then 是微任务，它会在所有的宏任务执行完之后才会执行，同时需要promise内部的状态发生变化，因为这里内部没有发生变化，一直处于pending状态，所以不输出3。\n2. 代码输出结果const promise1 = new Promise((resolve, reject) => &#123;\n  console.log('promise1')\n  resolve('resolve1')\n&#125;)\nconst promise2 = promise1.then(res => &#123;\n  console.log(res)\n&#125;)\nconsole.log('1', promise1);\nconsole.log('2', promise2);\n复制代码\n\n输出结果如下：\npromise1\n1 Promise&#123;&lt;resolved>: resolve1&#125;\n2 Promise&#123;&lt;pending>&#125;\nresolve1\n复制代码\n\n需要注意的是，直接打印promise1，会打印出它的状态值和参数。\n代码执行过程如下：\n\nscript是一个宏任务，按照顺序执行这些代码；\n首先进入Promise，执行该构造函数中的代码，打印promise1；\n碰到resolve函数, 将promise1的状态改变为resolved, 并将结果保存下来；\n碰到promise1.then这个微任务，将它放入微任务队列；\npromise2是一个新的状态为pending的Promise；\n执行同步代码1， 同时打印出promise1的状态是resolved；\n执行同步代码2，同时打印出promise2的状态是pending；\n宏任务执行完毕，查找微任务队列，发现promise1.then这个微任务且状态为resolved，执行它。\n\n3. 代码输出结果const promise = new Promise((resolve, reject) => &#123;\n  console.log(1);\n  setTimeout(() => &#123;\n    console.log(\"timerStart\");\n    resolve(\"success\");\n    console.log(\"timerEnd\");\n  &#125;, 0);\n  console.log(2);\n&#125;);\npromise.then((res) => &#123;\n  console.log(res);\n&#125;);\nconsole.log(4);\n复制代码\n\n输出结果如下：\n1\n2\n4\ntimerStart\ntimerEnd\nsuccess\n复制代码\n\n代码执行过程如下：\n\n首先遇到Promise构造函数，会先执行里面的内容，打印1；\n遇到定时器steTimeout，它是一个宏任务，放入宏任务队列；\n继续向下执行，打印出2；\n由于Promise的状态此时还是pending，所以promise.then先不执行；\n继续执行下面的同步任务，打印出4；\n此时微任务队列没有任务，继续执行下一轮宏任务，执行steTimeout；\n首先执行timerStart，然后遇到了resolve，将promise的状态改为resolved且保存结果并将之前的promise.then推入微任务队列，再执行timerEnd；\n执行完这个宏任务，就去执行微任务promise.then，打印出resolve的结果。\n\n4. 代码输出结果Promise.resolve().then(() => &#123;\n  console.log('promise1');\n  const timer2 = setTimeout(() => &#123;\n    console.log('timer2')\n  &#125;, 0)\n&#125;);\nconst timer1 = setTimeout(() => &#123;\n  console.log('timer1')\n  Promise.resolve().then(() => &#123;\n    console.log('promise2')\n  &#125;)\n&#125;, 0)\nconsole.log('start');\n复制代码\n\n输出结果如下：\nstart\npromise1\ntimer1\npromise2\ntimer2\n复制代码\n\n代码执行过程如下：\n\n首先，Promise.resolve().then是一个微任务，加入微任务队列\n执行timer1，它是一个宏任务，加入宏任务队列\n继续执行下面的同步代码，打印出start\n这样第一轮宏任务就执行完了，开始执行微任务Promise.resolve().then，打印出promise1\n遇到timer2，它是一个宏任务，将其加入宏任务队列，此时宏任务队列有两个任务，分别是timer1、timer2；\n这样第一轮微任务就执行完了，开始执行第二轮宏任务，首先执行定时器timer1，打印timer1；\n遇到Promise.resolve().then，它是一个微任务，加入微任务队列\n开始执行微任务队列中的任务，打印promise2；\n最后执行宏任务timer2定时器，打印出timer2；\n\n5. 代码输出结果const promise = new Promise((resolve, reject) => &#123;\n    resolve('success1');\n    reject('error');\n    resolve('success2');\n&#125;);\npromise.then((res) => &#123;\n    console.log('then:', res);\n&#125;).catch((err) => &#123;\n    console.log('catch:', err);\n&#125;)\n复制代码\n\n输出结果如下：\nthen：success1\n复制代码\n\n这个题目考察的就是Promise的状态在发生变化之后，就不会再发生变化。开始状态由pending变为resolve，说明已经变为已完成状态，下面的两个状态的就不会再执行，同时下面的catch也不会捕获到错误。\n6. 代码输出结果Promise.resolve(1)\n  .then(2)\n  .then(Promise.resolve(3))\n  .then(console.log)\n复制代码\n\n输出结果如下：\n1\nPromise &#123;&lt;fulfilled>: undefined&#125;\n复制代码\n\nPromise.resolve方法的参数如果是一个原始值，或者是一个不具有then方法的对象，则Promise.resolve方法返回一个新的Promise对象，状态为resolved，Promise.resolve方法的参数，会同时传给回调函数。\nthen方法接受的参数是函数，而如果传递的并非是一个函数，它实际上会将其解释为then(null)，这就会导致前一个Promise的结果会传递下面。\n7. 代码输出结果const promise1 = new Promise((resolve, reject) => &#123;\n  setTimeout(() => &#123;\n    resolve('success')\n  &#125;, 1000)\n&#125;)\nconst promise2 = promise1.then(() => &#123;\n  throw new Error('error!!!')\n&#125;)\nconsole.log('promise1', promise1)\nconsole.log('promise2', promise2)\nsetTimeout(() => &#123;\n  console.log('promise1', promise1)\n  console.log('promise2', promise2)\n&#125;, 2000)\n复制代码\n\n输出结果如下：\npromise1 Promise &#123;&lt;pending>&#125;\npromise2 Promise &#123;&lt;pending>&#125;\n\nUncaught (in promise) Error: error!!!\npromise1 Promise &#123;&lt;fulfilled>: \"success\"&#125;\npromise2 Promise &#123;&lt;rejected>: Error: error!!&#125;\n复制代码\n\n8. 代码输出结果Promise.resolve(1)\n  .then(res => &#123;\n    console.log(res);\n    return 2;\n  &#125;)\n  .catch(err => &#123;\n    return 3;\n  &#125;)\n  .then(res => &#123;\n    console.log(res);\n  &#125;);\n复制代码\n\n输出结果如下：\n1   \n2\n复制代码\n\nPromise是可以链式调用的，由于每次调用 .then 或者 .catch 都会返回一个新的 promise，从而实现了链式调用, 它并不像一般任务的链式调用一样return this。\n上面的输出结果之所以依次打印出1和2，是因为resolve(1)之后走的是第一个then方法，并没有进catch里，所以第二个then中的res得到的实际上是第一个then的返回值。并且return 2会被包装成resolve(2)，被最后的then打印输出2。\n9. 代码输出结果Promise.resolve().then(() => &#123;\n  return new Error('error!!!')\n&#125;).then(res => &#123;\n  console.log(\"then: \", res)\n&#125;).catch(err => &#123;\n  console.log(\"catch: \", err)\n&#125;)\n复制代码\n\n输出结果如下：\n\"then: \" \"Error: error!!!\"\n复制代码\n\n返回任意一个非 promise 的值都会被包裹成 promise 对象，因此这里的return new Error(&#39;error!!!&#39;)也被包裹成了return Promise.resolve(new Error(&#39;error!!!&#39;))，因此它会被then捕获而不是catch。\n10. 代码输出结果const promise = Promise.resolve().then(() => &#123;\n  return promise;\n&#125;)\npromise.catch(console.err)\n复制代码\n\n输出结果如下：\nUncaught (in promise) TypeError: Chaining cycle detected for promise #&lt;Promise>\n复制代码\n\n这里其实是一个坑，.then 或 .catch 返回的值不能是 promise 本身，否则会造成死循环。\n11. 代码输出结果Promise.resolve(1)\n  .then(2)\n  .then(Promise.resolve(3))\n  .then(console.log)\n复制代码\n\n输出结果如下：\n1\n复制代码\n\n看到这个题目，好多的then，实际上只需要记住一个原则：.then 或.catch 的参数期望是函数，传入非函数则会发生值透传。\n第一个then和第二个then中传入的都不是函数，一个是数字，一个是对象，因此发生了透传，将resolve(1) 的值直接传到最后一个then里，直接打印出1。\n12. 代码输出结果Promise.reject('err!!!')\n  .then((res) => &#123;\n    console.log('success', res)\n  &#125;, (err) => &#123;\n    console.log('error', err)\n  &#125;).catch(err => &#123;\n    console.log('catch', err)\n  &#125;)\n复制代码\n\n输出结果如下：\nerror err!!!\n复制代码\n\n我们知道，.then函数中的两个参数：\n\n第一个参数是用来处理Promise成功的函数\n第二个则是处理失败的函数\n\n也就是说Promise.resolve(&#39;1&#39;)的值会进入成功的函数，Promise.reject(&#39;2&#39;)的值会进入失败的函数。\n在这道题中，错误直接被then的第二个参数捕获了，所以就不会被catch捕获了，输出结果为：error err!!!&#39;\n但是，如果是像下面这样：\nPromise.resolve()\n  .then(function success (res) &#123;\n    throw new Error('error!!!')\n  &#125;, function fail1 (err) &#123;\n    console.log('fail1', err)\n  &#125;).catch(function fail2 (err) &#123;\n    console.log('fail2', err)\n  &#125;)\n复制代码\n\n在then的第一参数中抛出了错误，那么他就不会被第二个参数不活了，而是被后面的catch捕获到。\n13. 代码输出结果Promise.resolve('1')\n  .then(res => &#123;\n    console.log(res)\n  &#125;)\n  .finally(() => &#123;\n    console.log('finally')\n  &#125;)\nPromise.resolve('2')\n  .finally(() => &#123;\n    console.log('finally2')\n  \treturn '我是finally2返回的值'\n  &#125;)\n  .then(res => &#123;\n    console.log('finally2后面的then函数', res)\n  &#125;)\n复制代码\n\n输出结果如下：\n1\nfinally2\nfinally\nfinally2后面的then函数 2\n复制代码\n\n.finally()一般用的很少，只要记住以下几点就可以了：\n\n.finally()方法不管Promise对象最后的状态如何都会执行\n.finally()方法的回调函数不接受任何的参数，也就是说你在.finally()函数中是无法知道Promise最终的状态是resolved还是rejected的\n它最终返回的默认会是一个上一次的Promise对象值，不过如果抛出的是一个异常则返回异常的Promise对象。\nfinally本质上是then方法的特例\n\n.finally()的错误捕获：\nPromise.resolve('1')\n  .finally(() => &#123;\n    console.log('finally1')\n    throw new Error('我是finally中抛出的异常')\n  &#125;)\n  .then(res => &#123;\n    console.log('finally后面的then函数', res)\n  &#125;)\n  .catch(err => &#123;\n    console.log('捕获错误', err)\n  &#125;)\n复制代码\n\n输出结果为：\n'finally1'\n'捕获错误' Error: 我是finally中抛出的异常\n复制代码\n\n14. 代码输出结果function runAsync (x) &#123;\n    const p = new Promise(r => setTimeout(() => r(x, console.log(x)), 1000))\n    return p\n&#125;\n\nPromise.all([runAsync(1), runAsync(2), runAsync(3)]).then(res => console.log(res))\n复制代码\n\n输出结果如下：\n1\n2\n3\n[1, 2, 3]\n复制代码\n\n首先，定义了一个Promise，来异步执行函数runAsync，该函数传入一个值x，然后间隔一秒后打印出这个x。\n之后再使用Promise.all来执行这个函数，执行的时候，看到一秒之后输出了1，2，3，同时输出了数组[1, 2, 3]，三个函数是同步执行的，并且在一个回调函数中返回了所有的结果。并且结果和函数的执行顺序是一致的。\n15. 代码输出结果function runAsync (x) &#123;\n  const p = new Promise(r => setTimeout(() => r(x, console.log(x)), 1000))\n  return p\n&#125;\nfunction runReject (x) &#123;\n  const p = new Promise((res, rej) => setTimeout(() => rej(`Error: $&#123;x&#125;`, console.log(x)), 1000 * x))\n  return p\n&#125;\nPromise.all([runAsync(1), runReject(4), runAsync(3), runReject(2)])\n       .then(res => console.log(res))\n       .catch(err => console.log(err))\n复制代码\n\n输出结果如下：\n// 1s后输出\n1\n3\n// 2s后输出\n2\nError: 2\n// 4s后输出\n4\n复制代码\n\n可以看到。catch捕获到了第一个错误，在这道题目中最先的错误就是runReject(2)的结果。如果一组异步操作中有一个异常都不会进入.then()的第一个回调函数参数中。会被.then()的第二个回调函数捕获。\n16. 代码输出结果function runAsync (x) &#123;\n  const p = new Promise(r => setTimeout(() => r(x, console.log(x)), 1000))\n  return p\n&#125;\nPromise.race([runAsync(1), runAsync(2), runAsync(3)])\n  .then(res => console.log('result: ', res))\n  .catch(err => console.log(err))\n复制代码\n\n输出结果如下：\n1\n'result: ' 1\n2\n3\n复制代码\n\nthen只会捕获第一个成功的方法，其他的函数虽然还会继续执行，但是不是被then捕获了。\n17. 代码输出结果function runAsync(x) &#123;\n  const p = new Promise(r =>\n    setTimeout(() => r(x, console.log(x)), 1000)\n  );\n  return p;\n&#125;\nfunction runReject(x) &#123;\n  const p = new Promise((res, rej) =>\n    setTimeout(() => rej(`Error: $&#123;x&#125;`, console.log(x)), 1000 * x)\n  );\n  return p;\n&#125;\nPromise.race([runReject(0), runAsync(1), runAsync(2), runAsync(3)])\n  .then(res => console.log(\"result: \", res))\n  .catch(err => console.log(err));\n复制代码\n\n输出结果如下：\n0\nError: 0\n1\n2\n3\n复制代码\n\n可以看到在catch捕获到第一个错误之后，后面的代码还不执行，不过不会再被捕获了。\n注意：all和race传入的数组中如果有会抛出异常的异步任务，那么只有最先抛出的错误会被捕获，并且是被then的第二个参数或者后面的catch捕获；但并不会影响数组中其它的异步任务的执行。\n18. 代码输出结果async function async1() &#123;\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n&#125;\nasync function async2() &#123;\n  console.log(\"async2\");\n&#125;\nasync1();\nconsole.log('start')\n复制代码\n\n输出结果如下：\nasync1 start\nasync2\nstart\nasync1 end\n复制代码\n\n代码的执行过程如下：\n\n首先执行函数中的同步代码async1 start，之后遇到了await，它会阻塞async1后面代码的执行，因此会先去执行async2中的同步代码async2，然后跳出async1；\n跳出async1函数后，执行同步代码start；\n在一轮宏任务全部执行完之后，再来执行await后面的内容async1 end。\n\n这里可以理解为await后面的语句相当于放到了new Promise中，下一行及之后的语句相当于放在Promise.then中。\n19. 代码输出结果async function async1() &#123;\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n  setTimeout(() => &#123;\n    console.log('timer1')\n  &#125;, 0)\n&#125;\nasync function async2() &#123;\n  setTimeout(() => &#123;\n    console.log('timer2')\n  &#125;, 0)\n  console.log(\"async2\");\n&#125;\nasync1();\nsetTimeout(() => &#123;\n  console.log('timer3')\n&#125;, 0)\nconsole.log(\"start\")\n复制代码\n\n输出结果如下：\nasync1 start\nasync2\nstart\nasync1 end\ntimer2\ntimer3\ntimer1\n复制代码\n\n代码的执行过程如下：\n\n首先进入async1，打印出async1 start；\n之后遇到async2，进入async2，遇到定时器timer2，加入宏任务队列，之后打印async2；\n由于async2阻塞了后面代码的执行，所以执行后面的定时器timer3，将其加入宏任务队列，之后打印start；\n然后执行async2后面的代码，打印出async1 end，遇到定时器timer1，将其加入宏任务队列；\n最后，宏任务队列有三个任务，先后顺序为timer2，timer3，timer1，没有微任务，所以直接所有的宏任务按照先进先出的原则执行。\n\n20. 代码输出结果async function async1 () &#123;\n  console.log('async1 start');\n  await new Promise(resolve => &#123;\n    console.log('promise1')\n  &#125;)\n  console.log('async1 success');\n  return 'async1 end'\n&#125;\nconsole.log('srcipt start')\nasync1().then(res => console.log(res))\nconsole.log('srcipt end')\n复制代码\n\n输出结果如下：\nscript start\nasync1 start\npromise1\nscript end\n复制代码\n\n这里需要注意的是在async1中await后面的Promise是没有返回值的，也就是它的状态始终是pending状态，所以在await之后的内容是不会执行的，包括async1后面的 .then。\n21. 代码输出结果async function async1 () &#123;\n  console.log('async1 start');\n  await new Promise(resolve => &#123;\n    console.log('promise1')\n    resolve('promise1 resolve')\n  &#125;).then(res => console.log(res))\n  console.log('async1 success');\n  return 'async1 end'\n&#125;\nconsole.log('srcipt start')\nasync1().then(res => console.log(res))\nconsole.log('srcipt end')\n复制代码\n\n这里是对上面一题进行了改造，加上了resolve。\n输出结果如下：\nscript start\nasync1 start\npromise1\nscript end\npromise1 resolve\nasync1 success\nasync1 end\n复制代码\n\n22. 代码输出结果async function async1() &#123;\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n&#125;\n\nasync function async2() &#123;\n  console.log(\"async2\");\n&#125;\n\nconsole.log(\"script start\");\n\nsetTimeout(function() &#123;\n  console.log(\"setTimeout\");\n&#125;, 0);\n\nasync1();\n\nnew Promise(resolve => &#123;\n  console.log(\"promise1\");\n  resolve();\n&#125;).then(function() &#123;\n  console.log(\"promise2\");\n&#125;);\nconsole.log('script end')\n复制代码\n\n输出结果如下：\nscript start\nasync1 start\nasync2\npromise1\nscript end\nasync1 end\npromise2\nsetTimeout\n复制代码\n\n代码执行过程如下：\n\n开头定义了async1和async2两个函数，但是并未执行，执行script中的代码，所以打印出script start；\n遇到定时器Settimeout，它是一个宏任务，将其加入到宏任务队列；\n之后执行函数async1，首先打印出async1 start；\n遇到await，执行async2，打印出async2，并阻断后面代码的执行，将后面的代码加入到微任务队列；\n然后跳出async1和async2，遇到Promise，打印出promise1；\n遇到resolve，将其加入到微任务队列，然后执行后面的script代码，打印出script end；\n之后就该执行微任务队列了，首先打印出async1 end，然后打印出promise2；\n执行完微任务队列，就开始执行宏任务队列中的定时器，打印出setTimeout。\n\n23. 代码输出结果async function async1 () &#123;\n  await async2();\n  console.log('async1');\n  return 'async1 success'\n&#125;\nasync function async2 () &#123;\n  return new Promise((resolve, reject) => &#123;\n    console.log('async2')\n    reject('error')\n  &#125;)\n&#125;\nasync1().then(res => console.log(res))\n复制代码\n\n输出结果如下：\nasync2\nUncaught (in promise) error\n复制代码\n\n可以看到，如果async函数中抛出了错误，就会终止错误结果，不会继续向下执行。\n如果想要让错误不足之处后面的代码执行，可以使用catch来捕获：\nasync function async1 () &#123;\n  await Promise.reject('error!!!').catch(e => console.log(e))\n  console.log('async1');\n  return Promise.resolve('async1 success')\n&#125;\nasync1().then(res => console.log(res))\nconsole.log('script start')\n复制代码\n\n这样的输出结果就是：\nscript start\nerror!!!\nasync1\nasync1 success\n复制代码\n\n24. 代码输出结果const first = () => (new Promise((resolve, reject) => &#123;\n    console.log(3);\n    let p = new Promise((resolve, reject) => &#123;\n        console.log(7);\n        setTimeout(() => &#123;\n            console.log(5);\n            resolve(6);\n            console.log(p)\n        &#125;, 0)\n        resolve(1);\n    &#125;);\n    resolve(2);\n    p.then((arg) => &#123;\n        console.log(arg);\n    &#125;);\n&#125;));\nfirst().then((arg) => &#123;\n    console.log(arg);\n&#125;);\nconsole.log(4);\n复制代码\n\n输出结果如下：\n3\n7\n4\n1\n2\n5\nPromise&#123;&lt;resolved>: 1&#125;\n复制代码\n\n代码的执行过程如下：\n\n首先会进入Promise，打印出3，之后进入下面的Promise，打印出7；\n遇到了定时器，将其加入宏任务队列；\n执行Promise  p中的resolve，状态变为resolved，返回值为1；\n执行Promise first中的resolve，状态变为resolved，返回值为2；\n遇到p.then，将其加入微任务队列，遇到first().then，将其加入任务队列；\n执行外面的代码，打印出4；\n这样第一轮宏任务就执行完了，开始执行微任务队列中的任务，先后打印出1和2；\n这样微任务就执行完了，开始执行下一轮宏任务，宏任务队列中有一个定时器，执行它，打印出5，由于执行已经变为resolved状态，所以resolve(6)不会再执行；\n最后console.log(p)打印出Promise&#123;&lt;resolved&gt;: 1&#125;；\n\n25. 代码输出结果const async1 = async () => &#123;\n  console.log('async1');\n  setTimeout(() => &#123;\n    console.log('timer1')\n  &#125;, 2000)\n  await new Promise(resolve => &#123;\n    console.log('promise1')\n  &#125;)\n  console.log('async1 end')\n  return 'async1 success'\n&#125; \nconsole.log('script start');\nasync1().then(res => console.log(res));\nconsole.log('script end');\nPromise.resolve(1)\n  .then(2)\n  .then(Promise.resolve(3))\n  .catch(4)\n  .then(res => console.log(res))\nsetTimeout(() => &#123;\n  console.log('timer2')\n&#125;, 1000)\n复制代码\n\n输出结果如下：\nscript start\nasync1\npromise1\nscript end\n1\ntimer2\ntimer1\n复制代码\n\n代码的执行过程如下：\n\n首先执行同步带吗，打印出script start；\n遇到定时器timer1将其加入宏任务队列；\n之后是执行Promise，打印出promise1，由于Promise没有返回值，所以后面的代码不会执行；\n然后执行同步代码，打印出script end；\n继续执行下面的Promise，.then和.catch期望参数是一个函数，这里传入的是一个数字，因此就会发生值渗透，将resolve(1)的值传到最后一个then，直接打印出1；\n遇到第二个定时器，将其加入到微任务队列，执行微任务队列，按顺序依次执行两个定时器，但是由于定时器时间的原因，会在两秒后先打印出timer2，在四秒后打印出timer1。\n\n26. 代码输出结果const p1 = new Promise((resolve) => &#123;\n  setTimeout(() => &#123;\n    resolve('resolve3');\n    console.log('timer1')\n  &#125;, 0)\n  resolve('resovle1');\n  resolve('resolve2');\n&#125;).then(res => &#123;\n  console.log(res)  // resolve1\n  setTimeout(() => &#123;\n    console.log(p1)\n  &#125;, 1000)\n&#125;).finally(res => &#123;\n  console.log('finally', res)\n&#125;)\n复制代码\n\n执行结果为如下：\nresolve1\nfinally  undefined\ntimer1\nPromise&#123;&lt;resolved>: undefined&#125;\n复制代码\n\n需要注意的是最后一个定时器打印出的p1其实是.finally的返回值，我们知道.finally的返回值如果在没有抛出错误的情况下默认会是上一个Promise的返回值，而这道题中.finally上一个Promise是.then()，但是这个.then()并没有返回值，所以p1打印出来的Promise的值会是undefined，如果在定时器的下面加上一个return 1，则值就会变成1。\n27. 代码输出结果console.log('1');\n\nsetTimeout(function() &#123;\n    console.log('2');\n    process.nextTick(function() &#123;\n        console.log('3');\n    &#125;)\n    new Promise(function(resolve) &#123;\n        console.log('4');\n        resolve();\n    &#125;).then(function() &#123;\n        console.log('5')\n    &#125;)\n&#125;)\nprocess.nextTick(function() &#123;\n    console.log('6');\n&#125;)\nnew Promise(function(resolve) &#123;\n    console.log('7');\n    resolve();\n&#125;).then(function() &#123;\n    console.log('8')\n&#125;)\n\nsetTimeout(function() &#123;\n    console.log('9');\n    process.nextTick(function() &#123;\n        console.log('10');\n    &#125;)\n    new Promise(function(resolve) &#123;\n        console.log('11');\n        resolve();\n    &#125;).then(function() &#123;\n        console.log('12')\n    &#125;)\n&#125;)\n复制代码\n\n输出结果如下：\n1\n7\n6\n8\n2\n4\n3\n5\n9\n11\n10\n12\n复制代码\n\n（1）第一轮事件循环流程分析如下：\n\n整体script作为第一个宏任务进入主线程，遇到console.log，输出1。\n遇到setTimeout，其回调函数被分发到宏任务Event Queue中。暂且记为setTimeout1。\n遇到process.nextTick()，其回调函数被分发到微任务Event Queue中。记为process1。\n遇到Promise，new Promise直接执行，输出7。then被分发到微任务Event Queue中。记为then1。\n又遇到了setTimeout，其回调函数被分发到宏任务Event Queue中，记为setTimeout2。\n\n\n\n\n宏任务Event Queue\n微任务Event Queue\n\n\n\nsetTimeout1\nprocess1\n\n\nsetTimeout2\nthen1\n\n\n上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和7。发现了process1和then1两个微任务：\n\n执行process1，输出6。\n执行then1，输出8。\n\n第一轮事件循环正式结束，这一轮的结果是输出1，7，6，8。\n（2）第二轮时间循环从**setTimeout1**宏任务开始：\n\n首先输出2。接下来遇到了process.nextTick()，同样将其分发到微任务Event Queue中，记为process2。\nnew Promise立即执行输出4，then也分发到微任务Event Queue中，记为then2。\n\n\n\n\n宏任务Event Queue\n微任务Event Queue\n\n\n\nsetTimeout2\nprocess2\n\n\n\nthen2\n\n\n第二轮事件循环宏任务结束，发现有process2和then2两个微任务可以执行：\n\n输出3。\n输出5。\n\n第二轮事件循环结束，第二轮输出2，4，3，5。\n（3）第三轮事件循环开始，此时只剩setTimeout2了，执行。\n\n直接输出9。\n将process.nextTick()分发到微任务Event Queue中。记为process3。\n直接执行new Promise，输出11。\n将then分发到微任务Event Queue中，记为then3。\n\n\n\n\n宏任务Event Queue\n微任务Event Queue\n\n\n\n\nprocess3\n\n\n\nthen3\n\n\n第三轮事件循环宏任务执行结束，执行两个微任务process3和then3：\n\n输出10。\n输出12。\n\n第三轮事件循环结束，第三轮输出9，11，10，12。\n整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。\n28. 代码输出结果console.log(1)\n\nsetTimeout(() => &#123;\n  console.log(2)\n&#125;)\n\nnew Promise(resolve =>  &#123;\n  console.log(3)\n  resolve(4)\n&#125;).then(d => console.log(d))\n\nsetTimeout(() => &#123;\n  console.log(5)\n  new Promise(resolve =>  &#123;\n    resolve(6)\n  &#125;).then(d => console.log(d))\n&#125;)\n\nsetTimeout(() => &#123;\n  console.log(7)\n&#125;)\n\nconsole.log(8)\n复制代码\n\n输出结果如下：\n1\n3\n8\n4\n2\n5\n6\n7\n复制代码\n\n代码执行过程如下：\n\n首先执行script代码，打印出1；\n遇到第一个定时器，加入到宏任务队列；\n遇到Promise，执行代码，打印出3，遇到resolve，将其加入到微任务队列；\n遇到第二个定时器，加入到宏任务队列；\n遇到第三个定时器，加入到宏任务队列；\n继续执行script代码，打印出8，第一轮执行结束；\n执行微任务队列，打印出第一个Promise的resolve结果：4；\n开始执行宏任务队列，执行第一个定时器，打印出2；\n此时没有微任务，继续执行宏任务中的第二个定时器，首先打印出5，遇到Promise，首选打印出6，遇到resolve，将其加入到微任务队列；\n执行微任务队列，打印出6；\n执行宏任务队列中的最后一个定时器，打印出7。\n\n29. 代码输出结果console.log(1);\n    \nsetTimeout(() => &#123;\n  console.log(2);\n  Promise.resolve().then(() => &#123;\n    console.log(3)\n  &#125;);\n&#125;);\n\nnew Promise((resolve, reject) => &#123;\n  console.log(4)\n  resolve(5)\n&#125;).then((data) => &#123;\n  console.log(data);\n&#125;)\n\nsetTimeout(() => &#123;\n  console.log(6);\n&#125;)\n\nconsole.log(7);\n复制代码\n\n代码输出结果如下：\n1\n4\n7\n5\n2\n3\n6\n复制代码\n\n代码执行过程如下：\n\n首先执行scrip代码，打印出1；\n遇到第一个定时器setTimeout，将其加入到宏任务队列；\n遇到Promise，执行里面的同步代码，打印出4，遇到resolve，将其加入到微任务队列；\n遇到第二个定时器setTimeout，将其加入到红任务队列；\n执行script代码，打印出7，至此第一轮执行完成；\n指定微任务队列中的代码，打印出resolve的结果：5；\n执行宏任务中的第一个定时器setTimeout，首先打印出2，然后遇到 Promise.resolve().then()，将其加入到微任务队列；\n执行完这个宏任务，就开始执行微任务队列，打印出3；\n继续执行宏任务队列中的第二个定时器，打印出6。\n\n30. 代码输出结果Promise.resolve().then(() => &#123;\n    console.log('1');\n    throw 'Error';\n&#125;).then(() => &#123;\n    console.log('2');\n&#125;).catch(() => &#123;\n    console.log('3');\n    throw 'Error';\n&#125;).then(() => &#123;\n    console.log('4');\n&#125;).catch(() => &#123;\n    console.log('5');\n&#125;).then(() => &#123;\n    console.log('6');\n&#125;);\n复制代码\n\n执行结果如下：\n1 \n3 \n5 \n6\n复制代码\n\n在这道题目中，我们需要知道，无论是thne还是catch中，只要throw 抛出了错误，就会被catch捕获，如果没有throw出错误，就被继续执行后面的then。\n31. 代码输出结果setTimeout(function () &#123;\n  console.log(1);\n&#125;, 100);\n\nnew Promise(function (resolve) &#123;\n  console.log(2);\n  resolve();\n  console.log(3);\n&#125;).then(function () &#123;\n  console.log(4);\n  new Promise((resove, reject) => &#123;\n    console.log(5);\n    setTimeout(() =>  &#123;\n      console.log(6);\n    &#125;, 10);\n  &#125;)\n&#125;);\nconsole.log(7);\nconsole.log(8);\n复制代码\n\n输出结果为：\n2\n3\n7\n8\n4\n5\n6\n1\n复制代码\n\n代码执行过程如下：\n\n首先遇到定时器，将其加入到宏任务队列；\n遇到Promise，首先执行里面的同步代码，打印出2，遇到resolve，将其加入到微任务队列，执行后面同步代码，打印出3；\n继续执行script中的代码，打印出7和8，至此第一轮代码执行完成；\n执行微任务队列中的代码，首先打印出4，如遇到Promise，执行其中的同步代码，打印出5，遇到定时器，将其加入到宏任务队列中，此时宏任务队列中有两个定时器；\n执行宏任务队列中的代码，这里我们需要注意是的第一个定时器的时间为100ms，第二个定时器的时间为10ms，所以先执行第二个定时器，打印出6；\n此时微任务队列为空，继续执行宏任务队列，打印出1。\n\n做完这道题目，我们就需要格外注意，每个定时器的时间，并不是所有定时器的时间都为0哦。\n二、this1. 代码输出结果function foo() &#123;\n  console.log( this.a );\n&#125;\n\nfunction doFoo() &#123;\n  foo();\n&#125;\n\nvar obj = &#123;\n  a: 1,\n  doFoo: doFoo\n&#125;;\n\nvar a = 2; \nobj.doFoo()\n复制代码\n\n输出结果：2\n在Javascript中，this指向函数执行时的当前对象。在执行foo的时候，执行环境就是doFoo函数，执行环境为全局。所以，foo中的this是指向window的，所以会打印出2。\n2. 代码输出结果var a = 10\nvar obj = &#123;\n  a: 20,\n  say: () => &#123;\n    console.log(this.a)\n  &#125;\n&#125;\nobj.say() \n\nvar anotherObj = &#123; a: 30 &#125; \nobj.say.apply(anotherObj) \n复制代码\n\n输出结果：10  10\n我么知道，箭头函数时不绑定this的，它的this来自原其父级所处的上下文，所以首先会打印全局中的 a 的值10。后面虽然让say方法指向了另外一个对象，但是仍不能改变箭头函数的特性，它的this仍然是指向全局的，所以依旧会输出10。\n但是，如果是普通函数，那么就会有完全不一样的结果：\nvar a = 10  \nvar obj = &#123;  \n  a: 20,  \n  say()&#123;\n    console.log(this.a)  \n  &#125;  \n&#125;  \nobj.say()   \nvar anotherObj=&#123;a:30&#125;   \nobj.say.apply(anotherObj)\n复制代码\n\n输出结果：20 30\n这时，say方法中的this就会指向他所在的对象，输出其中的a的值。\n3. 代码输出结果function a() &#123;\n  console.log(this);\n&#125;\na.call(null);\n复制代码\n\n打印结果：window对象\n根据ECMAScript262规范规定：如果第一个参数传入的对象调用者是null或者undefined，call方法将把全局对象（浏览器上是window对象）作为this的值。所以，不管传入null 还是 undefined，其this都是全局对象window。所以，在浏览器上答案是输出 window 对象。\n要注意的是，在严格模式中，null 就是 null，undefined 就是 undefined：\n'use strict';\n\nfunction a() &#123;\n    console.log(this);\n&#125;\na.call(null); // null\na.call(undefined); // undefined\n复制代码\n\n4. 代码输出结果var obj = &#123; \n  name : 'cuggz', \n  fun : function()&#123; \n    console.log(this.name); \n  &#125; \n&#125; \nobj.fun()     // cuggz\nnew obj.fun() // undefined\n复制代码\n\n使用new构造函数时，其this指向的是全局环境window。\n6. 代码输出结果var obj = &#123;\n   say: function() &#123;\n     var f1 = () =>  &#123;\n       console.log(\"1111\", this);\n     &#125;\n     f1();\n   &#125;,\n   pro: &#123;\n     getPro:() =>  &#123;\n        console.log(this);\n     &#125;\n   &#125;\n&#125;\nvar o = obj.say;\no();\nobj.say();\nobj.pro.getPro();\n复制代码\n\n输出结果：\n1111 window对象\n1111 obj对象\nwindow对象\n复制代码\n\n解析：\n\no()，o是在全局执行的，而f1是箭头函数，它是没有绑定this的，它的this指向其父级的this，其父级say方法的this指向的是全局作用域，所以会打印出window；\nobj.say()，谁调用say，say 的this就指向谁，所以此时this指向的是obj对象；\nobj.pro.getPro()，我们知道，箭头函数时不绑定this的，getPro处于pro中，而对象不构成单独的作用域，所以箭头的函数的this就指向了全局作用域window。\n\n7. 代码输出结果var myObject = &#123;\n    foo: \"bar\",\n    func: function() &#123;\n        var self = this;\n        console.log(this.foo);  \n        console.log(self.foo);  \n        (function() &#123;\n            console.log(this.foo);  \n            console.log(self.foo);  \n        &#125;());\n    &#125;\n&#125;;\nmyObject.func();\n复制代码\n\n输出结果：bar bar undefined bar\n解析：\n\n首先func是由myObject调用的，this指向myObject。又因为var self = this;所以self指向myObject。\n这个立即执行匿名函数表达式是由window调用的，this指向window 。立即执行匿名函数的作用域处于myObject.func的作用域中，在这个作用域找不到self变量，沿着作用域链向上查找self变量，找到了指向 myObject对象的self。\n\n8. 代码输出问题window.number = 2;\nvar obj = &#123;\n number: 3,\n db1: (function()&#123;\n   console.log(this);\n   this.number *= 4;\n   return function()&#123;\n     console.log(this);\n     this.number *= 5;\n   &#125;\n &#125;)()\n&#125;\nvar db1 = obj.db1;\ndb1();\nobj.db1();\nconsole.log(obj.number);     // 15\nconsole.log(window.number);  // 40\n复制代码\n\n这道题目看清起来有点乱，但是实际上是考察this指向的:\n\n执行db1()时，this指向全局作用域，所以window.number * 4 = 8，然后执行匿名函数， 所以window.number * 5 = 40；\n执行obj.db1();时，this指向obj对象，执行匿名函数，所以obj.numer * 5 = 15。\n\n9. 代码输出结果var length = 10;\nfunction fn() &#123;\n    console.log(this.length);\n&#125;\n \nvar obj = &#123;\n  length: 5,\n  method: function(fn) &#123;\n    fn();\n    arguments[0]();\n  &#125;\n&#125;;\n \nobj.method(fn, 1);\n复制代码\n\n输出结果： 10 2\n解析：\n\n第一次执行fn()，this指向window对象，输出10。\n第二次执行arguments0，相当于arguments调用方法，this指向arguments，而这里传了两个参数，故输出arguments长度为2。\n\n10. 代码输出结果var a = 1;\nfunction printA()&#123;\n  console.log(this.a);\n&#125;\nvar obj=&#123;\n  a:2,\n  foo:printA,\n  bar:function()&#123;\n    printA();\n  &#125;\n&#125;\n\nobj.foo(); // 2\nobj.bar(); // 1\nvar foo = obj.foo;\nfoo(); // 1\n复制代码\n\n输出结果： 2 1 1\n解析：\n\nobj.foo()，foo 的this指向obj对象，所以a会输出2；\nobj.bar()，printA在bar方法中执行，所以此时printA的this指向的是window，所以会输出1；\nfoo()，foo是在全局对象中执行的，所以其this指向的是window，所以会输出1；\n\n11. 代码输出结果var x = 3;\nvar y = 4;\nvar obj = &#123;\n    x: 1,\n    y: 6,\n    getX: function() &#123;\n        var x = 5;\n        return function() &#123;\n            return this.x;\n        &#125;();\n    &#125;,\n    getY: function() &#123;\n        var y = 7;\n        return this.y;\n    &#125;\n&#125;\nconsole.log(obj.getX()) // 3\nconsole.log(obj.getY()) // 6\n复制代码\n\n输出结果：3  6\n解析：\n\n我们知道，匿名函数的this是指向全局对象的，所以this指向window，会打印出3；\ngetY是由obj调用的，所以其this指向的是obj对象，会打印出6。\n\n12. 代码输出结果 var a = 10; \n var obt = &#123; \n   a: 20, \n   fn: function()&#123; \n     var a = 30; \n     console.log(this.a)\n   &#125; \n &#125;\n obt.fn();  // 20\n obt.fn.call(); // 10\n (obt.fn)(); // 20\n复制代码\n\n输出结果： 20  10  20\n解析：\n\n obt.fn()，fn是由obt调用的，所以其this指向obt对象，会打印出20；\n obt.fn.call()，这里call的参数啥都没写，就表示null，我们知道如果call的参数为undefined或null，那么this就会指向全局对象this，所以会打印出 10；\n (obt.fn)()， 这里给表达式加了括号，而括号的作用是改变表达式的运算顺序，而在这里加与不加括号并无影响；相当于  obt.fn()，所以会打印出 20；\n\n13. 代码输出结果function a(xx)&#123;\n  this.x = xx;\n  return this\n&#125;;\nvar x = a(5);\nvar y = a(6);\n\nconsole.log(x.x)  // undefined\nconsole.log(y.x)  // 6\n复制代码\n\n输出结果： undefined  6\n解析：\n\n最关键的就是var x = a(5)，函数a是在全局作用域调用，所以函数内部的this指向window对象。所以 this.x = 5 就相当于：window.x = 5。之后 return this，也就是说 var x = a(5) 中的x变量的值是window，这里的x将函数内部的x的值覆盖了。然后执行console.log(x.x)， 也就是console.log(window.x)，而window对象中没有x属性，所以会输出undefined。\n当指向y.x时，会给全局变量中的x赋值为6，所以会打印出6。\n\n14. 代码输出结果function foo(something)&#123;\n    this.a = something\n&#125;\n\nvar obj1 = &#123;\n    foo: foo\n&#125;\n\nvar obj2 = &#123;&#125;\n\nobj1.foo(2); \nconsole.log(obj1.a); // 2\n\nobj1.foo.call(obj2, 3);\nconsole.log(obj2.a); // 3\n\nvar bar = new obj1.foo(4)\nconsole.log(obj1.a); // 2\nconsole.log(bar.a); // 4\n复制代码\n\n输出结果： 2  3  2  4\n解析：\n\n首先执行obj1.foo(2); 会在obj中添加a属性，其值为2。之后执行obj1.a，a是右obj1调用的，所以this指向obj，打印出2；\n执行 obj1.foo.call(obj2, 3) 时，会将foo的this指向obj2，后面就和上面一样了，所以会打印出3；\nobj1.a会打印出2；\n最后就是考察this绑定的优先级了，new 绑定是比隐式绑定优先级高，所以会输出4。\n\n15. 代码输出结果function foo(something)&#123;\n    this.a = something\n&#125;\n\nvar obj1 = &#123;&#125;\n\nvar bar = foo.bind(obj1);\nbar(2);\nconsole.log(obj1.a); // 2\n\nvar baz = new bar(3);\nconsole.log(obj1.a); // 2\nconsole.log(baz.a); // 3\n复制代码\n\n输出结果： 2  2  3\n这道题目和上面题目差不多，主要都是考察this绑定的优先级。记住以下结论即可：this绑定的优先级：new绑定 &gt; 显式绑定 &gt; 隐式绑定 &gt; 默认绑定。\n三、作用域&amp;变量提升&amp;闭包1. 代码输出结果(function()&#123;\n   var x = y = 1;\n&#125;)();\nvar z;\n\nconsole.log(y); // 1\nconsole.log(z); // undefined\nconsole.log(x); // Uncaught ReferenceError: x is not defined\n复制代码\n\n这段代码的关键在于：var x = y = 1; 实际上这里是从右往左执行的，首先执行y = 1, 因为y没有使用var声明，所以它是一个全局变量，然后第二步是将y赋值给x，讲一个全局变量赋值给了一个局部变量，最终，x是一个局部变量，y是一个全局变量，所以打印x是报错。\n2. 代码输出结果var a, b\n(function () &#123;\n   console.log(a);\n   console.log(b);\n   var a = (b = 3);\n   console.log(a);\n   console.log(b);   \n&#125;)()\nconsole.log(a);\nconsole.log(b);\n复制代码\n\n输出结果：\nundefined \nundefined \n3 \n3 \nundefined \n3\n复制代码\n\n这个题目和上面题目考察的知识点类似，b赋值为3，b此时是一个全局变量，而将3赋值给a，a是一个局部变量，所以最后打印的时候，a仍旧是undefined。\n3. 代码输出结果var friendName = 'World';\n(function() &#123;\n  if (typeof friendName === 'undefined') &#123;\n    var friendName = 'Jack';\n    console.log('Goodbye ' + friendName);\n  &#125; else &#123;\n    console.log('Hello ' + friendName);\n  &#125;\n&#125;)();\n复制代码\n\n输出结果：Goodbye Jack\n我们知道，在 JavaScript中， Function 和 var 都会被提升（变量提升），所以上面的代码就相当于：\nvar name = 'World!';\n(function () &#123;\n    var name;\n    if (typeof name === 'undefined') &#123;\n        name = 'Jack';\n        console.log('Goodbye ' + name);\n    &#125; else &#123;\n        console.log('Hello ' + name);\n    &#125;\n&#125;)();\n复制代码\n\n这样，答案就一目了然了。\n4. 代码输出结果function fn1()&#123;\n  console.log('fn1')\n&#125;\nvar fn2\n \nfn1()\nfn2()\n \nfn2 = function() &#123;\n  console.log('fn2')\n&#125;\n \nfn2()\n复制代码\n\n输出结果：\nfn1\nUncaught TypeError: fn2 is not a function\nfn2\n复制代码\n\n这里也是在考察变量提升，关键在于第一个fn2()，这时fn2仍是一个undefined的变量，所以会报错fn2不是一个函数。\n5. 代码输出结果function a() &#123;\n    var temp = 10;\n    function b() &#123;\n        console.log(temp); // 10\n    &#125;\n    b();\n&#125;\na();\n\nfunction a() &#123;\n    var temp = 10;\n    b();\n&#125;\nfunction b() &#123;\n    console.log(temp); // 报错 Uncaught ReferenceError: temp is not defined\n&#125;\na();\n复制代码\n\n在上面的两段代码中，第一段是可以正常输出，这个应该没啥问题，关键在于第二段代码，它会报错Uncaught ReferenceError: temp is not defined。这时因为在b方法执行时，temp 的值为undefined。\n6. 代码输出结果 var a=3;\n function c()&#123;\n    alert(a);\n &#125;\n (function()&#123;\n  var a=4;\n  c();\n &#125;)();\n复制代码\n\njs中变量的作用域链与定义时的环境有关，与执行时无关。执行环境只会改变this、传递的参数、全局变量等\n7.  代码输出问题function fun(n, o) &#123;\n  console.log(o)\n  return &#123;\n    fun: function(m)&#123;\n      return fun(m, n);\n    &#125;\n  &#125;;\n&#125;\nvar a = fun(0);  a.fun(1);  a.fun(2);  a.fun(3);\nvar b = fun(0).fun(1).fun(2).fun(3);\nvar c = fun(0).fun(1);  c.fun(2);  c.fun(3);\n复制代码\n\n输出结果：\nundefined  0  0  0\nundefined  0  1  2\nundefined  0  1  1\n复制代码\n\n这是一道关于闭包的题目，对于fun方法，调用之后返回的是一个对象。我们知道，当调用函数的时候传入的实参比函数声明时指定的形参个数要少，剩下的形参都将设置为undefined值。所以 console.log(o); 会输出undefined。而a就是是fun(0)返回的那个对象。也就是说，函数fun中参数 n 的值是0，而返回的那个对象中，需要一个参数n，而这个对象的作用域中没有n，它就继续沿着作用域向上一级的作用域中寻找n，最后在函数fun中找到了n，n的值是0。了解了这一点，其他运算就很简单了，以此类推。\n8. 代码输出结果f = function() &#123;return true;&#125;;   \ng = function() &#123;return false;&#125;;   \n(function() &#123;   \n   if (g() &amp;&amp; [] == ![]) &#123;   \n      f = function f() &#123;return false;&#125;;   \n      function g() &#123;return true;&#125;   \n   &#125;   \n&#125;)();   \nconsole.log(f());\n复制代码\n\n输出结果： false\n这里首先定义了两个变量f和g，我们知道变量是可以重新赋值的。后面是一个匿名自执行函数，在 if 条件中调用了函数 g()，由于在匿名函数中，又重新定义了函数g，就覆盖了外部定义的变量g，所以，这里调用的是内部函数 g 方法，返回为 true。第一个条件通过，进入第二个条件。\n第二个条件是[] == ![]，先看 ![] ，在 JavaScript 中，当用于布尔运算时，比如在这里，对象的非空引用被视为 true，空引用 null 则被视为 false。由于这里不是一个 null, 而是一个没有元素的数组，所以 [] 被视为 true, 而 ![] 的结果就是 false 了。当一个布尔值参与到条件运算的时候，true 会被看作 1, 而 false 会被看作 0。现在条件变成了 [] == 0 的问题了，当一个对象参与条件比较的时候，它会被求值，求值的结果是数组成为一个字符串，[] 的结果就是 ‘’ ，而 ‘’ 会被当作 0 ，所以，条件成立。\n两个条件都成立，所以会执行条件中的代码， f 在定义是没有使用var，所以他是一个全局变量。因此，这里会通过闭包访问到外部的变量 f, 重新赋值，现在执行 f 函数返回值已经成为 false 了。而 g 则不会有这个问题，这里是一个函数内定义的 g，不会影响到外部的 g 函数。所以最后的结果就是 false。\n四、原型&amp;继承1. 代码输出结果function Person(name) &#123;\n    this.name = name\n&#125;\nvar p2 = new Person('king');\nconsole.log(p2.__proto__) //Person.prototype\nconsole.log(p2.__proto__.__proto__) //Object.prototype\nconsole.log(p2.__proto__.__proto__.__proto__) // null\nconsole.log(p2.__proto__.__proto__.__proto__.__proto__)//null后面没有了，报错\nconsole.log(p2.__proto__.__proto__.__proto__.__proto__.__proto__)//null后面没有了，报错\nconsole.log(p2.constructor)//Person\nconsole.log(p2.prototype)//undefined p2是实例，没有prototype属性\nconsole.log(Person.constructor)//Function 一个空函数\nconsole.log(Person.prototype)//打印出Person.prototype这个对象里所有的方法和属性\nconsole.log(Person.prototype.constructor)//Person\nconsole.log(Person.prototype.__proto__)// Object.prototype\nconsole.log(Person.__proto__) //Function.prototype\nconsole.log(Function.prototype.__proto__)//Object.prototype\nconsole.log(Function.__proto__)//Function.prototype\nconsole.log(Object.__proto__)//Function.prototype\nconsole.log(Object.prototype.__proto__)//null\n复制代码\n\n这道义题目考察原型、原型链的基础，记住就可以了。\n2. 代码输出结果// a\nfunction Foo () &#123;\n getName = function () &#123;\n   console.log(1);\n &#125;\n return this;\n&#125;\n// b\nFoo.getName = function () &#123;\n console.log(2);\n&#125;\n// c\nFoo.prototype.getName = function () &#123;\n console.log(3);\n&#125;\n// d\nvar getName = function () &#123;\n console.log(4);\n&#125;\n// e\nfunction getName () &#123;\n console.log(5);\n&#125;\n\nFoo.getName();           // 2\ngetName();               // 4\nFoo().getName();         // 1\ngetName();               // 1 \nnew Foo.getName();       // 2\nnew Foo().getName();     // 3\nnew new Foo().getName(); // 3\n复制代码\n\n输出结果：2  4  1  1  2  3  3\n解析：\n\nFoo.getName()， Foo为一个函数对象，对象都可以有属性，b 处定义Foo的getName属性为函数，输出2；\ngetName()， 这里看d、e处，d为函数表达式，e为函数声明，两者区别在于变量提升，函数声明的 5 会被后边函数表达式的 4 覆盖；\n** Foo().getName()，** 这里要看a处，在Foo内部将全局的getName重新赋值为 console.log(1) 的函数，执行Foo()返回 this，这个this指向window，Foo().getName() 即为window.getName()，输出 1；\ngetName()， 上面3中，全局的getName已经被重新赋值，所以这里依然输出 1；\nnew Foo.getName()， 这里等价于 new (Foo.getName())，先执行 Foo.getName()，输出 2，然后new一个实例；\nnew Foo().getName()， 这 里等价于 (new Foo()).getName(), 先new一个Foo的实例，再执行这个实例的getName方法，但是这个实例本身没有这个方法，所以去原型链__protot__上边找，实例.protot === Foo.prototype，所以输出 3；\nnew new Foo().getName()， 这里等价于new (new Foo().getName())，如上述6，先输出 3，然后new 一个 new Foo().getName() 的实例。\n\n3. 代码输出结果var F = function() &#123;&#125;;\nObject.prototype.a = function() &#123;\n  console.log('a');\n&#125;;\nFunction.prototype.b = function() &#123;\n  console.log('b');\n&#125;\nvar f = new F();\nf.a();\nf.b();\nF.a();\nF.b()\n复制代码\n\n输出结果：\na\nUncaught TypeError: f.b is not a function\na\nb\n复制代码\n\n解析：\n\nf 并不是 Function 的实例，因为它本来就不是构造函数，调用的是 Function 原型链上的相关属性和方法，只能访问到 Object 原型链。所以 f.a() 输出 a ，而 f.b() 就报错了。\nF 是个构造函数，而 F 是构造函数 Function 的一个实例。因为 F instanceof Object === true，F instanceof Function === true，由此可以得出结论：F 是 Object 和 Function 两个的实例，即 F 能访问到 a， 也能访问到 b。所以 F.a() 输出 a ，F.b() 输出 b。\n\n4. 代码输出结果function Foo()&#123;\n    Foo.a = function()&#123;\n        console.log(1);\n    &#125;\n    this.a = function()&#123;\n        console.log(2)\n    &#125;\n&#125;\n\nFoo.prototype.a = function()&#123;\n    console.log(3);\n&#125;\n\nFoo.a = function()&#123;\n    console.log(4);\n&#125;\n\nFoo.a();\nlet obj = new Foo();\nobj.a();\nFoo.a();\n复制代码\n\n输出结果：4 2 1\n解析：\n\nFoo.a() 这个是调用 Foo 函数的静态方法 a，虽然 Foo 中有优先级更高的属性方法 a，但 Foo 此时没有被调用，所以此时输出 Foo 的静态方法 a 的结果：4\nlet obj = new Foo(); 使用了 new 方法调用了函数，返回了函数实例对象，此时 Foo 函数内部的属性方法初始化，原型链建立。\nobj.a() ; 调用 obj 实例上的方法 a，该实例上目前有两个 a 方法：一个是内部属性方法，另一个是原型上的方法。当这两者都存在时，首先查找 ownProperty ，如果没有才去原型链上找，所以调用实例上的 a 输出：2\nFoo.a() ; 根据第2步可知 Foo 函数内部的属性方法已初始化，覆盖了同名的静态方法，所以输出：1\n\n5. 代码输出结果function Dog() &#123;\n  this.name = 'puppy'\n&#125;\nDog.prototype.bark = () => &#123;\n  console.log('woof!woof!')\n&#125;\nconst dog = new Dog()\nconsole.log(Dog.prototype.constructor === Dog &amp;&amp; dog.constructor === Dog &amp;&amp; dog instanceof Dog)\n复制代码\n\n输出结果：true\n解析： 因为constructor是prototype上的属性，所以dog.constructor实际上就是指向Dog.prototype.constructor；constructor属性指向构造函数。instanceof而实际检测的是类型是否在实例的原型链上。\nconstructor是prototype上的属性，这一点很容易被忽略掉。constructor和instanceof 的作用是不同的，感性地来说，constructor的限制比较严格，它只能严格对比对象的构造函数是不是指定的值；而instanceof比较松散，只要检测的类型在原型链上，就会返回true。\n6. 代码输出结果var A = &#123;n: 4399&#125;;\nvar B =  function()&#123;this.n = 9999&#125;;\nvar C =  function()&#123;var n = 8888&#125;;\nB.prototype = A;\nC.prototype = A;\nvar b = new B();\nvar c = new C();\nA.n++\nconsole.log(b.n);\nconsole.log(c.n);\n复制代码\n\n输出结果：9999  4400\n解析：\n\nconsole.log(b.n)，在查找b.n是首先查找 b 对象自身有没有 n 属性，如果没有会去原型（prototype）上查找，当执行var b = new B()时，函数内部this.n=9999(此时this指向 b) 返回b对象，b对象有自身的n属性，所以返回 9999。\nconsole.log(c.n)，同理，当执行var c = new C()时，c对象没有自身的n属性，向上查找，找到原型 （prototype）上的 n 属性，因为 A.n++(此时对象A中的n为4400)， 所以返回4400。\n\n7. 代码输出问题function A()&#123;\n&#125;\nfunction B(a)&#123;\n　　this.a = a;\n&#125;\nfunction C(a)&#123;\n　　if(a)&#123;\nthis.a = a;\n　　&#125;\n&#125;\nA.prototype.a = 1;\nB.prototype.a = 1;\nC.prototype.a = 1;\n \nconsole.log(new A().a);\nconsole.log(new B().a);\nconsole.log(new C(2).a);\n复制代码\n\n输出结果：1  undefined  2\n解析：\n\nconsole.log(new A().a)，new A()为构造函数创建的对象，本身没有a属性，所以向它的原型去找，发现原型的a属性的属性值为1，故该输出值为1；\nconsole.log(new B().a)，ew B()为构造函数创建的对象，该构造函数有参数a，但该对象没有传参，故该输出值为undefined;\nconsole.log(new C(2).a)，new C()为构造函数创建的对象，该构造函数有参数a，且传的实参为2，执行函数内部，发现if为真，执行this.a = 2,故属性a的值为2。\n\n8 代码输出问题function Parent() &#123;\n    this.a = 1;\n    this.b = [1, 2, this.a];\n    this.c = &#123; demo: 5 &#125;;\n    this.show = function () &#123;\n        console.log(this.a , this.b , this.c.demo );\n    &#125;\n&#125;\n\nfunction Child() &#123;\n    this.a = 2;\n    this.change = function () &#123;\n        this.b.push(this.a);\n        this.a = this.b.length;\n        this.c.demo = this.a++;\n    &#125;\n&#125;\n\nChild.prototype = new Parent();\nvar parent = new Parent();\nvar child1 = new Child();\nvar child2 = new Child();\nchild1.a = 11;\nchild2.a = 12;\nparent.show();\nchild1.show();\nchild2.show();\nchild1.change();\nchild2.change();\nparent.show();\nchild1.show();\nchild2.show();\n复制代码\n\n输出结果：\nparent.show(); // 1  [1,2,1] 5\n\nchild1.show(); // 11 [1,2,1] 5\nchild2.show(); // 12 [1,2,1] 5\n\nparent.show(); // 1 [1,2,1] 5\n\nchild1.show(); // 5 [1,2,1,11,12] 5\n\nchild2.show(); // 6 [1,2,1,11,12] 5\n复制代码\n\n这道题目值得神帝，他涉及到的知识点很多，例如this的指向、原型、原型链、类的继承、数据类型等。\n解析：\n\nparent.show()，可以直接获得所需的值，没啥好说的；\nchild1.show()，Child的构造函数原本是指向Child的，题目显式将Child类的原型对象指向了Parent类的一个实例，需要注意Child.prototype指向的是Parent的实例parent，而不是指向Parent这个类。\nchild2.show()，这个也没啥好说的；\nparent.show()，parent是一个Parent类的实例，Child.prorotype指向的是Parent类的另一个实例，两者在堆内存中互不影响，所以上述操作不影响parent实例，所以输出结果不变；\nchild1.show()，child1执行了change()方法后，发生了怎样的变化呢?\n\n\nthis.b.push(this.a)，**由于this的动态指向特性，this.b会指向Child.prototype上的**b**数组,this.a会指向child1的a属性,所以Child.prototype.b变成了[1,2,1,11]**;\n**this.a = this.b.length，*这条语句中this.a和this.b的指向与上一句一致，故结果为child1.a变为*4;\nthis.c.demo = this.a++，**由于child1自身属性并没有**c**这个属性，所以此处的this.c会指向Child.prototype.c，this.a值为4，为原始类型，故赋值操作时会直接赋值，Child.prototype.c.demo的结果为4，而this.a随后自增为5(4 + 1 = 5)。**\n\n\nchild2执行了change()方法, 而child2和child1均是Child类的实例，所以他们的原型链指向同一个原型对象Child.prototype,也就是同一个parent实例，所以child2.change()中所有影响到原型对象的语句都会影响child1的最终输出结果。\n\n\nthis.b.push(this.a)，**由于this的动态指向特性，this.b会指向Child.prototype上的**b**数组,this.a会指向child2的a属性,所以Child.prototype.b变成了[1,2,1,11,12]**;\n**this.a = this.b.length，*这条语句中this.a和this.b的指向与上一句一致，故结果为child2.a变为*5;\nthis.c.demo = this.a++，**由于child2自身属性并没有**c**这个属性，所以此处的this.c会指向Child.prototype.c，故执行结果为Child.prototype.c.demo的值变为child2.a的值5，而child2.a最终自增为6(5 + 1 = 6)。**\n\n9. 代码输出结果function SuperType()&#123;\n    this.property = true;\n&#125;\n\nSuperType.prototype.getSuperValue = function()&#123;\n    return this.property;\n&#125;;\n\nfunction SubType()&#123;\n    this.subproperty = false;\n&#125;\n\nSubType.prototype = new SuperType();\nSubType.prototype.getSubValue = function ()&#123;\n    return this.subproperty;\n&#125;;\n\nvar instance = new SubType();\nconsole.log(instance.getSuperValue());\n复制代码\n\n输出结果：true\n实际上，这段代码就是在实现原型链继承，SubType继承了SuperType，本质是重写了SubType的原型对象，代之以一个新类型的实例。SubType的原型被重写了，所以instance.constructor指向的是SuperType。具体如下： \n","slug":"代码输出题","date":"2022-04-10T12:23:34.000Z","categories_index":"知识点","tags_index":"面试","author_index":"LIYUNFU"},{"id":"2e11d6d6f0c7a28ed1ac05b6aaef9d8c","title":"常见手写题","content":"一、JavaScript 基础1. 手写 Object.create思路：将传入的对象作为原型\nfunction create(obj) &#123;\n  function F() &#123;&#125;\n  F.prototype = obj\n  return new F()\n&#125;\n复制代码\n\n2. 手写 instanceof 方法instanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\n实现步骤：\n\n首先获取类型的原型\n然后获得对象的原型\n然后一直循环判断对象的原型是否等于类型的原型，直到对象原型为 null，因为原型链最终为 null\n\n具体实现：\nfunction myInstanceof(left, right) &#123;\n  let proto = Object.getPrototypeOf(left), // 获取对象的原型\n      prototype = right.prototype; // 获取构造函数的 prototype 对象\n\n  // 判断构造函数的 prototype 对象是否在对象的原型链上\n  while (true) &#123;\n    if (!proto) return false;\n    if (proto === prototype) return true;\n\n    proto = Object.getPrototypeOf(proto);\n  &#125;\n&#125;\n复制代码\n\n3. 手写 new 操作符在调用 new 的过程中会发生以上四件事情：\n（1）首先创建了一个新的空对象\n（2）设置原型，将对象的原型设置为函数的 prototype 对象。\n（3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）\n（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。\nfunction objectFactory() &#123;\n  let newObject = null;\n  let constructor = Array.prototype.shift.call(arguments);\n  let result = null;\n  // 判断参数是否是一个函数\n  if (typeof constructor !== \"function\") &#123;\n    console.error(\"type error\");\n    return;\n  &#125;\n  // 新建一个空对象，对象的原型为构造函数的 prototype 对象\n  newObject = Object.create(constructor.prototype);\n  // 将 this 指向新建对象，并执行函数\n  result = constructor.apply(newObject, arguments);\n  // 判断返回对象\n  let flag = result &amp;&amp; (typeof result === \"object\" || typeof result === \"function\");\n  // 判断返回结果\n  return flag ? result : newObject;\n&#125;\n// 使用方法\nobjectFactory(构造函数, 初始化参数);\n复制代码\n\n4. 手写 Promiseconst PENDING = \"pending\";\nconst RESOLVED = \"resolved\";\nconst REJECTED = \"rejected\";\n\nfunction MyPromise(fn) &#123;\n  // 保存初始化状态\n  var self = this;\n\n  // 初始化状态\n  this.state = PENDING;\n\n  // 用于保存 resolve 或者 rejected 传入的值\n  this.value = null;\n\n  // 用于保存 resolve 的回调函数\n  this.resolvedCallbacks = [];\n\n  // 用于保存 reject 的回调函数\n  this.rejectedCallbacks = [];\n\n  // 状态转变为 resolved 方法\n  function resolve(value) &#123;\n    // 判断传入元素是否为 Promise 值，如果是，则状态改变必须等待前一个状态改变后再进行改变\n    if (value instanceof MyPromise) &#123;\n      return value.then(resolve, reject);\n    &#125;\n\n    // 保证代码的执行顺序为本轮事件循环的末尾\n    setTimeout(() => &#123;\n      // 只有状态为 pending 时才能转变，\n      if (self.state === PENDING) &#123;\n        // 修改状态\n        self.state = RESOLVED;\n\n        // 设置传入的值\n        self.value = value;\n\n        // 执行回调函数\n        self.resolvedCallbacks.forEach(callback => &#123;\n          callback(value);\n        &#125;);\n      &#125;\n    &#125;, 0);\n  &#125;\n\n  // 状态转变为 rejected 方法\n  function reject(value) &#123;\n    // 保证代码的执行顺序为本轮事件循环的末尾\n    setTimeout(() => &#123;\n      // 只有状态为 pending 时才能转变\n      if (self.state === PENDING) &#123;\n        // 修改状态\n        self.state = REJECTED;\n\n        // 设置传入的值\n        self.value = value;\n\n        // 执行回调函数\n        self.rejectedCallbacks.forEach(callback => &#123;\n          callback(value);\n        &#125;);\n      &#125;\n    &#125;, 0);\n  &#125;\n\n  // 将两个方法传入函数执行\n  try &#123;\n    fn(resolve, reject);\n  &#125; catch (e) &#123;\n    // 遇到错误时，捕获错误，执行 reject 函数\n    reject(e);\n  &#125;\n&#125;\n\nMyPromise.prototype.then = function(onResolved, onRejected) &#123;\n  // 首先判断两个参数是否为函数类型，因为这两个参数是可选参数\n  onResolved =\n    typeof onResolved === \"function\"\n      ? onResolved\n      : function(value) &#123;\n          return value;\n        &#125;;\n\n  onRejected =\n    typeof onRejected === \"function\"\n      ? onRejected\n      : function(error) &#123;\n          throw error;\n        &#125;;\n\n  // 如果是等待状态，则将函数加入对应列表中\n  if (this.state === PENDING) &#123;\n    this.resolvedCallbacks.push(onResolved);\n    this.rejectedCallbacks.push(onRejected);\n  &#125;\n\n  // 如果状态已经凝固，则直接执行对应状态的函数\n\n  if (this.state === RESOLVED) &#123;\n    onResolved(this.value);\n  &#125;\n\n  if (this.state === REJECTED) &#123;\n    onRejected(this.value);\n  &#125;\n&#125;;\n复制代码\n\n5. 手写 Promise.thenthen 方法返回一个新的 promise 实例，为了在 promise 状态发生变化时（resolve / reject 被调用时）再执行 then 里的函数，我们使用一个 callbacks 数组先把传给then的函数暂存起来，等状态改变时再调用。\n那么，怎么保证后一个 *\\*\\*then\\*\\** 里的方法在前一个 **\\*\\*then\\*\\***（可能是异步）结束之后再执行呢？ 我们可以将传给 then 的函数和新 promise 的 resolve 一起 push 到前一个 promise 的 callbacks 数组中，达到承前启后的效果：\n\n承前：当前一个 promise 完成后，调用其 resolve 变更状态，在这个 resolve 里会依次调用 callbacks 里的回调，这样就执行了 then 里的方法了\n启后：上一步中，当 then 里的方法执行完成后，返回一个结果，如果这个结果是个简单的值，就直接调用新 promise 的 resolve，让其状态变更，这又会依次调用新 promise 的 callbacks 数组里的方法，循环往复。。如果返回的结果是个 promise，则需要等它完成之后再触发新 promise 的 resolve，所以可以在其结果的 then 里调用新 promise 的 resolve\n\nthen(onFulfilled, onReject)&#123;\n    // 保存前一个promise的this\n    const self = this; \n    return new MyPromise((resolve, reject) => &#123;\n      // 封装前一个promise成功时执行的函数\n      let fulfilled = () => &#123;\n        try&#123;\n          const result = onFulfilled(self.value); // 承前\n          return result instanceof MyPromise? result.then(resolve, reject) : resolve(result); //启后\n        &#125;catch(err)&#123;\n          reject(err)\n        &#125;\n      &#125;\n      // 封装前一个promise失败时执行的函数\n      let rejected = () => &#123;\n        try&#123;\n          const result = onReject(self.reason);\n          return result instanceof MyPromise? result.then(resolve, reject) : reject(result);\n        &#125;catch(err)&#123;\n          reject(err)\n        &#125;\n      &#125;\n      switch(self.status)&#123;\n        case PENDING: \n          self.onFulfilledCallbacks.push(fulfilled);\n          self.onRejectedCallbacks.push(rejected);\n          break;\n        case FULFILLED:\n          fulfilled();\n          break;\n        case REJECT:\n          rejected();\n          break;\n      &#125;\n    &#125;)\n   &#125;\n复制代码\n\n注意：\n\n连续多个 then 里的回调方法是同步注册的，但注册到了不同的 callbacks 数组中，因为每次 then 都返回新的 promise 实例（参考上面的例子和图）\n注册完成后开始执行构造函数中的异步事件，异步完成之后依次调用 callbacks 数组中提前注册的回调\n\n6. 手写 Promise.all1) 核心思路\n\n接收一个 Promise 实例的数组或具有 Iterator 接口的对象作为参数\n这个方法返回一个新的 promise 对象，\n遍历传入的参数，用Promise.resolve()将参数”包一层”，使其变成一个promise对象\n参数所有回调成功才是成功，返回值数组与参数顺序一致\n参数数组其中一个失败，则触发失败状态，第一个触发失败的 Promise 错误信息作为 Promise.all 的错误信息。\n\n2）实现代码\n一般来说，Promise.all 用来处理多个并发请求，也是为了页面数据构造的方便，将一个页面所用到的在不同接口的数据一起请求过来，不过，如果其中一个接口失败了，多个请求也就失败了，页面可能啥也出不来，这就看当前页面的耦合程度了\nfunction promiseAll(promises) &#123;\n  return new Promise(function(resolve, reject) &#123;\n    if(!Array.isArray(promises))&#123;\n        throw new TypeError(`argument must be a array`)\n    &#125;\n    var resolvedCounter = 0;\n    var promiseNum = promises.length;\n    var resolvedResult = [];\n    for (let i = 0; i &lt; promiseNum; i++) &#123;\n      Promise.resolve(promises[i]).then(value=>&#123;\n        resolvedCounter++;\n        resolvedResult[i] = value;\n        if (resolvedCounter == promiseNum) &#123;\n            return resolve(resolvedResult)\n          &#125;\n      &#125;,error=>&#123;\n        return reject(error)\n      &#125;)\n    &#125;\n  &#125;)\n&#125;\n// test\nlet p1 = new Promise(function (resolve, reject) &#123;\n    setTimeout(function () &#123;\n        resolve(1)\n    &#125;, 1000)\n&#125;)\nlet p2 = new Promise(function (resolve, reject) &#123;\n    setTimeout(function () &#123;\n        resolve(2)\n    &#125;, 2000)\n&#125;)\nlet p3 = new Promise(function (resolve, reject) &#123;\n    setTimeout(function () &#123;\n        resolve(3)\n    &#125;, 3000)\n&#125;)\npromiseAll([p3, p1, p2]).then(res => &#123;\n    console.log(res) // [3, 1, 2]\n&#125;)\n复制代码\n\n7. 手写 Promise.race该方法的参数是 Promise 实例数组, 然后其 then 注册的回调方法是数组中的某一个 Promise 的状态变为 fulfilled 的时候就执行. 因为 Promise 的状态只能改变一次, 那么我们只需要把 Promise.race 中产生的 Promise 对象的 resolve 方法, 注入到数组中的每一个 Promise 实例中的回调函数中即可.\nPromise.race = function (args) &#123;\n  return new Promise((resolve, reject) => &#123;\n    for (let i = 0, len = args.length; i &lt; len; i++) &#123;\n      args[i].then(resolve, reject)\n    &#125;\n  &#125;)\n&#125;\n复制代码\n\n8. 手写防抖函数函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求。\n// 函数防抖的实现\nfunction debounce(fn, wait) &#123;\n  let timer = null;\n\n  return function() &#123;\n    let context = this,\n        args = arguments;\n\n    // 如果此时存在定时器的话，则取消之前的定时器重新记时\n    if (timer) &#123;\n      clearTimeout(timer);\n      timer = null;\n    &#125;\n\n    // 设置定时器，使事件间隔指定事件后执行\n    timer = setTimeout(() => &#123;\n      fn.apply(context, args);\n    &#125;, wait);\n  &#125;;\n&#125;\n复制代码\n\n9. 手写节流函数函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件节流来降低事件调用的频率。\n// 函数节流的实现;\nfunction throttle(fn, delay) &#123;\n  let curTime = Date.now();\n\n  return function() &#123;\n    let context = this,\n        args = arguments,\n        nowTime = Date.now();\n\n    // 如果两次时间间隔超过了指定时间，则执行函数。\n    if (nowTime - curTime >= delay) &#123;\n      curTime = Date.now();\n      return fn.apply(context, args);\n    &#125;\n  &#125;;\n&#125;\n复制代码\n\n10. 手写类型判断函数function getType(value) &#123;\n  // 判断数据是 null 的情况\n  if (value === null) &#123;\n    return value + \"\";\n  &#125;\n  // 判断数据是引用类型的情况\n  if (typeof value === \"object\") &#123;\n    let valueClass = Object.prototype.toString.call(value),\n      type = valueClass.split(\" \")[1].split(\"\");\n    type.pop();\n    return type.join(\"\").toLowerCase();\n  &#125; else &#123;\n    // 判断数据是基本数据类型的情况和函数的情况\n    return typeof value;\n  &#125;\n&#125;\n复制代码\n\n11. 手写 call 函数call 函数的实现步骤：\n\n判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n判断传入上下文对象是否存在，如果不存在，则设置为 window 。\n处理传入的参数，截取第一个参数后的所有参数。\n将函数作为上下文对象的一个属性。\n使用上下文对象来调用这个方法，并保存返回结果。\n删除刚才新增的属性。\n返回结果。\n\n// call函数实现\nFunction.prototype.myCall = function(context) &#123;\n  // 判断调用对象\n  if (typeof this !== \"function\") &#123;\n    console.error(\"type error\");\n  &#125;\n  // 获取参数\n  let args = [...arguments].slice(1),\n      result = null;\n  // 判断 context 是否传入，如果未传入则设置为 window\n  context = context || window;\n  // 将调用函数设为对象的方法\n  context.fn = this;\n  // 调用函数\n  result = context.fn(...args);\n  // 将属性删除\n  delete context.fn;\n  return result;\n&#125;;\n复制代码\n\n12. 手写 apply 函数apply 函数的实现步骤：\n\n判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n判断传入上下文对象是否存在，如果不存在，则设置为 window 。\n将函数作为上下文对象的一个属性。\n判断参数值是否传入\n使用上下文对象来调用这个方法，并保存返回结果。\n删除刚才新增的属性\n返回结果\n\n// apply 函数实现\nFunction.prototype.myApply = function(context) &#123;\n  // 判断调用对象是否为函数\n  if (typeof this !== \"function\") &#123;\n    throw new TypeError(\"Error\");\n  &#125;\n  let result = null;\n  // 判断 context 是否存在，如果未传入则为 window\n  context = context || window;\n  // 将函数设为对象的方法\n  context.fn = this;\n  // 调用方法\n  if (arguments[1]) &#123;\n    result = context.fn(...arguments[1]);\n  &#125; else &#123;\n    result = context.fn();\n  &#125;\n  // 将属性删除\n  delete context.fn;\n  return result;\n&#125;;\n复制代码\n\n13. 手写 bind 函数bind 函数的实现步骤：\n\n判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n保存当前函数的引用，获取其余传入参数值。\n创建一个函数返回\n函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。\n\n// bind 函数实现\nFunction.prototype.myBind = function(context) &#123;\n  // 判断调用对象是否为函数\n  if (typeof this !== \"function\") &#123;\n    throw new TypeError(\"Error\");\n  &#125;\n  // 获取参数\n  var args = [...arguments].slice(1),\n      fn = this;\n  return function Fn() &#123;\n    // 根据调用方式，传入不同绑定值\n    return fn.apply(\n      this instanceof Fn ? this : context,\n      args.concat(...arguments)\n    );\n  &#125;;\n&#125;;\n复制代码\n\n14. 函数柯里化的实现函数柯里化指的是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。\nfunction curry(fn, args) &#123;\n  // 获取函数需要的参数长度\n  let length = fn.length;\n\n  args = args || [];\n\n  return function() &#123;\n    let subArgs = args.slice(0);\n\n    // 拼接得到现有的所有参数\n    for (let i = 0; i &lt; arguments.length; i++) &#123;\n      subArgs.push(arguments[i]);\n    &#125;\n\n    // 判断参数的长度是否已经满足函数所需参数的长度\n    if (subArgs.length >= length) &#123;\n      // 如果满足，执行函数\n      return fn.apply(this, subArgs);\n    &#125; else &#123;\n      // 如果不满足，递归返回科里化的函数，等待参数的传入\n      return curry.call(this, fn, subArgs);\n    &#125;\n  &#125;;\n&#125;\n\n// es6 实现\nfunction curry(fn, ...args) &#123;\n  return fn.length &lt;= args.length ? fn(...args) : curry.bind(null, fn, ...args);\n&#125;\n复制代码\n\n15. 实现AJAX请求AJAX是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的 异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。\n创建AJAX请求的步骤：\n\n创建一个 XMLHttpRequest 对象。\n在这个对象上使用 open 方法创建一个 HTTP 请求，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。\n在发起请求前，可以为这个对象添加一些信息和监听函数。比如说可以通过 setRequestHeader 方法来为请求添加头信息。还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候就可以通过 response 中的数据来对页面进行更新了。\n当对象的属性和监听函数设置完成后，最后调用 sent 方法来向服务器发起请求，可以传入参数作为发送的数据体。\n\nconst SERVER_URL = \"/server\";\nlet xhr = new XMLHttpRequest();\n// 创建 Http 请求\nxhr.open(\"GET\", SERVER_URL, true);\n// 设置状态监听函数\nxhr.onreadystatechange = function() &#123;\n  if (this.readyState !== 4) return;\n  // 当请求成功时\n  if (this.status === 200) &#123;\n    handle(this.response);\n  &#125; else &#123;\n    console.error(this.statusText);\n  &#125;\n&#125;;\n// 设置请求失败时的监听函数\nxhr.onerror = function() &#123;\n  console.error(this.statusText);\n&#125;;\n// 设置请求头信息\nxhr.responseType = \"json\";\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n// 发送 Http 请求\nxhr.send(null);\n复制代码\n\n16. 使用Promise封装AJAX请求// promise 封装实现：\nfunction getJSON(url) &#123;\n  // 创建一个 promise 对象\n  let promise = new Promise(function(resolve, reject) &#123;\n    let xhr = new XMLHttpRequest();\n    // 新建一个 http 请求\n    xhr.open(\"GET\", url, true);\n    // 设置状态的监听函数\n    xhr.onreadystatechange = function() &#123;\n      if (this.readyState !== 4) return;\n      // 当请求成功或失败时，改变 promise 的状态\n      if (this.status === 200) &#123;\n        resolve(this.response);\n      &#125; else &#123;\n        reject(new Error(this.statusText));\n      &#125;\n    &#125;;\n    // 设置错误监听函数\n    xhr.onerror = function() &#123;\n      reject(new Error(this.statusText));\n    &#125;;\n    // 设置响应的数据类型\n    xhr.responseType = \"json\";\n    // 设置请求头信息\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\n    // 发送 http 请求\n    xhr.send(null);\n  &#125;);\n  return promise;\n&#125;\n复制代码\n\n17. 实现浅拷贝浅拷贝是指，一个新的对象对原始对象的属性值进行精确地拷贝，如果拷贝的是基本数据类型，拷贝的就是基本数据类型的值，如果是引用数据类型，拷贝的就是内存地址。如果其中一个对象的引用内存地址发生改变，另一个对象也会发生变化。\n（1）Object.assign()Object.assign()是ES6中对象的拷贝方法，接受的第一个参数是目标对象，其余参数是源对象，用法：Object.assign(target, source_1, ···)，该方法可以实现浅拷贝，也可以实现一维对象的深拷贝。\n注意：\n\n如果目标对象和源对象有同名属性，或者多个源对象有同名属性，则后面的属性会覆盖前面的属性。\n如果该函数只有一个参数，当参数为对象时，直接返回该对象；当参数不是对象时，会先将参数转为对象然后返回。\n因为null 和 undefined 不能转化为对象，所以第一个参数不能为null或 undefined，会报错。\n\nlet target = &#123;a: 1&#125;;\nlet object2 = &#123;b: 2&#125;;\nlet object3 = &#123;c: 3&#125;;\nObject.assign(target,object2,object3);  \nconsole.log(target);  // &#123;a: 1, b: 2, c: 3&#125;\n复制代码\n\n（2）扩展运算符使用扩展运算符可以在构造字面量对象的时候，进行属性的拷贝。语法：let cloneObj = &#123; ...obj &#125;;\nlet obj1 = &#123;a:1,b:&#123;c:1&#125;&#125;\nlet obj2 = &#123;...obj1&#125;;\nobj1.a = 2;\nconsole.log(obj1); //&#123;a:2,b:&#123;c:1&#125;&#125;\nconsole.log(obj2); //&#123;a:1,b:&#123;c:1&#125;&#125;\nobj1.b.c = 2;\nconsole.log(obj1); //&#123;a:2,b:&#123;c:2&#125;&#125;\nconsole.log(obj2); //&#123;a:1,b:&#123;c:2&#125;&#125;\n复制代码\n\n（3）数组方法实现数组浅拷贝1）Array.prototype.slice\nslice()方法是JavaScript数组的一个方法，这个方法可以从已有数组中返回选定的元素：用法：array.slice(start, end)，该方法不会改变原始数组。\n该方法有两个参数，两个参数都可选，如果两个参数都不写，就可以实现一个数组的浅拷贝。\n\nlet arr = [1,2,3,4];\nconsole.log(arr.slice()); // [1,2,3,4]\nconsole.log(arr.slice() === arr); //false\n复制代码\n\n2）Array.prototype.concat\nconcat() 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。\n该方法有两个参数，两个参数都可选，如果两个参数都不写，就可以实现一个数组的浅拷贝。\n\nlet arr = [1,2,3,4];\nconsole.log(arr.concat()); // [1,2,3,4]\nconsole.log(arr.concat() === arr); //false\n复制代码\n\n（4）手写实现浅拷贝// 浅拷贝的实现;\n\nfunction shallowCopy(object) &#123;\n  // 只拷贝对象\n  if (!object || typeof object !== \"object\") return;\n\n  // 根据 object 的类型判断是新建一个数组还是对象\n  let newObject = Array.isArray(object) ? [] : &#123;&#125;;\n\n  // 遍历 object，并且判断是 object 的属性才拷贝\n  for (let key in object) &#123;\n    if (object.hasOwnProperty(key)) &#123;\n      newObject[key] = object[key];\n    &#125;\n  &#125;\n\n  return newObject;\n&#125;// 浅拷贝的实现;\n\nfunction shallowCopy(object) &#123;\n  // 只拷贝对象\n  if (!object || typeof object !== \"object\") return;\n\n  // 根据 object 的类型判断是新建一个数组还是对象\n  let newObject = Array.isArray(object) ? [] : &#123;&#125;;\n\n  // 遍历 object，并且判断是 object 的属性才拷贝\n  for (let key in object) &#123;\n    if (object.hasOwnProperty(key)) &#123;\n      newObject[key] = object[key];\n    &#125;\n  &#125;\n\n  return newObject;\n&#125;// 浅拷贝的实现;\nfunction shallowCopy(object) &#123;\n  // 只拷贝对象\n  if (!object || typeof object !== \"object\") return;\n  // 根据 object 的类型判断是新建一个数组还是对象\n  let newObject = Array.isArray(object) ? [] : &#123;&#125;;\n  // 遍历 object，并且判断是 object 的属性才拷贝\n  for (let key in object) &#123;\n    if (object.hasOwnProperty(key)) &#123;\n      newObject[key] = object[key];\n    &#125;\n  &#125;\n  return newObject;\n&#125;\n复制代码\n\n18. 实现深拷贝\n浅拷贝： 浅拷贝指的是将一个对象的属性值复制到另一个对象，如果有的属性的值为引用类型的话，那么会将这个引用的地址复制给对象，因此两个对象会有同一个引用类型的引用。浅拷贝可以使用  Object.assign 和展开运算符来实现。\n深拷贝： 深拷贝相对浅拷贝而言，如果遇到属性值为引用类型的时候，它新建一个引用类型并将对应的值复制给它，因此对象获得的一个新的引用类型而不是一个原有类型的引用。深拷贝对于一些对象可以使用 JSON 的两个函数来实现，但是由于 JSON 的对象格式比 js 的对象格式更加严格，所以如果属性值里边出现函数或者 Symbol 类型的值时，会转换失败\n\n（1）JSON.stringify()\nJSON.parse(JSON.stringify(obj))是目前比较常用的深拷贝方法之一，它的原理就是利用JSON.stringify 将js对象序列化（JSON字符串），再使用JSON.parse来反序列化(还原)js对象。\n这个方法可以简单粗暴的实现深拷贝，但是还存在问题，拷贝的对象中如果有函数，undefined，symbol，当使用过JSON.stringify()进行处理之后，都会消失。\n\nlet obj1 = &#123;  a: 0,\n              b: &#123;\n                 c: 0\n                 &#125;\n            &#125;;\nlet obj2 = JSON.parse(JSON.stringify(obj1));\nobj1.a = 1;\nobj1.b.c = 1;\nconsole.log(obj1); // &#123;a: 1, b: &#123;c: 1&#125;&#125;\nconsole.log(obj2); // &#123;a: 0, b: &#123;c: 0&#125;&#125;\n复制代码\n\n（2）函数库lodash的_.cloneDeep方法该函数库也有提供_.cloneDeep用来做 Deep Copy\nvar _ = require('lodash');\nvar obj1 = &#123;\n    a: 1,\n    b: &#123; f: &#123; g: 1 &#125; &#125;,\n    c: [1, 2, 3]\n&#125;;\nvar obj2 = _.cloneDeep(obj1);\nconsole.log(obj1.b.f === obj2.b.f);// false\n复制代码\n\n（3）手写实现深拷贝函数// 深拷贝的实现\nfunction deepCopy(object) &#123;\n  if (!object || typeof object !== \"object\") return;\n\n  let newObject = Array.isArray(object) ? [] : &#123;&#125;;\n\n  for (let key in object) &#123;\n    if (object.hasOwnProperty(key)) &#123;\n      newObject[key] =\n        typeof object[key] === \"object\" ? deepCopy(object[key]) : object[key];\n    &#125;\n  &#125;\n\n  return newObject;\n&#125;\n复制代码\n\n二、数据处理1. 实现日期格式化函数输入：\ndateFormat(new Date('2020-12-01'), 'yyyy/MM/dd') // 2020/12/01\ndateFormat(new Date('2020-04-01'), 'yyyy/MM/dd') // 2020/04/01\ndateFormat(new Date('2020-04-01'), 'yyyy年MM月dd日') // 2020年04月01日\n复制代码\nconst dateFormat = (dateInput, format)=>&#123;\n    var day = dateInput.getDate() \n    var month = dateInput.getMonth() + 1  \n    var year = dateInput.getFullYear()   \n    format = format.replace(/yyyy/, year)\n    format = format.replace(/MM/,month)\n    format = format.replace(/dd/,day)\n    return format\n&#125;\n复制代码\n\n2. 交换a,b的值，不能用临时变量巧妙的利用两个数的和、差：\na = a + b\nb = a - b\na = a - b\n复制代码\n\n3. 实现数组的乱序输出主要的实现思路就是：\n\n取出数组的第一个元素，随机产生一个索引值，将该第一个元素和这个索引对应的元素进行交换。\n第二次取出数据数组第二个元素，随机产生一个除了索引为1的之外的索引值，并将第二个元素与该索引值对应的元素进行交换\n按照上面的规律执行，直到遍历完成\n\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nfor (var i = 0; i &lt; arr.length; i++) &#123;\n  const randomIndex = Math.round(Math.random() * (arr.length - 1 - i)) + i;\n  [arr[i], arr[randomIndex]] = [arr[randomIndex], arr[i]];\n&#125;\nconsole.log(arr)\n复制代码\n\n还有一方法就是倒序遍历：\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nlet length = arr.length,\n    randomIndex,\n    temp;\n  while (length) &#123;\n    randomIndex = Math.floor(Math.random() * length--);\n    temp = arr[length];\n    arr[length] = arr[randomIndex];\n    arr[randomIndex] = temp;\n  &#125;\nconsole.log(arr)\n复制代码\n\n4. 实现数组元素求和\narr=[1,2,3,4,5,6,7,8,9,10]，求和\n\nlet arr=[1,2,3,4,5,6,7,8,9,10]\nlet sum = arr.reduce( (total,i) => total += i,0);\nconsole.log(sum);\n复制代码\n\n\narr=[1,2,3,[[4,5],6],7,8,9]，求和\n\nvar = arr=[1,2,3,[[4,5],6],7,8,9]\nlet arr= arr.toString().split(',').reduce( (total,i) => total += Number(i),0);\nconsole.log(arr);\n复制代码\n\n递归实现：\nlet arr = [1, 2, 3, 4, 5, 6] \n\nfunction add(arr) &#123;\n    if (arr.length == 1) return arr[0] \n    return arr[0] + add(arr.slice(1)) \n&#125;\nconsole.log(add(arr)) // 21\n复制代码\n\n5. 实现数组的扁平化（1）递归实现\n普通的递归思路很容易理解，就是通过循环递归的方式，一项一项地去遍历，如果每一项还是一个数组，那么就继续往下遍历，利用递归程序的方法，来实现数组的每一项的连接：\nlet arr = [1, [2, [3, 4, 5]]];\nfunction flatten(arr) &#123;\n  let result = [];\n\n  for(let i = 0; i &lt; arr.length; i++) &#123;\n    if(Array.isArray(arr[i])) &#123;\n      result = result.concat(flatten(arr[i]));\n    &#125; else &#123;\n      result.push(arr[i]);\n    &#125;\n  &#125;\n  return result;\n&#125;\nflatten(arr);  //  [1, 2, 3, 4，5]\n复制代码\n\n（2）reduce 函数迭代\n从上面普通的递归函数中可以看出，其实就是对数组的每一项进行处理，那么其实也可以用reduce 来实现数组的拼接，从而简化第一种方法的代码，改造后的代码如下所示：\nlet arr = [1, [2, [3, 4]]];\nfunction flatten(arr) &#123;\n    return arr.reduce(function(prev, next)&#123;\n        return prev.concat(Array.isArray(next) ? flatten(next) : next)\n    &#125;, [])\n&#125;\nconsole.log(flatten(arr));//  [1, 2, 3, 4，5]\n复制代码\n\n（3）扩展运算符实现\n这个方法的实现，采用了扩展运算符和 some 的方法，两者共同使用，达到数组扁平化的目的：\nlet arr = [1, [2, [3, 4]]];\nfunction flatten(arr) &#123;\n    while (arr.some(item => Array.isArray(item))) &#123;\n        arr = [].concat(...arr);\n    &#125;\n    return arr;\n&#125;\nconsole.log(flatten(arr)); //  [1, 2, 3, 4，5]\n复制代码\n\n（4）split 和 toString\n可以通过 split 和 toString 两个方法来共同实现数组扁平化，由于数组会默认带一个 toString 的方法，所以可以把数组直接转换成逗号分隔的字符串，然后再用 split 方法把字符串重新转换为数组，如下面的代码所示：\nlet arr = [1, [2, [3, 4]]];\nfunction flatten(arr) &#123;\n    return arr.toString().split(',');\n&#125;\nconsole.log(flatten(arr)); //  [1, 2, 3, 4，5]\n复制代码\n\n通过这两个方法可以将多维数组直接转换成逗号连接的字符串，然后再重新分隔成数组。\n（5）ES6 中的 flat\n我们还可以直接调用 ES6 中的 flat 方法来实现数组扁平化。flat 方法的语法：arr.flat([depth])\n其中 depth 是 flat 的参数，depth 是可以传递数组的展开深度（默认不填、数值是 1），即展开一层数组。如果层数不确定，参数可以传进 Infinity，代表不论多少层都要展开：\nlet arr = [1, [2, [3, 4]]];\nfunction flatten(arr) &#123;\n  return arr.flat(Infinity);\n&#125;\nconsole.log(flatten(arr)); //  [1, 2, 3, 4，5]\n复制代码\n\n可以看出，一个嵌套了两层的数组，通过将 flat 方法的参数设置为 Infinity，达到了我们预期的效果。其实同样也可以设置成 2，也能实现这样的效果。在编程过程中，如果数组的嵌套层数不确定，最好直接使用 Infinity，可以达到扁平化。 （6）正则和 JSON 方法 在第4种方法中已经使用 toString 方法，其中仍然采用了将 JSON.stringify 的方法先转换为字符串，然后通过正则表达式过滤掉字符串中的数组的方括号，最后再利用 JSON.parse 把它转换成数组：\nlet arr = [1, [2, [3, [4, 5]]], 6];\nfunction flatten(arr) &#123;\n  let str = JSON.stringify(arr);\n  str = str.replace(/(\\[|\\])/g, '');\n  str = '[' + str + ']';\n  return JSON.parse(str); \n&#125;\nconsole.log(flatten(arr)); //  [1, 2, 3, 4，5]\n复制代码\n\n6. 实现数组去重给定某无序数组，要求去除数组中的重复数字并且返回新的无重复数组。\nES6方法（使用数据结构集合）：\nconst array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8];\n\nArray.from(new Set(array)); // [1, 2, 3, 5, 9, 8]\n复制代码\n\nES5方法：使用map存储不重复的数字\nconst array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8];\n\nuniqueArray(array); // [1, 2, 3, 5, 9, 8]\n\nfunction uniqueArray(array) &#123;\n  let map = &#123;&#125;;\n  let res = [];\n  for(var i = 0; i &lt; array.length; i++) &#123;\n    if(!map.hasOwnProperty([array[i]])) &#123;\n      map[array[i]] = 1;\n      res.push(array[i]);\n    &#125;\n  &#125;\n  return res;\n&#125;\n复制代码\n\n7. 实现数组的flat方法function _flat(arr, depth) &#123;\n  if(!Array.isArray(arr) || depth &lt;= 0) &#123;\n    return arr;\n  &#125;\n  return arr.reduce((prev, cur) => &#123;\n    if (Array.isArray(cur)) &#123;\n      return prev.concat(_flat(cur, depth - 1))\n    &#125; else &#123;\n      return prev.concat(cur);\n    &#125;\n  &#125;, []);\n&#125;\n复制代码\n\n8. 实现数组的push方法let arr = [];\nArray.prototype.push = function() &#123;\n\tfor( let i = 0 ; i &lt; arguments.length ; i++)&#123;\n\t\tthis[this.length] = arguments[i] ;\n\t&#125;\n\treturn this.length;\n&#125;\n复制代码\n\n9. 实现数组的filter方法Array.prototype._filter = function(fn) &#123;\n    if (typeof fn !== \"function\") &#123;\n        throw Error('参数必须是一个函数');\n    &#125;\n    const res = [];\n    for (let i = 0, len = this.length; i &lt; len; i++) &#123;\n        fn(this[i]) &amp;&amp; res.push(this[i]);\n    &#125;\n    return res;\n&#125;\n复制代码\n\n10. 实现数组的map方法Array.prototype._map = function(fn) &#123;\n   if (typeof fn !== \"function\") &#123;\n        throw Error('参数必须是一个函数');\n    &#125;\n    const res = [];\n    for (let i = 0, len = this.length; i &lt; len; i++) &#123;\n        res.push(fn(this[i]));\n    &#125;\n    return res;\n&#125;\n复制代码\n\n11. 实现字符串的repeat方法输入字符串s，以及其重复的次数，输出重复的结果，例如输入abc，2，输出abcabc。\nfunction repeat(s, n) &#123;\n    return (new Array(n + 1)).join(s);\n&#125;\n复制代码\n\n递归：\nfunction repeat(s, n) &#123;\n    return (n > 0) ? s.concat(repeat(s, --n)) : \"\";\n&#125;\n复制代码\n\n12. 实现字符串翻转在字符串的原型链上添加一个方法，实现字符串翻转：\nString.prototype._reverse = function(a)&#123;\n    return a.split(\"\").reverse().join(\"\");\n&#125;\nvar obj = new String();\nvar res = obj._reverse ('hello');\nconsole.log(res);    // olleh\n复制代码\n\n需要注意的是，必须通过实例化对象之后再去调用定义的方法，不然找不到该方法。\n13. 将数字每千分位用逗号隔开数字有小数版本：\nlet format = n => &#123;\n    let num = n.toString() // 转成字符串\n    let decimals = ''\n        // 判断是否有小数\n    num.indexOf('.') > -1 ? decimals = num.split('.')[1] : decimals\n    let len = num.length\n    if (len &lt;= 3) &#123;\n        return num\n    &#125; else &#123;\n        let temp = ''\n        let remainder = len % 3\n        decimals ? temp = '.' + decimals : temp\n        if (remainder > 0) &#123; // 不是3的整数倍\n            return num.slice(0, remainder) + ',' + num.slice(remainder, len).match(/\\d&#123;3&#125;/g).join(',') + temp\n        &#125; else &#123; // 是3的整数倍\n            return num.slice(0, len).match(/\\d&#123;3&#125;/g).join(',') + temp \n        &#125;\n    &#125;\n&#125;\nformat(12323.33)  // '12,323.33'\n复制代码\n\n数字无小数版本：\nlet format = n => &#123;\n    let num = n.toString() \n    let len = num.length\n    if (len &lt;= 3) &#123;\n        return num\n    &#125; else &#123;\n        let remainder = len % 3\n        if (remainder > 0) &#123; // 不是3的整数倍\n            return num.slice(0, remainder) + ',' + num.slice(remainder, len).match(/\\d&#123;3&#125;/g).join(',') \n        &#125; else &#123; // 是3的整数倍\n            return num.slice(0, len).match(/\\d&#123;3&#125;/g).join(',') \n        &#125;\n    &#125;\n&#125;\nformat(1232323)  // '1,232,323'\n复制代码\n\n14. 实现非负大整数相加JavaScript对数值有范围的限制，限制如下：\nNumber.MAX_VALUE // 1.7976931348623157e+308\nNumber.MAX_SAFE_INTEGER // 9007199254740991\nNumber.MIN_VALUE // 5e-324\nNumber.MIN_SAFE_INTEGER // -9007199254740991\n复制代码\n\n如果想要对一个超大的整数(&gt; Number.MAX_SAFE_INTEGER)进行加法运算，但是又想输出一般形式，那么使用 + 是无法达到的，一旦数字超过 Number.MAX_SAFE_INTEGER 数字会被立即转换为科学计数法，并且数字精度相比以前将会有误差。\n实现一个算法进行大数的相加：\nfunction sumBigNumber(a, b) &#123;\n  let res = '';\n  let temp = 0;\n  \n  a = a.split('');\n  b = b.split('');\n  \n  while (a.length || b.length || temp) &#123;\n    temp += ~~a.pop() + ~~b.pop();\n    res = (temp % 10) + res;\n    temp  = temp > 9\n  &#125;\n  return res.replace(/^0+/, '');\n&#125;\n复制代码\n\n其主要的思路如下：\n\n首先用字符串的方式来保存大数，这样数字在数学表示上就不会发生变化\n初始化res，temp来保存中间的计算结果，并将两个字符串转化为数组，以便进行每一位的加法运算\n将两个数组的对应的位进行相加，两个数相加的结果可能大于10，所以可能要仅为，对10进行取余操作，将结果保存在当前位\n判断当前位是否大于9，也就是是否会进位，若是则将temp赋值为true，因为在加法运算中，true会自动隐式转化为1，以便于下一次相加\n重复上述操作，直至计算结束\n\n13. 实现 add(1)(2)(3)函数柯里化概念： 柯里化（Currying）是把接受多个参数的函数转变为接受一个单一参数的函数，并且返回接受余下的参数且返回结果的新函数的技术。\n1）粗暴版\nfunction add (a) &#123;\nreturn function (b) &#123;\n \treturn function (c) &#123;\n      return a + b + c;\n \t&#125;\n&#125;\n&#125;\nconsole.log(add(1)(2)(3)); // 6\n复制代码\n\n2）柯里化解决方案\n\n参数长度固定\n\nvar add = function (m) &#123;\n  var temp = function (n) &#123;\n    return add(m + n);\n  &#125;\n  temp.toString = function () &#123;\n    return m;\n  &#125;\n  return temp;\n&#125;;\nconsole.log(add(3)(4)(5)); // 12\nconsole.log(add(3)(6)(9)(25)); // 43\n复制代码\n\n对于add(3)(4)(5)，其执行过程如下：\n\n先执行add(3)，此时m=3，并且返回temp函数；\n执行temp(4)，这个函数内执行add(m+n)，n是此次传进来的数值4，m值还是上一步中的3，所以add(m+n)=add(3+4)=add(7)，此时m=7，并且返回temp函数\n执行temp(5)，这个函数内执行add(m+n)，n是此次传进来的数值5，m值还是上一步中的7，所以add(m+n)=add(7+5)=add(12)，此时m=12，并且返回temp函数\n由于后面没有传入参数，等于返回的temp函数不被执行而是打印，了解JS的朋友都知道对象的toString是修改对象转换字符串的方法，因此代码中temp函数的toString函数return m值，而m值是最后一步执行函数时的值m=12，所以返回值是12。\n\n\n参数长度不固定\n\nfunction add (...args) &#123;\n    //求和\n    return args.reduce((a, b) => a + b)\n&#125;\nfunction currying (fn) &#123;\n    let args = []\n    return function temp (...newArgs) &#123;\n        if (newArgs.length) &#123;\n            args = [\n                ...args,\n                ...newArgs\n            ]\n            return temp\n        &#125; else &#123;\n            let val = fn.apply(this, args)\n            args = [] //保证再次调用时清空\n            return val\n        &#125;\n    &#125;\n&#125;\nlet addCurry = currying(add)\nconsole.log(addCurry(1)(2)(3)(4, 5)())  //15\nconsole.log(addCurry(1)(2)(3, 4, 5)())  //15\nconsole.log(addCurry(1)(2, 3, 4, 5)())  //15\n复制代码\n\n14. 实现类数组转化为数组类数组转换为数组的方法有这样几种：\n\n通过 call 调用数组的 slice 方法来实现转换\n\nArray.prototype.slice.call(arrayLike);\n复制代码\n\n\n通过 call 调用数组的 splice 方法来实现转换\n\nArray.prototype.splice.call(arrayLike, 0);\n复制代码\n\n\n通过 apply 调用数组的 concat 方法来实现转换\n\nArray.prototype.concat.apply([], arrayLike);\n复制代码\n\n\n通过 Array.from 方法来实现转换\n\nArray.from(arrayLike);\n复制代码\n\n15. 使用 reduce 求和arr = [1,2,3,4,5,6,7,8,9,10]，求和\nlet arr = [1,2,3,4,5,6,7,8,9,10]\narr.reduce((prev, cur) => &#123; return prev + cur &#125;, 0)\n复制代码\n\narr = [1,2,3,[[4,5],6],7,8,9]，求和\nlet arr = [1,2,3,4,5,6,7,8,9,10]\narr.flat(Infinity).reduce((prev, cur) => &#123; return prev + cur &#125;, 0)\n复制代码\n\narr = [{a:1, b:3}, {a:2, b:3, c:4}, {a:3}]，求和\nlet arr = [&#123;a:9, b:3, c:4&#125;, &#123;a:1, b:3&#125;, &#123;a:3&#125;] \n\narr.reduce((prev, cur) => &#123;\n    return prev + cur[\"a\"];\n&#125;, 0)\n复制代码\n\n16. 将js对象转化为树形结构// 转换前：\nsource = [&#123;\n            id: 1,\n            pid: 0,\n            name: 'body'\n          &#125;, &#123;\n            id: 2,\n            pid: 1,\n            name: 'title'\n          &#125;, &#123;\n            id: 3,\n            pid: 2,\n            name: 'div'\n          &#125;]\n// 转换为: \ntree = [&#123;\n          id: 1,\n          pid: 0,\n          name: 'body',\n          children: [&#123;\n            id: 2,\n            pid: 1,\n            name: 'title',\n            children: [&#123;\n              id: 3,\n              pid: 1,\n              name: 'div'\n            &#125;]\n          &#125;\n        &#125;]\n复制代码\n\n代码实现：\nfunction jsonToTree(data) &#123;\n  // 初始化结果数组，并判断输入数据的格式\n  let result = []\n  if(!Array.isArray(data)) &#123;\n    return result\n  &#125;\n  // 使用map，将当前对象的id与当前对象对应存储起来\n  let map = &#123;&#125;;\n  data.forEach(item => &#123;\n    map[item.id] = item;\n  &#125;);\n  // \n  data.forEach(item => &#123;\n    let parent = map[item.pid];\n    if(parent) &#123;\n      (parent.children || (parent.children = [])).push(item);\n    &#125; else &#123;\n      result.push(item);\n    &#125;\n  &#125;);\n  return result;\n&#125;\n复制代码\n\n17. 使用ES5和ES6求函数参数的和ES5：\nfunction sum() &#123;\n    let sum = 0\n    Array.prototype.forEach.call(arguments, function(item) &#123;\n        sum += item * 1\n    &#125;)\n    return sum\n&#125;\n复制代码\n\nES6：\nfunction sum(...nums) &#123;\n    let sum = 0\n    nums.forEach(function(item) &#123;\n        sum += item * 1\n    &#125;)\n    return sum\n&#125;\n复制代码\n\n18. 解析 URL Params 为对象let url = 'http://www.domain.com/?user=anonymous&amp;id=123&amp;id=456&amp;city=%E5%8C%97%E4%BA%AC&amp;enabled';\nparseParam(url)\n/* 结果\n&#123; user: 'anonymous',\n  id: [ 123, 456 ], // 重复出现的 key 要组装成数组，能被转成数字的就转成数字类型\n  city: '北京', // 中文需解码\n  enabled: true, // 未指定值得 key 约定为 true\n&#125;\n*/\n复制代码\nfunction parseParam(url) &#123;\n  const paramsStr = /.+\\?(.+)$/.exec(url)[1]; // 将 ? 后面的字符串取出来\n  const paramsArr = paramsStr.split('&amp;'); // 将字符串以 &amp; 分割后存到数组中\n  let paramsObj = &#123;&#125;;\n  // 将 params 存到对象中\n  paramsArr.forEach(param => &#123;\n    if (/=/.test(param)) &#123; // 处理有 value 的参数\n      let [key, val] = param.split('='); // 分割 key 和 value\n      val = decodeURIComponent(val); // 解码\n      val = /^\\d+$/.test(val) ? parseFloat(val) : val; // 判断是否转为数字\n      if (paramsObj.hasOwnProperty(key)) &#123; // 如果对象有 key，则添加一个值\n        paramsObj[key] = [].concat(paramsObj[key], val);\n      &#125; else &#123; // 如果对象没有这个 key，创建 key 并设置值\n        paramsObj[key] = val;\n      &#125;\n    &#125; else &#123; // 处理没有 value 的参数\n      paramsObj[param] = true;\n    &#125;\n  &#125;)\n  return paramsObj;\n&#125;\n复制代码\n\n三、场景应用1. 循环打印红黄绿下面来看一道比较典型的问题，通过这个问题来对比几种异步编程方法：红灯 3s 亮一次，绿灯 1s 亮一次，黄灯 2s 亮一次；如何让三个灯不断交替重复亮灯？\n三个亮灯函数：\nfunction red() &#123;\n    console.log('red');\n&#125;\nfunction green() &#123;\n    console.log('green');\n&#125;\nfunction yellow() &#123;\n    console.log('yellow');\n&#125;\n复制代码\n\n这道题复杂的地方在于需要“交替重复”亮灯，而不是“亮完一次”就结束了。\n（1）用 callback 实现const task = (timer, light, callback) => &#123;\n    setTimeout(() => &#123;\n        if (light === 'red') &#123;\n            red()\n        &#125;\n        else if (light === 'green') &#123;\n            green()\n        &#125;\n        else if (light === 'yellow') &#123;\n            yellow()\n        &#125;\n        callback()\n    &#125;, timer)\n&#125;\ntask(3000, 'red', () => &#123;\n    task(2000, 'green', () => &#123;\n        task(1000, 'yellow', Function.prototype)\n    &#125;)\n&#125;)\n复制代码\n\n这里存在一个 bug：代码只是完成了一次流程，执行后红黄绿灯分别只亮一次。该如何让它交替重复进行呢？\n上面提到过递归，可以递归亮灯的一个周期：\nconst step = () => &#123;\n    task(3000, 'red', () => &#123;\n        task(2000, 'green', () => &#123;\n            task(1000, 'yellow', step)\n        &#125;)\n    &#125;)\n&#125;\nstep()\n复制代码\n\n注意看黄灯亮的回调里又再次调用了 step 方法 以完成循环亮灯。\n（2）用 promise 实现const task = (timer, light) => \n    new Promise((resolve, reject) => &#123;\n        setTimeout(() => &#123;\n            if (light === 'red') &#123;\n                red()\n            &#125;\n            else if (light === 'green') &#123;\n                green()\n            &#125;\n            else if (light === 'yellow') &#123;\n                yellow()\n            &#125;\n            resolve()\n        &#125;, timer)\n    &#125;)\nconst step = () => &#123;\n    task(3000, 'red')\n        .then(() => task(2000, 'green'))\n        .then(() => task(2100, 'yellow'))\n        .then(step)\n&#125;\nstep()\n复制代码\n\n这里将回调移除，在一次亮灯结束后，resolve 当前 promise，并依然使用递归进行。\n（3）用 async/await 实现const taskRunner =  async () => &#123;\n    await task(3000, 'red')\n    await task(2000, 'green')\n    await task(2100, 'yellow')\n    taskRunner()\n&#125;\ntaskRunner()\n复制代码\n\n2. 实现每隔一秒打印 1,2,3,4// 使用闭包实现\nfor (var i = 0; i &lt; 5; i++) &#123;\n  (function(i) &#123;\n    setTimeout(function() &#123;\n      console.log(i);\n    &#125;, i * 1000);\n  &#125;)(i);\n&#125;\n// 使用 let 块级作用域\nfor (let i = 0; i &lt; 5; i++) &#123;\n  setTimeout(function() &#123;\n    console.log(i);\n  &#125;, i * 1000);\n&#125;\n复制代码\n\n3. 小孩报数问题有30个小孩儿，编号从1-30，围成一圈依此报数，1、2、3 数到 3 的小孩儿退出这个圈， 然后下一个小孩 重新报数 1、2、3，问最后剩下的那个小孩儿的编号是多少?\nfunction childNum(num, count)&#123;\n    let allplayer = [];    \n    for(let i = 0; i &lt; num; i++)&#123;\n        allplayer[i] = i + 1;\n    &#125;\n    \n    let exitCount = 0;    // 离开人数\n    let counter = 0;      // 记录报数\n    let curIndex = 0;     // 当前下标\n    \n    while(exitCount &lt; num - 1)&#123;\n        if(allplayer[curIndex] !== 0) counter++;    \n        \n        if(counter == count)&#123;\n            allplayer[curIndex] = 0;                 \n            counter = 0;\n            exitCount++;  \n        &#125;\n        curIndex++;\n        if(curIndex == num)&#123;\n            curIndex = 0               \n        &#125;;           \n    &#125;    \n    for(i = 0; i &lt; num; i++)&#123;\n        if(allplayer[i] !== 0)&#123;\n            return allplayer[i]\n        &#125;      \n    &#125;\n&#125;\nchildNum(30, 3)\n复制代码\n\n4. 用Promise实现图片的异步加载let imageAsync=(url)=>&#123;\n            return new Promise((resolve,reject)=>&#123;\n                let img = new Image();\n                img.src = url;\n                img.οnlοad=()=>&#123;\n                    console.log(`图片请求成功，此处进行通用操作`);\n                    resolve(image);\n                &#125;\n                img.οnerrοr=(err)=>&#123;\n                    console.log(`失败，此处进行失败的通用操作`);\n                    reject(err);\n                &#125;\n            &#125;)\n        &#125;\n        \nimageAsync(\"url\").then(()=>&#123;\n    console.log(\"加载成功\");\n&#125;).catch((error)=>&#123;\n    console.log(\"加载失败\");\n&#125;)\n复制代码\n\n5. 实现发布-订阅模式class EventCenter&#123;\n  // 1. 定义事件容器，用来装事件数组\n\tlet handlers = &#123;&#125;\n\n  // 2. 添加事件方法，参数：事件名 事件方法\n  addEventListener(type, handler) &#123;\n    // 创建新数组容器\n    if (!this.handlers[type]) &#123;\n      this.handlers[type] = []\n    &#125;\n    // 存入事件\n    this.handlers[type].push(handler)\n  &#125;\n\n  // 3. 触发事件，参数：事件名 事件参数\n  dispatchEvent(type, params) &#123;\n    // 若没有注册该事件则抛出错误\n    if (!this.handlers[type]) &#123;\n      return new Error('该事件未注册')\n    &#125;\n    // 触发事件\n    this.handlers[type].forEach(handler => &#123;\n      handler(...params)\n    &#125;)\n  &#125;\n\n  // 4. 事件移除，参数：事件名 要删除事件，若无第二个参数则删除该事件的订阅和发布\n  removeEventListener(type, handler) &#123;\n    if (!this.handlers[type]) &#123;\n      return new Error('事件无效')\n    &#125;\n    if (!handler) &#123;\n      // 移除事件\n      delete this.handlers[type]\n    &#125; else &#123;\n      const index = this.handlers[type].findIndex(el => el === handler)\n      if (index === -1) &#123;\n        return new Error('无该绑定事件')\n      &#125;\n      // 移除事件\n      this.handlers[type].splice(index, 1)\n      if (this.handlers[type].length === 0) &#123;\n        delete this.handlers[type]\n      &#125;\n    &#125;\n  &#125;\n&#125;\n复制代码\n\n6. 查找文章中出现频率最高的单词function findMostWord(article) &#123;\n  // 合法性判断\n  if (!article) return;\n  // 参数处理\n  article = article.trim().toLowerCase();\n  let wordList = article.match(/[a-z]+/g),\n    visited = [],\n    maxNum = 0,\n    maxWord = \"\";\n  article = \" \" + wordList.join(\"  \") + \" \";\n  // 遍历判断单词出现次数\n  wordList.forEach(function(item) &#123;\n    if (visited.indexOf(item) &lt; 0) &#123;\n      // 加入 visited \n      visited.push(item);\n      let word = new RegExp(\" \" + item + \" \", \"g\"),\n        num = article.match(word).length;\n      if (num > maxNum) &#123;\n        maxNum = num;\n        maxWord = item;\n      &#125;\n    &#125;\n  &#125;);\n  return maxWord + \"  \" + maxNum;\n&#125;\n复制代码\n\n7. 封装异步的fetch，使用async await方式来使用(async () => &#123;\n    class HttpRequestUtil &#123;\n        async get(url) &#123;\n            const res = await fetch(url);\n            const data = await res.json();\n            return data;\n        &#125;\n        async post(url, data) &#123;\n            const res = await fetch(url, &#123;\n                method: 'POST',\n                headers: &#123;\n                    'Content-Type': 'application/json'\n                &#125;,\n                body: JSON.stringify(data)\n            &#125;);\n            const result = await res.json();\n            return result;\n        &#125;\n        async put(url, data) &#123;\n            const res = await fetch(url, &#123;\n                method: 'PUT',\n                headers: &#123;\n                    'Content-Type': 'application/json'\n                &#125;,\n                data: JSON.stringify(data)\n            &#125;);\n            const result = await res.json();\n            return result;\n        &#125;\n        async delete(url, data) &#123;\n            const res = await fetch(url, &#123;\n                method: 'DELETE',\n                headers: &#123;\n                    'Content-Type': 'application/json'\n                &#125;,\n                data: JSON.stringify(data)\n            &#125;);\n            const result = await res.json();\n            return result;\n        &#125;\n    &#125;\n    const httpRequestUtil = new HttpRequestUtil();\n    const res = await httpRequestUtil.get('http://golderbrother.cn/');\n    console.log(res);\n&#125;)();\n复制代码\n\n8. 实现prototype继承所谓的原型链继承就是让新实例的原型等于父类的实例：\n//父方法\nfunction SupperFunction(flag1)&#123;\n    this.flag1 = flag1;\n&#125;\n\n//子方法\nfunction SubFunction(flag2)&#123;\n    this.flag2 = flag2;\n&#125;\n\n//父实例\nvar superInstance = new SupperFunction(true);\n\n//子继承父\nSubFunction.prototype = superInstance;\n\n//子实例\nvar subInstance = new SubFunction(false);\n//子调用自己和父的属性\nsubInstance.flag1;   // true\nsubInstance.flag2;   // false\n复制代码\n\n9. 实现双向数据绑定let obj = &#123;&#125;\nlet input = document.getElementById('input')\nlet span = document.getElementById('span')\n// 数据劫持\nObject.defineProperty(obj, 'text', &#123;\n  configurable: true,\n  enumerable: true,\n  get() &#123;\n    console.log('获取数据了')\n  &#125;,\n  set(newVal) &#123;\n    console.log('数据更新了')\n    input.value = newVal\n    span.innerHTML = newVal\n  &#125;\n&#125;)\n// 输入监听\ninput.addEventListener('keyup', function(e) &#123;\n  obj.text = e.target.value\n&#125;)\n复制代码\n\n10. 实现简单路由// hash路由\nclass Route&#123;\n  constructor()&#123;\n    // 路由存储对象\n    this.routes = &#123;&#125;\n    // 当前hash\n    this.currentHash = ''\n    // 绑定this，避免监听时this指向改变\n    this.freshRoute = this.freshRoute.bind(this)\n    // 监听\n    window.addEventListener('load', this.freshRoute, false)\n    window.addEventListener('hashchange', this.freshRoute, false)\n  &#125;\n  // 存储\n  storeRoute (path, cb) &#123;\n    this.routes[path] = cb || function () &#123;&#125;\n  &#125;\n  // 更新\n  freshRoute () &#123;\n    this.currentHash = location.hash.slice(1) || '/'\n    this.routes[this.currentHash]()\n  &#125;\n&#125;\n复制代码\n\n11. 实现斐波那契数列// 递归\nfunction fn (n)&#123;\n    if(n==0) return 0\n    if(n==1) return 1\n    return fn(n-2)+fn(n-1)\n&#125;\n// 优化\nfunction fibonacci2(n) &#123;\n    const arr = [1, 1, 2];\n    const arrLen = arr.length;\n\n    if (n &lt;= arrLen) &#123;\n        return arr[n];\n    &#125;\n\n    for (let i = arrLen; i &lt; n; i++) &#123;\n        arr.push(arr[i - 1] + arr[ i - 2]);\n    &#125;\n\n    return arr[arr.length - 1];\n&#125;\n// 非递归\nfunction fn(n) &#123;\n    let pre1 = 1;\n    let pre2 = 1;\n    let current = 2;\n\n    if (n &lt;= 2) &#123;\n        return current;\n    &#125;\n\n    for (let i = 2; i &lt; n; i++) &#123;\n        pre1 = pre2;\n        pre2 = current;\n        current = pre1 + pre2;\n    &#125;\n\n    return current;\n&#125;\n复制代码\n\n12. 字符串出现的不重复最长长度用一个滑动窗口装没有重复的字符，枚举字符记录最大值即可。用 map 维护字符的索引，遇到相同的字符，把左边界移动过去即可。挪动的过程中记录最大长度：\nvar lengthOfLongestSubstring = function (s) &#123;\n    let map = new Map();\n    let i = -1\n    let res = 0\n    let n = s.length\n    for (let j = 0; j &lt; n; j++) &#123;\n        if (map.has(s[j])) &#123;\n            i = Math.max(i, map.get(s[j]))\n        &#125;\n        res = Math.max(res, j - i)\n        map.set(s[j], j)\n    &#125;\n    return res\n&#125;;\n复制代码\n\n13. 使用 setTimeout 实现 setIntervalsetInterval 的作用是每隔一段指定时间执行一个函数，但是这个执行不是真的到了时间立即执行，它真正的作用是每隔一段时间将事件加入事件队列中去，只有当当前的执行栈为空的时候，才能去从事件队列中取出事件执行。所以可能会出现这样的情况，就是当前执行栈执行的时间很长，导致事件队列里边积累多个定时器加入的事件，当执行栈结束的时候，这些事件会依次执行，因此就不能到间隔一段时间执行的效果。\n针对 setInterval 的这个缺点，我们可以使用 setTimeout 递归调用来模拟 setInterval，这样我们就确保了只有一个事件结束了，我们才会触发下一个定时器事件，这样解决了 setInterval 的问题。\n实现思路是使用递归函数，不断地去执行 setTimeout 从而达到 setInterval 的效果\nfunction mySetInterval(fn, timeout) &#123;\n  // 控制器，控制定时器是否继续执行\n  var timer = &#123;\n    flag: true\n  &#125;;\n  // 设置递归函数，模拟定时器执行。\n  function interval() &#123;\n    if (timer.flag) &#123;\n      fn();\n      setTimeout(interval, timeout);\n    &#125;\n  &#125;\n  // 启动定时器\n  setTimeout(interval, timeout);\n  // 返回控制器\n  return timer;\n&#125;\n复制代码\n\n14. 实现 jsonp// 动态的加载js文件\nfunction addScript(src) &#123;\n  const script = document.createElement('script');\n  script.src = src;\n  script.type = \"text/javascript\";\n  document.body.appendChild(script);\n&#125;\naddScript(\"http://xxx.xxx.com/xxx.js?callback=handleRes\");\n// 设置一个全局的callback函数来接收回调结果\nfunction handleRes(res) &#123;\n  console.log(res);\n&#125;\n// 接口返回的数据格式\nhandleRes(&#123;a: 1, b: 2&#125;);\n复制代码\n\n15. 判断对象是否存在循环引用循环引用对象本来没有什么问题，但是序列化的时候就会发生问题，比如调用JSON.stringify()对该类对象进行序列化，就会报错: Converting circular structure to JSON.\n下面方法可以用来判断一个对象中是否已存在循环引用：\nconst isCycleObject = (obj,parent) => &#123;\n    const parentArr = parent || [obj];\n    for(let i in obj) &#123;\n        if(typeof obj[i] === 'object') &#123;\n            let flag = false;\n            parentArr.forEach((pObj) => &#123;\n                if(pObj === obj[i])&#123;\n                    flag = true;\n                &#125;\n            &#125;)\n            if(flag) return true;\n            flag = isCycleObject(obj[i],[...parentArr,obj[i]]);\n            if(flag) return true;\n        &#125;\n    &#125;\n    return false;\n&#125;\n\n\nconst a = 1;\nconst b = &#123;a&#125;;\nconst c = &#123;b&#125;;\nconst o = &#123;d:&#123;a:3&#125;,c&#125;\no.c.b.aa = a;\n\nconsole.log(isCycleObject(o)\n复制代码\n\n查找有序二维数组的目标值：\nvar findNumberIn2DArray = function(matrix, target) &#123;\n    if (matrix == null || matrix.length == 0) &#123;\n        return false;\n    &#125;\n    let row = 0;\n    let column = matrix[0].length - 1;\n    while (row &lt; matrix.length &amp;&amp; column >= 0) &#123;\n        if (matrix[row][column] == target) &#123;\n            return true;\n        &#125; else if (matrix[row][column] > target) &#123;\n            column--;\n        &#125; else &#123;\n            row++;\n        &#125;\n    &#125;\n    return false;\n&#125;;\n\n复制代码\n\n二维数组斜向打印：\nfunction printMatrix(arr)&#123;\n  let m = arr.length, n = arr[0].length\n\tlet res = []\n  \n  // 左上角，从0 到 n - 1 列进行打印\n  for (let k = 0; k &lt; n; k++) &#123;\n    for (let i = 0, j = k; i &lt; m &amp;&amp; j >= 0; i++, j--) &#123;\n      res.push(arr[i][j]);\n    &#125;\n  &#125;\n\n  // 右下角，从1 到 n - 1 行进行打印\n  for (let k = 1; k &lt; m; k++) &#123;\n    for (let i = k, j = n - 1; i &lt; m &amp;&amp; j >= 0; i++, j--) &#123;\n      res.push(arr[i][j]);\n    &#125;\n  &#125;\n  return res\n&#125;\n","slug":"常见手写题","date":"2022-04-10T12:22:32.000Z","categories_index":"知识点","tags_index":"面试","author_index":"LIYUNFU"},{"id":"d1e27f3ed5a223dfa20286d938d4cd8c","title":"性能优化面试题","content":"一、CDN1. CDN的概念CDN（Content Delivery Network，内容分发网络）是指一种通过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。\n典型的CDN系统由下面三个部分组成：\n\n分发服务系统： 最基本的工作单元就是Cache设备，cache（边缘cache）负责直接响应最终用户的访问请求，把缓存在本地的内容快速地提供给用户。同时cache还负责与源站点进行内容同步，把更新的内容以及本地没有的内容从源站点获取并保存在本地。Cache设备的数量、规模、总服务能力是衡量一个CDN系统服务能力的最基本的指标。\n负载均衡系统： 主要功能是负责对所有发起服务请求的用户进行访问调度，确定提供给用户的最终实际访问地址。两级调度体系分为全局负载均衡（GSLB）和本地负载均衡（SLB）。全局负载均衡主要根据用户就近性原则，通过对每个服务节点进行“最优”判断，确定向用户提供服务的cache的物理位置。本地负载均衡主要负责节点内部的设备负载均衡\n运营管理系统： 运营管理系统分为运营管理和网络管理子系统，负责处理业务层面的与外界系统交互所必须的收集、整理、交付工作，包含客户管理、产品管理、计费管理、统计分析等功能。\n\n2. CDN的作用CDN一般会用来托管Web资源（包括文本、图片和脚本等），可供下载的资源（媒体文件、软件、文档等），应用程序（门户网站等）。使用CDN来加速这些资源的访问。\n（1）在性能方面，引入CDN的作用在于：\n\n用户收到的内容来自最近的数据中心，延迟更低，内容加载更快\n部分资源请求分配给了CDN，减少了服务器的负载\n\n（2）在安全方面，CDN有助于防御DDoS、MITM等网络攻击：\n\n针对DDoS：通过监控分析异常流量，限制其请求频率\n针对MITM：从源服务器到 CDN 节点到 ISP（Internet Service Provider），全链路 HTTPS 通信\n\n除此之外，CDN作为一种基础的云服务，同样具有资源托管、按需扩展（能够应对流量高峰）等方面的优势。\n3. CDN的原理CDN和DNS有着密不可分的联系，先来看一下DNS的解析域名过程，在浏览器输入 www.test.com 的解析过程如下： （1） 检查浏览器缓存 （2）检查操作系统缓存，常见的如hosts文件 （3）检查路由器缓存 （4）如果前几步都没没找到，会向ISP(网络服务提供商)的LDNS服务器查询 （5）如果LDNS服务器没找到，会向根域名服务器(Root Server)请求解析，分为以下几步：\n\n根服务器返回顶级域名(TLD)服务器如.com，.cn，.org等的地址，该例子中会返回.com的地址\n接着向顶级域名服务器发送请求，然后会返回次级域名(SLD)服务器的地址，本例子会返回.test的地址\n接着向次级域名服务器发送请求，然后会返回通过域名查询到的目标IP，本例子会返回www.test.com的地址\nLocal DNS Server会缓存结果，并返回给用户，缓存在系统中\n\nCDN的工作原理： （1）用户未使用CDN缓存资源的过程：\n\n浏览器通过DNS对域名进行解析（就是上面的DNS解析过程），依次得到此域名对应的IP地址\n浏览器根据得到的IP地址，向域名的服务主机发送数据请求\n服务器向浏览器返回响应数据\n\n（2）用户使用CDN缓存资源的过程：\n\n对于点击的数据的URL，经过本地DNS系统的解析，发现该URL对应的是一个CDN专用的DNS服务器，DNS系统就会将域名解析权交给CNAME指向的CDN专用的DNS服务器。\nCND专用DNS服务器将CND的全局负载均衡设备IP地址返回给用户\n用户向CDN的全局负载均衡设备发起数据请求\nCDN的全局负载均衡设备根据用户的IP地址，以及用户请求的内容URL，选择一台用户所属区域的区域负载均衡设备，告诉用户向这台设备发起请求\n区域负载均衡设备选择一台合适的缓存服务器来提供服务，将该缓存服务器的IP地址返回给全局负载均衡设备\n全局负载均衡设备把服务器的IP地址返回给用户\n用户向该缓存服务器发起请求，缓存服务器响应用户的请求，将用户所需内容发送至用户终端。\n\n如果缓存服务器没有用户想要的内容，那么缓存服务器就会向它的上一级缓存服务器请求内容，以此类推，直到获取到需要的资源。最后如果还是没有，就会回到自己的服务器去获取资源。\n CNAME（意为：别名）：在域名解析中，实际上解析出来的指定域名对应的IP地址，或者该域名的一个CNAME，然后再根据这个CNAME来查找对应的IP地址。\n4. CDN的使用场景\n使用第三方的CDN服务：如果想要开源一些项目，可以使用第三方的CDN服务\n使用CDN进行静态资源的缓存：将自己网站的静态资源放在CDN上，比如js、css、图片等。可以将整个项目放在CDN上，完成一键部署。\n直播传送：直播本质上是使用流媒体进行传送，CDN也是支持流媒体传送的，所以直播完全可以使用CDN来提高访问速度。CDN在处理流媒体的时候与处理普通静态文件有所不同，普通文件如果在边缘节点没有找到的话，就会去上一层接着寻找，但是流媒体本身数据量就非常大，如果使用回源的方式，必然会带来性能问题，所以流媒体一般采用的都是主动推送的方式来进行。\n\n二、懒加载1. 懒加载的概念懒加载也叫做延迟加载、按需加载，指的是在长网页中延迟加载图片数据，是一种较好的网页性能优化的方式。在比较长的网页或应用中，如果图片很多，所有的图片都被加载出来，而用户只能看到可视窗口的那一部分图片数据，这样就浪费了性能。\n如果使用图片的懒加载就可以解决以上问题。在滚动屏幕之前，可视化区域之外的图片不会进行加载，在滚动屏幕时才加载。这样使得网页的加载速度更快，减少了服务器的负载。懒加载适用于图片较多，页面列表较长（长列表）的场景中。\n2. 懒加载的特点\n减少无用资源的加载：使用懒加载明显减少了服务器的压力和流量，同时也减小了浏览器的负担。\n提升用户体验: 如果同时加载较多图片，可能需要等待的时间较长，这样影响了用户体验，而使用懒加载就能大大的提高用户体验。\n防止加载过多图片而影响其他资源文件的加载 ：会影响网站应用的正常使用。\n\n3. 懒加载的实现原理图片的加载是由src引起的，当对src赋值时，浏览器就会请求图片资源。根据这个原理，我们使用HTML5 的data-xxx属性来储存图片的路径，在需要加载图片的时候，将data-xxx中图片的路径赋值给src，这样就实现了图片的按需加载，即懒加载。\n注意：data-xxx 中的xxx可以自定义，这里我们使用data-src来定义。\n懒加载的实现重点在于确定用户需要加载哪张图片，在浏览器中，可视区域内的资源就是用户需要的资源。所以当图片出现在可视区域时，获取图片的真实地址并赋值给图片即可。\n使用原生JavaScript实现懒加载：\n知识点：\n（1）window.innerHeight 是浏览器可视区的高度\n（2）document.body.scrollTop || document.documentElement.scrollTop 是浏览器滚动的过的距离\n（3）imgs.offsetTop 是元素顶部距离文档顶部的高度（包括滚动条的距离）\n（4）图片加载条件：img.offsetTop &lt; window.innerHeight + document.body.scrollTop;\n图示：  代码实现：\n&lt;div class=\"container\">\n     &lt;img src=\"loading.gif\"  data-src=\"pic.png\">\n     &lt;img src=\"loading.gif\"  data-src=\"pic.png\">\n     &lt;img src=\"loading.gif\"  data-src=\"pic.png\">\n     &lt;img src=\"loading.gif\"  data-src=\"pic.png\">\n     &lt;img src=\"loading.gif\"  data-src=\"pic.png\">\n     &lt;img src=\"loading.gif\"  data-src=\"pic.png\">\n&lt;/div>\n&lt;script>\nvar imgs = document.querySelectorAll('img');\nfunction lozyLoad()&#123;\n\t\tvar scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n\t\tvar winHeight= window.innerHeight;\n\t\tfor(var i=0;i &lt; imgs.length;i++)&#123;\n\t\t\tif(imgs[i].offsetTop &lt; scrollTop + winHeight )&#123;\n\t\t\t\timgs[i].src = imgs[i].getAttribute('data-src');\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n  window.onscroll = lozyLoad();\n&lt;/script>\n复制代码\n\n4. 懒加载与预加载的区别这两种方式都是提高网页性能的方式，两者主要区别是一个是提前加载，一个是迟缓甚至不加载。懒加载对服务器前端有一定的缓解压力作用，预加载则会增加服务器前端压力。\n\n懒加载也叫延迟加载，指的是在长网页中延迟加载图片的时机，当用户需要访问时，再去加载，这样可以提高网站的首屏加载速度，提升用户的体验，并且可以减少服务器的压力。它适用于图片很多，页面很长的电商网站的场景。懒加载的实现原理是，将页面上的图片的 src 属性设置为空字符串，将图片的真实路径保存在一个自定义属性中，当页面滚动的时候，进行判断，如果图片进入页面可视区域内，则从自定义属性中取出真实路径赋值给图片的 src 属性，以此来实现图片的延迟加载。\n预加载指的是将所需的资源提前请求加载到本地，这样后面在需要用到时就直接从缓存取资源。 通过预加载能够减少用户的等待时间，提高用户的体验。我了解的预加载的最常用的方式是使用 js 中的 image 对象，通过为 image 对象来设置 scr 属性，来实现图片的预加载。\n\n三、回流与重绘1. 回流与重绘的概念及触发条件（1）回流当渲染树中部分或者全部元素的尺寸、结构或者属性发生变化时，浏览器会重新渲染部分或者全部文档的过程就称为回流。\n下面这些操作会导致回流：\n\n页面的首次渲染\n浏览器的窗口大小发生变化\n元素的内容发生变化\n元素的尺寸或者位置发生变化\n元素的字体大小发生变化\n激活CSS伪类\n查询某些属性或者调用某些方法\n添加或者删除可见的DOM元素\n\n在触发回流（重排）的时候，由于浏览器渲染页面是基于流式布局的，所以当触发回流时，会导致周围的DOM元素重新排列，它的影响范围有两种：\n\n全局范围：从根节点开始，对整个渲染树进行重新布局\n局部范围：对渲染树的某部分或者一个渲染对象进行重新布局\n\n（2）重绘当页面中某些元素的样式发生变化，但是不会影响其在文档流中的位置时，浏览器就会对元素进行重新绘制，这个过程就是重绘。\n下面这些操作会导致回流：\n\ncolor、background 相关属性：background-color、background-image 等\noutline 相关属性：outline-color、outline-width 、text-decoration\nborder-radius、visibility、box-shadow\n\n注意： 当触发回流时，一定会触发重绘，但是重绘不一定会引发回流。\n2. 如何避免回流与重绘？减少回流与重绘的措施：\n\n操作DOM时，尽量在低层级的DOM节点进行操作\n不要使用table布局， 一个小的改动可能会使整个table进行重新布局\n使用CSS的表达式\n不要频繁操作元素的样式，对于静态页面，可以修改类名，而不是样式。\n使用absolute或者fixed，使元素脱离文档流，这样他们发生变化就不会影响其他元素\n避免频繁操作DOM，可以创建一个文档片段documentFragment，在它上面应用所有DOM操作，最后再把它添加到文档中\n将元素先设置display: none，操作结束后再把它显示出来。因为在display属性为none的元素上进行的DOM操作不会引发回流和重绘。\n将DOM的多个读操作（或者写操作）放在一起，而不是读写操作穿插着写。这得益于浏览器的渲染队列机制。\n\n浏览器针对页面的回流与重绘，进行了自身的优化——渲染队列\n浏览器会将所有的回流、重绘的操作放在一个队列中，当队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会对队列进行批处理。这样就会让多次的回流、重绘变成一次回流重绘。\n上面，将多个读操作（或者写操作）放在一起，就会等所有的读操作进入队列之后执行，这样，原本应该是触发多次回流，变成了只触发一次回流。\n3. 如何优化动画？对于如何优化动画，我们知道，一般情况下，动画需要频繁的操作DOM，就就会导致页面的性能问题，我们可以将动画的position属性设置为absolute或者fixed，将动画脱离文档流，这样他的回流就不会影响到页面了。\n4. documentFragment 是什么？用它跟直接操作 DOM 的区别是什么？MDN中对documentFragment的解释：\n\n\n\n\n\n\n\n\n\nDocumentFragment，文档片段接口，一个没有父对象的最小文档对象。它被作为一个轻量版的 Document使用，就像标准的document一样，存储由节点（nodes）组成的文档结构。与document相比，最大的区别是DocumentFragment不是真实 DOM 树的一部分，它的变化不会触发 DOM 树的重新渲染，且不会导致性能等问题。\n当我们把一个 DocumentFragment 节点插入文档树时，插入的不是 DocumentFragment 自身，而是它的所有子孙节点。在频繁的DOM操作时，我们就可以将DOM元素插入DocumentFragment，之后一次性的将所有的子孙节点插入文档中。和直接操作DOM相比，将DocumentFragment 节点插入DOM树时，不会触发页面的重绘，这样就大大提高了页面的性能。\n四、节流与防抖1. 对节流与防抖的理解\n函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求。\n函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件节流来降低事件调用的频率。\n\n防抖函数的应用场景：\n\n按钮提交场景：防⽌多次提交按钮，只执⾏最后提交的⼀次\n服务端验证场景：表单验证需要服务端配合，只执⾏⼀段连续的输⼊事件的最后⼀次，还有搜索联想词功能类似⽣存环境请⽤lodash.debounce\n\n节流函数的适⽤场景：\n\n拖拽场景：固定时间内只执⾏⼀次，防⽌超⾼频次触发位置变动\n缩放场景：监控浏览器resize\n动画场景：避免短时间内多次触发动画引起性能问题\n\n2. 实现节流函数和防抖函数函数防抖的实现：\nfunction debounce(fn, wait) &#123;\n  var timer = null;\n\n  return function() &#123;\n    var context = this,\n      args = [...arguments];\n\n    // 如果此时存在定时器的话，则取消之前的定时器重新记时\n    if (timer) &#123;\n      clearTimeout(timer);\n      timer = null;\n    &#125;\n\n    // 设置定时器，使事件间隔指定事件后执行\n    timer = setTimeout(() => &#123;\n      fn.apply(context, args);\n    &#125;, wait);\n  &#125;;\n&#125;\n复制代码\n\n函数节流的实现：\n// 时间戳版\nfunction throttle(fn, delay) &#123;\n  var preTime = Date.now();\n\n  return function() &#123;\n    var context = this,\n      args = [...arguments],\n      nowTime = Date.now();\n\n    // 如果两次时间间隔超过了指定时间，则执行函数。\n    if (nowTime - preTime >= delay) &#123;\n      preTime = Date.now();\n      return fn.apply(context, args);\n    &#125;\n  &#125;;\n&#125;\n\n// 定时器版\nfunction throttle (fun, wait)&#123;\n  let timeout = null\n  return function()&#123;\n    let context = this\n    let args = [...arguments]\n    if(!timeout)&#123;\n      timeout = setTimeout(() => &#123;\n        fun.apply(context, args)\n        timeout = null \n      &#125;, wait)\n    &#125;\n  &#125;\n&#125;\n复制代码\n\n五、图片优化1. 如何对项目中的图片进行优化？\n不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片完全可以用 CSS 去代替。\n对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然后去请求相应裁剪好的图片。\n小图使用 base64 格式\n将多个图标文件整合到一张图片中（雪碧图）\n选择正确的图片格式：\n对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP 格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好\n小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替\n照片使用 JPEG\n\n\n\n2. 常见的图片格式及使用场景（1）BMP，是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以BMP格式的图片通常是较大的文件。\n（2）GIF是无损的、采用索引色的点阵图。采用LZW压缩算法进行编码。文件小，是GIF格式的优点，同时，GIF格式还具有支持动画以及透明的优点。但是GIF格式仅支持8bit的索引色，所以GIF格式适用于对色彩要求不高同时需要文件体积较小的场景。\n（3）JPEG是有损的、采用直接色的点阵图。JPEG的图片的优点是采用了直接色，得益于更丰富的色彩，JPEG非常适合用来存储照片，与GIF相比，JPEG不适合用来存储企业Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较GIF更大。\n（4）PNG-8是无损的、使用索引色的点阵图。PNG是一种比较新的图片格式，PNG-8是非常好的GIF格式替代者，在可能的情况下，应该尽可能的使用PNG-8而不是GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8还支持透明度的调节，而GIF并不支持。除非需要动画的支持，否则没有理由使用GIF而不是PNG-8。\n（5）PNG-24是无损的、使用直接色的点阵图。PNG-24的优点在于它压缩了图片的数据，使得同样效果的图片，PNG-24格式的文件大小要比BMP小得多。当然，PNG24的图片还是要比JPEG、GIF、PNG-8大得多。\n（6）SVG是无损的矢量图。SVG是矢量图意味着SVG图片由直线和曲线以及绘制它们的方法组成。当放大SVG图片时，看到的还是线和曲线，而不会出现像素点。这意味着SVG图片在放大时，不会失真，所以它非常适合用来绘制Logo、Icon等。\n（7）WebP是谷歌开发的一种新图片格式，WebP是同时支持有损和无损压缩的、使用直接色的点阵图。从名字就可以看出来它是为Web而生的，什么叫为Web而生呢？就是说相同质量的图片，WebP具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。目前只有Chrome浏览器和Opera浏览器支持WebP格式，兼容性不太好。\n\n在无损压缩的情况下，相同质量的WebP图片，文件大小要比PNG小26%；\n在有损压缩的情况下，具有相同图片精度的WebP图片，文件大小要比JPEG小25%~34%；\nWebP图片格式支持图片透明度，一个无损压缩的WebP图片，如果要支持透明度只需要22%的格外文件大小。\n\n六、Webpack优化1. 如何提⾼webpack的打包速度?（1）优化 Loader对于 Loader 来说，影响打包效率首当其冲必属 Babel 了。因为 Babel 会将代码转为字符串生成 AST，然后对 AST 继续进行转变最后再生成新的代码，项目越大，转换代码越多，效率就越低。当然了，这是可以优化的。\n首先我们优化 Loader 的文件搜索范围\nmodule.exports = &#123;\n  module: &#123;\n    rules: [\n      &#123;\n        // js 文件才使用 babel\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        // 只在 src 文件夹下查找\n        include: [resolve('src')],\n        // 不会去查找的路径\n        exclude: /node_modules/\n      &#125;\n    ]\n  &#125;\n&#125;\n复制代码\n\n对于 Babel 来说，希望只作用在 JS 代码上的，然后 node_modules 中使用的代码都是编译过的，所以完全没有必要再去处理一遍。\n当然这样做还不够，还可以将 Babel 编译过的文件缓存起来，下次只需要编译更改过的代码文件即可，这样可以大幅度加快打包时间\nloader: 'babel-loader?cacheDirectory=true'\n复制代码\n\n（2）HappyPack受限于 Node 是单线程运行的，所以 Webpack 在打包的过程中也是单线程的，特别是在执行 Loader 的时候，长时间编译的任务很多，这样就会导致等待的情况。\nHappyPack 可以将 Loader 的同步执行转换为并行的，这样就能充分利用系统资源来加快打包效率了\nmodule: &#123;\n  loaders: [\n    &#123;\n      test: /\\.js$/,\n      include: [resolve('src')],\n      exclude: /node_modules/,\n      // id 后面的内容对应下面\n      loader: 'happypack/loader?id=happybabel'\n    &#125;\n  ]\n&#125;,\nplugins: [\n  new HappyPack(&#123;\n    id: 'happybabel',\n    loaders: ['babel-loader?cacheDirectory'],\n    // 开启 4 个线程\n    threads: 4\n  &#125;)\n]\n复制代码\n\n（3）DllPluginDllPlugin 可以将特定的类库提前打包然后引入。这种方式可以极大的减少打包类库的次数，只有当类库更新版本才有需要重新打包，并且也实现了将公共代码抽离成单独文件的优化方案。DllPlugin的使用方法如下：\n// 单独配置在一个文件中\n// webpack.dll.conf.js\nconst path = require('path')\nconst webpack = require('webpack')\nmodule.exports = &#123;\n  entry: &#123;\n    // 想统一打包的类库\n    vendor: ['react']\n  &#125;,\n  output: &#123;\n    path: path.join(__dirname, 'dist'),\n    filename: '[name].dll.js',\n    library: '[name]-[hash]'\n  &#125;,\n  plugins: [\n    new webpack.DllPlugin(&#123;\n      // name 必须和 output.library 一致\n      name: '[name]-[hash]',\n      // 该属性需要与 DllReferencePlugin 中一致\n      context: __dirname,\n      path: path.join(__dirname, 'dist', '[name]-manifest.json')\n    &#125;)\n  ]\n&#125;\n复制代码\n\n然后需要执行这个配置文件生成依赖文件，接下来需要使用 DllReferencePlugin 将依赖文件引入项目中\n// webpack.conf.js\nmodule.exports = &#123;\n  // ...省略其他配置\n  plugins: [\n    new webpack.DllReferencePlugin(&#123;\n      context: __dirname,\n      // manifest 就是之前打包出来的 json 文件\n      manifest: require('./dist/vendor-manifest.json'),\n    &#125;)\n  ]\n&#125;\n复制代码\n\n（4）代码压缩在 Webpack3 中，一般使用 UglifyJS 来压缩代码，但是这个是单线程运行的，为了加快效率，可以使用 webpack-parallel-uglify-plugin 来并行运行 UglifyJS，从而提高效率。\n在 Webpack4 中，不需要以上这些操作了，只需要将 mode 设置为 production 就可以默认开启以上功能。代码压缩也是我们必做的性能优化方案，当然我们不止可以压缩 JS 代码，还可以压缩 HTML、CSS 代码，并且在压缩 JS 代码的过程中，我们还可以通过配置实现比如删除 console.log 这类代码的功能。\n（5）其他可以通过一些小的优化点来加快打包速度\n\nresolve.extensions：用来表明文件后缀列表，默认查找顺序是 [&#39;.js&#39;, &#39;.json&#39;]，如果你的导入文件没有添加后缀就会按照这个顺序查找文件。我们应该尽可能减少后缀列表长度，然后将出现频率高的后缀排在前面\nresolve.alias：可以通过别名的方式来映射一个路径，能让 Webpack 更快找到路径\nmodule.noParse：如果你确定一个文件下没有其他依赖，就可以使用该属性让 Webpack 不扫描该文件，这种方式对于大型的类库很有帮助\n\n2. 如何减少 Webpack 打包体积（1）按需加载在开发 SPA 项目的时候，项目中都会存在很多路由页面。如果将这些页面全部打包进一个 JS 文件的话，虽然将多个请求合并了，但是同样也加载了很多并不需要的代码，耗费了更长的时间。那么为了首页能更快地呈现给用户，希望首页能加载的文件体积越小越好，这时候就可以使用按需加载，将每个路由页面单独打包为一个文件。当然不仅仅路由可以按需加载，对于 loadash 这种大型类库同样可以使用这个功能。\n按需加载的代码实现这里就不详细展开了，因为鉴于用的框架不同，实现起来都是不一样的。当然了，虽然他们的用法可能不同，但是底层的机制都是一样的。都是当使用的时候再去下载对应文件，返回一个 Promise，当 Promise 成功以后去执行回调。\n（2）Scope HoistingScope Hoisting 会分析出模块之间的依赖关系，尽可能的把打包出来的模块合并到一个函数中去。\n比如希望打包两个文件：\n// test.js\nexport const a = 1\n// index.js\nimport &#123; a &#125; from './test.js'\n复制代码\n\n对于这种情况，打包出来的代码会类似这样：\n[\n  /* 0 */\n  function (module, exports, require) &#123;\n    //...\n  &#125;,\n  /* 1 */\n  function (module, exports, require) &#123;\n    //...\n  &#125;\n]\n复制代码\n\n但是如果使用 Scope Hoisting ，代码就会尽可能的合并到一个函数中去，也就变成了这样的类似代码：\n[\n  /* 0 */\n  function (module, exports, require) &#123;\n    //...\n  &#125;\n]\n复制代码\n\n这样的打包方式生成的代码明显比之前的少多了。如果在 Webpack4 中你希望开启这个功能，只需要启用 optimization.concatenateModules 就可以了：\nmodule.exports = &#123;\n  optimization: &#123;\n    concatenateModules: true\n  &#125;\n&#125;\n复制代码\n\n（3）Tree ShakingTree Shaking 可以实现删除项目中未被引用的代码，比如：\n&#x2F;&#x2F; test.js\nexport const a &#x3D; 1\nexport const b &#x3D; 2\n&#x2F;&#x2F; index.js\nimport &#123; a &#125; from &#39;.&#x2F;test.js&#39;\n复制代码\n\n对于以上情况，test 文件中的变量 b 如果没有在项目中使用到的话，就不会被打包到文件中。\n如果使用 Webpack 4 的话，开启生产环境就会自动启动这个优化功能。\n3. 如何⽤webpack来优化前端性能？⽤webpack优化前端性能是指优化webpack的输出结果，让打包的最终结果在浏览器运⾏快速⾼效。\n\n压缩代码：删除多余的代码、注释、简化代码的写法等等⽅式。可以利⽤webpack的 UglifyJsPlugin 和 ParallelUglifyPlugin 来压缩JS⽂件， 利⽤ cssnano （css-loader?minimize）来压缩css\n利⽤CDN加速: 在构建过程中，将引⽤的静态资源路径修改为CDN上对应的路径。可以利⽤webpack对于 output 参数和各loader的 publicPath 参数来修改资源路径\nTree Shaking: 将代码中永远不会⾛到的⽚段删除掉。可以通过在启动webpack时追加参数 –optimize-minimize 来实现\nCode Splitting: 将代码按路由维度或者组件分块(chunk),这样做到按需加载,同时可以充分利⽤浏览器缓存\n提取公共第三⽅库: SplitChunksPlugin插件来进⾏公共模块抽取,利⽤浏览器缓存可以⻓期缓存这些⽆需频繁变动的公共代码\n\n4. 如何提⾼webpack的构建速度？\n多⼊⼝情况下，使⽤ CommonsChunkPlugin 来提取公共代码\n通过 externals 配置来提取常⽤库\n利⽤ DllPlugin 和 DllReferencePlugin 预编译资源模块 通过 DllPlugin 来对那些我们引⽤但是绝对不会修改的npm包来进⾏预编译，再通过 DllReferencePlugin 将预编译的模块加载进来。\n使⽤ Happypack 实现多线程加速编译\n使⽤ webpack-uglify-parallel 来提升 uglifyPlugin 的压缩速度。 原理上 webpack-uglify-parallel 采⽤了多核并⾏压缩来提升压缩速度\n使⽤ Tree-shaking 和 Scope Hoisting 来剔除多余代码\n\n优化答案性能优化\n让加载更快\n\n\n减少资源体积：压缩代码\n减少访问次数：合并代码，SSR服务端渲染，缓存\n\n\n\n\n缓存\n\n\n\n\n\n\n\n静态资源加hash后缀，根据文件内容计算hash\n文件内容不变，则hash不变，则url不变\nurl和文件不变，则会自动触发http缓存机制，返回304\n\n\n\n\n\n\n\n\nSSR\n\n\n\n\n\n\n\n服务端渲染：将网页和数据一起加载，一起渲染\n非SSR：先加载网页，再加载数据，再渲染数据\n\n\n\n\n\n\n\n使用更快的网络：CDN\n\n\n让渲染更快\n\n\nCSS放在head，JS放在body下面\n尽早开始执行JS，用DOMContentLoaded触发\n懒加载(图片懒加载，上滑加载更多)\n\n\n\n\n\n\n对DOM查询进行缓存\n\n\n\n\n\n\n频繁DOM操作，合并到一起插入DOM结构\n节流throttle 防抖 debounce\n\n\n\n\n防抖\n\n\n\n\n\n\n\n监听一个输入框，文字变化后触发change事件\n防抖：用户输入结束或暂停时，才会触发\n\n\n\n\n\n\n\n\n节流\n\n\n\n\n\n\n\n无论多快，都隔一定时间触发一次\n\n\n\n\n\n\n\n","slug":"性能优化面试题","date":"2022-04-10T12:21:21.000Z","categories_index":"知识点","tags_index":"面试","author_index":"LIYUNFU"},{"id":"50772cbc2a7ccf0256f62abf804cb4b7","title":"浏览器原理和计算机网络面试题","content":"计算机网络一、HTTP协议1. GET和POST的请求的区别Post 和 Get 是 HTTP 请求的两种方法，其区别如下：\n\n应用场景： GET 请求是一个幂等的请求，一般 Get 请求用于对服务器资源不会产生影响的场景，比如说请求一个网页的资源。而 Post 不是一个幂等的请求，一般用于对服务器资源会产生影响的情景，比如注册用户这一类的操作。\n是否缓存： 因为两者应用场景不同，浏览器一般会对 Get 请求缓存，但很少对 Post 请求缓存。\n发送的报文格式： Get 请求的报文中实体部分为空，Post 请求的报文中实体部分一般为向服务器发送的数据。\n安全性： Get 请求可以将请求的参数放入 url 中向服务器发送，这样的做法相对于 Post 请求来说是不太安全的，因为请求的 url 会被保留在历史记录中。\n请求长度： 浏览器由于对 url 长度的限制，所以会影响 get 请求发送数据时的长度。这个限制是浏览器规定的，并不是 RFC 规定的。\n参数类型： post 的参数传递支持更多的数据类型。\n\n2. POST和PUT请求的区别\nPUT请求是向服务器端发送数据，从而修改数据的内容，但是不会增加数据的种类等，也就是说无论进行多少次PUT操作，其结果并没有不同。（可以理解为时更新数据）\nPOST请求是向服务器端发送数据，该请求会改变数据的种类等资源，它会创建新的内容。（可以理解为是创建数据）\n\n3. 常见的HTTP请求头和响应头HTTP Request Header 常见的请求头：\n\nAccept:浏览器能够处理的内容类型\nAccept-Charset:浏览器能够显示的字符集\nAccept-Encoding：浏览器能够处理的压缩编码\nAccept-Language：浏览器当前设置的语言\nConnection：浏览器与服务器之间连接的类型\nCookie：当前页面设置的任何Cookie\nHost：发出请求的页面所在的域\nReferer：发出请求的页面的URL\nUser-Agent：浏览器的用户代理字符串\n\nHTTP Responses Header 常见的响应头：\n\nDate：表示消息发送的时间，时间的描述格式由rfc822定义\nserver:服务器名称\nConnection：浏览器与服务器之间连接的类型\nCache-Control：控制HTTP缓存\ncontent-type:表示后面的文档属于什么MIME类型\n\n常见的 Content-Type 属性值有以下四种：\n（1）application/x-www-form-urlencoded：浏览器的原生 form 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。该种方式提交的数据放在 body 里面，数据按照 key1=val1&amp;key2=val2 的方式进行编码，key 和 val 都进行了 URL转码。\n（2）multipart/form-data：该种方式也是一个常见的 POST 提交方式，通常表单上传文件时使用该种方式。\n（3）application/json：服务器消息主体是序列化后的 JSON 字符串。\n（4）text/xml：该种方式主要用来提交 XML 格式的数据。\n4. HTTP状态码304是多好还是少好服务器为了提高网站访问速度，对之前访问的部分页面指定缓存机制，当客户端在此对这些页面进行请求，服务器会根据缓存内容判断页面与之前是否相同，若相同便直接返回304，此时客户端调用缓存内容，不必进行二次下载。\n状态码304不应该认为是一种错误，而是对客户端有缓存情况下服务端的一种响应。\n搜索引擎蜘蛛会更加青睐内容源更新频繁的网站。通过特定时间内对网站抓取返回的状态码来调节对该网站的抓取频次。若网站在一定时间内一直处于304的状态，那么蜘蛛可能会降低对网站的抓取次数。相反，若网站变化的频率非常之快，每次抓取都能获取新内容，那么日积月累，的回访率也会提高。\n产生较多304状态码的原因：\n\n页面更新周期长或不更新\n纯静态页面或强制生成静态html\n\n304状态码出现过多会造成以下问题：\n\n网站快照停止；\n收录减少；\n权重下降。\n\n5. 常见的HTTP请求方法\nGET: 向服务器获取数据；\nPOST：将实体提交到指定的资源，通常会造成服务器资源的修改；\nPUT：上传文件，更新数据；\nDELETE：删除服务器上的对象；\nHEAD：获取报文首部，与GET相比，不返回报文主体部分；\nOPTIONS：询问支持的请求方法，用来跨域请求；\nCONNECT：要求在与代理服务器通信时建立隧道，使用隧道进行TCP通信；\nTRACE: 回显服务器收到的请求，主要⽤于测试或诊断。\n\n6. OPTIONS请求方法及使用场景OPTIONS是除了GET和POST之外的其中一种 HTTP请求方法。\nOPTIONS方法是用于请求获得由Request-URI标识的资源在请求/响应的通信过程中可以使用的功能选项。通过这个方法，客户端可以在采取具体资源请求之前，决定对该资源采取何种必要措施，或者了解服务器的性能。该请求方法的响应不能缓存。\nOPTIONS请求方法的主要用途有两个：\n\n获取服务器支持的所有HTTP请求方法；\n用来检查访问权限。例如：在进行 CORS 跨域资源共享时，对于复杂请求，就是使用 OPTIONS 方法发送嗅探请求，以判断是否有对指定资源的访问权限。\n\n7. HTTP 1.0 和 HTTP 1.1 之间有哪些区别？HTTP 1.0和 HTTP 1.1 有以下区别：\n\n连接方面，http1.0 默认使用非持久连接，而 http1.1 默认使用持久连接。http1.1 通过使用持久连接来使多个 http 请求复用同一个 TCP 连接，以此来避免使用非持久连接时每次需要建立连接的时延。\n资源请求方面，在 http1.0 中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，http1.1 则在请求头引入了 range 头域，它允许只请求资源的某个部分，即返回码是 206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。\n缓存方面，在 http1.0 中主要使用 header 里的 If-Modified-Since、Expires 来做为缓存判断的标准，http1.1 则引入了更多的缓存控制策略，例如 Etag、If-Unmodified-Since、If-Match、If-None-Match 等更多可供选择的缓存头来控制缓存策略。\nhttp1.1 中新增了 host 字段，用来指定服务器的域名。http1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此，请求消息中的 URL 并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机，并且它们共享一个IP地址。因此有了 host 字段，这样就可以将请求发往到同一台服务器上的不同网站。\nhttp1.1 相对于 http1.0 还新增了很多请求方法，如 PUT、HEAD、OPTIONS 等。\n\n8. HTTP 1.1 和 HTTP 2.0 的区别\n二进制协议：HTTP/2 是一个二进制协议。在 HTTP/1.1 版中，报文的头信息必须是文本（ASCII 编码），数据体可以是文本，也可以是二进制。HTTP/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为”帧”，可以分为头信息帧和数据帧。 帧的概念是它实现多路复用的基础。\n多路复用： HTTP/2 实现了多路复用，HTTP/2 仍然复用 TCP 连接，但是在一个连接里，客户端和服务器都可以同时发送多个请求或回应，而且不用按照顺序一一发送，这样就避免了”队头堵塞”【1】的问题。\n数据流： HTTP/2 使用了数据流的概念，因为 HTTP/2 的数据包是不按顺序发送的，同一个连接里面连续的数据包，可能属于不同的请求。因此，必须要对数据包做标记，指出它属于哪个请求。HTTP/2 将每个请求或回应的所有数据包，称为一个数据流。每个数据流都有一个独一无二的编号。数据包发送时，都必须标记数据流 ID ，用来区分它属于哪个数据流。\n头信息压缩： HTTP/2 实现了头信息压缩，由于 HTTP 1.1 协议不带状态，每次请求都必须附上所有信息。所以，请求的很多字段都是重复的，比如 Cookie 和 User Agent ，一模一样的内容，每次请求都必须附带，这会浪费很多带宽，也影响速度。HTTP/2 对这一点做了优化，引入了头信息压缩机制。一方面，头信息使用 gzip 或 compress 压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就能提高速度了。\n服务器推送： HTTP/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送。使用服务器推送提前给客户端推送必要的资源，这样就可以相对减少一些延迟时间。这里需要注意的是 http2 下服务器主动推送的是静态资源，和 WebSocket 以及使用 SSE 等方式向客户端发送即时数据的推送是不同的。\n\n【1】队头堵塞：\n\n\n\n\n\n\n\n\n\n队头阻塞是由 HTTP 基本的“请求 - 应答”模型所导致的。HTTP 规定报文必须是“一发一收”，这就形成了一个先进先出的“串行”队列。队列里的请求是没有优先级的，只有入队的先后顺序，排在最前面的请求会被最优先处理。如果队首的请求因为处理的太慢耽误了时间，那么队列里后面的所有请求也不得不跟着一起等待，结果就是其他的请求承担了不应有的时间成本，造成了队头堵塞的现象。\n9. HTTP和HTTPS协议的区别HTTP和HTTPS协议的主要区别如下：\n\nHTTPS协议需要CA证书，费用较高；而HTTP协议不需要；\nHTTP协议是超文本传输协议，信息是明文传输的，HTTPS则是具有安全性的SSL加密传输协议；\n使用不同的连接方式，端口也不同，HTTP协议端口是80，HTTPS协议端口是443；\nHTTP协议连接很简单，是无状态的；HTTPS协议是有SSL和HTTP协议构建的可进行加密传输、身份认证的网络协议，比HTTP更加安全。\n\n10. GET方法URL长度限制的原因实际上HTTP协议规范并没有对get方法请求的url长度进行限制，这个限制是特定的浏览器及服务器对它的限制。 IE对URL长度的限制是2083字节(2K+35)。由于IE浏览器对URL长度的允许值是最小的，所以开发过程中，只要URL不超过2083字节，那么在所有浏览器中工作都不会有问题。\nGET的长度值 = URL（2083）- （你的Domain+Path）-2（2是get请求中?=两个字符的长度）\n复制代码\n\n下面看一下主流浏览器对get方法中url的长度限制范围：\n\nMicrosoft Internet Explorer (Browser)：IE浏览器对URL的最大限制为2083个字符，如果超过这个数字，提交按钮没有任何反应。\nFirefox (Browser)：对于Firefox浏览器URL的长度限制为 65,536 个字符。\nSafari (Browser)：URL最大长度限制为 80,000 个字符。\nOpera (Browser)：URL最大长度限制为 190,000 个字符。\nGoogle (chrome)：URL最大长度限制为 8182 个字符。\n\n主流的服务器对get方法中url的长度限制范围：\n\nApache (Server)：能接受最大url长度为8192个字符。\nMicrosoft Internet Information Server(IIS)：能接受最大url的长度为16384个字符。\n\n根据上面的数据，可以知道，get方法中的URL长度最长不超过2083个字符，这样所有的浏览器和服务器都可能正常工作。\n11. 当在浏览器中输入 Google.com 并且按下回车之后发生了什么？（1）解析URL： 首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径。如果输入的 URL 中的协议或者主机名不合法，将会把地址栏中输入的内容传递给搜索引擎。如果没有问题，浏览器会检查 URL 中是否出现了非法字符，如果存在非法字符，则对非法字符进行转义后再进行下一过程。\n（2）缓存判断： 浏览器会判断所请求的资源是否在缓存里，如果请求的资源在缓存里并且没有失效，那么就直接使用，否则向服务器发起新的请求。\n（3）DNS解析： 下一步首先需要获取的是输入的 URL 中的域名的 IP 地址，首先会判断本地是否有该域名的 IP 地址的缓存，如果有则使用，如果没有则向本地 DNS 服务器发起请求。本地 DNS 服务器也会先检查是否存在缓存，如果没有就会先向根域名服务器发起请求，获得负责的顶级域名服务器的地址后，再向顶级域名服务器请求，然后获得负责的权威域名服务器的地址后，再向权威域名服务器发起请求，最终获得域名的 IP 地址后，本地 DNS 服务器再将这个 IP 地址返回给请求的用户。用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS 服务器向各级域名服务器发起请求属于迭代请求。\n（4）获取MAC地址： 当浏览器得到 IP 地址后，数据传输还需要知道目的主机 MAC 地址，因为应用层下发数据给传输层，TCP 协议会指定源端口号和目的端口号，然后下发给网络层。网络层会将本机地址作为源地址，获取的 IP 地址作为目的地址。然后将下发给数据链路层，数据链路层的发送需要加入通信双方的 MAC 地址，本机的 MAC 地址作为源 MAC 地址，目的 MAC 地址需要分情况处理。通过将 IP 地址与本机的子网掩码相与，可以判断是否与请求主机在同一个子网里，如果在同一个子网里，可以使用 APR 协议获取到目的主机的 MAC 地址，如果不在一个子网里，那么请求应该转发给网关，由它代为转发，此时同样可以通过 ARP 协议来获取网关的 MAC 地址，此时目的主机的 MAC 地址应该为网关的地址。\n（5）TCP三次握手： 下面是 TCP 建立连接的三次握手的过程，首先客户端向服务器发送一个 SYN 连接请求报文段和一个随机序号，服务端接收到请求后向服务器端发送一个 SYN ACK报文段，确认连接请求，并且也向客户端发送一个随机序号。客户端接收服务器的确认应答后，进入连接建立的状态，同时向服务器也发送一个ACK 确认报文段，服务器端接收到确认后，也进入连接建立状态，此时双方的连接就建立起来了。\n（6）HTTPS握手： 如果使用的是 HTTPS 协议，在通信前还存在 TLS 的一个四次握手的过程。首先由客户端向服务器端发送使用的协议的版本号、一个随机数和可以使用的加密方法。服务器端收到后，确认加密的方法，也向客户端发送一个随机数和自己的数字证书。客户端收到后，首先检查数字证书是否有效，如果有效，则再生成一个随机数，并使用证书中的公钥对随机数加密，然后发送给服务器端，并且还会提供一个前面所有内容的 hash 值供服务器端检验。服务器端接收后，使用自己的私钥对数据解密，同时向客户端发送一个前面所有内容的 hash 值供客户端检验。这个时候双方都有了三个随机数，按照之前所约定的加密方法，使用这三个随机数生成一把秘钥，以后双方通信前，就使用这个秘钥对数据进行加密后再传输。\n（7）返回数据： 当页面请求发送到服务器端后，服务器端会返回一个 html 文件作为响应，浏览器接收到响应后，开始对 html 文件进行解析，开始页面的渲染过程。\n（8）页面渲染： 浏览器首先会根据 html 文件构建 DOM 树，根据解析到的 css 文件构建 CSSOM 树，如果遇到 script 标签，则判端是否含有 defer 或者 async 属性，要不然 script 的加载和执行会造成页面的渲染的阻塞。当 DOM 树和 CSSOM 树建立好后，根据它们来构建渲染树。渲染树构建好后，会根据渲染树来进行布局。布局完成后，最后使用浏览器的 UI 接口对页面进行绘制。这个时候整个页面就显示出来了。\n（9）TCP四次挥手： 最后一步是 TCP 断开连接的四次挥手过程。若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态。\n12. 对keep-alive的理解HTTP1.0 中默认是在每次请求/应答，客户端和服务器都要新建一个连接，完成之后立即断开连接，这就是短连接。当使用Keep-Alive模式时，Keep-Alive功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接，这就是长连接。其使用方法如下：\n\nHTTP1.0版本是默认没有Keep-alive的（也就是默认会发送keep-alive），所以要想连接得到保持，必须手动配置发送Connection: keep-alive字段。若想断开keep-alive连接，需发送Connection:close字段；\nHTTP1.1规定了默认保持长连接，数据传输完成了保持TCP连接不断开，等待在同域名下继续用这个通道传输数据。如果需要关闭，需要客户端发送Connection：close首部字段。\n\nKeep-Alive的建立过程：\n\n客户端向服务器在发送请求报文同时在首部添加发送Connection字段\n服务器收到请求并处理 Connection字段\n服务器回送Connection:Keep-Alive字段给客户端\n客户端接收到Connection字段\nKeep-Alive连接建立成功\n\n服务端自动断开过程（也就是没有keep-alive）：\n\n客户端向服务器只是发送内容报文（不包含Connection字段）\n服务器收到请求并处理\n服务器返回客户端请求的资源并关闭连接\n客户端接收资源，发现没有Connection字段，断开连接\n\n客户端请求断开连接过程：\n\n客户端向服务器发送Connection:close字段\n服务器收到请求并处理connection字段\n服务器回送响应资源并断开连接\n客户端接收资源并断开连接\n\n开启Keep-Alive的优点：\n\n较少的CPU和内存的使⽤（由于同时打开的连接的减少了）；\n允许请求和应答的HTTP管线化；\n降低拥塞控制 （TCP连接减少了）；\n减少了后续请求的延迟（⽆需再进⾏握⼿）；\n报告错误⽆需关闭TCP连；\n\n开启Keep-Alive的缺点：\n\n长时间的Tcp连接容易导致系统资源无效占用，浪费系统资源。\n\n13. 页面有多张图片，HTTP是怎样的加载表现？\n在HTTP 1下，浏览器对一个域名下最大TCP连接数为6，所以会请求多次。可以用多域名部署解决。这样可以提高同时请求的数目，加快页面图片的获取速度。\n在HTTP 2下，可以一瞬间加载出来很多资源，因为，HTTP2支持多路复用，可以在一个TCP连接中发送多个HTTP请求。\n\n14. HTTP2的头部压缩算法是怎样的？HTTP2的头部压缩是HPACK算法。在客户端和服务器两端建立“字典”，用索引号表示重复的字符串，采用哈夫曼编码来压缩整数和字符串，可以达到50%~90%的高压缩率。\n具体来说:\n\n在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键值对，对于相同的数据，不再通过每次请求和响应发送；\n首部表在HTTP/2的连接存续期内始终存在，由客户端和服务器共同渐进地更新；\n每个新的首部键值对要么被追加到当前表的末尾，要么替换表中之前的值。\n\n例如下图中的两个请求， 请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销。 \n15. HTTP请求报文的是什么样的？请求报⽂有4部分组成:\n\n请求⾏\n请求头部\n空⾏\n请求体\n\n 其中： （1）请求⾏包括：请求⽅法字段、URL字段、HTTP协议版本字段。它们⽤空格分隔。例如，GET /index.html HTTP/1.1。 （2）请求头部:请求头部由关键字/值对组成，每⾏⼀对，关键字和值⽤英⽂冒号“:”分隔\n\nUser-Agent：产⽣请求的浏览器类型。\nAccept：客户端可识别的内容类型列表。\nHost：请求的主机名，允许多个域名同处⼀个IP地址，即虚拟主机。\n\n（3）请求体: post put等请求携带的数据 \n16. HTTP响应报文的是什么样的？请求报⽂有4部分组成:\n\n响应⾏\n响应头\n空⾏\n响应体\n\n\n\n响应⾏：由网络协议版本，状态码和状态码的原因短语组成，例如 HTTP/1.1 200 OK 。\n响应头：响应部⾸组成\n响应体：服务器响应的数据\n\n17. HTTP协议的优点和缺点HTTP 是超文本传输协议，它定义了客户端和服务器之间交换报文的格式和方式，默认使用 80 端口。它使用 TCP 作为传输层协议，保证了数据传输的可靠性。\nHTTP协议具有以下优点：\n\n支持客户端/服务器模式\n简单快速：客户向服务器请求服务时，只需传送请求方法和路径。由于 HTTP 协议简单，使得 HTTP 服务器的程序规模小，因而通信速度很快。\n无连接：无连接就是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接，采用这种方式可以节省传输时间。\n无状态：HTTP 协议是无状态协议，这里的状态是指通信过程的上下文信息。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能会导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就比较快。\n灵活：HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记。\n\nHTTP协议具有以下缺点：\n\n无状态： HTTP 是一个无状态的协议，HTTP 服务器不会保存关于客户的任何信息。\n明文传输： 协议中的报文使用的是文本形式，这就直接暴露给外界，不安全。\n不安全\n\n（1）通信使用明文（不加密），内容可能会被窃听； （2）不验证通信方的身份，因此有可能遭遇伪装； （3）无法证明报文的完整性，所以有可能已遭篡改；\n18. 说一下HTTP 3.0HTTP/3基于UDP协议实现了类似于TCP的多路复用数据流、传输可靠性等功能，这套功能被称为QUIC协议。 \n\n流量控制、传输可靠性功能：QUIC在UDP的基础上增加了一层来保证数据传输可靠性，它提供了数据包重传、拥塞控制、以及其他一些TCP中的特性。\n集成TLS加密功能：目前QUIC使用TLS1.3，减少了握手所花费的RTT数。\n多路复用：同一物理连接上可以有多个独立的逻辑数据流，实现了数据流的单独传输，解决了TCP的队头阻塞问题。\n\n\n\n快速握手：由于基于UDP，可以实现使用0 ~ 1个RTT来建立连接。\n\n19. HTTP协议的性能怎么样HTTP 协议是基于 TCP/IP，并且使用了请求-应答的通信模式，所以性能的关键就在这两点里。\n\n长连接\n\nHTTP协议有两种连接模式，一种是持续连接，一种非持续连接。 （1）非持续连接指的是服务器必须为每一个请求的对象建立和维护一个全新的连接。 （2）持续连接下，TCP 连接默认不关闭，可以被多个请求复用。采用持续连接的好处是可以避免每次建立 TCP 连接三次握手时所花费的时间。\n对于不同版本的采用不同的连接方式：\n\n在HTTP/1.0 每发起一个请求，都要新建一次 TCP 连接（三次握手），而且是串行请求，做了无畏的 TCP 连接建立和断开，增加了通信开销。该版本使用的非持续的连接，但是可以在请求时，加上 Connection: keep-a live 来要求服务器不要关闭 TCP 连接。\n在HTTP/1.1 提出了长连接的通信方式，也叫持久连接。这种方式的好处在于减少了 TCP 连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。该版本及以后版本默认采用的是持续的连接。目前对于同一个域，大多数浏览器支持同时建立 6 个持久连接。\n\n\n\n管道网络传输\n\nHTTP/1.1 采用了长连接的方式，这使得管道（pipeline）网络传输成为了可能。\n管道（pipeline）网络传输是指：可以在同一个 TCP 连接里面，客户端可以发起多个请求，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。但是服务器还是按照顺序回应请求。如果前面的回应特别慢，后面就会有许多请求排队等着。这称为队头堵塞。\n\n队头堵塞\n\nHTTP 传输的报文必须是一发一收，但是，里面的任务被放在一个任务队列中串行执行，一旦队首的请求处理太慢，就会阻塞后面请求的处理。这就是HTTP队头阻塞问题。\n队头阻塞的解决方案： （1）并发连接：对于一个域名允许分配多个长连接，那么相当于增加了任务队列，不至于一个队伍的任务阻塞其它所有任务。 （2）域名分片：将域名分出很多二级域名，它们都指向同样的一台服务器，能够并发的长连接数变多，解决了队头阻塞的问题。\n20. URL有哪些组成部分以下面的URL为例：**www.aspxfans.com:8080/news/index.…**\n从上面的URL可以看出，一个完整的URL包括以下几部分：\n\n协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在”HTTP”后面的“//”为分隔符；\n域名部分：该URL的域名部分为“www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用\n端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口（HTTP协议默认端口是80，HTTPS协议默认端口是443）；\n虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”；\n文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名；\n锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分；\n参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。\n\n21. 与缓存相关的HTTP请求头有哪些强缓存：\n\nExpires\nCache-Control\n\n协商缓存：\n\nEtag、If-None-Match\nLast-Modified、If-Modified-Since\n\n二、HTTPS协议1. 什么是HTTPS协议？超文本传输安全协议（Hypertext Transfer Protocol Secure，简称：HTTPS）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，利用SSL/TLS来加密数据包。HTTPS的主要目的是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。  HTTP协议采用明文传输信息，存在信息窃听、信息篡改和信息劫持的风险，而协议TLS/SSL具有身份验证、信息加密和完整性校验的功能，可以避免此类问题发生。\n安全层的主要职责就是对发起的HTTP请求的数据进行加密操作 和 对接收到的HTTP的内容进行解密操作。\n2. TLS/SSL的工作原理TLS/SSL全称安全传输层协议（Transport Layer Security）, 是介于TCP和HTTP之间的一层安全协议，不影响原有的TCP协议和HTTP协议，所以使用HTTPS基本上不需要对HTTP页面进行太多的改造。\nTLS/SSL的功能实现主要依赖三类基本算法：散列函数hash、对称加密、非对称加密。这三类算法的作用如下：\n\n基于散列函数验证信息的完整性\n对称加密算法采用协商的秘钥对数据加密\n非对称加密实现身份认证和秘钥协商\n\n\n（1）散列函数hash常见的散列函数有MD5、SHA1、SHA256。该函数的特点是单向不可逆，对输入数据非常敏感，输出的长度固定，任何数据的修改都会改变散列函数的结果，可以用于防止信息篡改并验证数据的完整性。\n特点： 在信息传输过程中，散列函数不能三都实现信息防篡改，由于传输是明文传输，中间人可以修改信息后重新计算信息的摘要，所以需要对传输的信息和信息摘要进行加密。\n（2）对称加密对称加密的方法是，双方使用同一个秘钥对数据进行加密和解密。但是对称加密的存在一个问题，就是如何保证秘钥传输的安全性，因为秘钥还是会通过网络传输的，一旦秘钥被其他人获取到，那么整个加密过程就毫无作用了。 这就要用到非对称加密的方法。\n常见的对称加密算法有AES-CBC、DES、3DES、AES-GCM等。相同的秘钥可以用于信息的加密和解密。掌握秘钥才能获取信息，防止信息窃听，其通讯方式是一对一。\n特点： 对称加密的优势就是信息传输使用一对一，需要共享相同的密码，密码的安全是保证信息安全的基础，服务器和N个客户端通信，需要维持N个密码记录且不能修改密码。\n（3）非对称加密非对称加密的方法是，我们拥有两个秘钥，一个是公钥，一个是私钥。公钥是公开的，私钥是保密的。用私钥加密的数据，只有对应的公钥才能解密，用公钥加密的数据，只有对应的私钥才能解密。我们可以将公钥公布出去，任何想和我们通信的客户， 都可以使用我们提供的公钥对数据进行加密，这样我们就可以使用私钥进行解密，这样就能保证数据的安全了。但是非对称加密有一个缺点就是加密的过程很慢，因此如果每次通信都使用非对称加密的方式的话，反而会造成等待时间过长的问题。\n常见的非对称加密算法有RSA、ECC、DH等。秘钥成对出现，一般称为公钥（公开）和私钥（保密）。公钥加密的信息只有私钥可以解开，私钥加密的信息只能公钥解开，因此掌握公钥的不同客户端之间不能相互解密信息，只能和服务器进行加密通信，服务器可以实现一对多的的通信，客户端也可以用来验证掌握私钥的服务器的身份。\n特点： 非对称加密的特点就是信息一对多，服务器只需要维持一个私钥就可以和多个客户端进行通信，但服务器发出的信息能够被所有的客户端解密，且该算法的计算复杂，加密的速度慢。\n综合上述算法特点，TLS/SSL的工作方式就是客户端使用非对称加密与服务器进行通信，实现身份的验证并协商对称加密使用的秘钥。对称加密算法采用协商秘钥对信息以及信息摘要进行加密通信，不同节点之间采用的对称秘钥不同，从而保证信息只能通信双方获取。这样就解决了两个方法各自存在的问题。\n3. 数字证书是什么？现在的方法也不一定是安全的，因为没有办法确定得到的公钥就一定是安全的公钥。可能存在一个中间人，截取了对方发给我们的公钥，然后将他自己的公钥发送给我们，当我们使用他的公钥加密后发送的信息，就可以被他用自己的私钥解密。然后他伪装成我们以同样的方法向对方发送信息，这样我们的信息就被窃取了，然而自己还不知道。为了解决这样的问题，可以使用数字证书。\n首先使用一种 Hash 算法来对公钥和其他信息进行加密，生成一个信息摘要，然后让有公信力的认证中心（简称 CA ）用它的私钥对消息摘要加密，形成签名。最后将原始的信息和签名合在一起，称为数字证书。当接收方收到数字证书的时候，先根据原始信息使用同样的 Hash 算法生成一个摘要，然后使用公证处的公钥来对数字证书中的摘要进行解密，最后将解密的摘要和生成的摘要进行对比，就能发现得到的信息是否被更改了。\n这个方法最要的是认证中心的可靠性，一般浏览器里会内置一些顶层的认证中心的证书，相当于我们自动信任了他们，只有这样才能保证数据的安全。 \n4. HTTPS通信（握手）过程HTTPS的通信过程如下：\n\n客户端向服务器发起请求，请求中包含使用的协议版本号、生成的一个随机数、以及客户端支持的加密方法。\n服务器端接收到请求后，确认双方使用的加密方法、并给出服务器的证书、以及一个服务器生成的随机数。\n客户端确认服务器证书有效后，生成一个新的随机数，并使用数字证书中的公钥，加密这个随机数，然后发给服 务器。并且还会提供一个前面所有内容的 hash 的值，用来供服务器检验。\n服务器使用自己的私钥，来解密客户端发送过来的随机数。并提供前面所有内容的 hash 值来供客户端检验。\n客户端和服务器端根据约定的加密方法使用前面的三个随机数，生成对话秘钥，以后的对话过程都使用这个秘钥来加密信息。\n\n5. HTTPS的特点HTTPS的优点如下：\n\n使用HTTPS协议可以认证用户和服务器，确保数据发送到正确的客户端和服务器；\n使用HTTPS协议可以进行加密传输、身份认证，通信更加安全，防止数据在传输过程中被窃取、修改，确保数据安全性；\nHTTPS是现行架构下最安全的解决方案，虽然不是绝对的安全，但是大幅增加了中间人攻击的成本；\n\nHTTPS的缺点如下：\n\nHTTPS需要做服务器和客户端双方的加密个解密处理，耗费更多服务器资源，过程复杂；\nHTTPS协议握手阶段比较费时，增加页面的加载时间；\nSSL证书是收费的，功能越强大的证书费用越高；\nHTTPS连接服务器端资源占用高很多，支持访客稍多的网站需要投入更大的成本；\nSSL证书需要绑定IP，不能再同一个IP上绑定多个域名。\n\n6. HTTPS是如何保证安全的？先理解两个概念：\n\n对称加密：即通信的双⽅都使⽤同⼀个秘钥进⾏加解密，对称加密虽然很简单性能也好，但是⽆法解决⾸次把秘钥发给对⽅的问题，很容易被⿊客拦截秘钥。\n⾮对称加密：\n\n\n私钥 + 公钥= 密钥对\n即⽤私钥加密的数据,只有对应的公钥才能解密,⽤公钥加密的数据,只有对应的私钥才能解密\n因为通信双⽅的⼿⾥都有⼀套⾃⼰的密钥对,通信之前双⽅会先把⾃⼰的公钥都先发给对⽅\n然后对⽅再拿着这个公钥来加密数据响应给对⽅,等到到了对⽅那⾥,对⽅再⽤⾃⼰的私钥进⾏解密\n\n⾮对称加密虽然安全性更⾼，但是带来的问题就是速度很慢，影响性能。\n解决⽅案：\n结合两种加密⽅式，将对称加密的密钥使⽤⾮对称加密的公钥进⾏加密，然后发送出去，接收⽅使⽤私钥进⾏解密得到对称加密的密钥，然后双⽅可以使⽤对称加密来进⾏沟通。\n此时⼜带来⼀个问题，中间⼈问题： 如果此时在客户端和服务器之间存在⼀个中间⼈,这个中间⼈只需要把原本双⽅通信互发的公钥,换成⾃⼰的公钥,这样中间⼈就可以轻松解密通信双⽅所发送的所有数据。\n所以这个时候需要⼀个安全的第三⽅颁发证书（CA），证明身份的身份，防⽌被中间⼈攻击。 证书中包括：签发者、证书⽤途、使⽤者公钥、使⽤者私钥、使⽤者的HASH算法、证书到期时间等。\n但是问题来了，如果中间⼈篡改了证书，那么身份证明是不是就⽆效了？这个证明就⽩买了，这个时候需要⼀个新的技术，数字签名。\n数字签名就是⽤CA⾃带的HASH算法对证书的内容进⾏HASH得到⼀个摘要，再⽤CA的私钥加密，最终组成数字签名。当别⼈把他的证书发过来的时候,我再⽤同样的Hash算法,再次⽣成消息摘要，然后⽤CA的公钥对数字签名解密,得到CA创建的消息摘要,两者⼀⽐,就知道中间有没有被⼈篡改了。这个时候就能最⼤程度保证通信的安全了。\n三、HTTP状态码状态码的类别：\n\n\n\n类别\n原因\n描述\n\n\n\n1xx\nInformational(信息性状态码)\n接受的请求正在处理\n\n\n2xx\nSuccess(成功状态码)\n请求正常处理完毕\n\n\n3xx\nRedirection(重定向状态码)\n需要进行附加操作一完成请求\n\n\n4xx\nClient Error (客户端错误状态码)\n服务器无法处理请求\n\n\n5xx\nServer Error(服务器错误状态码)\n服务器处理请求出错\n\n\n1. 2XX (Success 成功状态码)状态码2XX表示请求被正常处理了。\n（1）200 OK200 OK表示客户端发来的请求被服务器端正常处理了。\n（2）204 No Content该状态码表示客户端发送的请求已经在服务器端正常处理了，但是没有返回的内容，响应报文中不包含实体的主体部分。一般在只需要从客户端往服务器端发送信息，而服务器端不需要往客户端发送内容时使用。\n（3）206 Partial Content该状态码表示客户端进行了范围请求，而服务器端执行了这部分的 GET 请求。响应报文中包含由 Content-Range 指定范围的实体内容。\n2. 3XX (Redirection 重定向状态码)3XX 响应结果表明浏览器需要执行某些特殊的处理以正确处理请求。\n（1）301 Moved Permanently永久重定向。 该状态码表示请求的资源已经被分配了新的 URI，以后应使用资源指定的 URI。新的 URI 会在 HTTP 响应头中的 Location 首部字段指定。若用户已经把原来的URI保存为书签，此时会按照 Location 中新的URI重新保存该书签。同时，搜索引擎在抓取新内容的同时也将旧的网址替换为重定向之后的网址。\n使用场景：\n\n当我们想换个域名，旧的域名不再使用时，用户访问旧域名时用301就重定向到新的域名。其实也是告诉搜索引擎收录的域名需要对新的域名进行收录。\n在搜索引擎的搜索结果中出现了不带www的域名，而带www的域名却没有收录，这个时候可以用301重定向来告诉搜索引擎我们目标的域名是哪一个。\n\n（2）302 Found临时重定向。 该状态码表示请求的资源被分配到了新的 URI，希望用户（本次）能使用新的 URI 访问资源。和 301 Moved Permanently 状态码相似，但是 302 代表的资源不是被永久重定向，只是临时性质的。也就是说已移动的资源对应的 URI 将来还有可能发生改变。若用户把 URI 保存成书签，但不会像 301 状态码出现时那样去更新书签，而是仍旧保留返回 302 状态码的页面对应的 URI。同时，搜索引擎会抓取新的内容而保留旧的网址。因为服务器返回302代码，搜索引擎认为新的网址只是暂时的。\n使用场景：\n\n当我们在做活动时，登录到首页自动重定向，进入活动页面。\n未登陆的用户访问用户中心重定向到登录页面。\n访问404页面重新定向到首页。\n\n（3）303 See Other该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源。 303 状态码和 302 Found 状态码有着相似的功能，但是 303 状态码明确表示客户端应当采用 GET 方法获取资源。\n303 状态码通常作为 PUT 或 POST 操作的返回结果，它表示重定向链接指向的不是新上传的资源，而是另外一个页面，比如消息确认页面或上传进度页面。而请求重定向页面的方法要总是使用 GET。\n注意：\n\n当 301、302、303 响应状态码返回时，几乎所有的浏览器都会把 POST 改成GET，并删除请求报文内的主体，之后请求会再次自动发送。\n301、302 标准是禁止将 POST 方法变成 GET方法的，但实际大家都会这么做。\n\n（4）304 Not Modified浏览器缓存相关。 该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况。304 状态码返回时，不包含任何响应的主体部分。304 虽然被划分在 3XX 类别中，但是和重定向没有关系。\n带条件的请求（Http 条件请求）：使用 Get方法 请求，请求报文中包含（if-match、if-none-match、if-modified-since、if-unmodified-since、if-range）中任意首部。\n状态码304并不是一种错误，而是告诉客户端有缓存，直接使用缓存中的数据。返回页面的只有头部信息，是没有内容部分的，这样在一定程度上提高了网页的性能。\n（5）307 Temporary Redirect307表示临时重定向。 该状态码与 302 Found 有着相同含义，尽管 302 标准禁止 POST 变成 GET，但是实际使用时还是这样做了。\n307 会遵守浏览器标准，不会从 POST 变成 GET。但是对于处理请求的行为时，不同浏览器还是会出现不同的情况。规范要求浏览器继续向 Location 的地址 POST 内容。规范要求浏览器继续向 Location 的地址 POST 内容。\n3. 4XX (Client Error 客户端错误状态码)4XX 的响应结果表明客户端是发生错误的原因所在。\n（1）400 Bad Request该状态码表示请求报文中存在语法错误。当错误发生时，需修改请求的内容后再次发送请求。另外，浏览器会像 200 OK 一样对待该状态码。\n（2）401 Unauthorized该状态码表示发送的请求需要有通过 HTTP 认证(BASIC 认证、DIGEST 认证)的认证信息。若之前已进行过一次请求，则表示用户认证失败\n返回含有 401 的响应必须包含一个适用于被请求资源的 WWW-Authenticate 首部用以质询(challenge)用户信息。当浏览器初次接收到 401 响应，会弹出认证用的对话窗口。\n以下情况会出现401：\n\n401.1 - 登录失败。\n401.2 - 服务器配置导致登录失败。\n401.3 - 由于 ACL 对资源的限制而未获得授权。\n401.4 - 筛选器授权失败。\n401.5 - ISAPI/CGI 应用程序授权失败。\n401.7 - 访问被 Web 服务器上的 URL 授权策略拒绝。这个错误代码为 IIS 6.0 所专用。\n\n（3）403 Forbidden该状态码表明请求资源的访问被服务器拒绝了，服务器端没有必要给出详细理由，但是可以在响应报文实体的主体中进行说明。进入该状态后，不能再继续进行验证。该访问是永久禁止的，并且与应用逻辑密切相关。\nIIS 定义了许多不同的 403 错误，它们指明更为具体的错误原因：\n\n403.1 - 执行访问被禁止。\n403.2 - 读访问被禁止。\n403.3 - 写访问被禁止。\n403.4 - 要求 SSL。\n403.5 - 要求 SSL 128。\n403.6 - IP 地址被拒绝。\n403.7 - 要求客户端证书。\n403.8 - 站点访问被拒绝。\n403.9 - 用户数过多。\n403.10 - 配置无效。\n403.11 - 密码更改。\n403.12 - 拒绝访问映射表。\n403.13 - 客户端证书被吊销。\n403.14 - 拒绝目录列表。\n403.15 - 超出客户端访问许可。\n403.16 - 客户端证书不受信任或无效。\n403.17 - 客户端证书已过期或尚未生效\n403.18 - 在当前的应用程序池中不能执行所请求的 URL。这个错误代码为 IIS 6.0 所专用。\n403.19 - 不能为这个应用程序池中的客户端执行 CGI。这个错误代码为 IIS 6.0 所专用。\n403.20 - Passport 登录失败。这个错误代码为 IIS 6.0 所专用。\n\n（4）404 Not Found该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。 以下情况会出现404：\n\n404.0 -（无） – 没有找到文件或目录。\n404.1 - 无法在所请求的端口上访问 Web 站点。\n404.2 - Web 服务扩展锁定策略阻止本请求。\n404.3 - MIME 映射策略阻止本请求。\n\n（5）405 Method Not Allowed该状态码表示客户端请求的方法虽然能被服务器识别，但是服务器禁止使用该方法。GET 和 HEAD 方法，服务器应该总是允许客户端进行访问。客户端可以通过 OPTIONS 方法（预检）来查看服务器允许的访问方法, 如下\nAccess-Control-Allow-Methods: GET,HEAD,PUT,PATCH,POST,DELETE\n复制代码\n\n4. 5XX (Server Error 服务器错误状态码)5XX 的响应结果表明服务器本身发生错误.\n（1）500 Internal Server Error该状态码表明服务器端在执行请求时发生了错误。也有可能是 Web 应用存在的 bug 或某些临时的故障。\n（2）502 Bad Gateway该状态码表明扮演网关或代理角色的服务器，从上游服务器中接收到的响应是无效的。注意，502 错误通常不是客户端能够修复的，而是需要由途经的 Web 服务器或者代理服务器对其进行修复。以下情况会出现502：\n\n502.1 - CGI （通用网关接口）应用程序超时。\n502.2 - CGI （通用网关接口）应用程序出错。\n\n（3）503 Service Unavailable该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上状况需要的时间，最好写入 RetryAfter 首部字段再返回给客户端。\n使用场景：\n\n服务器停机维护时，主动用503响应请求；\nnginx 设置限速，超过限速，会返回503。\n\n（4）504 Gateway Timeout该状态码表示网关或者代理的服务器无法在规定的时间内获得想要的响应。他是HTTP 1.1中新加入的。\n使用场景：代码执行时间超时，或者发生了死循环。\n5. 总结（1）2XX 成功\n\n200 OK，表示从客户端发来的请求在服务器端被正确处理\n204 No content，表示请求成功，但响应报文不含实体的主体部分\n205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容\n206 Partial Content，进行范围请求\n\n（2）3XX 重定向\n\n301 moved permanently，永久性重定向，表示资源已被分配了新的 URL\n302 found，临时性重定向，表示资源临时被分配了新的 URL\n303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源\n304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况\n307 temporary redirect，临时重定向，和302含义类似，但是期望客户端保持请求方法不变向新的地址发出请求\n\n（3）4XX 客户端错误\n\n400 bad request，请求报文存在语法错误\n401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息\n403 forbidden，表示对请求资源的访问被服务器拒绝\n404 not found，表示在服务器上没有找到请求的资源\n\n（4）5XX 服务器错误\n\n500 internal sever error，表示服务器端在执行请求时发生了错误\n501 Not Implemented，表示服务器不支持当前请求所需要的某个功能\n503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求\n\n6. 同样是重定向，307，303，302的区别？302是http1.0的协议状态码，在http1.1版本的时候为了细化302状态码⼜出来了两个303和307。 303明确表示客户端应当采⽤get⽅法获取资源，他会把POST请求变为GET请求进⾏重定向。 307会遵照浏览器标准，不会从post变为get。\n四、DNS协议介绍1. DNS 协议是什么概念： DNS 是域名系统 (Domain Name System) 的缩写，提供的是一种主机名到 IP 地址的转换服务，就是我们常说的域名系统。它是一个由分层的 DNS 服务器组成的分布式数据库，是定义了主机如何查询这个分布式数据库的方式的应用层协议。能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。\n作用： 将域名解析为IP地址，客户端向DNS服务器（DNS服务器有自己的IP地址）发送域名查询请求，DNS服务器告知客户机Web服务器的 IP 地址。\n2. DNS同时使用TCP和UDP协议？DNS占用53号端口，同时使用TCP和UDP协议。 （1）在区域传输的时候使用TCP协议\n\n辅域名服务器会定时（一般3小时）向主域名服务器进行查询以便了解数据是否有变动。如有变动，会执行一次区域传送，进行数据同步。区域传送使用TCP而不是UDP，因为数据同步传送的数据量比一个请求应答的数据量要多得多。\nTCP是一种可靠连接，保证了数据的准确性。\n\n（2）在域名解析的时候使用UDP协议\n\n客户端向DNS服务器查询域名，一般返回的内容都不超过512字节，用UDP传输即可。不用经过三次握手，这样DNS服务器负载更低，响应更快。理论上说，客户端也可以指定向DNS服务器查询时用TCP，但事实上，很多DNS服务器进行配置的时候，仅支持UDP查询包。\n\n3. DNS完整的查询过程DNS服务器解析域名的过程：\n\n首先会在浏览器的缓存中查找对应的IP地址，如果查找到直接返回，若找不到继续下一步\n将请求发送给本地DNS服务器，在本地域名服务器缓存中查询，如果查找到，就直接将查找结果返回，若找不到继续下一步\n本地DNS服务器向根域名服务器发送请求，根域名服务器会返回一个所查询域的顶级域名服务器地址\n本地DNS服务器向顶级域名服务器发送请求，接受请求的服务器查询自己的缓存，如果有记录，就返回查询结果，如果没有就返回相关的下一级的权威域名服务器的地址\n本地DNS服务器向权威域名服务器发送请求，域名服务器返回对应的结果\n本地DNS服务器将返回结果保存在缓存中，便于下次使用\n本地DNS服务器将返回结果返回给浏览器\n\n比如要查询 www.baidu.com 的 IP 地址，首先会在浏览器的缓存中查找是否有该域名的缓存，如果不存在就将请求发送到本地的 DNS 服务器中，本地DNS服务器会判断是否存在该域名的缓存，如果不存在，则向根域名服务器发送一个请求，根域名服务器返回负责 .com 的顶级域名服务器的 IP 地址的列表。然后本地 DNS 服务器再向其中一个负责 .com 的顶级域名服务器发送一个请求，负责 .com 的顶级域名服务器返回负责 .baidu 的权威域名服务器的 IP 地址列表。然后本地 DNS 服务器再向其中一个权威域名服务器发送一个请求，最后权威域名服务器返回一个对应的主机名的 IP 地址列表。\n4. 迭代查询与递归查询实际上，DNS解析是一个包含迭代查询和递归查询的过程。\n\n递归查询指的是查询请求发出后，域名服务器代为向下一级域名服务器发出请求，最后向用户返回查询的最终结果。使用递归 查询，用户只需要发出一次查询请求。\n迭代查询指的是查询请求后，域名服务器返回单次查询的结果。下一级的查询由用户自己请求。使用迭代查询，用户需要发出 多次的查询请求。\n\n一般我们向本地 DNS 服务器发送请求的方式就是递归查询，因为我们只需要发出一次请求，然后本地 DNS 服务器返回给我 们最终的请求结果。而本地 DNS 服务器向其他域名服务器请求的过程是迭代查询的过程，因为每一次域名服务器只返回单次 查询的结果，下一级的查询由本地 DNS 服务器自己进行。\n5. DNS 记录和报文DNS 服务器中以资源记录的形式存储信息，每一个 DNS 响应报文一般包含多条资源记录。一条资源记录的具体的格式为\n（Name，Value，Type，TTL）\n复制代码\n\n其中 TTL 是资源记录的生存时间，它定义了资源记录能够被其他的 DNS 服务器缓存多长时间。\n常用的一共有四种 Type 的值，分别是 A、NS、CNAME 和 MX ，不同 Type 的值，对应资源记录代表的意义不同：\n\n如果 Type = A，则 Name 是主机名，Value 是主机名对应的 IP 地址。因此一条记录为 A 的资源记录，提供了标 准的主机名到 IP 地址的映射。\n如果 Type = NS，则 Name 是个域名，Value 是负责该域名的 DNS 服务器的主机名。这个记录主要用于 DNS 链式 查询时，返回下一级需要查询的 DNS 服务器的信息。\n如果 Type = CNAME，则 Name 为别名，Value 为该主机的规范主机名。该条记录用于向查询的主机返回一个主机名 对应的规范主机名，从而告诉查询主机去查询这个主机名的 IP 地址。主机别名主要是为了通过给一些复杂的主机名提供 一个便于记忆的简单的别名。\n如果 Type = MX，则 Name 为一个邮件服务器的别名，Value 为邮件服务器的规范主机名。它的作用和 CNAME 是一 样的，都是为了解决规范主机名不利于记忆的缺点。\n\n五、网络模型1. OSI七层模型ISO为了更好的使网络应用更为普及，推出了OSI参考模型。 \n（1）应用层OSI参考模型中最靠近用户的一层，是为计算机用户提供应用接口，也为用户直接提供各种网络服务。我们常见应用层的网络服务协议有：HTTP，HTTPS，FTP，POP3、SMTP等。\n\n在客户端与服务器中经常会有数据的请求，这个时候就是会用到http(hyper text transfer protocol)(超文本传输协议)或者https.在后端设计数据接口时，我们常常使用到这个协议。\nFTP是文件传输协议，在开发过程中，个人并没有涉及到，但是我想，在一些资源网站，比如百度网盘``迅雷应该是基于此协议的。\nSMTP是simple mail transfer protocol（简单邮件传输协议）。在一个项目中，在用户邮箱验证码登录的功能时，使用到了这个协议。\n\n（2）表示层表示层提供各种用于应用层数据的编码和转换功能,确保一个系统的应用层发送的数据能被另一个系统的应用层识别。如果必要，该层可提供一种标准表示形式，用于将计算机内部的多种数据格式转换成通信中采用的标准表示形式。数据压缩和加密也是表示层可提供的转换功能之一。\n在项目开发中，为了方便数据传输，可以使用base64对数据进行编解码。如果按功能来划分，base64应该是工作在表示层。\n（3）会话层会话层就是负责建立、管理和终止表示层实体之间的通信会话。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。\n（4）传输层传输层建立了主机端到端的链接，传输层的作用是为上层协议提供端到端的可靠和透明的数据传输服务，包括处理差错控制和流量控制等问题。该层向高层屏蔽了下层数据通信的细节，使高层用户看到的只是在两个传输实体间的一条主机到主机的、可由用户控制和设定的、可靠的数据通路。我们通常说的，TCP UDP就是在这一层。端口号既是这里的“端”。\n（5）网络层本层通过IP寻址来建立两个节点之间的连接，为源端的运输层送来的分组，选择合适的路由和交换节点，正确无误地按照地址传送给目的端的运输层。就是通常说的IP层。这一层就是我们经常说的IP协议层。IP协议是Internet的基础。我们可以这样理解，网络层规定了数据包的传输路线，而传输层则规定了数据包的传输方式。\n（6）数据链路层将比特组合成字节,再将字节组合成帧,使用链路层地址 (以太网使用MAC地址)来访问介质,并进行差错检测。 网络层与数据链路层的对比，通过上面的描述，我们或许可以这样理解，网络层是规划了数据包的传输路线，而数据链路层就是传输路线。不过，在数据链路层上还增加了差错控制的功能。\n（7）物理层实际最终信号的传输是通过物理层实现的。通过物理介质传输比特流。规定了电平、速度和电缆针脚。常用设备有（各种物理设备）集线器、中继器、调制解调器、网线、双绞线、同轴电缆。这些都是物理层的传输介质。\nOSI七层模型通信特点：对等通信 对等通信，为了使数据分组从源传送到目的地，源端OSI模型的每一层都必须与目的端的对等层进行通信，这种通信方式称为对等层通信。在每一层通信过程中，使用本层自己协议进行通信。\n2. TCP/IP五层协议TCP/IP五层协议和OSI的七层协议对应关系如下： \n\n**应用层 (application layer)**：直接为应用进程提供服务。应用层协议定义的是应用进程间通讯和交互的规则，不同的应用有着不同的应用层协议，如 HTTP协议（万维网服务）、FTP协议（文件传输）、SMTP协议（电子邮件）、DNS（域名查询）等。\n\n传输层 (transport layer)\n：有时也译为运输层，它负责为两台主机中的进程提供通信服务。该层主要有以下两种协议：\n\n传输控制协议 (Transmission Control Protocol，TCP)：提供面向连接的、可靠的数据传输服务，数据传输的基本单位是报文段（segment）；\n用户数据报协议 (User Datagram Protocol，UDP)：提供无连接的、尽最大努力的数据传输服务，但不保证数据传输的可靠性，数据传输的基本单位是用户数据报。\n\n\n**网络层 (internet layer)**：有时也译为网际层，它负责为两台主机提供通信服务，并通过选择合适的路由将数据传递到目标主机。\n\n**数据链路层 (data link layer)**：负责将网络层交下来的 IP 数据报封装成帧，并在链路的两个相邻节点间传送帧，每一帧都包含数据和必要的控制信息（如同步信息、地址信息、差错控制等）。\n\n**物理层 (physical Layer)**：确保数据可以在各种物理媒介上进行传输，为数据的传输提供可靠的环境。\n\n\n从上图中可以看出，TCP/IP模型比OSI模型更加简洁，它把应用层/表示层/会话层全部整合为了应用层。\n在每一层都工作着不同的设备，比如我们常用的交换机就工作在数据链路层的，一般的路由器是工作在网络层的。  在每一层实现的协议也各不同，即每一层的服务也不同，下图列出了每层主要的传输协议： \n同样，TCP/IP五层协议的通信方式也是对等通信： \n六、TCP与UDP1. TCP 和 UDP的概念及特点TCP 和 UDP都是传输层协议，他们都属于TCP/IP协议族：\n（1）UDP\nUDP的全称是用户数据报协议，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。\n它的特点如下：\n1）面向无连接\n首先 UDP 是不需要和 TCP一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。\n具体来说就是：\n\n在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了\n在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作\n\n2）有单播，多播，广播的功能\nUDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。\n3）面向报文\n发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文\n4）不可靠性\n首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。\n并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。\n再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。\n5）头部开销小，传输数据报文时是很高效的。 \nUDP 头部包含了以下几个数据：\n\n两个十六位的端口号，分别为源端口（可选字段）和目标端口\n整个数据报文的长度\n整个数据报文的检验和（IPv4 可选字段），该字段用于发现头部信息和数据中的错误\n\n因此 UDP 的头部开销小，只有8字节，相比 TCP 的至少20字节要少得多，在传输数据报文时是很高效的。\n（2）TCP TCP的全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议。TCP 是面向连接的、可靠的流协议（流就是指不间断的数据结构）。\n它有以下几个特点：\n1）面向连接\n面向连接，是指发送数据之前必须在两端建立连接。建立连接的方法是“三次握手”，这样能建立可靠的连接。建立连接，是为数据的可靠传输打下了基础。\n2）仅支持单播传输\n每条TCP传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播和广播传输方式。\n3）面向字节流\nTCP不像UDP一样那样一个个报文独立地传输，而是在不保留报文边界的情况下以字节流方式进行传输。\n4）可靠传输\n对于可靠传输，判断丢包、误码靠的是TCP的段编号以及确认号。TCP为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的字节发回一个相应的确认(ACK)；如果发送端实体在合理的往返时延(RTT)内未收到确认，那么对应的数据（假设丢失了）将会被重传。\n5）提供拥塞控制\n当网络出现拥塞的时候，TCP能够减小向网络注入数据的速率和数量，缓解拥塞。\n6）提供全双工通信\nTCP允许通信双方的应用程序在任何时候都能发送数据，因为TCP连接的两端都设有缓存，用来临时存放双向通信的数据。当然，TCP可以立即发送一个数据段，也可以缓存一段时间以便一次发送更多的数据段（最大的数据段大小取决于MSS）\n2. TCP和UDP的区别\n\n\n\nUDP\nTCP\n\n\n\n是否连接\n无连接\n面向连接\n\n\n是否可靠\n不可靠传输，不使用流量控制和拥塞控制\n可靠传输（数据顺序和正确性），使用流量控制和拥塞控制\n\n\n连接对象个数\n支持一对一，一对多，多对一和多对多交互通信\n只能是一对一通信\n\n\n传输方式\n面向报文\n面向字节流\n\n\n首部开销\n首部开销小，仅8字节\n首部最小20字节，最大60字节\n\n\n适用场景\n适用于实时应用，例如视频会议、直播\n适用于要求可靠传输的应用，例如文件传输\n\n\n3. TCP和UDP的使用场景\nTCP应用场景： 效率要求相对低，但对准确性要求相对高的场景。因为传输中需要对数据确认、重发、排序等操作，相比之下效率没有UDP高。例如：文件传输（准确高要求高、但是速度可以相对慢）、接受邮件、远程登录。\nUDP应用场景： 效率要求相对高，对准确性要求相对低的场景。例如：QQ聊天、在线视频、网络语音电话（即时通讯，速度要求高，但是出现偶尔断续不是太大问题，并且此处完全不可以使用重发机制）、广播通信（广播、多播）。\n\n4. UDP协议为什么不可靠？UDP在传输数据之前不需要先建立连接，远地主机的运输层在接收到UDP报文后，不需要确认，提供不可靠交付。总结就以下四点：\n\n不保证消息交付：不确认，不重传，无超时\n不保证交付顺序：不设置包序号，不重排，不会发生队首阻塞\n不跟踪连接状态：不必建立连接或重启状态机\n不进行拥塞控制：不内置客户端或网络反馈机制\n\n5. TCP的重传机制由于TCP的下层网络（网络层）可能出现丢失、重复或失序的情况，TCP协议提供可靠数据传输服务。为保证数据传输的正确性，TCP会重传其认为已丢失（包括报文中的比特错误）的包。TCP使用两套独立的机制来完成重传，一是基于时间，二是基于确认信息。\nTCP在发送一个数据之后，就开启一个定时器，若是在这个时间内没有收到发送数据的ACK确认报文，则对该报文进行重传，在达到一定次数还没有成功时放弃并发送一个复位信号。\n6. TCP的拥塞控制机制TCP的拥塞控制机制主要是以下四种机制：\n\n慢启动（慢开始）\n拥塞避免\n快速重传\n快速恢复\n\n（1）慢启动（慢开始）\n\n在开始发送的时候设置cwnd = 1（cwnd指的是拥塞窗口）\n思路：开始的时候不要发送大量数据，而是先测试一下网络的拥塞程度，由小到大增加拥塞窗口的大小。\n为了防止cwnd增长过大引起网络拥塞，设置一个慢开始门限(ssthresh 状态变量)\n当cnwd &lt; ssthresh，使用慢开始算法\n当cnwd = ssthresh，既可使用慢开始算法，也可以使用拥塞避免算法\n当cnwd &gt; ssthresh，使用拥塞避免算法\n\n\n\n（2）拥塞避免\n\n拥塞避免未必能够完全避免拥塞，是说在拥塞避免阶段将拥塞窗口控制为按线性增长，使网络不容易出现阻塞。\n思路： 让拥塞窗口cwnd缓慢的增大，即每经过一个返回时间RTT就把发送方的拥塞控制窗口加一\n无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞，就把慢开始门限设置为出现拥塞时的发送窗口大小的一半。然后把拥塞窗口设置为1，执行慢开始算法。如图所示:  其中，判断网络出现拥塞的根据就是没有收到确认，虽然没有收到确认可能是其他原因的分组丢失，但是因为无法判定，所以都当做拥塞来处理。\n\n（3）快速重传\n\n快重传要求接收方在收到一个失序的报文段后就立即发出重复确认(为的是使发送方及早知道有报文段没有到达对方)。发送方只要连续收到三个重复确认就立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。\n由于不需要等待设置的重传计时器到期，能尽早重传未被确认的报文段，能提高整个网络的吞吐量\n\n（4）快速恢复\n\n当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh门限减半。但是接下去并不执行慢开始算法。\n考虑到如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将cwnd设置为ssthresh的大小，然后执行拥塞避免算法。 \n\n7. TCP的流量控制机制一般来说，流量控制就是为了让发送方发送数据的速度不要太快，要让接收方来得及接收。TCP采用大小可变的滑动窗口进行流量控制，窗口大小的单位是字节。这里说的窗口大小其实就是每次传输的数据大小。\n\n当一个连接建立时，连接的每一端分配一个缓冲区来保存输入的数据，并将缓冲区的大小发送给另一端。\n当数据到达时，接收方发送确认，其中包含了自己剩余的缓冲区大小。（剩余的缓冲区空间的大小被称为窗口，指出窗口大小的通知称为窗口通告 。接收方在发送的每一确认中都含有一个窗口通告。）\n如果接收方应用程序读数据的速度能够与数据到达的速度一样快，接收方将在每一确认中发送一个正的窗口通告。\n如果发送方操作的速度快于接收方，接收到的数据最终将充满接收方的缓冲区，导致接收方通告一个零窗口 。发送方收到一个零窗口通告时，必须停止发送，直到接收方重新通告一个正的窗口。\n\n8. TCP的可靠传输机制TCP 的可靠传输机制是基于连续 ARQ 协议和滑动窗口协议的。\nTCP 协议在发送方维持了一个发送窗口，发送窗口以前的报文段是已经发送并确认了的报文段，发送窗口中包含了已经发送但 未确认的报文段和允许发送但还未发送的报文段，发送窗口以后的报文段是缓存中还不允许发送的报文段。当发送方向接收方发 送报文时，会依次发送窗口内的所有报文段，并且设置一个定时器，这个定时器可以理解为是最早发送但未收到确认的报文段。 如果在定时器的时间内收到某一个报文段的确认回答，则滑动窗口，将窗口的首部向后滑动到确认报文段的后一个位置，此时如 果还有已发送但没有确认的报文段，则重新设置定时器，如果没有了则关闭定时器。如果定时器超时，则重新发送所有已经发送 但还未收到确认的报文段，并将超时的间隔设置为以前的两倍。当发送方收到接收方的三个冗余的确认应答后，这是一种指示， 说明该报文段以后的报文段很有可能发生丢失了，那么发送方会启用快速重传的机制，就是当前定时器结束前，发送所有的已发 送但确认的报文段。\n接收方使用的是累计确认的机制，对于所有按序到达的报文段，接收方返回一个报文段的肯定回答。如果收到了一个乱序的报文 段，那么接方会直接丢弃，并返回一个最近的按序到达的报文段的肯定回答。使用累计确认保证了返回的确认号之前的报文段都 已经按序到达了，所以发送窗口可以移动到已确认报文段的后面。\n发送窗口的大小是变化的，它是由接收窗口剩余大小和网络中拥塞程度来决定的，TCP 就是通过控制发送窗口的长度来控制报文 段的发送速率。\n但是 TCP 协议并不完全和滑动窗口协议相同，因为许多的 TCP 实现会将失序的报文段给缓存起来，并且发生重传时，只会重 传一个报文段，因此 TCP 协议的可靠传输机制更像是窗口滑动协议和选择重传协议的一个混合体。\n9. TCP的三次握手和四次挥手（1）三次握手 三次握手（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。\n刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。\n\n第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN，此时客户端处于 SYN_SEND 状态。\n\n\n\n\n\n\n\n\n\n\n首部的同步位SYN=1，初始序号seq=x，SYN=1的报文段不能携带数据，但要消耗掉一个序号。\n\n第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN。同时会把客户端的 ISN + 1 作为ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_REVD 的状态。\n\n\n\n\n\n\n\n\n\n\n在确认报文段中SYN=1，ACK=1，确认号ack=x+1，初始序号seq=y\n\n第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。\n\n\n\n\n\n\n\n\n\n\n确认报文段ACK=1，确认号ack=y+1，序号seq=x+1（初始为seq=x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号。\n那为什么要三次握手呢？两次不行吗？\n\n为了确认双方的接收能力和发送能力都正常\n如果是用两次握手，则会出现下面这种情况：\n\n\n\n\n\n\n\n\n\n\n如客户端发出连接请求，但因连接请求报文丢失而未收到确认，于是客户端再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接，客户端共发出了两个连接请求报文段，其中第一个丢失，第二个到达了服务端，但是第一个丢失的报文段只是在某些网络结点长时间滞留了，延误到连接释放以后的某个时间才到达服务端，此时服务端误认为客户端又发出一次新的连接请求，于是就向客户端发出确认报文段，同意建立连接，不采用三次握手，只要服务端发出确认，就建立新的连接了，此时客户端忽略服务端发来的确认，也不发送数据，则服务端一致等待客户端发送数据，浪费资源。\n简单来说就是以下三步：\n\n第一次握手： 客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态。\n第二次握手： 服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。\n第三次握手： 当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。\n\nTCP 三次握手的建立连接的过程就是相互确认初始序号的过程，告诉对方，什么样序号的报文段能够被正确接收。 第三次握手的作用是客户端对服务器端的初始序号的确认。如果只使用两次握手，那么服务器就没有办法知道自己的序号是否 已被确认。同时这样也是为了防止失效的请求报文段被服务器接收，而出现错误的情况。\n（2）四次挥手 刚开始双方都处于 ESTABLISHED 状态，假如是客户端先发起关闭请求。四次挥手的过程如下：\n\n第一次挥手： 客户端会发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。\n\n\n\n\n\n\n\n\n\n\n即发出连接释放报文段（FIN=1，序号seq=u），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认。\n\n第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。\n\n\n\n\n\n\n\n\n\n\n即服务端收到连接释放报文段后即发出确认报文段（ACK=1，确认号ack=u+1，序号seq=v），服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。\n\n第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。\n\n\n\n\n\n\n\n\n\n\n即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），服务端进入LAST_ACK（最后确认）状态，等待客户端的确认。\n\n第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。\n\n\n\n\n\n\n\n\n\n\n即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK=1，seq=u+1，ack=w+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态。\n那为什么需要四次挥手呢？\n\n\n\n\n\n\n\n\n\n因为当服务端收到客户端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当服务端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉客户端，“你发的FIN报文我收到了”。只有等到我服务端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送，故需要四次挥手。\n简单来说就是以下四步：\n\n第一次挥手： 若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。\n第二次挥手：服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。\n第三次挥手：服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。\n第四次挥手： 客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态。\n\nTCP 使用四次挥手的原因是因为 TCP 的连接是全双工的，所以需要双方分别释放到对方的连接，单独一方的连接释放，只代 表不能再向对方发送数据，连接处于的是半释放的状态。\n最后一次挥手中，客户端会等待一段时间再关闭的原因，是为了防止发送给服务器的确认报文段丢失或者出错，从而导致服务器 端不能正常关闭。\n10. TCP粘包是怎么回事，如何处理?默认情况下, TCP 连接会启⽤延迟传送算法 (Nagle 算法), 在数据发送之前缓存他们. 如果短时间有多个数据发送, 会缓冲到⼀起作⼀次发送 (缓冲⼤⼩⻅ socket.bufferSize ), 这样可以减少 IO 消耗提⾼性能.\n如果是传输⽂件的话, 那么根本不⽤处理粘包的问题, 来⼀个包拼⼀个包就好了。但是如果是多条消息, 或者是别的⽤途的数据那么就需要处理粘包.\n下面看⼀个例⼦, 连续调⽤两次 send 分别发送两段数据 data1 和 data2, 在接收端有以下⼏种常⻅的情况: A. 先接收到 data1, 然后接收到 data2 . B. 先接收到 data1 的部分数据, 然后接收到 data1 余下的部分以及 data2 的全部. C. 先接收到了 data1 的全部数据和 data2 的部分数据, 然后接收到了 data2 的余下的数据. D. ⼀次性接收到了 data1 和 data2 的全部数据.\n其中的 BCD 就是我们常⻅的粘包的情况. ⽽对于处理粘包的问题, 常⻅的解决⽅案有:\n\n多次发送之前间隔⼀个等待时间：只需要等上⼀段时间再进⾏下⼀次 send 就好, 适⽤于交互频率特别低的场景. 缺点也很明显, 对于⽐较频繁的场景⽽⾔传输效率实在太低，不过⼏乎不⽤做什么处理.\n关闭 Nagle 算法：关闭 Nagle 算法, 在 Node.js 中你可以通过 socket.setNoDelay() ⽅法来关闭 Nagle 算法, 让每⼀次 send 都不缓冲直接发送。该⽅法⽐较适⽤于每次发送的数据都⽐较⼤ (但不是⽂件那么⼤), 并且频率不是特别⾼的场景。如果是每次发送的数据量⽐较⼩, 并且频率特别⾼的, 关闭 Nagle 纯属⾃废武功。另外, 该⽅法不适⽤于⽹络较差的情况, 因为 Nagle 算法是在服务端进⾏的包合并情况, 但是如果短时间内客户端的⽹络情况不好, 或者应⽤层由于某些原因不能及时将 TCP 的数据 recv, 就会造成多个包在客户端缓冲从⽽粘包的情况。 (如果是在稳定的机房内部通信那么这个概率是⽐较⼩可以选择忽略的)\n进⾏封包/拆包： 封包/拆包是⽬前业内常⻅的解决⽅案了。即给每个数据包在发送之前, 于其前/后放⼀些有特征的数据, 然后收到数据的时 候根据特征数据分割出来各个数据包。\n\n11. 为什么udp不会粘包？\nTCP协议是⾯向流的协议，UDP是⾯向消息的协议。UDP段都是⼀条消息，应⽤程序必须以消息为单位提取数据，不能⼀次提取任意字节的数据\nUDP具有保护消息边界，在每个UDP包中就有了消息头（消息来源地址，端⼝等信息），这样对于接收端来说就容易进⾏区分处理了。传输协议把数据当作⼀条独⽴的消息在⽹上传输，接收端只能接收独⽴的消息。接收端⼀次只能接收发送端发出的⼀个数据包,如果⼀次接受数据的⼤⼩⼩于发送端⼀次发送的数据⼤⼩，就会丢失⼀部分数据，即使丢失，接受端也不会分两次去接收。\n\n七、WebSocket1. 对 WebSocket 的理解WebSocket是HTML5提供的一种浏览器与服务器进行全双工通讯的网络技术，属于应用层协议。它基于TCP传输协议，并复用HTTP的握手通道。浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接， 并进行双向数据传输。\nWebSocket 的出现就解决了半双工通信的弊端。它最大的特点是：服务器可以向客户端主动推动消息，客户端也可以主动向服务器推送消息。\nWebSocket原理：客户端向 WebSocket 服务器通知（notify）一个带有所有接收者ID（recipients IDs）的事件（event），服务器接收后立即通知所有活跃的（active）客户端，只有ID在接收者ID序列中的客户端才会处理这个事件。 \nWebSocket 特点的如下：\n\n支持双向通信，实时性更强\n可以发送文本，也可以发送二进制数据‘’\n建立在TCP协议之上，服务端的实现比较容易\n数据格式比较轻量，性能开销小，通信高效\n没有同源限制，客户端可以与任意服务器通信\n协议标识符是ws（如果加密，则为wss），服务器网址就是 URL\n与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。\n\nWebsocket的使用方法如下： \n在客户端中：\n// 在index.html中直接写WebSocket，设置服务端的端口号为 9999\nlet ws = new WebSocket('ws://localhost:9999');\n// 在客户端与服务端建立连接后触发\nws.onopen = function() &#123;\n    console.log(\"Connection open.\"); \n    ws.send('hello');\n&#125;;\n// 在服务端给客户端发来消息的时候触发\nws.onmessage = function(res) &#123;\n    console.log(res);       // 打印的是MessageEvent对象\n    console.log(res.data);  // 打印的是收到的消息\n&#125;;\n// 在客户端与服务端建立关闭后触发\nws.onclose = function(evt) &#123;\n  console.log(\"Connection closed.\");\n&#125;; \n复制代码\n\n2. 即时通讯的实现：短轮询、长轮询、SSE 和 WebSocket 间的区别？短轮询和长轮询的目的都是用于实现客户端和服务器端的一个即时通讯。\n短轮询的基本思路： 浏览器每隔一段时间向浏览器发送 http 请求，服务器端在收到请求后，不论是否有数据更新，都直接进行响应。这种方式实现的即时通信，本质上还是浏览器发送请求，服务器接受请求的一个过程，通过让客户端不断的进行请求，使得客户端能够模拟实时地收到服务器端的数据的变化。这种方式的优点是比较简单，易于理解。缺点是这种方式由于需要不断的建立 http 连接，严重浪费了服务器端和客户端的资源。当用户增加时，服务器端的压力就会变大，这是很不合理的。\n长轮询的基本思路： 首先由客户端向服务器发起请求，当服务器收到客户端发来的请求后，服务器端不会直接进行响应，而是先将这个请求挂起，然后判断服务器端数据是否有更新。如果有更新，则进行响应，如果一直没有数据，则到达一定的时间限制才返回。客户端 JavaScript 响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接。长轮询和短轮询比起来，它的优点是明显减少了很多不必要的 http 请求次数，相比之下节约了资源。长轮询的缺点在于，连接挂起也会导致资源的浪费。\nSSE 的基本思想： 服务器使用流信息向服务器推送信息。严格地说，http 协议无法做到服务器主动推送信息。但是，有一种变通方法，就是服务器向客户端声明，接下来要发送的是流信息。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流，视频播放就是这样的例子。SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 http 协议，目前除了 IE/Edge，其他浏览器都支持。它相对于前面两种方式来说，不需要建立过多的 http 请求，相比之下节约了资源。\nWebSocket 是 HTML5 定义的一个新协议议，与传统的 http 协议不同，该协议允许由服务器主动的向客户端推送信息。使用 WebSocket 协议的缺点是在服务器端的配置比较复杂。WebSocket 是一个全双工的协议，也就是通信双方是平等的，可以相互发送消息，而 SSE 的方式是单向通信的，只能由服务器端向客户端推送信息，如果客户端需要发送信息就是属于下一个 http 请求了。\n上面的四个通信协议，前三个都是基于HTTP协议的。\n对于这四种即使通信协议，从性能的角度来看： WebSocket &gt; 长连接（SEE） &gt; 长轮询 &gt; 短轮询 但是，我们如果考虑浏览器的兼容性问题，顺序就恰恰相反了： 短轮询 &gt; 长轮询 &gt; 长连接（SEE） &gt; WebSocket 所以，还是要根据具体的使用场景来判断使用哪种方式。\n浏览器原理一、浏览器安全1.  什么是 XSS 攻击？（1）概念XSS 攻击指的是跨站脚本攻击，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。\nXSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。\n攻击者可以通过这种攻击方式可以进行以下操作：\n\n获取页面的数据，如DOM、cookie、localStorage；\nDOS攻击，发送合理请求，占用服务器资源，从而使用户无法访问服务器；\n破坏页面结构；\n流量劫持（将链接指向某网站）；\n\n（2）攻击类型XSS 可以分为存储型、反射型和 DOM 型：\n\n存储型指的是恶意脚本会存储在目标服务器上，当浏览器请求数据时，脚本从服务器传回并执行。\n反射型指的是攻击者诱导用户访问一个带有恶意代码的 URL 后，服务器端接收数据后处理，然后把带有恶意代码的数据发送到浏览器端，浏览器端解析这段带有 XSS 代码的数据后当做脚本执行，最终完成 XSS 攻击。 \nDOM 型指的通过修改页面的 DOM 节点形成的 XSS。\n\n1）存储型 XSS 的攻击步骤：\n\n攻击者将恶意代码提交到⽬标⽹站的数据库中。\n⽤户打开⽬标⽹站时，⽹站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。\n⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。\n恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。\n\n这种攻击常⻅于带有⽤户保存数据的⽹站功能，如论坛发帖、商品评论、⽤户私信等。\n2）反射型 XSS 的攻击步骤：\n\n攻击者构造出特殊的 URL，其中包含恶意代码。\n⽤户打开带有恶意代码的 URL 时，⽹站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器。\n⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。\n恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。\n\n反射型 XSS 跟存储型 XSS 的区别是：存储型 XSS 的恶意代码存在数据库⾥，反射型 XSS 的恶意代码存在 URL ⾥。\n反射型 XSS 漏洞常⻅于通过 URL 传递参数的功能，如⽹站搜索、跳转等。 由于需要⽤户主动打开恶意的 URL 才能⽣效，攻击者往往会结合多种⼿段诱导⽤户点击。\n3）DOM 型 XSS 的攻击步骤：\n\n攻击者构造出特殊的 URL，其中包含恶意代码。\n⽤户打开带有恶意代码的 URL。\n⽤户浏览器接收到响应后解析执⾏，前端 JavaScript 取出 URL 中的恶意代码并执⾏。\n恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。\n\nDOM 型 XSS 跟前两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执⾏恶意代码由浏览器端完成，属于前端JavaScript ⾃身的安全漏洞，⽽其他两种 XSS 都属于服务端的安全漏洞。\n2. 如何防御 XSS 攻击？可以看到XSS危害如此之大， 那么在开发网站时就要做好防御措施，具体措施如下：\n\n可以从浏览器的执行来进行预防，一种是使用纯前端的方式，不用服务器端拼接后返回（不使用服务端渲染）。另一种是对需要插入到 HTML 中的代码做好充分的转义。对于 DOM 型的攻击，主要是前端脚本的不可靠而造成的，对于数据获取渲染和字符串拼接的时候应该对可能出现的恶意代码情况进行判断。\n使用 CSP ，CSP 的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行，从而防止恶意代码的注入攻击。\n\n\n\n\n\n\n\n\n\n\n\nCSP 指的是内容安全策略，它的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截由浏览器自己来实现。\n通常有两种方式来开启 CSP，一种是设置 HTTP 首部中的 Content-Security-Policy，一种是设置 meta 标签的方式 \n\n\n对一些敏感信息进行保护，比如 cookie 使用 http-only，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。\n\n3. 什么是 CSRF 攻击？（1）概念CSRF 攻击指的是跨站请求伪造攻击，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。\nCSRF 攻击的本质是利用 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。\n（2）攻击类型常见的 CSRF 攻击有三种：\n\nGET 类型的 CSRF 攻击，比如在网站中的一个 img 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提交。\nPOST 类型的 CSRF 攻击，比如构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单。\n链接类型的 CSRF 攻击，比如在 a 标签的 href 属性里构建一个请求，然后诱导用户去点击。\n\n4. 如何防御 CSRF 攻击？CSRF 攻击可以使用以下方法来防护：\n\n进行同源检测，服务器根据 http 请求头中 origin 或者 referer 信息来判断请求是否为允许访问的站点，从而对请求进行过滤。当 origin 或者 referer 信息都不存在的时候，直接阻止请求。这种方式的缺点是有些情况下 referer 可以被伪造，同时还会把搜索引擎的链接也给屏蔽了。所以一般网站会允许搜索引擎的页面请求，但是相应的页面请求这种请求方式也可能被攻击者给利用。（Referer 字段会告诉服务器该网页是从哪个页面链接过来的）\n使用 CSRF Token 进行验证，服务器向用户返回一个随机数 Token ，当网站再次发起请求时，在请求参数中加入服务器端返回的 token ，然后服务器对这个 token 进行验证。这种方法解决了使用 cookie 单一验证方式时，可能会被冒用的问题，但是这种方法存在一个缺点就是，我们需要给网站中的所有请求都添加上这个 token，操作比较繁琐。还有一个问题是一般不会只有一台网站服务器，如果请求经过负载平衡转移到了其他的服务器，但是这个服务器的 session 中没有保留这个 token 的话，就没有办法验证了。这种情况可以通过改变 token 的构建方式来解决。\n对 Cookie 进行双重验证，服务器在用户访问网站页面时，向请求域名注入一个Cookie，内容为随机字符串，然后当用户再次向服务器发送请求的时候，从 cookie 中取出这个字符串，添加到 URL 参数中，然后服务器通过对 cookie 中的数据和参数中的数据进行比较，来进行验证。使用这种方式是利用了攻击者只能利用 cookie，但是不能访问获取 cookie 的特点。并且这种方法比 CSRF Token 的方法更加方便，并且不涉及到分布式访问的问题。这种方法的缺点是如果网站存在 XSS 漏洞的，那么这种方式会失效。同时这种方式不能做到子域名的隔离。\n在设置 cookie 属性的时候设置 Samesite ，限制 cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是 GET 请求，且会发生页面跳转的请求所使用。\n\n5. 什么是中间人攻击？如何防范中间人攻击？中间⼈ (Man-in-the-middle attack, MITM) 是指攻击者与通讯的两端分别创建独⽴的联系, 并交换其所收到的数据, 使通讯的两端认为他们正在通过⼀个私密的连接与对⽅直接对话, 但事实上整个会话都被攻击者完全控制。在中间⼈攻击中，攻击者可以拦截通讯双⽅的通话并插⼊新的内容。\n攻击过程如下:\n\n客户端发送请求到服务端，请求被中间⼈截获\n服务器向客户端发送公钥\n中间⼈截获公钥，保留在⾃⼰⼿上。然后⾃⼰⽣成⼀个伪造的公钥，发给客户端\n客户端收到伪造的公钥后，⽣成加密hash值发给服务器\n中间⼈获得加密hash值，⽤⾃⼰的私钥解密获得真秘钥,同时⽣成假的加密hash值，发给服务器\n服务器⽤私钥解密获得假密钥,然后加密数据传输给客户端\n\n6. 有哪些可能引起前端安全的问题?\n跨站脚本 (Cross-Site Scripting, XSS): ⼀种代码注⼊⽅式, 为了与 CSS 区分所以被称作 XSS。早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚⾯, 其注⼊⽅式很简单包括但不限于 JavaScript / CSS / Flash 等；\niframe的滥⽤: iframe中的内容是由第三⽅来提供的，默认情况下他们不受控制，他们可以在iframe中运⾏JavaScirpt脚本、Flash插件、弹出对话框等等，这可能会破坏前端⽤户体验；\n跨站点请求伪造（Cross-Site Request Forgeries，CSRF）: 指攻击者通过设置好的陷阱，强制对已完成认证的⽤户进⾏⾮预期的个⼈信息或设定信息等某些状态更新，属于被动攻击\n恶意第三⽅库: ⽆论是后端服务器应⽤还是前端应⽤开发，绝⼤多数时候都是在借助开发框架和各种类库进⾏快速开发，⼀旦第三⽅库被植⼊恶意代码很容易引起安全问题。\n\n7. 网络劫持有哪几种，如何防范？⽹络劫持分为两种:\n（1）DNS劫持: (输⼊京东被强制跳转到淘宝这就属于dns劫持)\n\nDNS强制解析: 通过修改运营商的本地DNS记录，来引导⽤户流量到缓存服务器\n302跳转的⽅式: 通过监控⽹络出⼝的流量，分析判断哪些内容是可以进⾏劫持处理的,再对劫持的内存发起302跳转的回复，引导⽤户获取内容\n\n（2）HTTP劫持: (访问⾕歌但是⼀直有贪玩蓝⽉的⼴告),由于http明⽂传输,运营商会修改你的http响应内容(即加⼴告)\nDNS劫持由于涉嫌违法，已经被监管起来，现在很少会有DNS劫持，⽽http劫持依然⾮常盛⾏，最有效的办法就是全站HTTPS，将HTTP加密，这使得运营商⽆法获取明⽂，就⽆法劫持你的响应内容。\n二、进程与线程1. 进程与线程的概念从本质上说，进程和线程都是 CPU 工作时间片的一个描述：\n\n进程描述了 CPU 在运行指令及加载和保存上下文所需的时间，放在应用上来说就代表了一个程序。\n线程是进程中的更小单位，描述了执行一段指令所需的时间。\n\n进程是资源分配的最小单位，线程是CPU调度的最小单位。\n一个进程就是一个程序的运行实例。详细解释就是，启动一个程序的时候，操作系统会为该程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程，我们把这样的一个运行环境叫进程。进程是运行在虚拟内存上的，虚拟内存是用来解决用户对硬件资源的无限需求和有限的硬件资源之间的矛盾的。从操作系统角度来看，虚拟内存即交换文件；从处理器角度看，虚拟内存即虚拟地址空间。\n如果程序很多时，内存可能会不够，操作系统为每个进程提供一套独立的虚拟地址空间，从而使得同一块物理内存在不同的进程中可以对应到不同或相同的虚拟地址，变相的增加了程序可以使用的内存。\n进程和线程之间的关系有以下四个特点：\n（1）进程中的任意一线程执行出错，都会导致整个进程的崩溃。\n（2）线程之间共享进程中的数据。\n（3）当一个进程关闭之后，操作系统会回收进程所占用的内存， 当一个进程退出时，操作系统会回收该进程所申请的所有资源；即使其中任意线程因为操作不当导致内存泄漏，当进程退出时，这些内存也会被正确回收。\n（4）进程之间的内容相互隔离。 进程隔离就是为了使操作系统中的进程互不干扰，每一个进程只能访问自己占有的数据，也就避免出现进程 A 写入数据到进程 B 的情况。正是因为进程之间的数据是严格隔离的，所以一个进程如果崩溃了，或者挂起了，是不会影响到其他进程的。如果进程之间需要进行数据的通信，这时候，就需要使用用于进程间通信的机制了。\nChrome浏览器的架构图：  从图中可以看出，最新的 Chrome 浏览器包括：\n\n1 个浏览器主进程\n1 个 GPU 进程\n1 个网络进程\n多个渲染进程\n多个插件进程\n\n这些进程的功能：\n\n浏览器进程：主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。\n渲染进程：核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。\nGPU 进程：其实， GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。\n网络进程：主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。\n插件进程：主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。\n\n所以，打开一个网页，最少需要四个进程：1 个网络进程、1 个浏览器进程、1 个 GPU 进程以及 1 个渲染进程。如果打开的页面有运行插件的话，还需要再加上 1 个插件进程。\n虽然多进程模型提升了浏览器的稳定性、流畅性和安全性，但同样不可避免地带来了一些问题：\n\n更高的资源占用：因为每个进程都会包含公共基础结构的副本（如 JavaScript 运行环境），这就意味着浏览器会消耗更多的内存资源。\n更复杂的体系架构：浏览器各模块之间耦合性高、扩展性差等问题，会导致现在的架构已经很难适应新的需求了。\n\n2. 进程和线程的区别\n进程可以看做独立应用，线程不能\n资源：进程是cpu资源分配的最小单位（是能拥有资源和独立运行的最小单位）；线程是cpu调度的最小单位（线程是建立在进程的基础上的一次程序运行单位，一个进程中可以有多个线程）。\n通信方面：线程间可以通过直接共享同一进程中的资源，而进程通信需要借助 进程间通信。\n调度：进程切换比线程切换的开销要大。线程是CPU调度的基本单位，线程的切换不会引起进程切换，但某个进程中的线程切换到另一个进程中的线程时，会引起进程切换。\n系统开销：由于创建或撤销进程时，系统都要为之分配或回收资源，如内存、I/O 等，其开销远大于创建或撤销线程时的开销。同理，在进行进程切换时，涉及当前执行进程 CPU 环境还有各种各样状态的保存及新调度进程状态的设置，而线程切换时只需保存和设置少量寄存器内容，开销较小。\n\n3. 浏览器渲染进程的线程有哪些浏览器的渲染进程的线程总共有五种：  （1）GUI渲染线程 负责渲染浏览器页面，解析HTML、CSS，构建DOM树、构建CSSOM树、构建渲染树和绘制页面；当界面需要重绘或由于某种操作引发回流时，该线程就会执行。\n注意：GUI渲染线程和JS引擎线程是互斥的，当JS引擎执行时GUI线程会被挂起，GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。\n（2）JS引擎线程 JS引擎线程也称为JS内核，负责处理Javascript脚本程序，解析Javascript脚本，运行代码；JS引擎线程一直等待着任务队列中任务的到来，然后加以处理，一个Tab页中无论什么时候都只有一个JS引擎线程在运行JS程序；\n注意：GUI渲染线程与JS引擎线程的互斥关系，所以如果JS执行的时间过长，会造成页面的渲染不连贯，导致页面渲染加载阻塞。\n（3）时间触发线程 时间触发线程属于浏览器而不是JS引擎，用来控制事件循环；当JS引擎执行代码块如setTimeOut时（也可是来自浏览器内核的其他线程,如鼠标点击、AJAX异步请求等），会将对应任务添加到事件触发线程中；当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理；\n注意：由于JS的单线程关系，所以这些待处理队列中的事件都得排队等待JS引擎处理（当JS引擎空闲时才会去执行）；\n（4）定时器触发进程 定时器触发进程即setInterval与setTimeout所在线程；浏览器定时计数器并不是由JS引擎计数的，因为JS引擎是单线程的，如果处于阻塞线程状态就会影响记计时的准确性；因此使用单独线程来计时并触发定时器，计时完毕后，添加到事件队列中，等待JS引擎空闲后执行，所以定时器中的任务在设定的时间点不一定能够准时执行，定时器只是在指定时间点将任务添加到事件队列中；\n注意：W3C在HTML标准中规定，定时器的定时时间不能小于4ms，如果是小于4ms，则默认为4ms。\n（5）异步http请求线程\n\nXMLHttpRequest连接后通过浏览器新开一个线程请求；\n检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将回调函数放入事件队列中，等待JS引擎空闲后执行；\n\n4. 进程之前的通信方式（1）管道通信\n管道是一种最基本的进程间通信机制。管道就是操作系统在内核中开辟的一段缓冲区，进程1可以将需要交互的数据拷贝到这段缓冲区，进程2就可以读取了。\n管道的特点：\n\n只能单向通信\n只能血缘关系的进程进行通信\n依赖于文件系统\n生命周期随进程\n面向字节流的服务\n管道内部提供了同步机制\n\n（2）消息队列通信\n消息队列就是一个消息的列表。用户可以在消息队列中添加消息、读取消息等。消息队列提供了一种从一个进程向另一个进程发送一个数据块的方法。 每个数据块都被认为含有一个类型，接收进程可以独立地接收含有不同类型的数据结构。可以通过发送消息来避免命名管道的同步和阻塞问题。但是消息队列与命名管道一样，每个数据块都有一个最大长度的限制。\n使用消息队列进行进程间通信，可能会收到数据块最大长度的限制约束等，这也是这种通信方式的缺点。如果频繁的发生进程间的通信行为，那么进程需要频繁地读取队列中的数据到内存，相当于间接地从一个进程拷贝到另一个进程，这需要花费时间。\n（3）信号量通信\n共享内存最大的问题就是多进程竞争内存的问题，就像类似于线程安全问题。我们可以使用信号量来解决这个问题。信号量的本质就是一个计数器，用来实现进程之间的互斥与同步。例如信号量的初始值是 1，然后 a 进程来访问内存1的时候，我们就把信号量的值设为 0，然后进程b 也要来访问内存1的时候，看到信号量的值为 0 就知道已经有进程在访问内存1了，这个时候进程 b 就会访问不了内存1。所以说，信号量也是进程之间的一种通信方式。\n（4）信号通信\n信号（Signals ）是Unix系统中使用的最古老的进程间通信的方法之一。操作系统通过信号来通知进程系统中发生了某种预先规定好的事件（一组事件中的一个），它也是用户进程之间通信和同步的一种原始机制。\n（5）共享内存通信\n共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问（使多个进程可以访问同一块内存空间）。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量，配合使用，来实现进程间的同步和通信。\n（6）套接字通信\n上面说的共享内存、管道、信号量、消息队列，他们都是多个进程在一台主机之间的通信，那两个相隔几千里的进程能够进行通信吗？答是必须的，这个时候 Socket 这家伙就派上用场了，例如我们平时通过浏览器发起一个 http 请求，然后服务器给你返回对应的数据，这种就是采用 Socket 的通信方式了。\n5. 僵尸进程和孤儿进程是什么？\n孤儿进程：父进程退出了，而它的一个或多个进程还在运行，那这些子进程都会成为孤儿进程。孤儿进程将被init进程(进程号为1)所收养，并由init进程对它们完成状态收集工作。\n僵尸进程：子进程比父进程先结束，而父进程又没有释放子进程占用的资源，那么子进程的进程描述符仍然保存在系统中，这种进程称之为僵死进程。\n\n6. 死锁产生的原因？ 如果解决死锁的问题？所谓死锁，是指多个进程在运行过程中因争夺资源而造成的一种僵局，当进程处于这种僵持状态时，若无外力作用，它们都将无法再向前推进。\n系统中的资源可以分为两类：\n\n可剥夺资源，是指某进程在获得这类资源后，该资源可以再被其他进程或系统剥夺，CPU和主存均属于可剥夺性资源；\n不可剥夺资源，当系统把这类资源分配给某进程后，再不能强行收回，只能在进程用完后自行释放，如磁带机、打印机等。\n\n产生死锁的原因：\n（1）竞争资源\n\n产生死锁中的竞争资源之一指的是竞争不可剥夺资源（例如：系统中只有一台打印机，可供进程P1使用，假定P1已占用了打印机，若P2继续要求打印机打印将阻塞）\n产生死锁中的竞争资源另外一种资源指的是竞争临时资源（临时资源包括硬件中断、信号、消息、缓冲区内的消息等），通常消息通信顺序进行不当，则会产生死锁\n\n（2）进程间推进顺序非法\n若P1保持了资源R1，P2保持了资源R2，系统处于不安全状态，因为这两个进程再向前推进，便可能发生死锁。例如，当P1运行到P1：Request（R2）时，将因R2已被P2占用而阻塞；当P2运行到P2：Request（R1）时，也将因R1已被P1占用而阻塞，于是发生进程死锁\n产生死锁的必要条件：\n\n互斥条件：进程要求对所分配的资源进行排它性控制，即在一段时间内某资源仅为一进程所占用。\n请求和保持条件：当进程因请求资源而阻塞时，对已获得的资源保持不放。\n不剥夺条件：进程已获得的资源在未使用完之前，不能剥夺，只能在使用完时由自己释放。\n环路等待条件：在发生死锁时，必然存在一个进程——资源的环形链。\n\n预防死锁的方法：\n\n资源一次性分配：一次性分配所有资源，这样就不会再有请求了（破坏请求条件）\n只要有一个资源得不到分配，也不给这个进程分配其他的资源（破坏请保持条件）\n可剥夺资源：即当某进程获得了部分资源，但得不到其它资源，则释放已占有的资源（破坏不可剥夺条件）\n资源有序分配法：系统给每类资源赋予一个编号，每一个进程按编号递增的顺序请求资源，释放则相反（破坏环路等待条件）\n\n7. 如何实现浏览器内多个标签页之间的通信?实现多个标签页之间的通信，本质上都是通过中介者模式来实现的。因为标签页之间没有办法直接通信，因此我们可以找一个中介者，让标签页和中介者进行通信，然后让这个中介者来进行消息的转发。通信方法如下：\n\n使用 websocket 协议，因为 websocket 协议可以实现服务器推送，所以服务器就可以用来当做这个中介者。标签页通过向服务器发送数据，然后由服务器向其他标签页推送转发。\n使用 ShareWorker 的方式，shareWorker 会在页面存在的生命周期内创建一个唯一的线程，并且开启多个页面也只会使用同一个线程。这个时候共享线程就可以充当中介者的角色。标签页间通过共享一个线程，然后通过这个共享的线程来实现数据的交换。\n使用 localStorage 的方式，我们可以在一个标签页对 localStorage 的变化事件进行监听，然后当另一个标签页修改数据的时候，我们就可以通过这个监听事件来获取到数据。这个时候 localStorage 对象就是充当的中介者的角色。\n使用 postMessage 方法，如果我们能够获得对应标签页的引用，就可以使用postMessage 方法，进行通信。\n\n8. 对Service Worker的理解Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。使用 Service Worker的话，传输协议必须为 HTTPS。因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全。\nService Worker 实现缓存功能一般分为三个步骤：首先需要先注册 Service Worker，然后监听到 install 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。以下是这个步骤的实现：\n// index.js\nif (navigator.serviceWorker) &#123;\n  navigator.serviceWorker\n    .register('sw.js')\n    .then(function(registration) &#123;\n      console.log('service worker 注册成功')\n    &#125;)\n    .catch(function(err) &#123;\n      console.log('servcie worker 注册失败')\n    &#125;)\n&#125;\n// sw.js\n// 监听 `install` 事件，回调中缓存所需文件\nself.addEventListener('install', e => &#123;\n  e.waitUntil(\n    caches.open('my-cache').then(function(cache) &#123;\n      return cache.addAll(['./index.html', './index.js'])\n    &#125;)\n  )\n&#125;)\n// 拦截所有请求事件\n// 如果缓存中已经有请求的数据就直接用缓存，否则去请求数据\nself.addEventListener('fetch', e => &#123;\n  e.respondWith(\n    caches.match(e.request).then(function(response) &#123;\n      if (response) &#123;\n        return response\n      &#125;\n      console.log('fetch source')\n    &#125;)\n  )\n&#125;)\n复制代码\n\n打开页面，可以在开发者工具中的 Application 看到 Service Worker 已经启动了：  在 Cache 中也可以发现所需的文件已被缓存： \n三、浏览器缓存1. 对浏览器的缓存机制的理解浏览器缓存的全过程：\n\n浏览器第一次加载资源，服务器返回 200，浏览器从服务器下载资源文件，并缓存资源文件与 response header，以供下次加载时对比使用；\n下一次加载资源时，由于强制缓存优先级较高，先比较当前时间与上一次返回 200 时的时间差，如果没有超过 cache-control 设置的 max-age，则没有过期，并命中强缓存，直接从本地读取资源。如果浏览器不支持HTTP1.1，则使用 expires 头判断是否过期；\n如果资源已过期，则表明强制缓存没有被命中，则开始协商缓存，向服务器发送带有 If-None-Match 和 If-Modified-Since 的请求；\n服务器收到请求后，优先根据 Etag 的值判断被请求的文件有没有做修改，Etag 值一致则没有修改，命中协商缓存，返回 304；如果不一致则有改动，直接返回新的资源文件带上新的 Etag 值并返回 200；\n如果服务器收到的请求没有 Etag 值，则将 If-Modified-Since 和被请求文件的最后修改时间做比对，一致则命中协商缓存，返回 304；不一致则返回新的 last-modified 和文件并返回 200；\n\n 很多网站的资源后面都加了版本号，这样做的目的是：每次升级了 JS 或 CSS 文件后，为了防止浏览器进行缓存，强制改变版本号，客户端浏览器就会重新下载新的 JS 或 CSS 文件 ，以保证用户能够及时获得网站的最新更新。\n2. 浏览器资源缓存的位置有哪些？资源缓存的位置一共有 3 种，按优先级从高到低分别是：\n\nService Worker：**Service Worker 运行在 JavaScript 主线程之外，虽然由于脱离了浏览器窗体无法直接访问 DOM，但是它可以完成离线缓存、消息推送、网络代理等功能。它可以让我们**自由控制**缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的。当 Service Worker 没有命中缓存的时候，需要去调用 fetch 函数获取  数据。也就是说，如果没有在 Service Worker 命中缓存，会根据缓存查找优先级去查找数据。但是不管是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示是从 Service Worker 中获取的内容。**\nMemory Cache： Memory Cache 就是内存缓存，它的效率最快，但是内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。\nDisk Cache： Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache 胜在容量和存储时效性上。在所有浏览器缓存中，Disk Cache 覆盖面基本是最大的。它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。\n\nDisk Cache： Push Cache 是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。并且缓存时间也很短暂，只在会话（Session）中存在，一旦会话结束就被释放。其具有以下特点：\n\n所有的资源都能被推送，但是 Edge 和 Safari 浏览器兼容性不怎么好\n可以推送 no-cache 和 no-store 的资源\n一旦连接被关闭，Push Cache 就被释放\n多个页面可以使用相同的 HTTP/2 连接，也就是说能使用同样的缓存\nPush Cache 中的缓存只能被使用一次\n浏览器可以拒绝接受已经存在的资源推送\n可以给其他域名推送资源****\n\n3. 协商缓存和强缓存的区别（1）强缓存使用强缓存策略时，如果缓存资源有效，则直接使用缓存资源，不必再向服务器发起请求。\n强缓存策略可以通过两种方式来设置，分别是 http 头信息中的 Expires 属性和 Cache-Control 属性。\n（1）服务器通过在响应头中添加 Expires 属性，来指定资源的过期时间。在过期时间以内，该资源可以被缓存使用，不必再向服务器发送请求。这个时间是一个绝对时间，它是服务器的时间，因此可能存在这样的问题，就是客户端的时间和服务器端的时间不一致，或者用户可以对客户端时间进行修改的情况，这样就可能会影响缓存命中的结果。\n（2）Expires 是 http1.0 中的方式，因为它的一些缺点，在 HTTP 1.1 中提出了一个新的头部属性就是 Cache-Control 属性，它提供了对资源的缓存的更精确的控制。它有很多不同的值，\nCache-Control可设置的字段：\n\npublic：设置了该字段值的资源表示可以被任何对象（包括：发送请求的客户端、代理服务器等等）缓存。这个字段值不常用，一般还是使用max-age=来精确控制；\nprivate：设置了该字段值的资源只能被用户浏览器缓存，不允许任何代理服务器缓存。在实际开发当中，对于一些含有用户信息的HTML，通常都要设置这个字段值，避免代理服务器(CDN)缓存；\nno-cache：设置了该字段需要先和服务端确认返回的资源是否发生了变化，如果资源未发生变化，则直接使用缓存好的资源；\nno-store：设置了该字段表示禁止任何缓存，每次都会向服务端发起新的请求，拉取最新的资源；\nmax-age=：设置缓存的最大有效期，单位为秒；\ns-maxage=：优先级高于max-age=，仅适用于共享缓存(CDN)，优先级高于max-age或者Expires头；\nmax-stale[=]：设置了该字段表明客户端愿意接收已经过期的资源，但是不能超过给定的时间限制。\n\n一般来说只需要设置其中一种方式就可以实现强缓存策略，当两种方式一起使用时，Cache-Control 的优先级要高于 Expires。\nno-cache和no-store很容易混淆：\n\nno-cache 是指先要和服务器确认是否有资源更新，在进行判断。也就是说没有强缓存，但是会有协商缓存；\nno-store 是指不使用任何缓存，每次请求都直接从服务器获取资源。\n\n（2）协商缓存如果命中强制缓存，我们无需发起新的请求，直接使用缓存内容，如果没有命中强制缓存，如果设置了协商缓存，这个时候协商缓存就会发挥作用了。\n上面已经说到了，命中协商缓存的条件有两个：\n\nmax-age=xxx 过期了\n值为no-store\n\n使用协商缓存策略时，会先向服务器发送一个请求，如果资源没有发生修改，则返回一个 304 状态，让浏览器使用本地的缓存副本。如果资源发生了修改，则返回修改后的资源。\n协商缓存也可以通过两种方式来设置，分别是 http 头信息中的Etag 和Last-Modified属性。\n（1）服务器通过在响应头中添加 Last-Modified 属性来指出资源最后一次修改的时间，当浏览器下一次发起请求时，会在请求头中添加一个 If-Modified-Since 的属性，属性值为上一次资源返回时的 Last-Modified 的值。当请求发送到服务器后服务器会通过这个属性来和资源的最后一次的修改时间来进行比较，以此来判断资源是否做了修改。如果资源没有修改，那么返回 304 状态，让客户端使用本地的缓存。如果资源已经被修改了，则返回修改后的资源。使用这种方法有一个缺点，就是 Last-Modified 标注的最后修改时间只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，那么文件已将改变了但是 Last-Modified 却没有改变，这样会造成缓存命中的不准确。\n（2）因为 Last-Modified 的这种可能发生的不准确性，http 中提供了另外一种方式，那就是 Etag 属性。服务器在返回资源的时候，在头信息中添加了 Etag 属性，这个属性是资源生成的唯一标识符，当资源发生改变的时候，这个值也会发生改变。在下一次资源请求时，浏览器会在请求头中添加一个 If-None-Match 属性，这个属性的值就是上次返回的资源的 Etag 的值。服务接收到请求后会根据这个值来和资源当前的 Etag 的值来进行比较，以此来判断资源是否发生改变，是否需要返回资源。通过这种方式，比 Last-Modified 的方式更加精确。\n当 Last-Modified 和 Etag 属性同时出现的时候，Etag 的优先级更高。使用协商缓存的时候，服务器需要考虑负载平衡的问题，因此多个服务器上资源的 Last-Modified 应该保持一致，因为每个服务器上 Etag 的值都不一样，因此在考虑负载平衡时，最好不要设置 Etag 属性。\n总结：\n强缓存策略和协商缓存策略在缓存命中时都会直接使用本地的缓存副本，区别只在于协商缓存会向服务器发送一次请求。它们缓存不命中时，都会向服务器发送请求来获取资源。在实际的缓存机制中，强缓存策略和协商缓存策略是一起合作使用的。浏览器首先会根据请求的信息判断，强缓存是否命中，如果命中则直接使用资源。如果不命中则根据头信息向服务器发起请求，使用协商缓存，如果协商缓存命中的话，则服务器不返回资源，浏览器直接使用本地资源的副本，如果协商缓存不命中，则浏览器返回最新的资源给浏览器。\n4. 为什么需要浏览器缓存？对于浏览器的缓存，主要针对的是前端的静态资源，最好的效果就是，在发起请求之后，拉取相应的静态资源，并保存在本地。如果服务器的静态资源没有更新，那么在下次请求的时候，就直接从本地读取即可，如果服务器的静态资源已经更新，那么我们再次请求的时候，就到服务器拉取新的资源，并保存在本地。这样就大大的减少了请求的次数，提高了网站的性能。这就要用到浏览器的缓存策略了。\n所谓的浏览器缓存指的是浏览器将用户请求过的静态资源，存储到电脑本地磁盘中，当浏览器再次访问时，就可以直接从本地加载，不需要再去服务端请求了。\n使用浏览器缓存，有以下优点：\n\n减少了服务器的负担，提高了网站的性能\n加快了客户端网页的加载速度\n减少了多余网络数据传输\n\n5. 点击刷新按钮或者按 F5、按 Ctrl+F5 （强制刷新）、地址栏回车有什么区别？\n点击刷新按钮或者按 F5： 浏览器直接对本地的缓存文件过期，但是会带上If-Modifed-Since，If-None-Match，这就意味着服务器会对文件检查新鲜度，返回结果可能是 304，也有可能是 200。\n用户按 Ctrl+F5（强制刷新）： 浏览器不仅会对本地文件过期，而且不会带上 If-Modifed-Since，If-None-Match，相当于之前从来没有请求过，返回结果是 200。\n地址栏回车： 浏览器发起请求，按照正常流程，本地检查是否过期，然后服务器检查新鲜度，最后返回内容。\n\n四、浏览器组成1. 对浏览器的理解浏览器的主要功能是将用户选择的 web 资源呈现出来，它需要从服务器请求资源，并将其显示在浏览器窗口中，资源的格式通常是 HTML，也包括 PDF、image 及其他格式。用户用 URI（Uniform Resource Identifier 统一资源标识符）来指定所请求资源的位置。\nHTML 和 CSS 规范中规定了浏览器解释 html 文档的方式，由 W3C 组织对这些规范进行维护，W3C 是负责制定 web 标准的组织。但是浏览器厂商纷纷开发自己的扩展，对规范的遵循并不完善，这为 web 开发者带来了严重的兼容性问题。\n浏览器可以分为两部分，shell 和 内核。其中 shell 的种类相对比较多，内核则比较少。也有一些浏览器并不区分外壳和内核。从 Mozilla 将 Gecko 独立出来后，才有了外壳和内核的明确划分。\n\nshell 是指浏览器的外壳：例如菜单，工具栏等。主要是提供给用户界面操作，参数设置等等。它是调用内核来实现各种功能的。\n内核是浏览器的核心。内核是基于标记语言显示内容的程序或模块。\n\n2. 对浏览器内核的理解浏览器内核主要分成两部分：\n\n渲染引擎的职责就是渲染，即在浏览器窗口中显示所请求的内容。默认情况下，渲染引擎可以显示 html、xml 文档及图片，它也可以借助插件显示其他类型数据，例如使用 PDF 阅读器插件，可以显示 PDF 格式。\nJS 引擎：解析和执行 javascript 来实现网页的动态效果。\n\n最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。\n3. 常见的浏览器内核比较\nTrident： 这种浏览器内核是 IE 浏览器用的内核，因为在早期 IE 占有大量的市场份额，所以这种内核比较流行，以前有很多网页也是根据这个内核的标准来编写的，但是实际上这个内核对真正的网页标准支持不是很好。但是由于 IE 的高市场占有率，微软也很长时间没有更新 Trident 内核，就导致了 Trident 内核和 W3C 标准脱节。还有就是 Trident 内核的大量 Bug 等安全问题没有得到解决，加上一些专家学者公开自己认为 IE 浏览器不安全的观点，使很多用户开始转向其他浏览器。\nGecko： 这是 Firefox 和 Flock 所采用的内核，这个内核的优点就是功能强大、丰富，可以支持很多复杂网页效果和浏览器扩展接口，但是代价是也显而易见就是要消耗很多的资源，比如内存。\nPresto： Opera 曾经采用的就是 Presto 内核，Presto 内核被称为公认的浏览网页速度最快的内核，这得益于它在开发时的天生优势，在处理 JS 脚本等脚本语言时，会比其他的内核快3倍左右，缺点就是为了达到很快的速度而丢掉了一部分网页兼容性。\nWebkit： Webkit 是 Safari 采用的内核，它的优点就是网页浏览速度较快，虽然不及 Presto 但是也胜于 Gecko 和 Trident，缺点是对于网页代码的容错性不高，也就是说对网页代码的兼容性较低，会使一些编写不标准的网页无法正确显示。WebKit 前身是 KDE 小组的 KHTML 引擎，可以说 WebKit 是 KHTML 的一个开源的分支。\nBlink： 谷歌在 Chromium Blog 上发表博客，称将与苹果的开源浏览器核心 Webkit 分道扬镳，在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。其实 Blink 引擎就是 Webkit 的一个分支，就像 webkit 是KHTML 的分支一样。Blink 引擎现在是谷歌公司与 Opera Software 共同研发，上面提到过的，Opera 弃用了自己的 Presto 内核，加入 Google 阵营，跟随谷歌一起研发 Blink。\n\n4. 常见浏览器所用内核（1） IE 浏览器内核：Trident 内核，也是俗称的 IE 内核；\n（2） Chrome 浏览器内核：统称为 Chromium 内核或 Chrome 内核，以前是 Webkit 内核，现在是 Blink内核；\n（3） Firefox 浏览器内核：Gecko 内核，俗称 Firefox 内核；\n（4） Safari 浏览器内核：Webkit 内核；\n（5） Opera 浏览器内核：最初是自己的 Presto 内核，后来加入谷歌大军，从 Webkit 又到了 Blink 内核；\n（6） 360浏览器、猎豹浏览器内核：IE + Chrome 双内核；\n（7） 搜狗、遨游、QQ 浏览器内核：Trident（兼容模式）+ Webkit（高速模式）；\n（8） 百度浏览器、世界之窗内核：IE 内核；\n（9） 2345浏览器内核：好像以前是 IE 内核，现在也是 IE + Chrome 双内核了；\n（10）UC 浏览器内核：这个众口不一，UC 说是他们自己研发的 U3 内核，但好像还是基于 Webkit 和 Trident ，还有说是基于火狐内核。\n5. 浏览器的主要组成部分\n⽤户界⾯ 包括地址栏、前进/后退按钮、书签菜单等。除了浏览器主窗⼝显示的您请求的⻚⾯外，其他显示的各个部分都属于⽤户界⾯。\n浏览器引擎 在⽤户界⾯和呈现引擎之间传送指令。\n呈现引擎 负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。\n⽹络 ⽤于⽹络调⽤，⽐如 HTTP 请求。其接⼝与平台⽆关，并为所有平台提供底层实现。\n⽤户界⾯后端 ⽤于绘制基本的窗⼝⼩部件，⽐如组合框和窗⼝。其公开了与平台⽆关的通⽤接⼝，⽽在底层使⽤操作系统的⽤户界⾯⽅法。\nJavaScript 解释器。⽤于解析和执⾏ JavaScript 代码。\n数据存储 这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了“⽹络数据库”，这是⼀个完整（但是轻便）的浏览器内数据库。\n\n值得注意的是，和⼤多数浏览器不同，Chrome 浏览器的每个标签⻚都分别对应⼀个呈现引擎实例。每个标签⻚都是⼀个独⽴的进程。\n五、浏览器渲染原理1. 浏览器的渲染过程浏览器渲染主要有以下步骤：\n\n首先解析收到的文档，根据文档定义构建一棵 DOM 树，DOM 树是由 DOM 元素及属性节点组成的。\n然后对 CSS 进行解析，生成 CSSOM 规则树。\n根据 DOM 树和 CSSOM 规则树构建渲染树。渲染树的节点被称为渲染对象，渲染对象是一个包含有颜色和大小等属性的矩形，渲染对象和 DOM 元素相对应，但这种对应关系不是一对一的，不可见的 DOM 元素不会被插入渲染树。还有一些 DOM元素对应几个可见对象，它们一般是一些具有复杂结构的元素，无法用一个矩形来描述。\n当渲染对象被创建并添加到树中，它们并没有位置和大小，所以当浏览器生成渲染树以后，就会根据渲染树来进行布局（也可以叫做回流）。这一阶段浏览器要做的事情是要弄清楚各个节点在页面中的确切位置和大小。通常这一行为也被称为“自动重排”。\n布局阶段结束后是绘制阶段，遍历渲染树并调用渲染对象的 paint 方法将它们的内容显示在屏幕上，绘制使用 UI 基础组件。\n\n大致过程如图所示： \n注意： 这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的html 都解析完成之后再去构建和布局 render 树。它是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容。\n2. 浏览器渲染优化（1）针对JavaScript： JavaScript既会阻塞HTML的解析，也会阻塞CSS的解析。因此我们可以对JavaScript的加载方式进行改变，来进行优化：\n（1）尽量将JavaScript文件放在body的最后\n（2） body中间尽量不要写&lt;script&gt;标签\n（3）&lt;script&gt;标签的引入资源方式有三种，有一种就是我们常用的直接引入，还有两种就是使用 async 属性和 defer 属性来异步引入，两者都是去异步加载外部的JS文件，不会阻塞DOM的解析（尽量使用异步加载）。三者的区别如下：\n\nscript 立即停止页面渲染去加载资源文件，当资源加载完毕后立即执行js代码，js代码执行完毕后继续渲染页面；\nasync 是在下载完成之后，立即异步加载，加载好后立即执行，多个带async属性的标签，不能保证加载的顺序；\ndefer 是在下载完成之后，立即异步加载。加载好后，如果 DOM 树还没构建好，则先等 DOM 树解析好再执行；如果DOM树已经准备好，则立即执行。多个带defer属性的标签，按照顺序执行。\n\n**（2）针对CSS：**使用CSS有三种方式：使用**link、@import、内联样式**，其中link和@import都是导入外部样式。它们之间的区别：\n\nlink：浏览器会派发一个新等线程(HTTP线程)去加载资源文件，与此同时GUI渲染线程会继续向下渲染代码\n@import：GUI渲染线程会暂时停止渲染，去服务器加载资源文件，资源文件没有返回之前不会继续渲染(阻碍浏览器渲染)\nstyle：GUI直接渲染\n\n外部样式如果长时间没有加载完毕，浏览器为了用户体验，会使用浏览器会默认样式，确保首次渲染的速度。所以CSS一般写在headr中，让浏览器尽快发送请求去获取css样式。\n所以，在开发过程中，导入外部样式使用link，而不用@import。如果css少，尽可能采用内嵌样式，直接写在style标签中。\n（3）针对DOM树、CSSOM树： 可以通过以下几种方式来减少渲染的时间：\n\nHTML文件的代码层级尽量不要太深\n使用语义化的标签，来避免不标准语义化的特殊处理\n减少CSSD代码的层级，因为选择器是从左向右进行解析的\n\n（4）减少回流与重绘：\n\n操作DOM时，尽量在低层级的DOM节点进行操作\n不要使用table布局， 一个小的改动可能会使整个table进行重新布局\n使用CSS的表达式\n不要频繁操作元素的样式，对于静态页面，可以修改类名，而不是样式。\n使用absolute或者fixed，使元素脱离文档流，这样他们发生变化就不会影响其他元素\n避免频繁操作DOM，可以创建一个文档片段documentFragment，在它上面应用所有DOM操作，最后再把它添加到文档中\n将元素先设置display: none，操作结束后再把它显示出来。因为在display属性为none的元素上进行的DOM操作不会引发回流和重绘。\n将DOM的多个读操作（或者写操作）放在一起，而不是读写操作穿插着写。这得益于浏览器的渲染队列机制。\n\n浏览器针对页面的回流与重绘，进行了自身的优化——渲染队列\n浏览器会将所有的回流、重绘的操作放在一个队列中，当队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会对队列进行批处理。这样就会让多次的回流、重绘变成一次回流重绘。\n将多个读操作（或者写操作）放在一起，就会等所有的读操作进入队列之后执行，这样，原本应该是触发多次回流，变成了只触发一次回流。\n3. 渲染过程中遇到 JS 文件如何处理？JavaScript 的加载、解析与执行会阻塞文档的解析，也就是说，在构建 DOM 时，HTML 解析器若遇到了 JavaScript，那么它会暂停文档的解析，将控制权移交给 JavaScript 引擎，等 JavaScript 引擎运行完毕，浏览器再从中断的地方恢复继续解析文档。也就是说，如果想要首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 script 标签放在 body 标签底部的原因。当然在当下，并不是说 script 标签必须放在底部，因为你可以给 script 标签添加 defer 或者 async 属性。\n4. 什么是文档的预解析？Webkit 和 Firefox 都做了这个优化，当执行 JavaScript 脚本时，另一个线程解析剩下的文档，并加载后面需要通过网络加载的资源。这种方式可以使资源并行加载从而使整体速度更快。需要注意的是，预解析并不改变 DOM 树，它将这个工作留给主解析过程，自己只解析外部资源的引用，比如外部脚本、样式表及图片。\n5. CSS 如何阻塞文档解析？理论上，既然样式表不改变 DOM 树，也就没有必要停下文档的解析等待它们。然而，存在一个问题，JavaScript 脚本执行时可能在文档的解析过程中请求样式信息，如果样式还没有加载和解析，脚本将得到错误的值，显然这将会导致很多问题。所以如果浏览器尚未完成 CSSOM 的下载和构建，而我们却想在此时运行脚本，那么浏览器将延迟 JavaScript 脚本执行和文档的解析，直至其完成 CSSOM 的下载和构建。也就是说，在这种情况下，浏览器会先下载和构建 CSSOM，然后再执行 JavaScript，最后再继续文档的解析。\n6. 如何优化关键渲染路径？为尽快完成首次渲染，我们需要最大限度减小以下三种可变因素：\n（1）关键资源的数量。\n（2）关键路径长度。\n（3）关键字节的数量。\n关键资源是可能阻止网页首次渲染的资源。这些资源越少，浏览器的工作量就越小，对 CPU 以及其他资源的占用也就越少。同样，关键路径长度受所有关键资源与其字节大小之间依赖关系图的影响：某些资源只能在上一资源处理完毕之后才能开始下载，并且资源越大，下载所需的往返次数就越多。最后，浏览器需要下载的关键字节越少，处理内容并让其出现在屏幕上的速度就越快。要减少字节数，我们可以减少资源数（将它们删除或设为非关键资源），此外还要压缩和优化各项资源，确保最大限度减小传送大小。\n优化关键渲染路径的常规步骤如下：\n（1）对关键路径进行分析和特性描述：资源数、字节数、长度。\n（2）最大限度减少关键资源的数量：删除它们，延迟它们的下载，将它们标记为异步等。\n（3）优化关键字节数以缩短下载时间（往返次数）。\n（4）优化其余关键资源的加载顺序：您需要尽早下载所有关键资产，以缩短关键路径长度\n7. 什么情况会阻塞渲染？首先渲染的前提是生成渲染树，所以 HTML 和 CSS 肯定会阻塞渲染。如果你想渲染的越快，你越应该降低一开始需要渲染的文件大小，并且扁平层级，优化选择器。然后当浏览器在解析到 script 标签时，会暂停构建 DOM，完成后才会从暂停的地方重新开始。也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 script 标签放在 body 标签底部的原因。\n当然在当下，并不是说 script 标签必须放在底部，因为你可以给 script 标签添加 defer 或者 async 属性。当 script 标签加上 defer 属性以后，表示该 JS 文件会并行下载，但是会放到 HTML 解析完成后顺序执行，所以对于这种情况你可以把 script 标签放在任意位置。对于没有任何依赖的 JS 文件可以加上 async 属性，表示 JS 文件下载和解析不会阻塞渲染。\n六、浏览器本地存储1. 浏览器本地存储方式及使用场景（1）CookieCookie是最早被提出来的本地存储方式，在此之前，服务端是无法判断网络中的两个请求是否是同一用户发起的，为解决这个问题，Cookie就出现了。Cookie的大小只有4kb，它是一种纯文本文件，每次发起HTTP请求都会携带Cookie。\nCookie的特性：\n\nCookie一旦创建成功，名称就无法修改\nCookie是无法跨域名的，也就是说a域名和b域名下的cookie是无法共享的，这也是由Cookie的隐私安全性决定的，这样就能够阻止非法获取其他网站的Cookie\n每个域名下Cookie的数量不能超过20个，每个Cookie的大小不能超过4kb\n有安全问题，如果Cookie被拦截了，那就可获得session的所有信息，即使加密也于事无补，无需知道cookie的意义，只要转发cookie就能达到目的\nCookie在请求一个新的页面的时候都会被发送过去\n\n如果需要域名之间跨域共享Cookie，有两种方法：\n\n使用Nginx反向代理\n在一个站点登陆之后，往其他网站写Cookie。服务端的Session存储到一个节点，Cookie存储sessionId\n\nCookie的使用场景：\n\n最常见的使用场景就是Cookie和session结合使用，我们将sessionId存储到Cookie中，每次发请求都会携带这个sessionId，这样服务端就知道是谁发起的请求，从而响应相应的信息。\n可以用来统计页面的点击次数\n\n（2）LocalStorageLocalStorage是HTML5新引入的特性，由于有的时候我们存储的信息较大，Cookie就不能满足我们的需求，这时候LocalStorage就派上用场了。\nLocalStorage的优点：\n\n在大小方面，LocalStorage的大小一般为5MB，可以储存更多的信息\nLocalStorage是持久储存，并不会随着页面的关闭而消失，除非主动清理，不然会永久存在\n仅储存在本地，不像Cookie那样每次HTTP请求都会被携带\n\nLocalStorage的缺点：\n\n存在浏览器兼容问题，IE8以下版本的浏览器不支持\n如果浏览器设置为隐私模式，那我们将无法读取到LocalStorage\nLocalStorage受到同源策略的限制，即端口、协议、主机地址有任何一个不相同，都不会访问\n\nLocalStorage的常用API：\n// 保存数据到 localStorage\nlocalStorage.setItem('key', 'value');\n\n// 从 localStorage 获取数据\nlet data = localStorage.getItem('key');\n\n// 从 localStorage 删除保存的数据\nlocalStorage.removeItem('key');\n\n// 从 localStorage 删除所有保存的数据\nlocalStorage.clear();\n\n// 获取某个索引的Key\nlocalStorage.key(index)\n复制代码\n\nLocalStorage的使用场景：\n\n有些网站有换肤的功能，这时候就可以将换肤的信息存储在本地的LocalStorage中，当需要换肤的时候，直接操作LocalStorage即可\n在网站中的用户浏览信息也会存储在LocalStorage中，还有网站的一些不常变动的个人信息等也可以存储在本地的LocalStorage中\n\n（3）SessionStorageSessionStorage和LocalStorage都是在HTML5才提出来的存储方案，SessionStorage 主要用于临时保存同一窗口(或标签页)的数据，刷新页面时不会删除，关闭窗口或标签页之后将会删除这些数据。\nSessionStorage与LocalStorage对比：\n\nSessionStorage和LocalStorage都在本地进行数据存储；\nSessionStorage也有同源策略的限制，但是SessionStorage有一条更加严格的限制，SessionStorage只有在同一浏览器的同一窗口下才能够共享；\nLocalStorage和SessionStorage都不能被爬虫爬取；\n\nSessionStorage的常用API：\n// 保存数据到 sessionStorage\nsessionStorage.setItem('key', 'value');\n\n// 从 sessionStorage 获取数据\nlet data = sessionStorage.getItem('key');\n\n// 从 sessionStorage 删除保存的数据\nsessionStorage.removeItem('key');\n\n// 从 sessionStorage 删除所有保存的数据\nsessionStorage.clear();\n\n// 获取某个索引的Key\nsessionStorage.key(index)\n复制代码\n\nSessionStorage的使用场景\n\n由于SessionStorage具有时效性，所以可以用来存储一些网站的游客登录的信息，还有临时的浏览记录的信息。当关闭网站之后，这些信息也就随之消除了。\n\n2. Cookie有哪些字段，作用分别是什么Cookie由以下字段组成：\n\nName：cookie的名称\nValue：cookie的值，对于认证cookie，value值包括web服务器所提供的访问令牌；\nSize： cookie的大小\nPath：可以访问此cookie的页面路径。 比如domain是abc.com，path是/test，那么只有/test路径下的页面可以读取此cookie。\nSecure： 指定是否使用HTTPS安全协议发送Cookie。使用HTTPS安全协议，可以保护Cookie在浏览器和Web服务器间的传输过程中不被窃取和篡改。该方法也可用于Web站点的身份鉴别，即在HTTPS的连接建立阶段，浏览器会检查Web网站的SSL证书的有效性。但是基于兼容性的原因（比如有些网站使用自签署的证书）在检测到SSL证书无效时，浏览器并不会立即终止用户的连接请求，而是显示安全风险信息，用户仍可以选择继续访问该站点。\nDomain：可以访问该cookie的域名，Cookie 机制并未遵循严格的同源策略，允许一个子域可以设置或获取其父域的 Cookie。当需要实现单点登录方案时，Cookie 的上述特性非常有用，然而也增加了 Cookie受攻击的危险，比如攻击者可以借此发动会话定置攻击。因而，浏览器禁止在 Domain 属性中设置.org、.com 等通用顶级域名、以及在国家及地区顶级域下注册的二级域名，以减小攻击发生的范围。\nHTTP： 该字段包含HTTPOnly 属性 ，该属性用来设置cookie能否通过脚本来访问，默认为空，即可以通过脚本访问。在客户端是不能通过js代码去设置一个httpOnly类型的cookie的，这种类型的cookie只能通过服务端来设置。该属性用于防止客户端脚本通过document.cookie属性访问Cookie，有助于保护Cookie不被跨站脚本攻击窃取或篡改。但是，HTTPOnly的应用仍存在局限性，一些浏览器可以阻止客户端脚本对Cookie的读操作，但允许写操作；此外大多数浏览器仍允许通过XMLHTTP对象读取HTTP响应中的Set-Cookie头。\nExpires/Max-size ： 此cookie的超时时间。若设置其值为一个时间，那么当到达此时间后，此cookie失效。不设置的话默认值是Session，意思是cookie会和session一起失效。当浏览器关闭(不是浏览器标签页，而是整个浏览器) 后，此cookie失效。\n\n总结： 服务器端可以使用 Set-Cookie 的响应头部来配置 cookie 信息。一条cookie 包括了5个属性值 expires、domain、path、secure、HttpOnly。其中 expires 指定了 cookie 失效的时间，domain 是域名、path是路径，domain 和 path 一起限制了 cookie 能够被哪些 url 访问。secure 规定了 cookie 只能在确保安全的情况下传输，HttpOnly 规定了这个 cookie 只能被服务器访问，不能使用 js 脚本访问。\n3. Cookie、LocalStorage、SessionStorage区别浏览器端常用的存储技术是 cookie 、localStorage 和 sessionStorage。\n\ncookie： 其实最开始是服务器端用于记录用户状态的一种方式，由服务器设置，在客户端存储，然后每次发起同源请求时，发送给服务器端。cookie 最多能存储 4 k 数据，它的生存时间由 expires 属性指定，并且 cookie 只能被同源的页面访问共享。\nsessionStorage： html5 提供的一种浏览器本地存储的方法，它借鉴了服务器端 session 的概念，代表的是一次会话中所保存的数据。它一般能够存储 5M 或者更大的数据，它在当前窗口关闭后就失效了，并且 sessionStorage 只能被同一个窗口的同源页面所访问共享。\nlocalStorage： html5 提供的一种浏览器本地存储的方法，它一般也能够存储 5M 或者更大的数据。它和 sessionStorage 不同的是，除非手动删除它，否则它不会失效，并且 localStorage 也只能被同源页面所访问共享。\n\n上面几种方式都是存储少量数据的时候的存储方式，当需要在本地存储大量数据的时候，我们可以使用浏览器的 indexDB 这是浏览器提供的一种本地的数据库存储机制。它不是关系型数据库，它内部采用对象仓库的形式存储数据，它更接近 NoSQL 数据库。\n4. 前端储存的⽅式有哪些？\ncookies： 在HTML5标准前本地储存的主要⽅式，优点是兼容性好，请求头⾃带cookie⽅便，缺点是⼤⼩只有4k，⾃动请求头加⼊cookie浪费流量，每个domain限制20个cookie，使⽤起来麻烦，需要⾃⾏封装；\nlocalStorage：HTML5加⼊的以键值对(Key-Value)为标准的⽅式，优点是操作⽅便，永久性储存（除⾮⼿动删除），⼤⼩为5M，兼容IE8+ ；\nsessionStorage：与localStorage基本类似，区别是sessionStorage当⻚⾯关闭后会被清理，⽽且与cookie、localStorage不同，他不能在所有同源窗⼝中共享，是会话级别的储存⽅式；\nWeb SQL：2010年被W3C废弃的本地数据库数据存储⽅案，但是主流浏览器（⽕狐除外）都已经有了相关的实现，web sql类似于SQLite，是真正意义上的关系型数据库，⽤sql进⾏操作，当我们⽤JavaScript时要进⾏转换，较为繁琐；\nIndexedDB： 是被正式纳⼊HTML5标准的数据库储存⽅案，它是NoSQL数据库，⽤键值对进⾏储存，可以进⾏快速读取操作，⾮常适合web场景，同时⽤JavaScript进⾏操作会⾮常便。\n\n5. IndexedDB有哪些特点？IndexedDB 具有以下特点：\n\n键值对储存：IndexedDB 内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括 JavaScript 对象。对象仓库中，数据以”键值对”的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误。\n异步：IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作，这与 LocalStorage 形成对比，后者的操作是同步的。异步设计是为了防止大量数据的读写，拖慢网页的表现。\n支持事务：IndexedDB 支持事务（transaction），这意味着一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况。\n同源限制： IndexedDB 受到同源限制，每一个数据库对应创建它的域名。网页只能访问自身域名下的数据库，而不能访问跨域的数据库。\n储存空间大：IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB，甚至没有上限。\n支持二进制储存：IndexedDB 不仅可以储存字符串，还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象）。\n\n七、浏览器同源策略1. 什么是同源策略跨域问题其实就是浏览器的同源策略造成的。\n\n\n\n\n\n\n\n\n\n同源策略限制了从同一个源加载的文档或脚本如何与另一个源的资源进行交互。这是浏览器的一个用于隔离潜在恶意文件的重要的安全机制。同源指的是：协议、端口号、域名必须一致。\n下表给出了与 URL store.company.com/dir/page.ht… 的源进行对比的示例:\n\n\n\nURL\n是否跨域\n原因\n\n\n\nstore.company.com/dir/page.ht…\n同源\n完全相同\n\n\nstore.company.com/dir/inner/a…\n同源\n只有路径不同\n\n\nstore.company.com/secure.html\n跨域\n协议不同\n\n\nstore.company.com:81/dir/etc.htm…\n跨域\n端口不同 ( http:// 默认端口是80)\n\n\nnews.company.com/dir/other.h…\n跨域\n主机不同\n\n\n同源策略：protocol（协议）、domain（域名）、port（端口）三者必须一致。\n同源政策主要限制了三个方面：\n\n当前域下的 js 脚本不能够访问其他域下的 cookie、localStorage 和 indexDB。\n当前域下的 js 脚本不能够操作访问操作其他域下的 DOM。\n当前域下 ajax 无法发送跨域请求。\n\n同源政策的目的主要是为了保证用户的信息安全，它只是对 js 脚本的一种限制，并不是对浏览器的限制，对于一般的 img、或者script 脚本请求都不会有跨域的限制，这是因为这些操作都不会通过响应结果来进行可能出现安全问题的操作。\n2. 如何解决跨越问题（1）CORS下面是MDN对于CORS的定义：\n\n\n\n\n\n\n\n\n\n跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器  让运行在一个 origin (domain)上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域HTTP 请求。\nCORS需要浏览器和服务器同时支持，整个CORS过程都是浏览器完成的，无需用户参与。因此实现CORS的关键就是服务器，只要服务器实现了CORS请求，就可以跨源通信了。\n浏览器将CORS分为简单请求和非简单请求：\n简单请求不会触发CORS预检请求。若该请求满足以下两个条件，就可以看作是简单请求：\n1）请求方法是以下三种方法之一：\n\nHEAD\nGET\nPOST\n\n2）HTTP的头信息不超出以下几种字段：\n\nAccept\nAccept-Language\nContent-Language\nLast-Event-ID\nContent-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain\n\n若不满足以上条件，就属于非简单请求了。\n（1）简单请求过程：\n对于简单请求，浏览器会直接发出CORS请求，它会在请求的头信息中增加一个Orign字段，该字段用来说明本次请求来自哪个源（协议+端口+域名），服务器会根据这个值来决定是否同意这次请求。如果Orign指定的域名在许可范围之内，服务器返回的响应就会多出以下信息头：\nAccess-Control-Allow-Origin: http://api.bob.com  // 和Orign一直\nAccess-Control-Allow-Credentials: true   // 表示是否允许发送Cookie\nAccess-Control-Expose-Headers: FooBar   // 指定返回其他字段的值\nContent-Type: text/html; charset=utf-8   // 表示文档类型\n复制代码\n\n如果Orign指定的域名不在许可范围之内，服务器会返回一个正常的HTTP回应，浏览器发现没有上面的Access-Control-Allow-Origin头部信息，就知道出错了。这个错误无法通过状态码识别，因为返回的状态码可能是200。\n在简单请求中，在服务器内，至少需要设置字段：Access-Control-Allow-Origin\n（2）非简单请求过程\n非简单请求是对服务器有特殊要求的请求，比如请求方法为DELETE或者PUT等。非简单请求的CORS请求会在正式通信之前进行一次HTTP查询请求，称为预检请求。\n浏览器会询问服务器，当前所在的网页是否在服务器允许访问的范围内，以及可以使用哪些HTTP请求方式和头信息字段，只有得到肯定的回复，才会进行正式的HTTP请求，否则就会报错。\n预检请求使用的请求方法是OPTIONS，表示这个请求是来询问的。他的头信息中的关键字段是Orign，表示请求来自哪个源。除此之外，头信息中还包括两个字段：\n\nAccess-Control-Request-Method：该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法。\nAccess-Control-Request-Headers： 该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段。\n\n服务器在收到浏览器的预检请求之后，会根据头信息的三个字段来进行判断，如果返回的头信息在中有Access-Control-Allow-Origin这个字段就是允许跨域请求，如果没有，就是不同意这个预检请求，就会报错。\n服务器回应的CORS的字段如下：\nAccess-Control-Allow-Origin: http://api.bob.com  // 允许跨域的源地址\nAccess-Control-Allow-Methods: GET, POST, PUT // 服务器支持的所有跨域请求的方法\nAccess-Control-Allow-Headers: X-Custom-Header  // 服务器支持的所有头信息字段\nAccess-Control-Allow-Credentials: true   // 表示是否允许发送Cookie\nAccess-Control-Max-Age: 1728000  // 用来指定本次预检请求的有效期，单位为秒\n复制代码\n\n只要服务器通过了预检请求，在以后每次的CORS请求都会自带一个Origin头信息字段。服务器的回应，也都会有一个Access-Control-Allow-Origin头信息字段。\n在非简单请求中，至少需要设置以下字段：\n'Access-Control-Allow-Origin'  \n'Access-Control-Allow-Methods'\n'Access-Control-Allow-Headers'\n复制代码\n\n减少OPTIONS请求次数：OPTIONS请求次数过多就会损耗页面加载的性能，降低用户体验度。所以尽量要减少OPTIONS请求次数，可以后端在请求的返回头部添加：Access-Control-Max-Age：number。它表示预检请求的返回结果可以被缓存多久，单位是秒。该字段只对完全一样的URL的缓存设置生效，所以设置了缓存时间，在这个时间范围内，再次发送请求就不需要进行预检请求了。\nCORS中Cookie相关问题：在CORS请求中，如果想要传递Cookie，就要满足以下三个条件：\n\n在请求中设置 withCredentials\n\n默认情况下在跨域请求，浏览器是不带 cookie 的。但是我们可以通过设置 withCredentials 来进行传递 cookie.\n// 原生 xml 的设置方式\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n// axios 设置方式\naxios.defaults.withCredentials = true;\n复制代码\n\n\nAccess-Control-Allow-Credentials 设置为 true\nAccess-Control-Allow-Origin 设置为非 *\n\n（2）JSONPjsonp的原理就是利用&lt;script&gt;标签没有跨域限制，通过&lt;script&gt;标签src属性，发送带有callback参数的GET请求，服务端将接口返回数据拼凑到callback函数中，返回给浏览器，浏览器解析执行，从而前端拿到callback函数返回的数据。 1）原生JS实现：\n&lt;script>\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    // 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数\n    script.src = 'http://www.domain2.com:8080/login?user=admin&amp;callback=handleCallback';\n    document.head.appendChild(script);\n    // 回调执行函数\n    function handleCallback(res) &#123;\n        alert(JSON.stringify(res));\n    &#125;\n &lt;/script>\n复制代码\n\n服务端返回如下（返回时即执行全局函数）：\nhandleCallback(&#123;\"success\": true, \"user\": \"admin\"&#125;)\n复制代码\n\n2）Vue axios实现：\nthis.$http = axios;\nthis.$http.jsonp('http://www.domain2.com:8080/login', &#123;\n    params: &#123;&#125;,\n    jsonp: 'handleCallback'\n&#125;).then((res) => &#123;\n    console.log(res); \n&#125;)\n复制代码\n\n后端node.js代码：\nvar querystring = require('querystring');\nvar http = require('http');\nvar server = http.createServer();\nserver.on('request', function(req, res) &#123;\n    var params = querystring.parse(req.url.split('?')[1]);\n    var fn = params.callback;\n    // jsonp返回设置\n    res.writeHead(200, &#123; 'Content-Type': 'text/javascript' &#125;);\n    res.write(fn + '(' + JSON.stringify(params) + ')');\n    res.end();\n&#125;);\nserver.listen('8080');\nconsole.log('Server is running at port 8080...');\n复制代码\n\nJSONP的缺点：\n\n具有局限性， 仅支持get方法\n不安全，可能会遭受XSS攻击\n\n（3）postMessage 跨域postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：\n\n页面和其打开的新窗口的数据传递\n多窗口之间消息传递\n页面与嵌套的iframe消息传递\n上面三个场景的跨域数据传递\n\n用法：postMessage(data,origin)方法接受两个参数：\n\ndata： html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用JSON.stringify()序列化。\norigin： 协议+主机+端口号，也可以设置为”*”，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为”/“。\n\n1）a.html：(domain1.com/a.html)\n&lt;iframe id=\"iframe\" src=\"http://www.domain2.com/b.html\" style=\"display:none;\">&lt;/iframe>\n&lt;script>       \n    var iframe = document.getElementById('iframe');\n    iframe.onload = function() &#123;\n        var data = &#123;\n            name: 'aym'\n        &#125;;\n        // 向domain2传送跨域数据\n        iframe.contentWindow.postMessage(JSON.stringify(data), 'http://www.domain2.com');\n    &#125;;\n    // 接受domain2返回数据\n    window.addEventListener('message', function(e) &#123;\n        alert('data from domain2 ---> ' + e.data);\n    &#125;, false);\n&lt;/script>\n复制代码\n\n2）b.html：(domain2.com/b.html)\n&lt;script>\n    // 接收domain1的数据\n    window.addEventListener('message', function(e) &#123;\n        alert('data from domain1 ---> ' + e.data);\n        var data = JSON.parse(e.data);\n        if (data) &#123;\n            data.number = 16;\n            // 处理后再发回domain1\n            window.parent.postMessage(JSON.stringify(data), 'http://www.domain1.com');\n        &#125;\n    &#125;, false);\n&lt;/script>\n复制代码\n\n（4）nginx代理跨域nginx代理跨域，实质和CORS跨域原理一样，通过配置文件设置请求响应头Access-Control-Allow-Origin…等字段。\n1）nginx配置解决iconfont跨域 浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。\nlocation / &#123;\n  add_header Access-Control-Allow-Origin *;\n&#125;\n复制代码\n\n2）nginx反向代理接口跨域 跨域问题：同源策略仅是针对浏览器的安全策略。服务器端调用HTTP接口只是使用HTTP协议，不需要同源策略，也就不存在跨域问题。 实现思路：通过Nginx配置一个代理服务器域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域访问。\nnginx具体配置：\n#proxy服务器\nserver &#123;\n    listen       81;\n    server_name  www.domain1.com;\n    location / &#123;\n        proxy_pass   http://www.domain2.com:8080;  #反向代理\n        proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名\n        index  index.html index.htm;\n        # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用\n        add_header Access-Control-Allow-Origin http://www.domain1.com;  #当前端只跨域不带cookie时，可为*\n        add_header Access-Control-Allow-Credentials true;\n    &#125;\n&#125;\n复制代码\n\n（5）nodejs 中间件代理跨域node中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置cookieDomainRewrite参数修改响应头中cookie中域名，实现当前域的cookie写入，方便接口登录认证。\n1）非vue框架的跨域 使用node + express + http-proxy-middleware搭建一个proxy服务器。\n\n前端代码：\n\nvar xhr = new XMLHttpRequest();\n// 前端开关：浏览器是否读写cookie\nxhr.withCredentials = true;\n// 访问http-proxy-middleware代理服务器\nxhr.open('get', 'http://www.domain1.com:3000/login?user=admin', true);\nxhr.send();\n复制代码\n\n\n中间件服务器代码：\n\nvar express = require('express');\nvar proxy = require('http-proxy-middleware');\nvar app = express();\napp.use('/', proxy(&#123;\n    // 代理跨域目标接口\n    target: 'http://www.domain2.com:8080',\n    changeOrigin: true,\n    // 修改响应头信息，实现跨域并允许带cookie\n    onProxyRes: function(proxyRes, req, res) &#123;\n        res.header('Access-Control-Allow-Origin', 'http://www.domain1.com');\n        res.header('Access-Control-Allow-Credentials', 'true');\n    &#125;,\n    // 修改响应信息中的cookie域名\n    cookieDomainRewrite: 'www.domain1.com'  // 可以为false，表示不修改\n&#125;));\napp.listen(3000);\nconsole.log('Proxy server is listen at port 3000...');\n复制代码\n\n2）vue框架的跨域\nnode + vue + webpack + webpack-dev-server搭建的项目，跨域请求接口，直接修改webpack.config.js配置。开发环境下，vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域。\nwebpack.config.js部分配置：\nmodule.exports = &#123;\n    entry: &#123;&#125;,\n    module: &#123;&#125;,\n    ...\n    devServer: &#123;\n        historyApiFallback: true,\n        proxy: [&#123;\n            context: '/login',\n            target: 'http://www.domain2.com:8080',  // 代理跨域目标接口\n            changeOrigin: true,\n            secure: false,  // 当代理某些https服务报错时用\n            cookieDomainRewrite: 'www.domain1.com'  // 可以为false，表示不修改\n        &#125;],\n        noInfo: true\n    &#125;\n&#125;\n复制代码\n\n（6）document.domain + iframe跨域此方案仅限主域相同，子域不同的跨域应用场景。实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。 1）父窗口：(domain.com/a.html)\n&lt;iframe id=\"iframe\" src=\"http://child.domain.com/b.html\">&lt;/iframe>\n&lt;script>\n    document.domain = 'domain.com';\n    var user = 'admin';\n&lt;/script>\n复制代码\n\n1）子窗口：(child.domain.com/a.html)\n&lt;script>\n    document.domain = 'domain.com';\n    // 获取父窗口中变量\n    console.log('get js data from parent ---> ' + window.parent.user);\n&lt;/script>\n复制代码\n\n（7）location.hash + iframe跨域实现原理：a欲与b跨域相互通信，通过中间页c来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。\n具体实现：A域：a.html -&gt; B域：b.html -&gt; A域：c.html，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。\n1）a.html：(domain1.com/a.html)\n&lt;iframe id=\"iframe\" src=\"http://www.domain2.com/b.html\" style=\"display:none;\">&lt;/iframe>\n&lt;script>\n    var iframe = document.getElementById('iframe');\n    // 向b.html传hash值\n    setTimeout(function() &#123;\n        iframe.src = iframe.src + '#user=admin';\n    &#125;, 1000);\n    \n    // 开放给同域c.html的回调方法\n    function onCallback(res) &#123;\n        alert('data from c.html ---> ' + res);\n    &#125;\n&lt;/script>\n复制代码\n\n2）b.html：(.domain2.com/b.html)\n&lt;iframe id&#x3D;&quot;iframe&quot; src&#x3D;&quot;http:&#x2F;&#x2F;www.domain1.com&#x2F;c.html&quot; style&#x3D;&quot;display:none;&quot;&gt;&lt;&#x2F;iframe&gt;\n&lt;script&gt;\n    var iframe &#x3D; document.getElementById(&#39;iframe&#39;);\n    &#x2F;&#x2F; 监听a.html传来的hash值，再传给c.html\n    window.onhashchange &#x3D; function () &#123;\n        iframe.src &#x3D; iframe.src + location.hash;\n    &#125;;\n&lt;&#x2F;script&gt;\n复制代码\n\n3）c.html：(www.domain1.com/c.html)\n&lt;script>\n    // 监听b.html传来的hash值\n    window.onhashchange = function () &#123;\n        // 再通过操作同域a.html的js回调，将结果传回\n        window.parent.parent.onCallback('hello: ' + location.hash.replace('#user=', ''));\n    &#125;;\n&lt;/script>\n复制代码\n\n（8）window.name + iframe跨域window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。\n1）a.html：(domain1.com/a.html)\nvar proxy = function(url, callback) &#123;\n    var state = 0;\n    var iframe = document.createElement('iframe');\n    // 加载跨域页面\n    iframe.src = url;\n    // onload事件会触发2次，第1次加载跨域页，并留存数据于window.name\n    iframe.onload = function() &#123;\n        if (state === 1) &#123;\n            // 第2次onload(同域proxy页)成功后，读取同域window.name中数据\n            callback(iframe.contentWindow.name);\n            destoryFrame();\n        &#125; else if (state === 0) &#123;\n            // 第1次onload(跨域页)成功后，切换到同域代理页面\n            iframe.contentWindow.location = 'http://www.domain1.com/proxy.html';\n            state = 1;\n        &#125;\n    &#125;;\n    document.body.appendChild(iframe);\n    // 获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）\n    function destoryFrame() &#123;\n        iframe.contentWindow.document.write('');\n        iframe.contentWindow.close();\n        document.body.removeChild(iframe);\n    &#125;\n&#125;;\n// 请求跨域b页面数据\nproxy('http://www.domain2.com/b.html', function(data)&#123;\n    alert(data);\n&#125;);\n复制代码\n\n2）proxy.html：(domain1.com/proxy.html)\n中间代理页，与a.html同域，内容为空即可。 3）b.html：(domain2.com/b.html)\n&lt;script>    \n    window.name = 'This is domain2 data!';\n&lt;/script>\n复制代码\n\n通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。\n（9）WebSocket协议跨域WebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很好的实现。\n原生WebSocket API使用起来不太方便，我们使用Socket.io，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。\n1）前端代码：\n&lt;div>user input：&lt;input type=\"text\">&lt;/div>\n&lt;script src=\"https://cdn.bootcss.com/socket.io/2.2.0/socket.io.js\">&lt;/script>\n&lt;script>\nvar socket = io('http://www.domain2.com:8080');\n// 连接成功处理\nsocket.on('connect', function() &#123;\n    // 监听服务端消息\n    socket.on('message', function(msg) &#123;\n        console.log('data from server: ---> ' + msg); \n    &#125;);\n    // 监听服务端关闭\n    socket.on('disconnect', function() &#123; \n        console.log('Server socket has closed.'); \n    &#125;);\n&#125;);\ndocument.getElementsByTagName('input')[0].onblur = function() &#123;\n    socket.send(this.value);\n&#125;;\n&lt;/script>\n复制代码\n\n2）Nodejs socket后台：\nvar http = require('http');\nvar socket = require('socket.io');\n// 启http服务\nvar server = http.createServer(function(req, res) &#123;\n    res.writeHead(200, &#123;\n        'Content-type': 'text/html'\n    &#125;);\n    res.end();\n&#125;);\nserver.listen('8080');\nconsole.log('Server is running at port 8080...');\n// 监听socket连接\nsocket.listen(server).on('connection', function(client) &#123;\n    // 接收信息\n    client.on('message', function(msg) &#123;\n        client.send('hello：' + msg);\n        console.log('data from client: ---> ' + msg);\n    &#125;);\n    // 断开处理\n    client.on('disconnect', function() &#123;\n        console.log('Client socket has closed.'); \n    &#125;);\n&#125;);\n复制代码\n\n3. 正向代理和反向代理的区别\n正向代理：\n\n客户端想获得一个服务器的数据，但是因为种种原因无法直接获取。于是客户端设置了一个代理服务器，并且指定目标服务器，之后代理服务器向目标服务器转交请求并将获得的内容发送给客户端。这样本质上起到了对真实服务器隐藏真实客户端的目的。实现正向代理需要修改客户端，比如修改浏览器配置。\n\n反向代理：\n\n服务器为了能够将工作负载分不到多个服务器来提高网站性能 (负载均衡)等目的，当其受到请求后，会首先根据转发规则来确定请求应该被转发到哪个服务器上，然后将请求转发到对应的真实服务器上。这样本质上起到了对客户端隐藏真实服务器的作用。 一般使用反向代理后，需要通过修改 DNS 让域名解析到代理服务器 IP，这时浏览器无法察觉到真正服务器的存在，当然也就不需要修改配置了。\n两者区别如图示：  正向代理和反向代理的结构是一样的，都是 client-proxy-server 的结构，它们主要的区别就在于中间这个 proxy 是哪一方设置的。在正向代理中，proxy 是 client 设置的，用来隐藏 client；而在反向代理中，proxy 是 server 设置的，用来隐藏 server。\n4. Nginx的概念及其工作原理Nginx 是一款轻量级的 Web 服务器，也可以用于反向代理、负载平衡和 HTTP 缓存等。Nginx 使用异步事件驱动的方法来处理请求，是一款面向性能设计的 HTTP 服务器。\n传统的 Web 服务器如 Apache 是 process-based 模型的，而 Nginx 是基于event-driven模型的。正是这个主要的区别带给了 Nginx 在性能上的优势。\nNginx 架构的最顶层是一个 master process，这个 master process 用于产生其他的 worker process，这一点和Apache 非常像，但是 Nginx 的 worker process 可以同时处理大量的HTTP请求，而每个 Apache process 只能处理一个。\n八、浏览器事件机制1. 事件是什么？事件模型？事件是用户操作网页时发生的交互动作，比如 click/move， 事件除了用户触发的动作外，还可以是文档加载，窗口滚动和大小调整。事件被封装成一个 event 对象，包含了该事件发生时的所有相关信息（ event 的属性）以及可以对事件进行的操作（ event 的方法）。\n事件是用户操作网页时发生的交互动作或者网页本身的一些操作，现代浏览器一共有三种事件模型：\n\nDOM0 级事件模型，这种模型不会传播，所以没有事件流的概念，但是现在有的浏览器支持以冒泡的方式实现，它可以在网页中直接定义监听函数，也可以通过 js 属性来指定监听函数。所有浏览器都兼容这种方式。直接在dom对象上注册事件名称，就是DOM0写法。\nIE 事件模型，在该事件模型中，一次事件共有两个过程，事件处理阶段和事件冒泡阶段。事件处理阶段会首先执行目标元素绑定的监听事件。然后是事件冒泡阶段，冒泡指的是事件从目标元素冒泡到 document，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。这种模型通过attachEvent 来添加监听函数，可以添加多个监听函数，会按顺序依次执行。\nDOM2 级事件模型，在该事件模型中，一次事件共有三个过程，第一个过程是事件捕获阶段。捕获指的是事件从 document 一直向下传播到目标元素，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。后面两个阶段和 IE 事件模型的两个阶段相同。这种事件模型，事件绑定的函数是addEventListener，其中第三个参数可以指定事件是否在捕获阶段执行。\n\n2. 如何阻止事件冒泡\n普通浏览器使用：event.stopPropagation()\nIE浏览器使用：event.cancelBubble = true;\n\n3. 对事件委托的理解（1）事件委托的概念事件委托本质上是利用了浏览器事件冒泡的机制。因为事件在冒泡过程中会上传到父节点，父节点可以通过事件对象获取到目标节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件，这种方式称为事件委托（事件代理）。\n使用事件委托可以不必要为每一个子元素都绑定一个监听事件，这样减少了内存上的消耗。并且使用事件代理还可以实现事件的动态绑定，比如说新增了一个子节点，并不需要单独地为它添加一个监听事件，它绑定的事件会交给父元素中的监听函数来处理。\n（2）事件委托的特点\n减少内存消耗\n\n如果有一个列表，列表之中有大量的列表项，需要在点击列表项的时候响应一个事件：\n&lt;ul id=\"list\">\n  &lt;li>item 1&lt;/li>\n  &lt;li>item 2&lt;/li>\n  &lt;li>item 3&lt;/li>\n  ......\n  &lt;li>item n&lt;/li>\n&lt;/ul>\n复制代码\n\n如果给每个列表项一一都绑定一个函数，那对于内存消耗是非常大的，效率上需要消耗很多性能。因此，比较好的方法就是把这个点击事件绑定到他的父层，也就是 ul 上，然后在执行事件时再去匹配判断目标元素，所以事件委托可以减少大量的内存消耗，节约效率。\n\n动态绑定事件\n\n给上述的例子中每个列表项都绑定事件，在很多时候，需要通过 AJAX 或者用户操作动态的增加或者去除列表项元素，那么在每一次改变的时候都需要重新给新增的元素绑定事件，给即将删去的元素解绑事件；如果用了事件委托就没有这种麻烦了，因为事件是绑定在父层的，和目标元素的增减是没有关系的，执行到目标元素是在真正响应执行事件函数的过程中去匹配的，所以使用事件在动态绑定事件的情况下是可以减少很多重复工作的。\n// 来实现把 #list 下的 li 元素的事件代理委托到它的父层元素也就是 #list 上：\n// 给父层元素绑定事件\ndocument.getElementById('list').addEventListener('click', function (e) &#123;\n  // 兼容性处理\n  var event = e || window.event;\n  var target = event.target || event.srcElement;\n  // 判断是否匹配目标元素\n  if (target.nodeName.toLocaleLowerCase === 'li') &#123;\n    console.log('the content is: ', target.innerHTML);\n  &#125;\n&#125;);\n复制代码\n\n在上述代码中， target 元素则是在 #list 元素之下具体被点击的元素，然后通过判断 target 的一些属性（比如：nodeName，id 等等）可以更精确地匹配到某一类 #list li 元素之上；\n（3）局限性当然，事件委托也是有局限的。比如 focus、blur 之类的事件没有事件冒泡机制，所以无法实现事件委托；mousemove、mouseout 这样的事件，虽然有事件冒泡，但是只能不断通过位置去计算定位，对性能消耗高，因此也是不适合于事件委托的。\n当然事件委托不是只有优点，它也是有缺点的，事件委托会影响页面性能，主要影响因素有：\n\n元素中，绑定事件委托的次数；\n点击的最底层元素，到绑定事件元素之间的DOM层数；\n\n在必须使用事件委托的地方，可以进行如下的处理：\n\n只在必须的地方，使用事件委托，比如：ajax的局部刷新区域\n尽量的减少绑定的层级，不在body元素上，进行绑定\n减少绑定的次数，如果可以，那么把多个事件的绑定，合并到一次事件委托中去，由这个事件委托的回调，来进行分发。\n\n4. 事件委托的使用场景场景：给页面的所有的a标签添加click事件，代码如下：\ndocument.addEventListener(\"click\", function(e) &#123;\n\tif (e.target.nodeName == \"A\")\n\t\tconsole.log(\"a\");\n&#125;, false);\n复制代码\n\n但是这些a标签可能包含一些像span、img等元素，如果点击到了这些a标签中的元素，就不会触发click事件，因为事件绑定上在a标签元素上，而触发这些内部的元素时，e.target指向的是触发click事件的元素（span、img等其他元素）。\n这种情况下就可以使用事件委托来处理，将事件绑定在a标签的内部元素上，当点击它的时候，就会逐级向上查找，知道找到a标签为止，代码如下：\ndocument.addEventListener(\"click\", function(e) &#123;\n\tvar node = e.target;\n\twhile (node.parentNode.nodeName != \"BODY\") &#123;\n\t\tif (node.nodeName == \"A\") &#123;\n\t\t\tconsole.log(\"a\");\n\t\t\tbreak;\n\t\t&#125;\n\t\tnode = node.parentNode;\n\t&#125;\n&#125;, false);\n复制代码\n\n5. 同步和异步的区别\n同步指的是当一个进程在执行某个请求时，如果这个请求需要等待一段时间才能返回，那么这个进程会一直等待下去，直到消息返回为止再继续向下执行。\n异步指的是当一个进程在执行某个请求时，如果这个请求需要等待一段时间才能返回，这个时候进程会继续往下执行，不会阻塞等待消息的返回，当消息返回时系统再通知进程进行处理。\n\n6. 对事件循环的理解因为 js 是单线程运行的，在代码执行时，通过将不同函数的执行上下文压入执行栈中来保证代码的有序执行。在执行同步代码时，如果遇到异步事件，js 引擎并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。当异步事件执行完毕后，再将异步事件对应的回调加入到一个任务队列中等待执行。任务队列可以分为宏任务队列和微任务队列，当当前执行栈中的事件执行完毕后，js 引擎首先会判断微任务队列中是否有任务可以执行，如果有就将微任务队首的事件压入栈中执行。当微任务队列中的任务都执行完成后再去执行宏任务队列中的任务。\n\nEvent Loop 执行顺序如下所示：\n\n首先执行同步代码，这属于宏任务\n当执行完所有同步代码后，执行栈为空，查询是否有异步代码需要执行\n执行所有微任务\n当执行完所有微任务后，如有必要会渲染页面\n然后开始下一轮 Event Loop，执行宏任务中的异步代码\n\n7. 宏任务和微任务分别有哪些\n微任务包括： promise 的回调、node 中的 process.nextTick 、对 Dom 变化监听的 MutationObserver。\n宏任务包括： script 脚本的执行、setTimeout ，setInterval ，setImmediate 一类的定时事件，还有如 I/O 操作、UI 渲染等。\n\n8. 什么是执行栈可以把执行栈认为是一个存储函数调用的栈结构，遵循先进后出的原则。  当开始执行 JS 代码时，根据先进后出的原则，后执行的函数会先弹出栈，可以看到，foo 函数后执行，当执行完毕后就从栈中弹出了。\n平时在开发中，可以在报错中找到执行栈的痕迹：\nfunction foo() &#123;\n  throw new Error('error')\n&#125;\nfunction bar() &#123;\n  foo()\n&#125;\nbar()\n复制代码\n\n 可以看到报错在 foo 函数，foo 函数又是在 bar 函数中调用的。当使用递归时，因为栈可存放的函数是有限制的，一旦存放了过多的函数且没有得到释放的话，就会出现爆栈的问题\nfunction bar() &#123;  bar()&#125;bar()\n复制代码\n\n\n9. Node 中的 Event Loop 和浏览器中的有什么区别？process.nextTick 执行顺序？Node 中的 Event Loop 和浏览器中的是完全不相同的东西。\nNode 的 Event Loop 分为 6 个阶段，它们会按照顺序反复运行。每当进入某一个阶段的时候，都会从对应的回调队列中取出函数去执行。当队列为空或者执行的回调函数数量到达系统设定的阈值，就会进入下一阶段。 \n（1）Timers（计时器阶段）：初次进入事件循环，会从计时器阶段开始。此阶段会判断是否存在过期的计时器回调（包含 setTimeout 和 setInterval），如果存在则会执行所有过期的计时器回调，执行完毕后，如果回调中触发了相应的微任务，会接着执行所有微任务，执行完微任务后再进入 Pending callbacks 阶段。\n（2）Pending callbacks：执行推迟到下一个循环迭代的I / O回调（系统调用相关的回调）。\n（3）Idle/Prepare：仅供内部使用。\n（4）Poll（轮询阶段）：\n\n当回调队列不为空时：会执行回调，若回调中触发了相应的微任务，这里的微任务执行时机和其他地方有所不同，不会等到所有回调执行完毕后才执行，而是针对每一个回调执行完毕后，就执行相应微任务。执行完所有的回调后，变为下面的情况。\n当回调队列为空时（没有回调或所有回调执行完毕）：但如果存在有计时器（setTimeout、setInterval和setImmediate）没有执行，会结束轮询阶段，进入 Check 阶段。否则会阻塞并等待任何正在执行的I/O操作完成，并马上执行相应的回调，直到所有回调执行完毕。\n\n（5）Check（查询阶段）：会检查是否存在 setImmediate 相关的回调，如果存在则执行所有回调，执行完毕后，如果回调中触发了相应的微任务，会接着执行所有微任务，执行完微任务后再进入 Close callbacks 阶段。\n（6）Close callbacks：执行一些关闭回调，比如socket.on(‘close’, …)等。\n下面来看一个例子，首先在有些情况下，定时器的执行顺序其实是随机的\nsetTimeout(() => &#123;    console.log('setTimeout')&#125;, 0)setImmediate(() => &#123;    console.log('setImmediate')&#125;)\n复制代码\n\n对于以上代码来说，setTimeout 可能执行在前，也可能执行在后\n\n首先 setTimeout(fn, 0) === setTimeout(fn, 1)，这是由源码决定的\n进入事件循环也是需要成本的，如果在准备时候花费了大于 1ms 的时间，那么在 timer 阶段就会直接执行 setTimeout 回调\n那么如果准备时间花费小于 1ms，那么就是 setImmediate 回调先执行了\n\n当然在某些情况下，他们的执行顺序一定是固定的，比如以下代码：\nconst fs = require('fs')\nfs.readFile(__filename, () => &#123;\n    setTimeout(() => &#123;\n        console.log('timeout');\n    &#125;, 0)\n    setImmediate(() => &#123;\n        console.log('immediate')\n    &#125;)\n&#125;)\n复制代码\n\n在上述代码中，setImmediate 永远先执行。因为两个代码写在 IO 回调中，IO 回调是在 poll 阶段执行，当回调执行完毕后队列为空，发现存在 setImmediate 回调，所以就直接跳转到 check 阶段去执行回调了。\n上面都是 macrotask 的执行情况，对于 microtask 来说，它会在以上每个阶段完成前清空 microtask 队列，下图中的 Tick 就代表了 microtask \nsetTimeout(() => &#123;\n  console.log('timer21')\n&#125;, 0)\nPromise.resolve().then(function() &#123;\n  console.log('promise1')\n&#125;)\n复制代码\n\n对于以上代码来说，其实和浏览器中的输出是一样的，microtask 永远执行在 macrotask 前面。\n最后来看 Node 中的 process.nextTick，这个函数其实是独立于 Event Loop 之外的，它有一个自己的队列，当每个阶段完成后，如果存在 nextTick 队列，就会清空队列中的所有回调函数，并且优先于其他 microtask 执行。\nsetTimeout(() => &#123;\n console.log('timer1')\n Promise.resolve().then(function() &#123;\n   console.log('promise1')\n &#125;)\n&#125;, 0)\nprocess.nextTick(() => &#123;\n console.log('nextTick')\n process.nextTick(() => &#123;\n   console.log('nextTick')\n   process.nextTick(() => &#123;\n     console.log('nextTick')\n     process.nextTick(() => &#123;\n       console.log('nextTick')\n     &#125;)\n   &#125;)\n &#125;)\n&#125;)\n复制代码\n\n对于以上代码，永远都是先把 nextTick 全部打印出来。\n10. 事件触发的过程是怎样的事件触发有三个阶段：\n\nwindow 往事件触发处传播，遇到注册的捕获事件会触发\n传播到事件触发处时触发注册的事件\n从事件触发处往 window 传播，遇到注册的冒泡事件会触发\n\n事件触发一般来说会按照上面的顺序进行，但是也有特例，如果给一个 *body* 中的子节点同时注册冒泡和捕获事件，事件触发会按照注册的顺序执行。\n// 以下会先打印冒泡然后是捕获\nnode.addEventListener(\n  'click',\n  event => &#123;\n    console.log('冒泡')\n  &#125;,\n  false\n)\nnode.addEventListener(\n  'click',\n  event => &#123;\n    console.log('捕获 ')\n  &#125;,\n  true\n)\n复制代码\n\n通常使用 addEventListener 注册事件，该函数的第三个参数可以是布尔值，也可以是对象。对于布尔值 useCapture 参数来说，该参数默认值为 false ，useCapture 决定了注册的事件是捕获事件还是冒泡事件。对于对象参数来说，可以使用以下几个属性：\n\ncapture：布尔值，和 useCapture 作用一样\nonce：布尔值，值为 true 表示该回调只会调用一次，调用后会移除监听\npassive：布尔值，表示永远不会调用 preventDefault\n\n一般来说，如果只希望事件只触发在目标上，这时候可以使用 stopPropagation 来阻止事件的进一步传播。通常认为 stopPropagation 是用来阻止事件冒泡的，其实该函数也可以阻止捕获事件。\nstopImmediatePropagation 同样也能实现阻止事件，但是还能阻止该事件目标执行别的注册事件。\nnode.addEventListener(\n  'click',\n  event => &#123;\n    event.stopImmediatePropagation()\n    console.log('冒泡')\n  &#125;,\n  false\n)\n// 点击 node 只会执行上面的函数，该函数不会执行\nnode.addEventListener(\n  'click',\n  event => &#123;\n    console.log('捕获 ')\n  &#125;,\n  true\n)\n复制代码\n\n九、浏览器垃圾回收机制1. V8的垃圾回收机制是怎样的V8 实现了准确式 GC，GC 算法采用了分代式垃圾回收机制。因此，V8 将内存（堆）分为新生代和老生代两部分。\n（1）新生代算法\n新生代中的对象一般存活时间较短，使用 Scavenge GC 算法。\n在新生代空间中，内存空间分为两部分，分别为 From 空间和 To 空间。在这两个空间中，必定有一个空间是使用的，另一个空间是空闲的。新分配的对象会被放入 From 空间中，当 From 空间被占满时，新生代 GC 就会启动了。算法会检查 From 空间中存活的对象并复制到 To 空间中，如果有失活的对象就会销毁。当复制完成后将 From 空间和 To 空间互换，这样 GC 就结束了。\n（2）老生代算法\n老生代中的对象一般存活时间较长且数量也多，使用了两个算法，分别是标记清除算法和标记压缩算法。\n先来说下什么情况下对象会出现在老生代空间中：\n\n新生代中的对象是否已经经历过一次 Scavenge 算法，如果经历过的话，会将对象从新生代空间移到老生代空间中。\nTo 空间的对象占比大小超过 25 %。在这种情况下，为了不影响到内存分配，会将对象从新生代空间移到老生代空间中。\n\n老生代中的空间很复杂，有如下几个空间\nenum AllocationSpace &#123;\n  // TODO(v8:7464): Actually map this space's memory as read-only.\n  RO_SPACE,    // 不变的对象空间\n  NEW_SPACE,   // 新生代用于 GC 复制算法的空间\n  OLD_SPACE,   // 老生代常驻对象空间\n  CODE_SPACE,  // 老生代代码对象空间\n  MAP_SPACE,   // 老生代 map 对象\n  LO_SPACE,    // 老生代大空间对象\n  NEW_LO_SPACE,  // 新生代大空间对象\n  FIRST_SPACE = RO_SPACE,\n  LAST_SPACE = NEW_LO_SPACE,\n  FIRST_GROWABLE_PAGED_SPACE = OLD_SPACE,\n  LAST_GROWABLE_PAGED_SPACE = MAP_SPACE\n&#125;;\n复制代码\n\n在老生代中，以下情况会先启动标记清除算法：\n\n某一个空间没有分块的时候\n空间中被对象超过一定限制\n空间不能保证新生代中的对象移动到老生代中\n\n在这个阶段中，会遍历堆中所有的对象，然后标记活的对象，在标记完成后，销毁所有没有被标记的对象。在标记大型对内存时，可能需要几百毫秒才能完成一次标记。这就会导致一些性能上的问题。为了解决这个问题，2011 年，V8 从 stop-the-world 标记切换到增量标志。在增量标记期间，GC 将标记工作分解为更小的模块，可以让 JS 应用逻辑在模块间隙执行一会，从而不至于让应用出现停顿情况。但在 2018 年，GC 技术又有了一个重大突破，这项技术名为并发标记。该技术可以让 GC 扫描和标记对象时，同时允许 JS 运行。\n清除对象后会造成堆内存出现碎片的情况，当碎片超过一定限制后会启动压缩算法。在压缩过程中，将活的对象向一端移动，直到所有对象都移动完成然后清理掉不需要的内存。\n2. 哪些操作会造成内存泄漏？\n第一种情况是由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。\n第二种情况是设置了 setInterval 定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留在内存中，而无法被回收。\n第三种情况是获取一个 DOM 元素的引用，而后面这个元素被删除，由于我们一直保留了对这个元素的引用，所以它也无法被回收。\n第四种情况是不合理的使用闭包，从而导致某些变量一直被留在内存当中。\n\n","slug":"浏览器原理和计算机网络面试题","date":"2022-04-10T12:20:25.000Z","categories_index":"知识点","tags_index":"面试","author_index":"LIYUNFU"},{"id":"f9ba258d0c41d5b94c171702acf48433","title":"JavaScript面试题","content":"一、数据类型1. JavaScript有哪些数据类型，它们的区别？JavaScript共有八种数据类型，分别是 Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt。\n其中 Symbol 和 BigInt 是ES6 中新增的数据类型：\n\nSymbol 代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。\nBigInt 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。\n\n这些数据可以分为原始数据类型和引用数据类型：\n\n栈：原始数据类型（Undefined、Null、Boolean、Number、String）\n堆：引用数据类型（对象、数组和函数）\n\n两种类型的区别在于存储位置的不同：\n\n原始数据类型直接存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；\n引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。\n\n堆和栈的概念存在于数据结构和操作系统内存中，在数据结构中：\n\n在数据结构中，栈中数据的存取方式为先进后出。\n堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。\n\n在操作系统中，内存被分为栈区和堆区：\n\n栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。\n堆区内存一般由开发着分配释放，若开发者不释放，程序结束时可能由垃圾回收机制回收。\n\n2. 数据类型检测的方式有哪些（1）typeof\nconsole.log(typeof 2);               // number\nconsole.log(typeof true);            // boolean\nconsole.log(typeof 'str');           // string\nconsole.log(typeof []);              // object    \nconsole.log(typeof function()&#123;&#125;);    // function\nconsole.log(typeof &#123;&#125;);              // object\nconsole.log(typeof undefined);       // undefined\nconsole.log(typeof null);            // object\n复制代码\n\n其中数组、对象、null都会被判断为object，其他判断都正确。\n（2）instanceof\ninstanceof可以正确判断对象的类型，其内部运行机制是判断在其原型链中能否找到该类型的原型。\nconsole.log(2 instanceof Number);                    // false\nconsole.log(true instanceof Boolean);                // false \nconsole.log('str' instanceof String);                // false \n \nconsole.log([] instanceof Array);                    // true\nconsole.log(function()&#123;&#125; instanceof Function);       // true\nconsole.log(&#123;&#125; instanceof Object);                   // true\n复制代码\n\n可以看到，instanceof只能正确判断引用数据类型，而不能判断基本数据类型。instanceof 运算符可以用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。\n（3） constructor\nconsole.log((2).constructor === Number); // true\nconsole.log((true).constructor === Boolean); // true\nconsole.log(('str').constructor === String); // true\nconsole.log(([]).constructor === Array); // true\nconsole.log((function() &#123;&#125;).constructor === Function); // true\nconsole.log((&#123;&#125;).constructor === Object); // true\n复制代码\n\nconstructor有两个作用，一是判断数据的类型，二是对象实例通过 constrcutor 对象访问它的构造函数。需要注意，如果创建一个对象来改变它的原型，constructor就不能用来判断数据类型了：\nfunction Fn()&#123;&#125;;\n \nFn.prototype = new Array();\n \nvar f = new Fn();\n \nconsole.log(f.constructor===Fn);    // false\nconsole.log(f.constructor===Array); // true\n复制代码\n\n（4）Object.prototype.toString.call()\nObject.prototype.toString.call() 使用 Object 对象的原型方法 toString 来判断数据类型：\nvar a = Object.prototype.toString;\n \nconsole.log(a.call(2));\nconsole.log(a.call(true));\nconsole.log(a.call('str'));\nconsole.log(a.call([]));\nconsole.log(a.call(function()&#123;&#125;));\nconsole.log(a.call(&#123;&#125;));\nconsole.log(a.call(undefined));\nconsole.log(a.call(null));\n复制代码\n\n同样是检测对象obj调用toString方法，obj.toString()的结果和Object.prototype.toString.call(obj)的结果不一样，这是为什么？\n这是因为toString是Object的原型方法，而Array、function等类型作为Object的实例，都重写了toString方法。不同的对象类型调用toString方法时，根据原型链的知识，调用的是对应的重写之后的toString方法（function类型返回内容为函数体的字符串，Array类型返回元素组成的字符串…），而不会去调用Object上原型toString方法（返回对象的具体类型），所以采用obj.toString()不能得到其对象类型，只能将obj转换为字符串类型；因此，在想要得到对象的具体类型时，应该调用Object原型上的toString方法。\n3. 判断数组的方式有哪些\n通过Object.prototype.toString.call()做判断\n\nObject.prototype.toString.call(obj).slice(8,-1) === 'Array';\n复制代码\n\n\n通过原型链做判断\n\nobj.__proto__ === Array.prototype;\n复制代码\n\n\n通过ES6的Array.isArray()做判断\n\nArray.isArrray(obj);\n复制代码\n\n\n通过instanceof做判断\n\nobj instanceof Array\n复制代码\n\n\n通过Array.prototype.isPrototypeOf\n\nArray.prototype.isPrototypeOf(obj)\n复制代码\n\n4. null和undefined区别首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。\nundefined 代表的含义是未定义，null 代表的含义是空对象。一般变量声明了但还没有定义的时候会返回 undefined，null主要用于赋值给一些可能会返回对象的变量，作为初始化。\nundefined 在 JavaScript 中不是一个保留字，这意味着可以使用 undefined 来作为一个变量名，但是这样的做法是非常危险的，它会影响对 undefined 值的判断。我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。\n当对这两种类型使用 typeof 进行判断时，Null 类型化会返回 “object”，这是一个历史遗留的问题。当使用双等号对两种类型的值进行比较时会返回 true，使用三个等号时会返回 false。\n5. typeof null 的结果是什么，为什么？typeof null 的结果是Object。\n在 JavaScript 第一个版本中，所有值都存储在 32 位的单元中，每个单元包含一个小的 类型标签(1-3 bits) 以及当前要存储值的真实数据。类型标签存储在每个单元的低位中，共有五种数据类型：\n000: object   - 当前存储的数据指向一个对象。\n  1: int      - 当前存储的数据是一个 31 位的有符号整数。\n010: double   - 当前存储的数据指向一个双精度的浮点数。\n100: string   - 当前存储的数据指向一个字符串。\n110: boolean  - 当前存储的数据是布尔值。\n复制代码\n\n如果最低位是 1，则类型标签标志位的长度只有一位；如果最低位是 0，则类型标签标志位的长度占三位，为存储其他四种数据类型提供了额外两个 bit 的长度。\n有两种特殊数据类型：\n\nundefined的值是 (-2)30(一个超出整数范围的数字)；\nnull 的值是机器码 NULL 指针(null 指针的值全是 0)\n\n那也就是说null的类型标签也是000，和Object的类型标签一样，所以会被判定为Object。\n6. intanceof 操作符的实现原理及实现instanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\nfunction myInstanceof(left, right) &#123;\n  // 获取对象的原型\n  let proto = Object.getPrototypeOf(left)\n  // 获取构造函数的 prototype 对象\n  let prototype = right.prototype; \n \n  // 判断构造函数的 prototype 对象是否在对象的原型链上\n  while (true) &#123;\n    if (!proto) return false;\n    if (proto === prototype) return true;\n    // 如果没有找到，就继续从其原型上找，Object.getPrototypeOf方法用来获取指定对象的原型\n    proto = Object.getPrototypeOf(proto);\n  &#125;\n&#125;\n复制代码\n\n7. 为什么0.1+0.2 ! == 0.3，如何让其相等在开发过程中遇到类似这样的问题：\nlet n1 = 0.1, n2 = 0.2\nconsole.log(n1 + n2)  // 0.30000000000000004\n复制代码\n\n这里得到的不是想要的结果，要想等于0.3，就要把它进行转化：\n(n1 + n2).toFixed(2) // 注意，toFixed为四舍五入\n复制代码\n\ntoFixed(num) 方法可把 Number 四舍五入为指定小数位数的数字。那为什么会出现这样的结果呢？\n计算机是通过二进制的方式存储数据的，所以计算机计算0.1+0.2的时候，实际上是计算的两个数的二进制的和。0.1的二进制是0.0001100110011001100...（1100循环），0.2的二进制是：0.00110011001100...（1100循环），这两个数的二进制都是无限循环的数。那JavaScript是如何处理无限循环的二进制小数呢？\n一般我们认为数字包括整数和小数，但是在 JavaScript 中只有一种数字类型：Number，它的实现遵循IEEE 754标准，使用64位固定长度来表示，也就是标准的double双精度浮点数。在二进制科学表示法中，双精度浮点数的小数部分最多只能保留52位，再加上前面的1，其实就是保留53位有效数字，剩余的需要舍去，遵从“0舍1入”的原则。\n根据这个原则，0.1和0.2的二进制数相加，再转化为十进制数就是：0.30000000000000004。\n下面看一下双精度数是如何保存的： \n\n第一部分（蓝色）：用来存储符号位（sign），用来区分正负数，0表示正数，占用1位\n第二部分（绿色）：用来存储指数（exponent），占用11位\n第三部分（红色）：用来存储小数（fraction），占用52位\n\n对于0.1，它的二进制为：\n0.00011001100110011001100110011001100110011001100110011001 10011...\n复制代码\n\n转为科学计数法（科学计数法的结果就是浮点数）：\n1.1001100110011001100110011001100110011001100110011001*2^-4\n复制代码\n\n可以看出0.1的符号位为0，指数位为-4，小数位为：\n1001100110011001100110011001100110011001100110011001\n复制代码\n\n那么问题又来了，指数位是负数，该如何保存呢？\nIEEE标准规定了一个偏移量，对于指数部分，每次都加这个偏移量进行保存，这样即使指数是负数，那么加上这个偏移量也就是正数了。由于JavaScript的数字是双精度数，这里就以双精度数为例，它的指数部分为11位，能表示的范围就是0~2047，IEEE固定双精度数的偏移量为1023。\n\n当指数位不全是0也不全是1时(规格化的数值)，IEEE规定，阶码计算公式为 e-Bias。 此时e最小值是1，则1-1023= -1022，e最大值是2046，则2046-1023=1023，可以看到，这种情况下取值范围是-1022~1013。\n当指数位全部是0的时候(非规格化的数值)，IEEE规定，阶码的计算公式为1-Bias，即1-1023= -1022。\n当指数位全部是1的时候(特殊值)，IEEE规定这个浮点数可用来表示3个特殊值，分别是正无穷，负无穷，NaN。 具体的，小数位不为0的时候表示NaN；小数位为0时，当符号位s=0时表示正无穷，s=1时候表示负无穷。\n\n对于上面的0.1的指数位为-4，-4+1023 = 1019 转化为二进制就是：1111111011.\n所以，0.1表示为：\n0 1111111011 1001100110011001100110011001100110011001100110011001\n复制代码\n\n说了这么多，是时候该最开始的问题了，如何实现0.1+0.2=0.3呢？\n对于这个问题，一个直接的解决方法就是设置一个误差范围，通常称为“机器精度”。对JavaScript来说，这个值通常为2-52，在ES6中，提供了Number.EPSILON属性，而它的值就是2-52，只要判断0.1+0.2-0.3是否小于Number.EPSILON，如果小于，就可以判断为0.1+0.2 ===0.3\nfunction numberepsilon(arg1,arg2)&#123;                   \n  return Math.abs(arg1 - arg2) &lt; Number.EPSILON;        \n&#125;        \n\nconsole.log(numberepsilon(0.1 + 0.2, 0.3)); // true\n复制代码\n\n8. 如何获取安全的 undefined 值？因为 undefined 是一个标识符，所以可以被当作变量来使用和赋值，但是这样会影响 undefined 的正常判断。表达式 void ___ 没有返回值，因此返回结果是 undefined。void 并不改变表达式的结果，只是让表达式不返回值。因此可以用 void 0 来获得 undefined。\n9. typeof NaN 的结果是什么？NaN 指“不是一个数字”（not a number），NaN 是一个“警戒值”（sentinel value，有特殊用途的常规值），用于指出数字类型中的错误情况，即“执行数学运算没有成功，这是失败后返回的结果”。\ntypeof NaN; // \"number\"\n复制代码\n\nNaN 是一个特殊值，它和自身不相等，是唯一一个非自反（自反，reflexive，即 x === x 不成立）的值。而 NaN !== NaN 为 true。\n10. isNaN 和 Number.isNaN 函数的区别？\n函数 isNaN 接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的的值都会返回 true，因此非数字值传入也会返回 true ，会影响 NaN 的判断。\n函数 Number.isNaN 会首先判断传入参数是否为数字，如果是数字再继续判断是否为 NaN ，不会进行数据类型的转换，这种方法对于 NaN 的判断更为准确。\n\n11. == 操作符的强制类型转换规则？对于 == 来说，如果对比双方的类型不一样，就会进行类型转换。假如对比 x 和 y 是否相同，就会进行如下判断流程：\n\n首先会判断两者类型是否相同，相同的话就比较两者的大小；\n类型不相同的话，就会进行类型转换；\n会先判断是否在对比 null 和 undefined，是的话就会返回 true\n判断两者类型是否为 string 和 number，是的话就会将字符串转换为 number\n\n1 == '1'\n      ↓\n1 ==  1\n复制代码\n\n\n判断其中一方是否为 boolean，是的话就会把 boolean 转为 number 再进行判断\n\n'1' == true\n        ↓\n'1' ==  1\n        ↓\n 1  ==  1\n复制代码\n\n\n判断其中一方是否为 object 且另一方为 string、number 或者 symbol，是的话就会把 object 转为原始类型再进行判断\n\n'1' == &#123; name: 'js' &#125;        ↓'1' == '[object Object]'\n复制代码\n\n其流程图如下： \n12. 其他值到字符串的转换规则？\nNull 和 Undefined 类型 ，null 转换为 “null”，undefined 转换为 “undefined”，\nBoolean 类型，true 转换为 “true”，false 转换为 “false”。\nNumber 类型的值直接转换，不过那些极小和极大的数字会使用指数形式。\nSymbol 类型的值直接转换，但是只允许显式强制类型转换，使用隐式强制类型转换会产生错误。\n对普通对象来说，除非自行定义 toString() 方法，否则会调用 toString()（Object.prototype.toString()）来返回内部属性 [[Class]] 的值，如”[object Object]”。如果对象有自己的 toString() 方法，字符串化时就会调用该方法并使用其返回值。\n\n13. 其他值到数字值的转换规则？\nUndefined 类型的值转换为 NaN。\nNull 类型的值转换为 0。\nBoolean 类型的值，true 转换为 1，false 转换为 0。\nString 类型的值转换如同使用 Number() 函数进行转换，如果包含非数字值则转换为 NaN，空字符串为 0。\nSymbol 类型的值不能转换为数字，会报错。\n对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。\n\n为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有valueOf()方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString() 的返回值（如果存在）来进行强制类型转换。\n如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。\n14. 其他值到布尔类型的值的转换规则？以下这些是假值： • undefined • null • false • +0、-0 和 NaN • “”\n假值的布尔强制类型转换结果为 false。从逻辑上说，假值列表以外的都应该是真值。\n15. || 和 &amp;&amp; 操作符的返回值？|| 和 &amp;&amp; 首先会对第一个操作数执行条件判断，如果其不是布尔值就先强制转换为布尔类型，然后再执行条件判断。\n\n对于 || 来说，如果条件判断结果为 true 就返回第一个操作数的值，如果为 false 就返回第二个操作数的值。\n&amp;&amp; 则相反，如果条件判断结果为 true 就返回第二个操作数的值，如果为 false 就返回第一个操作数的值。\n\n|| 和 &amp;&amp; 返回它们其中一个操作数的值，而非条件判断的结果\n16. Object.is() 与比较操作符 “===”、“==” 的区别？\n使用双等号（==）进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。\n使用三等号（===）进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false。\n使用 Object.is 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 是相等的。\n\n17. 什么是 JavaScript 中的包装类型？在 JavaScript 中，基本类型是没有属性和方法的，但是为了便于操作基本类型的值，在调用基本类型的属性或方法时 JavaScript 会在后台隐式地将基本类型的值转换为对象，如：\nconst a = \"abc\";\na.length; // 3\na.toUpperCase(); // \"ABC\"\n复制代码\n\n在访问&#39;abc&#39;.length时，JavaScript 将&#39;abc&#39;在后台转换成String(&#39;abc&#39;)，然后再访问其length属性。\nJavaScript也可以使用Object函数显式地将基本类型转换为包装类型：\nvar a = 'abc'\nObject(a) // String &#123;\"abc\"&#125;\n复制代码\n\n也可以使用valueOf方法将包装类型倒转成基本类型：\nvar a = 'abc'\nvar b = Object(a)\nvar c = b.valueOf() // 'abc'\n复制代码\n\n看看如下代码会打印出什么：\nvar a = new Boolean( false );\nif (!a) &#123;\n\tconsole.log( \"Oops\" ); // never runs\n&#125;\n复制代码\n\n答案是什么都不会打印，因为虽然包裹的基本类型是false，但是false被包裹成包装类型后就成了对象，所以其非值为false，所以循环体中的内容不会运行。\n18. JavaScript 中如何进行隐式类型转换？首先要介绍ToPrimitive方法，这是 JavaScript 中每个值隐含的自带的方法，用来将值 （无论是基本类型值还是对象）转换为基本类型值。如果值为基本类型，则直接返回值本身；如果值为对象，其看起来大概是这样：\n/**\n* @obj 需要转换的对象\n* @type 期望的结果类型\n*/\nToPrimitive(obj,type)\n复制代码\n\ntype的值为number或者string。\n（1）当type为number时规则如下：\n\n调用obj的valueOf方法，如果为原始值，则返回，否则下一步；\n调用obj的toString方法，后续同上；\n抛出TypeError 异常。\n\n（2）当type为string时规则如下：\n\n调用obj的toString方法，如果为原始值，则返回，否则下一步；\n调用obj的valueOf方法，后续同上；\n抛出TypeError 异常。\n\n可以看出两者的主要区别在于调用toString和valueOf的先后顺序。默认情况下：\n\n如果对象为 Date 对象，则type默认为string；\n其他情况下，type默认为number。\n\n总结上面的规则，对于 Date 以外的对象，转换为基本类型的大概规则可以概括为一个函数：\nvar objToNumber = value => Number(value.valueOf().toString())\nobjToNumber([]) === 0\nobjToNumber(&#123;&#125;) === NaN\n复制代码\n\n而 JavaScript 中的隐式类型转换主要发生在+、-、*、/以及==、&gt;、&lt;这些运算符之间。而这些运算符只能操作基本类型值，所以在进行这些运算前的第一步就是将两边的值用ToPrimitive转换成基本类型，再进行操作。\n以下是基本类型的值在不同操作符的情况下隐式转换的规则 （对于对象，其会被ToPrimitive转换成基本类型，所以最终还是要应用基本类型转换规则）：\n\n+操作符\n\n+操作符的两边有至少一个string类型变量时，两边的变量都会被隐式转换为字符串；其他情况下两边的变量都会被转换为数字。\n1 + '23' // '123'\n 1 + false // 1 \n 1 + Symbol() // Uncaught TypeError: Cannot convert a Symbol value to a number\n '1' + false // '1false'\n false + true // 1\n复制代码\n\n\n-、*、\\操作符\n\nNaN也是一个数字\n1 * '23' // 23\n 1 * false // 0\n 1 / 'aa' // NaN\n复制代码\n\n\n对于==操作符\n\n操作符两边的值都尽量转成number：\n3 == true // false, 3 转为number为3，true转为number为1\n'0' == false //true, '0'转为number为0，false转为number为0\n'0' == 0 // '0'转为number为0\n复制代码\n\n\n对于&lt;和&gt;比较符\n\n如果两边都是字符串，则比较字母表顺序：\n'ca' &lt; 'bd' // false\n'a' &lt; 'b' // true\n复制代码\n\n其他情况下，转换为数字再比较：\n'12' &lt; 13 // true\nfalse > -1 // true\n复制代码\n\n以上说的是基本类型的隐式转换，而对象会被ToPrimitive转换为基本类型再进行转换：\nvar a = &#123;&#125;\na > 2 // false\n复制代码\n\n其对比过程如下：\na.valueOf() // &#123;&#125;, 上面提到过，ToPrimitive默认type为number，所以先valueOf，结果还是个对象，下一步\na.toString() // \"[object Object]\"，现在是一个字符串了\nNumber(a.toString()) // NaN，根据上面 &lt; 和 > 操作符的规则，要转换成数字\nNaN > 2 //false，得出比较结果\n复制代码\n\n又比如：\nvar a = &#123;name:'Jack'&#125;\nvar b = &#123;age: 18&#125;\na + b // \"[object Object][object Object]\"\n复制代码\n\n运算过程如下：\na.valueOf() // &#123;&#125;，上面提到过，ToPrimitive默认type为number，所以先valueOf，结果还是个对象，下一步\na.toString() // \"[object Object]\"\nb.valueOf() // 同理\nb.toString() // \"[object Object]\"\na + b // \"[object Object][object Object]\"\n复制代码\n\n19. + 操作符什么时候用于字符串的拼接？根据 ES5 规范，如果某个操作数是字符串或者能够通过以下步骤转换为字符串的话，+ 将进行拼接操作。如果其中一个操作数是对象（包括数组），则首先对其调用 ToPrimitive 抽象操作，该抽象操作再调用 [[DefaultValue]]，以数字作为上下文。如果不能转换为字符串，则会将其转换为数字类型来进行计算。\n简单来说就是，如果 + 的其中一个操作数是字符串（或者通过以上步骤最终得到字符串），则执行字符串拼接，否则执行数字加法。\n那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字。\n20. 为什么会有BigInt的提案？JavaScript中Number.MAX_SAFE_INTEGER表示最⼤安全数字，计算结果是9007199254740991，即在这个数范围内不会出现精度丢失（⼩数除外）。但是⼀旦超过这个范围，js就会出现计算不准确的情况，这在⼤数计算的时候不得不依靠⼀些第三⽅库进⾏解决，因此官⽅提出了BigInt来解决此问题。\n21. object.assign和扩展运算法是深拷贝还是浅拷贝，两者区别扩展运算符：\nlet outObj = &#123;\n  inObj: &#123;a: 1, b: 2&#125;\n&#125;\nlet newObj = &#123;...outObj&#125;\nnewObj.inObj.a = 2\nconsole.log(outObj) // &#123;inObj: &#123;a: 2, b: 2&#125;&#125;\n复制代码\n\nObject.assign():\nlet outObj = &#123;\n  inObj: &#123;a: 1, b: 2&#125;\n&#125;\nlet newObj = Object.assign(&#123;&#125;, outObj)\nnewObj.inObj.a = 2\nconsole.log(outObj) // &#123;inObj: &#123;a: 2, b: 2&#125;&#125;\n复制代码\n\n可以看到，两者都是浅拷贝。\n\nObject.assign()方法接收的第一个参数作为目标对象，后面的所有参数作为源对象。然后把所有的源对象合并到目标对象中。它会修改了一个对象，因此会触发 ES6 setter。\n扩展操作符（…）使用它时，数组或对象中的每一个值都会被拷贝到一个新的数组或对象中。它不复制继承的属性或类的属性，但是它会复制ES6的 symbols 属性。\n\n二、ES61. let、const、var的区别（1）块级作用域： 块作用域由 &#123; &#125;包括，let和const具有块级作用域，var不存在块级作用域。块级作用域解决了ES5中的两个问题：\n\n内层变量可能覆盖外层变量\n用来计数的循环变量泄露为全局变量\n\n（2）变量提升： var存在变量提升，let和const不存在变量提升，即在变量只能在声明之后使用，否在会报错。\n（3）给全局添加属性： 浏览器的全局对象是window，Node的全局对象是global。var声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是let和const不会。\n（4）重复声明： var声明变量时，可以重复声明变量，后声明的同名变量会覆盖之前声明的遍历。const和let不允许重复声明变量。\n（5）暂时性死区： 在使用let、const命令声明变量之前，该变量都是不可用的。这在语法上，称为暂时性死区。使用var声明的变量不存在暂时性死区。\n（6）初始值设置： 在变量声明时，var 和 let 可以不用设置初始值。而const声明变量必须设置初始值。\n（7）指针指向： let和const都是ES6新增的用于创建变量的语法。 let创建的变量是可以更改指针指向（可以重新赋值）。但const声明的变量是不允许改变指针的指向。\n\n\n\n区别\nvar\nlet\nconst\n\n\n\n是否有块级作用域\n×\n✔️\n✔️\n\n\n是否存在变量提升\n✔️\n×\n×\n\n\n是否添加全局属性\n✔️\n×\n×\n\n\n能否重复声明变量\n✔️\n×\n×\n\n\n是否存在暂时性死区\n×\n✔️\n✔️\n\n\n是否必须设置初始值\n×\n×\n✔️\n\n\n能否改变指针指向\n✔️\n✔️\n×\n\n\n2. const对象的属性可以修改吗const保证的并不是变量的值不能改动，而是变量指向的那个内存地址不能改动。对于基本类型的数据（数值、字符串、布尔值），其值就保存在变量指向的那个内存地址，因此等同于常量。\n但对于引用类型的数据（主要是对象和数组）来说，变量指向数据的内存地址，保存的只是一个指针，const只能保证这个指针是固定不变的，至于它指向的数据结构是不是可变的，就完全不能控制了。\n3. 如果new一个箭头函数的会怎么样箭头函数是ES6中的提出来的，它没有prototype，也没有自己的this指向，更不可以使用arguments参数，所以不能New一个箭头函数。\nnew操作符的实现步骤如下：\n\n创建一个对象\n将构造函数的作用域赋给新对象（也就是将对象的__proto__属性指向构造函数的prototype属性）\n指向构造函数中的代码，构造函数中的this指向该对象（也就是为这个对象添加属性和方法）\n返回新的对象\n\n所以，上面的第二、三步，箭头函数都是没有办法执行的。\n4. 箭头函数与普通函数的区别（1）箭头函数比普通函数更加简洁\n\n如果没有参数，就直接写一个空括号即可\n如果只有一个参数，可以省去参数的括号\n如果有多个参数，用逗号分割\n如果函数体的返回值只有一句，可以省略大括号\n如果函数体不需要返回值，且只有一句话，可以给这个语句前面加一个void关键字。最常见的就是调用一个函数：\n\nlet fn = () => void doesNotReturn();\n复制代码\n\n（2）箭头函数没有自己的this\n箭头函数不会创建自己的this， 所以它没有自己的this，它只会在自己作用域的上一层继承this。所以箭头函数中this的指向在它在定义时已经确定了，之后不会改变。\n（3）箭头函数继承来的this指向永远不会改变\nvar id = 'GLOBAL';\nvar obj = &#123;\n  id: 'OBJ',\n  a: function()&#123;\n    console.log(this.id);\n  &#125;,\n  b: () => &#123;\n    console.log(this.id);\n  &#125;\n&#125;;\nobj.a();    // 'OBJ'\nobj.b();    // 'GLOBAL'\nnew obj.a()  // undefined\nnew obj.b()  // Uncaught TypeError: obj.b is not a constructor\n复制代码\n\n对象obj的方法b是使用箭头函数定义的，这个函数中的this就永远指向它定义时所处的全局执行环境中的this，即便这个函数是作为对象obj的方法调用，this依旧指向Window对象。需要注意，定义对象的大括号&#123;&#125;是无法形成一个单独的执行环境的，它依旧是处于全局执行环境中。\n（4）call()、apply()、bind()等方法不能改变箭头函数中this的指向\nvar id = 'Global';\nlet fun1 = () => &#123;\n    console.log(this.id)\n&#125;;\nfun1();                     // 'Global'\nfun1.call(&#123;id: 'Obj'&#125;);     // 'Global'\nfun1.apply(&#123;id: 'Obj'&#125;);    // 'Global'\nfun1.bind(&#123;id: 'Obj'&#125;)();   // 'Global'\n复制代码\n\n（5）箭头函数不能作为构造函数使用\n构造函数在new的步骤在上面已经说过了，实际上第二步就是将函数中的this指向该对象。 但是由于箭头函数时没有自己的this的，且this指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用。\n（6）箭头函数没有自己的arguments\n箭头函数没有自己的arguments对象。在箭头函数中访问arguments实际上获得的是它外层函数的arguments值。\n（7）箭头函数没有prototype\n（8）箭头函数不能用作Generator函数，不能使用yeild关键字\n5. 箭头函数的this指向哪⾥？箭头函数不同于传统JavaScript中的函数，箭头函数并没有属于⾃⼰的this，它所谓的this是捕获其所在上下⽂的 this 值，作为⾃⼰的 this 值，并且由于没有属于⾃⼰的this，所以是不会被new调⽤的，这个所谓的this也不会被改变。\n可以⽤Babel理解⼀下箭头函数:\n// ES6 \nconst obj = &#123; \n  getArrow() &#123; \n    return () => &#123; \n      console.log(this === obj); \n    &#125;; \n  &#125; \n&#125;\n复制代码\n\n转化后：\n// ES5，由 Babel 转译\nvar obj = &#123; \n   getArrow: function getArrow() &#123; \n     var _this = this; \n     return function () &#123; \n        console.log(_this === obj); \n     &#125;; \n   &#125; \n&#125;;\n复制代码\n\n6. 扩展运算符的作用及使用场景（1）对象扩展运算符\n对象的扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中。\nlet bar = &#123; a: 1, b: 2 &#125;;\nlet baz = &#123; ...bar &#125;; // &#123; a: 1, b: 2 &#125;\n复制代码\n\n上述方法实际上等价于:\nlet bar = &#123; a: 1, b: 2 &#125;;\nlet baz = Object.assign(&#123;&#125;, bar); // &#123; a: 1, b: 2 &#125;\n复制代码\n\nObject.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。Object.assign方法的第一个参数是目标对象，后面的参数都是源对象。(如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性)。\n同样，如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。\nlet bar = &#123;a: 1, b: 2&#125;;\nlet baz = &#123;...bar, ...&#123;a:2, b: 4&#125;&#125;;  // &#123;a: 2, b: 4&#125;\n复制代码\n\n利用上述特性就可以很方便的修改对象的部分属性。在redux中的reducer函数规定必须是一个纯函数，reducer中的state对象要求不能直接修改，可以通过扩展运算符把修改路径的对象都复制一遍，然后产生一个新的对象返回。\n需要注意：扩展运算符对对象实例的拷贝属于浅拷贝。\n（2）数组扩展运算符\n数组的扩展运算符可以将一个数组转为用逗号分隔的参数序列，且每次只能展开一层数组。\nconsole.log(...[1, 2, 3])\n// 1 2 3\nconsole.log(...[1, [2, 3, 4], 5])\n// 1 [2, 3, 4] 5\n复制代码\n\n下面是数组的扩展运算符的应用：\n\n将数组转换为参数序列\n\nfunction add(x, y) &#123;\n  return x + y;\n&#125;\nconst numbers = [1, 2];\nadd(...numbers) // 3\n复制代码\n\n\n复制数组\n\nconst arr1 = [1, 2];\nconst arr2 = [...arr1];\n复制代码\n\n要记住：扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中，这里参数对象是个数组，数组里面的所有对象都是基础数据类型，将所有基础数据类型重新拷贝到新的数组中。\n\n合并数组\n\n如果想在数组内合并数组，可以这样：\nconst arr1 = ['two', 'three'];const arr2 = ['one', ...arr1, 'four', 'five'];// [\"one\", \"two\", \"three\", \"four\", \"five\"]\n复制代码\n\n\n扩展运算符与解构赋值结合起来，用于生成数组\n\nconst [first, ...rest] = [1, 2, 3, 4, 5];first // 1rest  // [2, 3, 4, 5]\n复制代码\n\n需要注意：如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。\nconst [...rest, last] = [1, 2, 3, 4, 5];         // 报错const [first, ...rest, last] = [1, 2, 3, 4, 5];  // 报错\n复制代码\n\n\n将字符串转为真正的数组\n\n[...'hello']    // [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\n复制代码\n\n\n任何 Iterator 接口的对象，都可以用扩展运算符转为真正的数组\n\n比较常见的应用是可以将某些数据结构转为数组：\n// arguments对象\nfunction foo() &#123;\n  const args = [...arguments];\n&#125;\n复制代码\n\n用于替换es5中的Array.prototype.slice.call(arguments)写法。\n\n使用Math函数获取数组中特定的值\n\nconst numbers = [9, 4, 7, 1];\nMath.min(...numbers); // 1\nMath.max(...numbers); // 9\n复制代码\n\n7. Proxy 可以实现什么功能？在 Vue3.0 中通过 Proxy 来替换原本的 Object.defineProperty 来实现数据响应式。\nProxy 是 ES6 中新增的功能，它可以用来自定义对象中的操作。\nlet p = new Proxy(target, handler)\n复制代码\n\ntarget 代表需要添加代理的对象，handler 用来自定义对象中的操作，比如可以用来自定义 set 或者 get 函数。\n下面来通过 Proxy 来实现一个数据响应式：\nlet onWatch = (obj, setBind, getLogger) => &#123;\n  let handler = &#123;\n    get(target, property, receiver) &#123;\n      getLogger(target, property)\n      return Reflect.get(target, property, receiver)\n    &#125;,\n    set(target, property, value, receiver) &#123;\n      setBind(value, property)\n      return Reflect.set(target, property, value)\n    &#125;\n  &#125;\n  return new Proxy(obj, handler)\n&#125;\nlet obj = &#123; a: 1 &#125;\nlet p = onWatch(\n  obj,\n  (v, property) => &#123;\n    console.log(`监听到属性$&#123;property&#125;改变为$&#123;v&#125;`)\n  &#125;,\n  (target, property) => &#123;\n    console.log(`'$&#123;property&#125;' = $&#123;target[property]&#125;`)\n  &#125;\n)\np.a = 2 // 监听到属性a改变\np.a // 'a' = 2\n复制代码\n\n在上述代码中，通过自定义 set 和 get 函数的方式，在原本的逻辑中插入了我们的函数逻辑，实现了在对对象任何属性进行读写时发出通知。\n当然这是简单版的响应式实现，如果需要实现一个 Vue 中的响应式，需要在 get 中收集依赖，在 set 派发更新，之所以 Vue3.0 要使用 Proxy 替换原本的 API 原因在于 Proxy 无需一层层递归为每个属性添加代理，一次即可完成以上操作，性能上更好，并且原本的实现有一些数据更新不能监听到，但是 Proxy 可以完美监听到任何方式的数据改变，唯一缺陷就是浏览器的兼容性不好。\n8. 对对象与数组的解构的理解解构是 ES6 提供的一种新的提取数据的模式，这种模式能够从对象或数组里有针对性地拿到想要的数值。 1）数组的解构 在解构数组时，以元素的位置为匹配条件来提取想要的数据的：\nconst [a, b, c] = [1, 2, 3]\n复制代码\n\n最终，a、b、c分别被赋予了数组第0、1、2个索引位的值：  数组里的0、1、2索引位的元素值，精准地被映射到了左侧的第0、1、2个变量里去，这就是数组解构的工作模式。还可以通过给左侧变量数组设置空占位的方式，实现对数组中某几个元素的精准提取：\nconst [a,,c] = [1,2,3]\n复制代码\n\n通过把中间位留空，可以顺利地把数组第一位和最后一位的值赋给 a、c 两个变量： \n2）对象的解构 对象解构比数组结构稍微复杂一些，也更显强大。在解构对象时，是以属性的名称为匹配条件，来提取想要的数据的。现在定义一个对象：\nconst stu = &#123;\n  name: 'Bob',\n  age: 24\n&#125;\n复制代码\n\n假如想要解构它的两个自有属性，可以这样：\nconst &#123; name, age &#125; = stu\n复制代码\n\n这样就得到了 name 和 age 两个和 stu 平级的变量： \n注意，对象解构严格以属性名作为定位依据，所以就算调换了 name 和 age 的位置，结果也是一样的：\nconst &#123; age, name &#125; = stu\n复制代码\n\n9. 如何提取高度嵌套的对象里的指定属性？有时会遇到一些嵌套程度非常深的对象：\nconst school = &#123;\n   classes: &#123;\n      stu: &#123;\n         name: 'Bob',\n         age: 24,\n      &#125;\n   &#125;\n&#125;\n复制代码\n\n像此处的 name 这个变量，嵌套了四层，此时如果仍然尝试老方法来提取它：\nconst &#123; name &#125; = school\n复制代码\n\n显然是不奏效的，因为 school 这个对象本身是没有 name 这个属性的，name 位于 school 对象的“儿子的儿子”对象里面。要想把 name 提取出来，一种比较笨的方法是逐层解构：\nconst &#123; classes &#125; = school\nconst &#123; stu &#125; = classes\nconst &#123; name &#125; = stu\nname // 'Bob'\n复制代码\n\n但是还有一种更标准的做法，可以用一行代码来解决这个问题：\nconst &#123; classes: &#123; stu: &#123; name &#125; &#125;&#125; = school\n       \nconsole.log(name)  // 'Bob'\n复制代码\n\n可以在解构出来的变量名右侧，通过冒号+{目标属性名}这种形式，进一步解构它，一直解构到拿到目标数据为止。\n10. 对 rest 参数的理解扩展运算符被用在函数形参上时，它还可以把一个分离的参数序列整合成一个数组：\nfunction mutiple(...args) &#123;\n  let result = 1;\n  for (var val of args) &#123;\n    result *= val;\n  &#125;\n  return result;\n&#125;\nmutiple(1, 2, 3, 4) // 24\n复制代码\n\n这里，传入 mutiple 的是四个分离的参数，但是如果在 mutiple 函数里尝试输出 args 的值，会发现它是一个数组：\nfunction mutiple(...args) &#123;\n  console.log(args)\n&#125;\nmutiple(1, 2, 3, 4) // [1, 2, 3, 4]\n复制代码\n\n这就是 … rest运算符的又一层威力了，它可以把函数的多个入参收敛进一个数组里。这一点经常用于获取函数的多余参数，或者像上面这样处理函数参数个数不确定的情况。\n11. ES6中模板语法与字符串处理ES6 提出了“模板语法”的概念。在 ES6 以前，拼接字符串是很麻烦的事情：\nvar name = 'css'   \nvar career = 'coder' \nvar hobby = ['coding', 'writing']\nvar finalString = 'my name is ' + name + ', I work as a ' + career + ', I love ' + hobby[0] + ' and ' + hobby[1]\n复制代码\n\n仅仅几个变量，写了这么多加号，还要时刻小心里面的空格和标点符号有没有跟错地方。但是有了模板字符串，拼接难度直线下降：\nvar name = 'css'   \nvar career = 'coder' \nvar hobby = ['coding', 'writing']\nvar finalString = `my name is $&#123;name&#125;, I work as a $&#123;career&#125; I love $&#123;hobby[0]&#125; and $&#123;hobby[1]&#125;`\n复制代码\n\n字符串不仅更容易拼了，也更易读了，代码整体的质量都变高了。这就是模板字符串的第一个优势——允许用${}的方式嵌入变量。但这还不是问题的关键，模板字符串的关键优势有两个：\n\n在模板字符串中，空格、缩进、换行都会被保留\n模板字符串完全支持“运算”式的表达式，可以在${}里完成一些计算\n\n基于第一点，可以在模板字符串里无障碍地直接写 html 代码：\nlet list = `\n\t&lt;ul>\n\t\t&lt;li>列表项1&lt;/li>\n\t\t&lt;li>列表项2&lt;/li>\n\t&lt;/ul>\n`;\nconsole.log(message); // 正确输出，不存在报错\n复制代码\n\n基于第二点，可以把一些简单的计算和调用丢进 ${} 来做：\nfunction add(a, b) &#123;\n  const finalString = `$&#123;a&#125; + $&#123;b&#125; = $&#123;a+b&#125;`\n  console.log(finalString)\n&#125;\nadd(1, 2) // 输出 '1 + 2 = 3'\n复制代码\n\n除了模板语法外， ES6中还新增了一系列的字符串方法用于提升开发效率：\n（1）存在性判定：在过去，当判断一个字符/字符串是否在某字符串中时，只能用 indexOf &gt; -1 来做。现在 ES6 提供了三个方法：includes、startsWith、endsWith，它们都会返回一个布尔值来告诉你是否存在。\n\nincludes：判断字符串与子串的包含关系：\n\nconst son = 'haha' \nconst father = 'xixi haha hehe'\nfather.includes(son) // true\n复制代码\n\n\nstartsWith：判断字符串是否以某个/某串字符开头：\n\nconst father = 'xixi haha hehe'\nfather.startsWith('haha') // false\nfather.startsWith('xixi') // true\n复制代码\n\n\nendsWith：判断字符串是否以某个/某串字符结尾：\n\nconst father = 'xixi haha hehe'\n  father.endsWith('hehe') // true\n复制代码\n\n（2）自动重复：可以使用 repeat 方法来使同一个字符串输出多次（被连续复制多次）：\nconst sourceCode = 'repeat for 3 times;'\nconst repeated = sourceCode.repeat(3) \nconsole.log(repeated) // repeat for 3 times;repeat for 3 times;repeat for 3 times;\n复制代码\n\n三、JavaScript基础1. new操作符的实现原理new操作符的执行过程：\n（1）首先创建了一个新的空对象\n（2）设置原型，将对象的原型设置为函数的 prototype 对象。\n（3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）\n（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。\n具体实现：\nfunction objectFactory() &#123;\n  let newObject = null;\n  let constructor = Array.prototype.shift.call(arguments);\n  let result = null;\n  // 判断参数是否是一个函数\n  if (typeof constructor !== \"function\") &#123;\n    console.error(\"type error\");\n    return;\n  &#125;\n  // 新建一个空对象，对象的原型为构造函数的 prototype 对象\n  newObject = Object.create(constructor.prototype);\n  // 将 this 指向新建对象，并执行函数\n  result = constructor.apply(newObject, arguments);\n  // 判断返回对象\n  let flag = result &amp;&amp; (typeof result === \"object\" || typeof result === \"function\");\n  // 判断返回结果\n  return flag ? result : newObject;\n&#125;\n// 使用方法\nobjectFactory(构造函数, 初始化参数);\n复制代码\n\n2. map和Object的区别\n\n\n\nMap\nObject\n\n\n\n意外的键\nMap默认情况不包含任何键，只包含显式插入的键。\nObject 有一个原型, 原型链上的键名有可能和自己在对象上的设置的键名产生冲突。\n\n\n键的类型\nMap的键可以是任意值，包括函数、对象或任意基本类型。\nObject 的键必须是 String 或是Symbol。\n\n\n键的顺序\nMap 中的 key 是有序的。因此，当迭代的时候， Map 对象以插入的顺序返回键值。\nObject 的键是无序的\n\n\nSize\nMap 的键值对个数可以轻易地通过size 属性获取\nObject 的键值对个数只能手动计算\n\n\n迭代\nMap 是 iterable 的，所以可以直接被迭代。\n迭代Object需要以某种方式获取它的键然后才能迭代。\n\n\n性能\n在频繁增删键值对的场景下表现更好。\n在频繁添加和删除键值对的场景下未作出优化。\n\n\n3. map和weakMap的区别（1）Map map本质上就是键值对的集合，但是普通的Object中的键值对中的键只能是字符串。而ES6提供的Map数据结构类似于对象，但是它的键不限制范围，可以是任意类型，是一种更加完善的Hash结构。如果Map的键是一个原始数据类型，只要两个键严格相同，就视为是同一个键。\n实际上Map是一个数组，它的每一个数据也都是一个数组，其形式如下：\nconst map = [\n     [\"name\",\"张三\"],\n     [\"age\",18],\n]\n复制代码\n\nMap数据结构有以下操作方法：\n\nsize： map.size 返回Map结构的成员总数。\n**set(key,value)**：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）\n**get(key)**：该方法读取key对应的键值，如果找不到key，返回undefined。\n**has(key)**：该方法返回一个布尔值，表示某个键是否在当前Map对象中。\n**delete(key)**：该方法删除某个键，返回true，如果删除失败，返回false。\n**clear()**：map.clear()清除所有成员，没有返回值。\n\nMap结构原生提供是三个遍历器生成函数和一个遍历方法\n\nkeys()：返回键名的遍历器。\nvalues()：返回键值的遍历器。\nentries()：返回所有成员的遍历器。\nforEach()：遍历Map的所有成员。\n\nconst map = new Map([\n     [\"foo\",1],\n     [\"bar\",2],\n])\nfor(let key of map.keys())&#123;\n    console.log(key);  // foo bar\n&#125;\nfor(let value of map.values())&#123;\n     console.log(value); // 1 2\n&#125;\nfor(let items of map.entries())&#123;\n    console.log(items);  // [\"foo\",1]  [\"bar\",2]\n&#125;\nmap.forEach( (value,key,map) => &#123;\n     console.log(key,value); // foo 1    bar 2\n&#125;)\n复制代码\n\n（2）WeakMap WeakMap 对象也是一组键值对的集合，其中的键是弱引用的。其键必须是对象，原始数据类型不能作为key值，而值可以是任意的。\n该对象也有以下几种方法：\n\n**set(key,value)**：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）\n**get(key)**：该方法读取key对应的键值，如果找不到key，返回undefined。\n**has(key)**：该方法返回一个布尔值，表示某个键是否在当前Map对象中。\n**delete(key)**：该方法删除某个键，返回true，如果删除失败，返回false。\n\n其clear()方法已经被弃用，所以可以通过创建一个空的WeakMap并替换原对象来实现清除。\nWeakMap的设计目的在于，有时想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。一旦不再需要这两个对象，就必须手动删除这个引用，否则垃圾回收机制就不会释放对象占用的内存。\n而WeakMap的键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，WeakMap 里面的键名对象和所对应的键值对会自动消失，不用手动删除引用。\n总结：\n\nMap 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。\nWeakMap 结构与 Map 结构类似，也是用于生成键值对的集合。但是 WeakMap 只接受对象作为键名（ null 除外），不接受其他类型的值作为键名。而且 WeakMap 的键名所指向的对象，不计入垃圾回收机制。\n\n4. JavaScript有哪些内置对象全局的对象（ global objects ）或称标准内置对象，不要和 “全局对象（global object）” 混淆。这里说的全局的对象是说在 全局作用域里的对象。全局作用域中的其他对象可以由用户的脚本创建或由宿主程序提供。\n标准内置对象的分类：\n（1）值属性，这些全局属性返回一个简单值，这些值没有自己的属性和方法。例如 Infinity、NaN、undefined、null 字面量\n（2）函数属性，全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。例如 eval()、parseFloat()、parseInt() 等\n（3）基本对象，基本对象是定义或使用其他对象的基础。基本对象包括一般对象、函数对象和错误对象。例如 Object、Function、Boolean、Symbol、Error 等\n（4）数字和日期对象，用来表示数字、日期和执行数学计算的对象。例如 Number、Math、Date\n（5）字符串，用来表示和操作字符串的对象。例如 String、RegExp\n（6）可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。例如 Array\n（7）使用键的集合对象，这些集合对象在存储数据时会使用到键，支持按照插入顺序来迭代元素。 例如 Map、Set、WeakMap、WeakSet\n（8）矢量集合，SIMD 矢量集合中的数据会被组织为一个数据序列。 例如 SIMD 等\n（9）结构化数据，这些对象用来表示和操作结构化的缓冲区数据，或使用 JSON 编码的数据。例如 JSON 等\n（10）控制抽象对象 例如 Promise、Generator 等\n（11）反射。例如 Reflect、Proxy\n（12）国际化，为了支持多语言处理而加入 ECMAScript 的对象。例如 Intl、Intl.Collator 等\n（13）WebAssembly\n（14）其他。例如 arguments\n总结： js 中的内置对象主要指的是在程序执行前存在全局作用域里的由 js 定义的一些全局值属性、函数和用来实例化其他对象的构造函数对象。一般经常用到的如全局变量值 NaN、undefined，全局函数如 parseInt()、parseFloat() 用来实例化对象的构造函数如 Date、Object 等，还有提供数学计算的单体内置对象如 Math 对象。\n5. 常用的正则表达式有哪些？// （1）匹配 16 进制颜色值\nvar regex = /#([0-9a-fA-F]&#123;6&#125;|[0-9a-fA-F]&#123;3&#125;)/g;\n\n// （2）匹配日期，如 yyyy-mm-dd 格式\nvar regex = /^[0-9]&#123;4&#125;-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;\n\n// （3）匹配 qq 号\nvar regex = /^[1-9][0-9]&#123;4,10&#125;$/g;\n\n// （4）手机号码正则\nvar regex = /^1[34578]\\d&#123;9&#125;$/g;\n\n// （5）用户名正则\nvar regex = /^[a-zA-Z\\$][a-zA-Z0-9_\\$]&#123;4,16&#125;$/;\n复制代码\n\n6. 对JSON的理解JSON 是一种基于文本的轻量级的数据交换格式。它可以被任何的编程语言读取和作为数据格式来传递。\n在项目开发中，使用 JSON 作为前后端数据交换的方式。在前端通过将一个符合 JSON 格式的数据结构序列化为 JSON 字符串，然后将它传递到后端，后端通过 JSON 格式的字符串解析后生成对应的数据结构，以此来实现前后端数据的一个传递。\n因为 JSON 的语法是基于 js 的，因此很容易将 JSON 和 js 中的对象弄混，但是应该注意的是 JSON 和 js 中的对象不是一回事，JSON 中对象格式更加严格，比如说在 JSON 中属性值不能为函数，不能出现 NaN 这样的属性值等，因此大多数的 js 对象是不符合 JSON 对象的格式的。\n在 js 中提供了两个函数来实现 js 数据结构和 JSON 格式的转换处理，\n\nJSON.stringify 函数，通过传入一个符合 JSON 格式的数据结构，将其转换为一个 JSON 字符串。如果传入的数据结构不符合 JSON 格式，那么在序列化的时候会对这些值进行对应的特殊处理，使其符合规范。在前端向后端发送数据时，可以调用这个函数将数据对象转化为 JSON 格式的字符串。\nJSON.parse() 函数，这个函数用来将 JSON 格式的字符串转换为一个 js 数据结构，如果传入的字符串不是标准的 JSON 格式的字符串的话，将会抛出错误。当从后端接收到 JSON 格式的字符串时，可以通过这个方法来将其解析为一个 js 数据结构，以此来进行数据的访问。\n\n7. JavaScript脚本延迟加载的方式有哪些？延迟加载就是等页面加载完成之后再加载 JavaScript 文件。 js 延迟加载有助于提高页面加载速度。\n一般有以下几种方式：\n\ndefer 属性： 给 js 脚本添加 defer 属性，这个属性会让脚本的加载与文档的解析同步解析，然后在文档解析完成后再执行这个脚本文件，这样的话就能使页面的渲染不被阻塞。多个设置了 defer 属性的脚本按规范来说最后是顺序执行的，但是在一些浏览器中可能不是这样。\nasync 属性： 给 js 脚本添加 async 属性，这个属性会使脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后立即执行 js 脚本，这个时候如果文档没有解析完成的话同样会阻塞。多个 async 属性的脚本的执行顺序是不可预测的，一般不会按照代码的顺序依次执行。\n动态创建 DOM 方式： 动态创建 DOM 标签的方式，可以对文档的加载事件进行监听，当文档加载完成后再动态的创建 script 标签来引入 js 脚本。\n使用 setTimeout 延迟方法： 设置一个定时器来延迟加载js脚本文件\n让 JS 最后加载： 将 js 脚本放在文档的底部，来使 js 脚本尽可能的在最后来加载执行。\n\n8. JavaScript 类数组对象的定义？一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和 DOM 方法的返回结果，还有一个函数也可以被看作是类数组对象，因为它含有 length 属性值，代表可接收的参数个数。\n常见的类数组转换为数组的方法有这样几种：\n（1）通过 call 调用数组的 slice 方法来实现转换\nArray.prototype.slice.call(arrayLike);\n复制代码\n\n（2）通过 call 调用数组的 splice 方法来实现转换\nArray.prototype.splice.call(arrayLike, 0);\n复制代码\n\n（3）通过 apply 调用数组的 concat 方法来实现转换\nArray.prototype.concat.apply([], arrayLike);\n复制代码\n\n（4）通过 Array.from 方法来实现转换\nArray.from(arrayLike);\n复制代码\n\n9. 数组有哪些原生方法？\n数组和字符串的转换方法：toString()、toLocalString()、join() 其中 join() 方法可以指定转换为字符串时的分隔符。\n数组尾部操作的方法 pop() 和 push()，push 方法可以传入多个参数。\n数组首部操作的方法 shift() 和 unshift() 重排序的方法 reverse() 和 sort()，sort() 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。\n数组连接的方法 concat() ，返回的是拼接好的数组，不影响原数组。\n数组截取办法 slice()，用于截取数组中的一部分返回，不影响原数组。\n数组插入方法 splice()，影响原数组查找特定项的索引的方法，indexOf() 和 lastIndexOf() 迭代方法 every()、some()、filter()、map() 和 forEach() 方法\n数组归并方法 reduce() 和 reduceRight() 方法\n\n10. Unicode、UTF-8、UTF-16、UTF-32的区别？（1）Unicode在说Unicode之前需要先了解一下ASCII码：ASCII 码（American Standard Code for Information Interchange）称为美国标准信息交换码。\n\n它是基于拉丁字母的一套电脑编码系统。\n它定义了一个用于代表常见字符的字典。\n它包含了”A-Z”(包含大小写)，数据”0-9” 以及一些常见的符号。\n它是专门为英语而设计的，有128个编码，对其他语言无能为力\n\nASCII码可以表示的编码有限，要想表示其他语言的编码，还是要使用Unicode来表示，可以说Unicode是ASCII 的超集。\nUnicode全称 Unicode Translation Format，又叫做统一码、万国码、单一码。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。\nUnicode的实现方式（也就是编码方式）有很多种，常见的是UTF-8、UTF-16、UTF-32和USC-2。\n（2）UTF-8UTF-8是使用最广泛的Unicode编码方式，它是一种可变长的编码方式，可以是1—4个字节不等，它可以完全兼容ASCII码的128个字符。\n注意： UTF-8 是一种编码方式，Unicode是一个字符集合。\nUTF-8的编码规则：\n\n对于单字节的符号，字节的第一位为0，后面的7位为这个字符的Unicode编码，因此对于英文字母，它的Unicode编码和ACSII编码一样。\n对于n字节的符号，第一个字节的前n位都是1，第n+1位设为0，后面字节的前两位一律设为10，剩下的没有提及的二进制位，全部为这个符号的Unicode码 。\n\n来看一下具体的Unicode编号范围与对应的UTF-8二进制格式 ：\n\n\n\n编码范围（编号对应的十进制数）\n二进制格式\n\n\n\n0x00—0x7F （0-127）\n0xxxxxxx\n\n\n0x80—0x7FF （128-2047）\n110xxxxx 10xxxxxx\n\n\n0x800—0xFFFF  （2048-65535）\n1110xxxx 10xxxxxx 10xxxxxx\n\n\n0x10000—0x10FFFF  （65536以上）\n11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\n\n那该如何通过具体的Unicode编码，进行具体的UTF-8编码呢？步骤如下：\n\n找到该Unicode编码的所在的编号范围，进而找到与之对应的二进制格式\n将Unicode编码转换为二进制数（去掉最高位的0）\n将二进制数从右往左一次填入二进制格式的X中，如果有X未填，就设为0\n\n来看一个实际的例子： “马” 字的Unicode编码是：0x9A6C，整数编号是39532 （1）首选确定了该字符在第三个范围内，它的格式是 1110xxxx 10xxxxxx 10xxxxxx （2）39532对应的二进制数为1001 1010 0110 1100 （3）将二进制数填入X中，结果是：11101001 10101001 10101100\n（3）UTF-161. 平面的概念\n在了解UTF-16之前，先看一下平面的概念： Unicode编码中有很多很多的字符，它并不是一次性定义的，而是分区进行定义的，每个区存放65536（216）个字符，这称为一个平面，目前总共有17 个平面。\n最前面的一个平面称为基本平面，它的码点从0 — 216-1，写成16进制就是U+0000 — U+FFFF，那剩下的16个平面就是辅助平面，码点范围是 U+10000—U+10FFFF。\n2. UTF-16 概念：\nUTF-16也是Unicode编码集的一种编码形式，把Unicode字符集的抽象码位映射为16位长的整数（即码元）的序列，用于数据存储或传递。Unicode字符的码位需要1个或者2个16位长的码元来表示，因此UTF-16也是用变长字节表示的。\n3. UTF-16 编码规则：\n\n编号在 U+0000—U+FFFF 的字符（常用字符集），直接用两个字节表示。\n编号在 U+10000—U+10FFFF 之间的字符，需要用四个字节表示。\n\n4. 编码识别\n那么问题来了，当遇到两个字节时，怎么知道是把它当做一个字符还是和后面的两个字节一起当做一个字符呢？\nUTF-16 编码肯定也考虑到了这个问题，在基本平面内，从 U+D800 — U+DFFF 是一个空段，也就是说这个区间的码点不对应任何的字符，因此这些空段就可以用来映射辅助平面的字符。\n辅助平面共有 220 个字符位，因此表示这些字符至少需要 20 个二进制位。UTF-16 将这 20 个二进制位分成两半，前 10 位映射在 U+D800 — U+DBFF，称为高位（H），后 10 位映射在 U+DC00 — U+DFFF，称为低位（L）。这就相当于，将一个辅助平面的字符拆成了两个基本平面的字符来表示。\n因此，当遇到两个字节时，发现它的码点在 U+D800 —U+DBFF之间，就可以知道，它后面的两个字节的码点应该在 U+DC00 — U+DFFF 之间，这四个字节必须放在一起进行解读。\n5. 举例说明\n以 “𡠀“ 字为例，它的 Unicode 码点为 0x21800，该码点超出了基本平面的范围，因此需要用四个字节来表示，步骤如下：\n\n首先计算超出部分的结果：0x21800 - 0x10000\n将上面的计算结果转为20位的二进制数，不足20位就在前面补0，结果为：0001000110 0000000000\n将得到的两个10位二进制数分别对应到两个区间中\nU+D800 对应的二进制数为 1101100000000000， 将0001000110填充在它的后10 个二进制位，得到 1101100001000110，转成 16 进制数为 0xD846。同理，低位为 0xDC00，所以这个字的UTF-16 编码为 0xD846 0xDC00\n\n（4） UTF-32UTF-32 就是字符所对应编号的整数二进制形式，每个字符占四个字节，这个是直接进行转换的。该编码方式占用的储存空间较多，所以使用较少。\n比如“马” 字的Unicode编号是：U+9A6C，整数编号是39532，直接转化为二进制：1001 1010 0110 1100，这就是它的UTF-32编码。\n（5）总结Unicode、UTF-8、UTF-16、UTF-32有什么区别？\n\nUnicode 是编码字符集（字符集），而UTF-8、UTF-16、UTF-32是字符集编码（编码规则）；\nUTF-16 使用变长码元序列的编码方式，相较于定长码元序列的UTF-32算法更复杂，甚至比同样是变长码元序列的UTF-8也更为复杂，因为其引入了独特的代理对这样的代理机制；\nUTF-8需要判断每个字节中的开头标志信息，所以如果某个字节在传送过程中出错了，就会导致后面的字节也会解析出错；而UTF-16不会判断开头标志，即使错也只会错一个字符，所以容错能力教强；\n如果字符内容全部英文或英文与其他文字混合，但英文占绝大部分，那么用UTF-8就比UTF-16节省了很多空间；而如果字符内容全部是中文这样类似的字符或者混合字符中中文占绝大多数，那么UTF-16就占优势了，可以节省很多空间；\n\n11. 常见的位运算符有哪些？其计算规则是什么？现代计算机中数据都是以二进制的形式存储的，即0、1两种状态，计算机对二进制数据进行的运算加减乘除等都是叫位运算，即将符号位共同参与运算的运算。\n常见的位运算有以下几种：\n\n\n\n运算符\n描述\n运算规则\n\n\n\n&amp;\n与\n两个位都为1时，结果才为1\n\n\n`\n`\n或\n\n\n^\n异或\n两个位相同为0，相异为1\n\n\n~\n取反\n0变1，1变0\n\n\n&lt;&lt;\n左移\n各二进制位全部左移若干位，高位丢弃，低位补0\n\n\n&gt;&gt;\n右移\n各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃\n\n\n1. 按位与运算符（&amp;）定义： 参加运算的两个数据按二进制位进行“与”运算。 运算规则：\n0 &amp; 0 = 0  \n0 &amp; 1 = 0  \n1 &amp; 0 = 0  \n1 &amp; 1 = 1\n复制代码\n\n总结：两位同时为1，结果才为1，否则结果为0。 例如：3&amp;5 即：\n0000 0011 \n   0000 0101 \n = 0000 0001\n复制代码\n\n因此 3&amp;5 的值为1。 注意：负数按补码形式参加按位与运算。\n用途：\n（1）判断奇偶\n只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用if ((i &amp; 1) == 0)代替if (i % 2 == 0)来判断a是不是偶数。\n（2）清零\n如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。\n2. 按位或运算符（|）定义： 参加运算的两个对象按二进制位进行“或”运算。\n运算规则：\n0 | 0 = 0\n0 | 1 = 1  \n1 | 0 = 1  \n1 | 1 = 1\n复制代码\n\n总结：参加运算的两个对象只要有一个为1，其值为1。 例如：3|5即：\n0000 0011\n  0000 0101 \n= 0000 0111\n复制代码\n\n因此，3|5的值为7。 注意：负数按补码形式参加按位或运算。\n3. 异或运算符（^）定义： 参加运算的两个数据按二进制位进行“异或”运算。\n运算规则：\n0 ^ 0 = 0  \n0 ^ 1 = 1  \n1 ^ 0 = 1  \n1 ^ 1 = 0\n复制代码\n\n总结：参加运算的两个对象，如果两个相应位相同为0，相异为1。 例如：3|5即：\n0000 0011\n  0000 0101 \n= 0000 0110\n复制代码\n\n因此，3^5的值为6。 异或运算的性质:\n\n交换律：(a^b)^c == a^(b^c)\n结合律：(a + b)^c == a^b + b^c\n对于任何数x，都有 x^x=0，x^0=x\n自反性: a^b^b=a^0=a;\n\n4. 取反运算符 (~)定义： 参加运算的一个数据按二进制进行“取反”运算。\n运算规则：\n~ 1 = 0~ 0 = 1\n复制代码\n\n总结：对一个二进制数按位取反，即将0变1，1变0。 例如：~6 即：\n0000 0110= 1111 1001\n复制代码\n\n在计算机中，正数用原码表示，负数使用补码存储，首先看最高位，最高位1表示负数，0表示正数。此计算机二进制码为负数，最高位为符号位。 当发现按位取反为负数时，就直接取其补码，变为十进制：\n0000 0110   = 1111 1001反码：1000 0110补码：1000 0111\n复制代码\n\n因此，~6的值为-7。\n5. 左移运算符（&lt;&lt;）定义： 将一个运算对象的各二进制位全部左移若干位，左边的二进制位丢弃，右边补0。 设 a=1010 1110，a = a&lt;&lt; 2 将a的二进制位左移2位、右补0，即得a=1011 1000。 若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。\n6. 右移运算符（&gt;&gt;）定义： 将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。 例如：a=a&gt;&gt;2 将a的二进制位右移2位，左补0 或者 左补1得看被移数是正还是负。 操作数每右移一位，相当于该数除以2。\n7. 原码、补码、反码上面提到了补码、反码等知识，这里就补充一下。 计算机中的有符号数有三种表示方法，即原码、反码和补码。三种表示方法均有符号位和数值位两部分，符号位都是用0表示“正”，用1表示“负”，而数值位，三种表示方法各不相同。\n（1）原码\n原码就是一个数的二进制数。例如：10的原码为0000 1010\n（2）反码\n\n正数的反码与原码相同，如：10 反码为 0000 1010\n负数的反码为除符号位，按位取反，即0变1，1变0。\n\n例如：-10\n原码：1000 1010\n反码：1111 0101\n复制代码\n\n（3）补码\n\n正数的补码与原码相同，如：10 补码为 0000 1010\n负数的补码是原码除符号位外的所有位取反即0变1，1变0，然后加1，也就是反码加1。\n\n例如：-10\n原码：1000 1010\n反码：1111 0101\n补码：1111 0110\n复制代码\n\n12. 为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组?arguments是一个对象，它的属性是从 0 开始依次递增的数字，还有callee和length等属性，与数组相似；但是它却没有数组常见的方法属性，如forEach, reduce等，所以叫它们类数组。\n要遍历类数组，有三个方法：\n（1）将数组的方法应用到类数组上，这时候就可以使用call和apply方法，如：\nfunction foo()&#123; \n  Array.prototype.forEach.call(arguments, a => console.log(a))\n&#125;\n复制代码\n\n（2）使用Array.from方法将类数组转化成数组：‌\nfunction foo()&#123; \n  const arrArgs = Array.from(arguments) \n  arrArgs.forEach(a => console.log(a))\n&#125;\n复制代码\n\n（3）使用展开运算符将类数组转化成数组\nfunction foo()&#123; \n    const arrArgs = [...arguments] \n    arrArgs.forEach(a => console.log(a)) \n&#125;\n复制代码\n\n13. 什么是 DOM 和 BOM？\nDOM 指的是文档对象模型，它指的是把文档当做一个对象，这个对象主要定义了处理网页内容的方法和接口。\nBOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的法和接口。BOM的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 location 对象、navigator 对象、screen 对象等子对象，并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对象的子对象。\n\n14. 对类数组对象的理解，如何转化为数组一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和 DOM 方法的返回结果，函数参数也可以被看作是类数组对象，因为它含有 length属性值，代表可接收的参数个数。\n常见的类数组转换为数组的方法有这样几种：\n\n通过 call 调用数组的 slice 方法来实现转换\n\nArray.prototype.slice.call(arrayLike);\n复制代码\n\n\n通过 call 调用数组的 splice 方法来实现转换\n\nArray.prototype.splice.call(arrayLike, 0);\n复制代码\n\n\n通过 apply 调用数组的 concat 方法来实现转换\n\nArray.prototype.concat.apply([], arrayLike);\n复制代码\n\n\n通过 Array.from 方法来实现转换\n\nArray.from(arrayLike);\n复制代码\n\n15. escape、encodeURI、encodeURIComponent 的区别\nencodeURI 是对整个 URI 进行转义，将 URI 中的非法字符转换为合法字符，所以对于一些在 URI 中有特殊意义的字符不会进行转义。\nencodeURIComponent 是对 URI 的组成部分进行转义，所以一些特殊字符也会得到转义。\nescape 和 encodeURI 的作用相同，不过它们对于 unicode 编码为 0xff 之外字符的时候会有区别，escape 是直接在字符的 unicode 编码前加上 %u，而 encodeURI 首先会将字符转换为 UTF-8 的格式，再在每个字节前加上 %。\n\n16. 对AJAX的理解，实现一个AJAX请求AJAX是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的 异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。\n创建AJAX请求的步骤：\n\n创建一个 XMLHttpRequest 对象。\n在这个对象上使用 open 方法创建一个 HTTP 请求，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。\n在发起请求前，可以为这个对象添加一些信息和监听函数。比如说可以通过 setRequestHeader 方法来为请求添加头信息。还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候就可以通过 response 中的数据来对页面进行更新了。\n当对象的属性和监听函数设置完成后，最后调用 sent 方法来向服务器发起请求，可以传入参数作为发送的数据体。\n\nconst SERVER_URL = \"/server\";\nlet xhr = new XMLHttpRequest();\n// 创建 Http 请求\nxhr.open(\"GET\", url, true);\n// 设置状态监听函数\nxhr.onreadystatechange = function() &#123;\n  if (this.readyState !== 4) return;\n  // 当请求成功时\n  if (this.status === 200) &#123;\n    handle(this.response);\n  &#125; else &#123;\n    console.error(this.statusText);\n  &#125;\n&#125;;\n// 设置请求失败时的监听函数\nxhr.onerror = function() &#123;\n  console.error(this.statusText);\n&#125;;\n// 设置请求头信息\nxhr.responseType = \"json\";\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n// 发送 Http 请求\nxhr.send(null);\n复制代码\n\n使用Promise封装AJAX：\n// promise 封装实现：\nfunction getJSON(url) &#123;\n  // 创建一个 promise 对象\n  let promise = new Promise(function(resolve, reject) &#123;\n    let xhr = new XMLHttpRequest();\n    // 新建一个 http 请求\n    xhr.open(\"GET\", url, true);\n    // 设置状态的监听函数\n    xhr.onreadystatechange = function() &#123;\n      if (this.readyState !== 4) return;\n      // 当请求成功或失败时，改变 promise 的状态\n      if (this.status === 200) &#123;\n        resolve(this.response);\n      &#125; else &#123;\n        reject(new Error(this.statusText));\n      &#125;\n    &#125;;\n    // 设置错误监听函数\n    xhr.onerror = function() &#123;\n      reject(new Error(this.statusText));\n    &#125;;\n    // 设置响应的数据类型\n    xhr.responseType = \"json\";\n    // 设置请求头信息\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\n    // 发送 http 请求\n    xhr.send(null);\n  &#125;);\n  return promise;\n&#125;\n复制代码\n\n17. JavaScript为什么要进行变量提升，它导致了什么问题？变量提升的表现是，无论在函数中何处位置声明的变量，好像都被提升到了函数的首部，可以在变量声明前访问到而不会报错。\n造成变量声明提升的本质原因是 js 引擎在代码执行前有一个解析的过程，创建了执行上下文，初始化了一些代码执行时需要用到的对象。当访问一个变量时，会到当前执行上下文中的作用域链中去查找，而作用域链的首端指向的是当前执行上下文的变量对象，这个变量对象是执行上下文的一个属性，它包含了函数的形参、所有的函数和变量声明，这个对象的是在代码解析的时候创建的。\n首先要知道，JS在拿到一个变量或者一个函数的时候，会有两步操作，即解析和执行。\n\n在解析阶段\n，JS会检查语法，并对函数进行预编译。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出this、arguments和函数的参数。\n\n全局上下文：变量定义，函数声明\n函数上下文：变量定义，函数声明，this，arguments\n\n\n在执行阶段，就是按照代码的顺序依次执行。\n\n\n那为什么会进行变量提升呢？主要有以下两个原因：\n\n提高性能\n容错性更好\n\n（1）提高性能 在JS代码执行之前，会进行语法检查和预编译，并且这一操作只进行一次。这么做就是为了提高性能，如果没有这一步，那么每次执行代码前都必须重新解析一遍该变量（函数），而这是没有必要的，因为变量（函数）的代码并不会改变，解析一遍就够了。\n在解析的过程中，还会为函数生成预编译代码。在预编译时，会统计声明了哪些变量、创建了哪些函数，并对函数的代码进行压缩，去除注释、不必要的空白等。这样做的好处就是每次执行函数时都可以直接为该函数分配栈空间（不需要再解析一遍去获取代码中声明了哪些变量，创建了哪些函数），并且因为代码压缩的原因，代码执行也更快了。\n（2）容错性更好\n变量提升可以在一定程度上提高JS的容错性，看下面的代码：\na = 1;var a;console.log(a);\n复制代码\n\n如果没有变量提升，这两行代码就会报错，但是因为有了变量提升，这段代码就可以正常执行。\n虽然，在可以开发过程中，可以完全避免这样写，但是有时代码很复杂的时候。可能因为疏忽而先使用后定义了，这样也不会影响正常使用。由于变量提升的存在，而会正常运行。\n总结：\n\n解析和预编译过程中的声明提升可以提高性能，让函数可以在执行时预先为变量分配栈空间\n声明提升还可以提高JS代码的容错性，使一些不规范的代码也可以正常执行\n\n变量提升虽然有一些优点，但是他也会造成一定的问题，在ES6中提出了let、const来定义变量，它们就没有变量提升的机制。下面看一下变量提升可能会导致的问题：\nvar tmp = new Date();\n\nfunction fn()&#123;\n\tconsole.log(tmp);\n\tif(false)&#123;\n\t\tvar tmp = 'hello world';\n\t&#125;\n&#125;\n\nfn();  // undefined\n复制代码\n\n在这个函数中，原本是要打印出外层的tmp变量，但是因为变量提升的问题，内层定义的tmp被提到函数内部的最顶部，相当于覆盖了外层的tmp，所以打印结果为undefined。\nvar tmp = 'hello world';\n\nfor (var i = 0; i &lt; tmp.length; i++) &#123;\n\tconsole.log(tmp[i]);\n&#125;\n\nconsole.log(i); // 11\n复制代码\n\n由于遍历时定义的i会变量提升成为一个全局变量，在函数结束之后不会被销毁，所以打印出来11。\n18. 什么是尾调用，使用尾调用有什么好处？尾调用指的是函数的最后一步调用另一个函数。代码执行是基于执行栈的，所以当在一个函数里调用另一个函数时，会保留当前的执行上下文，然后再新建另外一个执行上下文加入栈中。使用尾调用的话，因为已经是函数的最后一步，所以这时可以不必再保留当前的执行上下文，从而节省了内存，这就是尾调用优化。但是 ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。\n19.  ES6模块与CommonJS模块有什么异同？ES6 Module和CommonJS模块的区别：\n\nCommonJS是对模块的浅拷⻉，ES6 Module是对模块的引⽤，即ES6 Module只存只读，不能改变其值，也就是指针指向不能变，类似const；\nimport的接⼝是read-only（只读状态），不能修改其变量值。 即不能修改其变量的指针指向，但可以改变变量内部指针指向，可以对commonJS对重新赋值（改变指针指向），但是对ES6 Module赋值会编译报错。\n\nES6 Module和CommonJS模块的共同点：\n\nCommonJS和ES6 Module都可以对引⼊的对象进⾏赋值，即对对象内部属性的值进⾏改变。\n\n20. 常见的DOM操作有哪些1）DOM 节点的获取DOM 节点的获取的API及使用：\ngetElementById // 按照 id 查询\ngetElementsByTagName // 按照标签名查询\ngetElementsByClassName // 按照类名查询\nquerySelectorAll // 按照 css 选择器查询\n\n// 按照 id 查询\nvar imooc = document.getElementById('imooc') // 查询到 id 为 imooc 的元素\n// 按照标签名查询\nvar pList = document.getElementsByTagName('p')  // 查询到标签为 p 的集合\nconsole.log(divList.length)\nconsole.log(divList[0])\n// 按照类名查询\nvar moocList = document.getElementsByClassName('mooc') // 查询到类名为 mooc 的集合\n// 按照 css 选择器查询\nvar pList = document.querySelectorAll('.mooc') // 查询到类名为 mooc 的集合\n复制代码\n\n2）DOM 节点的创建创建一个新节点，并把它添加到指定节点的后面。 已知的 HTML 结构如下：\n&lt;html>\n  &lt;head>\n    &lt;title>DEMO&lt;/title>\n  &lt;/head>\n  &lt;body>\n    &lt;div id=\"container\"> \n      &lt;h1 id=\"title\">我是标题&lt;/h1>\n    &lt;/div>   \n  &lt;/body>\n&lt;/html>\n复制代码\n\n要求添加一个有内容的 span 节点到 id 为 title 的节点后面，做法就是：\n// 首先获取父节点\nvar container = document.getElementById('container')\n// 创建新节点\nvar targetSpan = document.createElement('span')\n// 设置 span 节点的内容\ntargetSpan.innerHTML = 'hello world'\n// 把新创建的元素塞进父节点里去\ncontainer.appendChild(targetSpan)\n复制代码\n\n3）DOM 节点的删除删除指定的 DOM 节点， 已知的 HTML 结构如下：\n&lt;html>\n  &lt;head>\n    &lt;title>DEMO&lt;/title>\n  &lt;/head>\n  &lt;body>\n    &lt;div id=\"container\"> \n      &lt;h1 id=\"title\">我是标题&lt;/h1>\n    &lt;/div>   \n  &lt;/body>\n&lt;/html>\n复制代码\n\n需要删除 id 为 title 的元素，做法是：\n// 获取目标元素的父元素\nvar container = document.getElementById('container')\n// 获取目标元素\nvar targetNode = document.getElementById('title')\n// 删除目标元素\ncontainer.removeChild(targetNode)\n复制代码\n\n或者通过子节点数组来完成删除：\n// 获取目标元素的父元素var container = document.getElementById('container')// 获取目标元素var targetNode = container.childNodes[1]// 删除目标元素container.removeChild(targetNode)\n复制代码\n\n4）修改 DOM 元素修改 DOM 元素这个动作可以分很多维度，比如说移动 DOM 元素的位置，修改 DOM 元素的属性等。\n将指定的两个 DOM 元素交换位置， 已知的 HTML 结构如下：\n&lt;html>\n  &lt;head>\n    &lt;title>DEMO&lt;/title>\n  &lt;/head>\n  &lt;body>\n    &lt;div id=\"container\"> \n      &lt;h1 id=\"title\">我是标题&lt;/h1>\n      &lt;p id=\"content\">我是内容&lt;/p>\n    &lt;/div>   \n  &lt;/body>\n&lt;/html>\n复制代码\n\n现在需要调换 title 和 content 的位置，可以考虑 insertBefore 或者 appendChild：\n// 获取父元素\nvar container = document.getElementById('container')   \n \n// 获取两个需要被交换的元素\nvar title = document.getElementById('title')\nvar content = document.getElementById('content')\n// 交换两个元素，把 content 置于 title 前面\ncontainer.insertBefore(content, title)\n复制代码\n\n21. use strict是什么意思 ? 使用它区别是什么？use strict 是一种 ECMAscript5 添加的（严格模式）运行模式，这种模式使得 Javascript 在更严格的条件下运行。设立严格模式的目的如下：\n\n消除 Javascript 语法的不合理、不严谨之处，减少怪异行为;\n消除代码运行的不安全之处，保证代码运行的安全；\n提高编译器效率，增加运行速度；\n为未来新版本的 Javascript 做好铺垫。\n\n区别：\n\n禁止使用 with 语句。\n禁止 this 关键字指向全局对象。\n对象不能有重名的属性。\n\n22. 如何判断一个对象是否属于某个类？\n第一种方式，使用 instanceof 运算符来判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\n第二种方式，通过对象的 constructor 属性来判断，对象的 constructor 属性指向该对象的构造函数，但是这种方式不是很安全，因为 constructor 属性可以被改写。\n第三种方式，如果需要判断的是某个内置的引用类型的话，可以使用 Object.prototype.toString() 方法来打印对象的[[Class]] 属性来进行判断。\n\n23. 强类型语言和弱类型语言的区别\n强类型语言：强类型语言也称为强类型定义语言，是一种总是强制类型定义的语言，要求变量的使用要严格符合定义，所有变量都必须先定义后使用。Java和C++等语言都是强制类型定义的，也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。例如你有一个整数，如果不显式地进行转换，你不能将其视为一个字符串。\n弱类型语言：弱类型语言也称为弱类型定义语言，与强类型定义相反。JavaScript语言就属于弱类型语言。简单理解就是一种变量类型可以被忽略的语言。比如JavaScript是弱类型定义的，在JavaScript中就可以将字符串’12’和整数3进行连接得到字符串’123’，在相加的时候会进行强制类型转换。\n\n两者对比：强类型语言在速度上可能略逊色于弱类型语言，但是强类型语言带来的严谨性可以有效地帮助避免许多错误。\n24. 解释性语言和编译型语言的区别（1）解释型语言 使用专门的解释器对源程序逐行解释成特定平台的机器码并立即执行。是代码在执行时才被解释器一行行动态翻译和执行，而不是在执行之前就完成翻译。解释型语言不需要事先编译，其直接将源代码解释成机器码并立即执行，所以只要某一平台提供了相应的解释器即可运行该程序。其特点总结如下\n\n解释型语言每次运行都需要将源代码解释称机器码并执行，效率较低；\n只要平台提供相应的解释器，就可以运行源代码，所以可以方便源程序移植；\nJavaScript、Python等属于解释型语言。\n\n（2）编译型语言 使用专门的编译器，针对特定的平台，将高级语言源代码一次性的编译成可被该平台硬件执行的机器码，并包装成该平台所能识别的可执行性程序的格式。在编译型语言写的程序执行之前，需要一个专门的编译过程，把源代码编译成机器语言的文件，如exe格式的文件，以后要再运行时，直接使用编译结果即可，如直接运行exe文件。因为只需编译一次，以后运行时不需要编译，所以编译型语言执行效率高。其特点总结如下：\n\n一次性的编译成平台相关的机器语言文件，运行时脱离开发环境，运行效率高；\n与特定平台相关，一般无法移植到其他平台；\nC、C++等属于编译型语言。\n\n两者主要区别在于： 前者源程序编译后即可在该平台运行，后者是在运行期间才编译。所以前者运行速度快，后者跨平台性好。\n25. for…in和for…of的区别for…of 是ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，和ES3中的for…in的区别如下\n\nfor…of 遍历获取的是对象的键值，for…in 获取的是对象的键名；\nfor… in 会遍历对象的整个原型链，性能非常差不推荐使用，而 for … of 只遍历当前对象不会遍历原型链；\n对于数组的遍历，for…in 会返回数组中所有可枚举的属性(包括原型链上可枚举的属性)，for…of 只返回数组的下标对应的属性值；\n\n总结： for…in 循环主要是为了遍历对象而生，不适用于遍历数组；for…of 循环可以用来遍历数组、类数组对象，字符串、Set、Map 以及 Generator 对象。\n26. 如何使用for…of遍历对象for…of是作为ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，普通的对象用for..of遍历是会报错的。\n如果需要遍历的对象是类数组对象，用Array.from转成数组即可。\nvar obj = &#123;\n    0:'one',\n    1:'two',\n    length: 2\n&#125;;\nobj = Array.from(obj);\nfor(var k of obj)&#123;\n    console.log(k)\n&#125;\n复制代码\n\n如果不是类数组对象，就给对象添加一个[Symbol.iterator]属性，并指向一个迭代器即可。\n//方法一：\nvar obj = &#123;\n    a:1,\n    b:2,\n    c:3\n&#125;;\n\nobj[Symbol.iterator] = function()&#123;\n\tvar keys = Object.keys(this);\n\tvar count = 0;\n\treturn &#123;\n\t\tnext()&#123;\n\t\t\tif(count&lt;keys.length)&#123;\n\t\t\t\treturn &#123;value: obj[keys[count++]],done:false&#125;;\n\t\t\t&#125;else&#123;\n\t\t\t\treturn &#123;value:undefined,done:true&#125;;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&#125;;\n\nfor(var k of obj)&#123;\n\tconsole.log(k);\n&#125;\n\n\n// 方法二\nvar obj = &#123;\n    a:1,\n    b:2,\n    c:3\n&#125;;\nobj[Symbol.iterator] = function*()&#123;\n    var keys = Object.keys(obj);\n    for(var k of keys)&#123;\n        yield [k,obj[k]]\n    &#125;\n&#125;;\n\nfor(var [k,v] of obj)&#123;\n    console.log(k,v);\n&#125;\n\n复制代码\n\n27. ajax、axios、fetch的区别（1）AJAX Ajax 即“AsynchronousJavascriptAndXML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。它是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。其缺点如下：\n\n本身是针对MVC编程，不符合前端MVVM的浪潮\n基于原生XHR开发，XHR本身的架构不清晰\n不符合关注分离（Separation of Concerns）的原则\n配置和调用方式非常混乱，而且基于事件的异步模型不友好。\n\n（2）Fetch fetch号称是AJAX的替代品，是在ES6出现的，使用了ES6中的promise对象。Fetch是基于promise设计的。Fetch的代码结构比起ajax简单多。fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象。\nfetch的优点：\n\n语法简洁，更加语义化\n基于标准 Promise 实现，支持 async/await\n更加底层，提供的API丰富（request, response）\n脱离了XHR，是ES规范里新的实现方式\n\nfetch的缺点：\n\nfetch只对网络请求报错，对400，500都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。\nfetch默认不会带cookie，需要添加配置项： fetch(url, {credentials: ‘include’})\nfetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费\nfetch没有办法原生监测请求的进度，而XHR可以\n\n（3）Axios Axios 是一种基于Promise封装的HTTP客户端，其特点如下：\n\n浏览器端发起XMLHttpRequests请求\nnode端发起http请求\n支持Promise API\n监听请求和返回\n对请求和返回进行转化\n取消请求\n自动转换json数据\n客户端支持抵御XSRF攻击\n\n28. 数组的遍历方法有哪些\n\n\n方法\n是否改变原数组\n特点\n\n\n\nforEach()\n否\n数组方法，不改变原数组，没有返回值\n\n\nmap()\n否\n数组方法，不改变原数组，有返回值，可链式调用\n\n\nfilter()\n否\n数组方法，过滤数组，返回包含符合条件的元素的数组，可链式调用\n\n\nfor…of\n否\nfor…of遍历具有Iterator迭代器的对象的属性，返回的是数组的元素、对象的属性值，不能遍历普通的obj对象，将异步循环变成同步循环\n\n\nevery() 和 some()\n否\n数组方法，some()只要有一个是true，便返回true；而every()只要有一个是false，便返回false.\n\n\nfind() 和 findIndex()\n否\n数组方法，find()返回的是第一个符合条件的值；findIndex()返回的是第一个返回条件的值的索引值\n\n\nreduce() 和 reduceRight()\n否\n数组方法，reduce()对数组正序操作；reduceRight()对数组逆序操作\n\n\n遍历方法的详细解释：《细数JavaScript中那些遍历和循环》\n29. forEach和map方法有什么区别这方法都是用来遍历数组的，两者区别如下：\n\nforEach()方法会针对每一个元素执行提供的函数，对数据的操作会改变原数组，该方法没有返回值；\nmap()方法不会改变原数组的值，返回一个新数组，新数组中的值为原数组调用函数处理之后的值；\n\n四、原型与原型链1. 对原型、原型链的理解在JavaScript中是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在浏览器中都实现了 proto 属性来访问这个属性，但是最好不要使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，可以通过这个方法来获取对象的原型。\n当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。\n特点： JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。 \n2. 原型修改、重写function Person(name) &#123;\n    this.name = name\n&#125;\n// 修改原型\nPerson.prototype.getName = function() &#123;&#125;\nvar p = new Person('hello')\nconsole.log(p.__proto__ === Person.prototype) // true\nconsole.log(p.__proto__ === p.constructor.prototype) // true\n// 重写原型\nPerson.prototype = &#123;\n    getName: function() &#123;&#125;\n&#125;\nvar p = new Person('hello')\nconsole.log(p.__proto__ === Person.prototype)        // true\nconsole.log(p.__proto__ === p.constructor.prototype) // false\n复制代码\n\n可以看到修改原型的时候p的构造函数不是指向Person了，因为直接给Person的原型对象直接用对象赋值时，它的构造函数指向的了根构造函数Object，所以这时候p.constructor === Object ，而不是p.constructor === Person。要想成立，就要用constructor指回来：\nPerson.prototype = &#123;\n    getName: function() &#123;&#125;\n&#125;\nvar p = new Person('hello')\np.constructor = Person\nconsole.log(p.__proto__ === Person.prototype)        // true\nconsole.log(p.__proto__ === p.constructor.prototype) // true\n\n复制代码\n\n3. 原型链指向p.__proto__  // Person.prototype\nPerson.prototype.__proto__  // Object.prototype\np.__proto__.__proto__ //Object.prototype\np.__proto__.constructor.prototype.__proto__ // Object.prototype\nPerson.prototype.constructor.prototype.__proto__ // Object.prototype\np1.__proto__.constructor // Person\nPerson.prototype.constructor  // Person\n复制代码\n\n4. 原型链的终点是什么？如何打印出原型链的终点？由于Object是构造函数，原型链终点是Object.prototype.__proto__，而Object.prototype.__proto__=== null // true，所以，原型链的终点是null。原型链上的所有原型都是对象，所有的对象最终都是由Object构造的，而Object.prototype的下一级是Object.prototype.__proto__。 \n5. 如何获得对象非原型链上的属性？使用后hasOwnProperty()方法来判断属性是否属于原型链的属性：\nfunction iterate(obj)&#123;\n   var res=[];\n   for(var key in obj)&#123;\n        if(obj.hasOwnProperty(key))\n           res.push(key+': '+obj[key]);\n   &#125;\n   return res;\n&#125; \n复制代码\n\n五、执行上下文/作用域链/闭包1. 对闭包的理解闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量。\n闭包有两个常用的用途；\n\n闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。\n闭包的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。\n\n比如，函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包。\nfunction A() &#123;\n  let a = 1\n  window.B = function () &#123;\n      console.log(a)\n  &#125;\n&#125;\nA()\nB() // 1\n复制代码\n\n在 JS 中，闭包存在的意义就是让我们可以间接访问函数内部的变量。经典面试题：循环中使用闭包解决 var 定义函数的问题\nfor (var i = 1; i &lt;= 5; i++) &#123;\n  setTimeout(function timer() &#123;\n    console.log(i)\n  &#125;, i * 1000)\n&#125;\n复制代码\n\n首先因为 setTimeout 是个异步函数，所以会先把循环全部执行完毕，这时候 i 就是 6 了，所以会输出一堆 6。解决办法有三种：\n\n第一种是使用闭包的方式\n\nfor (var i = 1; i &lt;= 5; i++) &#123;  ;(function(j) &#123;    setTimeout(function timer() &#123;      console.log(j)    &#125;, j * 1000)  &#125;)(i)&#125;\n复制代码\n\n在上述代码中，首先使用了立即执行函数将 i 传入函数内部，这个时候值就被固定在了参数 j 上面不会改变，当下次执行 timer 这个闭包的时候，就可以使用外部函数的变量 j，从而达到目的。\n\n第二种就是使用 setTimeout 的第三个参数，这个参数会被当成 timer 函数的参数传入。\n\nfor (var i = 1; i &lt;= 5; i++) &#123;\n  setTimeout(\n    function timer(j) &#123;\n      console.log(j)\n    &#125;,\n    i * 1000,\n    i\n  )\n&#125;\n复制代码\n\n\n第三种就是使用 let 定义 i 了来解决问题了，这个也是最为推荐的方式\n\nfor (let i = 1; i &lt;= 5; i++) &#123;\n  setTimeout(function timer() &#123;\n    console.log(i)\n  &#125;, i * 1000)\n&#125;\n复制代码\n\n2. 对作用域、作用域链的理解1）全局作用域和函数作用域（1）全局作用域\n\n最外层函数和最外层函数外面定义的变量拥有全局作用域\n所有未定义直接赋值的变量自动声明为全局作用域\n所有window对象的属性拥有全局作用域\n全局作用域有很大的弊端，过多的全局作用域变量会污染全局命名空间，容易引起命名冲突。\n\n（2）函数作用域\n\n函数作用域声明在函数内部的变零，一般只有固定的代码片段可以访问到\n作用域是分层的，内层作用域可以访问外层作用域，反之不行\n\n2）块级作用域\n使用ES6中新增的let和const指令可以声明块级作用域，块级作用域可以在函数中创建也可以在一个代码块中的创建（由&#123; &#125;包裹的代码片段）\nlet和const声明的变量不会有变量提升，也不可以重复声明\n在循环中比较适合绑定块级作用域，这样就可以把声明的计数器变量限制在循环内部。\n\n作用域链： 在当前作用域中查找所需变量，但是该作用域没有这个变量，那这个变量就是自由变量。如果在自己作用域找不到该变量就去父级作用域查找，依次向上级作用域查找，直到访问到window对象就被终止，这一层层的关系就是作用域链。\n作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，可以访问到外层环境的变量和函数。\n作用域链的本质上是一个指向变量对象的指针列表。变量对象是一个包含了执行环境中所有变量和函数的对象。作用域链的前端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。\n当查找一个变量时，如果当前执行环境中没有找到，可以沿着作用域链向后查找。\n3. 对执行上下文的理解1. 执行上下文类型（1）全局执行上下文\n任何不在函数内部的都是全局执行上下文，它首先会创建一个全局的window对象，并且设置this的值等于这个全局对象，一个程序中只有一个全局执行上下文。\n（2）函数执行上下文\n当一个函数被调用时，就会为该函数创建一个新的执行上下文，函数的上下文可以有任意多个。\n（3）eval函数执行上下文\n执行在eval函数中的代码会有属于他自己的执行上下文，不过eval函数不常使用，不做介绍。\n2. 执行上下文栈\nJavaScript引擎使用执行上下文栈来管理执行上下文\n当JavaScript执行代码时，首先遇到全局代码，会创建一个全局执行上下文并且压入执行栈中，每当遇到一个函数调用，就会为该函数创建一个新的执行上下文并压入栈顶，引擎会执行位于执行上下文栈顶的函数，当函数执行完成之后，执行上下文从栈中弹出，继续执行下一个上下文。当所有的代码都执行完毕之后，从栈中弹出全局执行上下文。\n\nlet a = 'Hello World!';\nfunction first() &#123;\n  console.log('Inside first function');\n  second();\n  console.log('Again inside first function');\n&#125;\nfunction second() &#123;\n  console.log('Inside second function');\n&#125;\nfirst();\n//执行顺序\n//先执行second(),在执行first()\n复制代码\n\n3. 创建执行上下文创建执行上下文有两个阶段：创建阶段和执行阶段\n1）创建阶段\n（1）this绑定\n\n在全局执行上下文中，this指向全局对象（window对象）\n在函数执行上下文中，this指向取决于函数如何调用。如果它被一个引用对象调用，那么 this 会被设置成那个对象，否则 this 的值被设置为全局对象或者 undefined\n\n（2）创建词法环境组件\n\n词法环境是一种有标识符——变量映射的数据结构，标识符是指变量/函数名，变量是对实际对象或原始数据的引用。\n词法环境的内部有两个组件：加粗样式：环境记录器:用来储存变量个函数声明的实际位置外部环境的引用：可以访问父级作用域\n\n（3）创建变量环境组件\n\n变量环境也是一个词法环境，其环境记录器持有变量声明语句在执行上下文中创建的绑定关系。\n\n2）执行阶段 此阶段会完成对变量的分配，最后执行完代码。\n简单来说执行上下文就是指：\n在执行一点JS代码之前，需要先解析代码。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。这一步执行完了，才开始正式的执行程序。\n在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出this、arguments和函数的参数。\n\n全局上下文：变量定义，函数声明\n函数上下文：变量定义，函数声明，this，arguments\n\n六、this/call/apply/bind1. 对this对象的理解this 是执行上下文中的一个属性，它指向最后一次调用这个方法的对象。在实际开发中，this 的指向可以通过四种调用模式来判断。\n\n第一种是函数调用模式，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。\n第二种是方法调用模式，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。\n第三种是构造器调用模式，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。\n第四种是 apply 、 call 和 bind 调用模式，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变。\n\n这四种方式，使用构造器调用模式的优先级最高，然后是 apply、call 和 bind 调用模式，然后是方法调用模式，然后是函数调用模式。\n2. call() 和 apply() 的区别？它们的作用一模一样，区别仅在于传入参数的形式的不同。\n\napply 接受两个参数，第一个参数指定了函数体内 this 对象的指向，第二个参数为一个带下标的集合，这个集合可以为数组，也可以为类数组，apply 方法把这个集合中的元素作为参数传递给被调用的函数。\ncall 传入的参数数量不固定，跟 apply 相同的是，第一个参数也是代表函数体内的 this 指向，从第二个参数开始往后，每个参数被依次传入函数。\n\n3. 实现call、apply 及 bind 函数（1）call 函数的实现步骤：\n\n判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n判断传入上下文对象是否存在，如果不存在，则设置为 window 。\n处理传入的参数，截取第一个参数后的所有参数。\n将函数作为上下文对象的一个属性。\n使用上下文对象来调用这个方法，并保存返回结果。\n删除刚才新增的属性。\n返回结果。\n\nFunction.prototype.myCall = function(context) &#123;\n  // 判断调用对象\n  if (typeof this !== \"function\") &#123;\n    console.error(\"type error\");\n  &#125;\n  // 获取参数\n  let args = [...arguments].slice(1),\n    result = null;\n  // 判断 context 是否传入，如果未传入则设置为 window\n  context = context || window;\n  // 将调用函数设为对象的方法\n  context.fn = this;\n  // 调用函数\n  result = context.fn(...args);\n  // 将属性删除\n  delete context.fn;\n  return result;\n&#125;;\n复制代码\n\n（2）apply 函数的实现步骤：\n\n判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n判断传入上下文对象是否存在，如果不存在，则设置为 window 。\n将函数作为上下文对象的一个属性。\n判断参数值是否传入\n使用上下文对象来调用这个方法，并保存返回结果。\n删除刚才新增的属性\n返回结果\n\nFunction.prototype.myApply = function(context) &#123;\n  // 判断调用对象是否为函数\n  if (typeof this !== \"function\") &#123;\n    throw new TypeError(\"Error\");\n  &#125;\n  let result = null;\n  // 判断 context 是否存在，如果未传入则为 window\n  context = context || window;\n  // 将函数设为对象的方法\n  context.fn = this;\n  // 调用方法\n  if (arguments[1]) &#123;\n    result = context.fn(...arguments[1]);\n  &#125; else &#123;\n    result = context.fn();\n  &#125;\n  // 将属性删除\n  delete context.fn;\n  return result;\n&#125;;\n复制代码\n\n（3）bind 函数的实现步骤：\n\n判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n保存当前函数的引用，获取其余传入参数值。\n创建一个函数返回\n函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。\n\nFunction.prototype.myBind = function(context) &#123;\n  // 判断调用对象是否为函数\n  if (typeof this !== \"function\") &#123;\n    throw new TypeError(\"Error\");\n  &#125;\n  // 获取参数\n  var args = [...arguments].slice(1),\n    fn = this;\n  return function Fn() &#123;\n    // 根据调用方式，传入不同绑定值\n    return fn.apply(\n      this instanceof Fn ? this : context,\n      args.concat(...arguments)\n    );\n  &#125;;\n&#125;;\n复制代码\n\n七、异步编程1. 异步编程的实现方式？JavaScript中的异步机制可以分为以下几种：\n\n回调函数 的方式，使用回调函数的方式有一个缺点是，多个回调函数嵌套的时候会造成回调函数地狱，上下两层的回调函数间的代码耦合度太高，不利于代码的可维护。\nPromise 的方式，使用 Promise 的方式可以将嵌套的回调函数作为链式调用。但是使用这种方法，有时会造成多个 then 的链式调用，可能会造成代码的语义不够明确。\ngenerator 的方式，它可以在函数的执行过程中，将函数的执行权转移出去，在函数外部还可以将执行权转移回来。当遇到异步函数执行的时候，将函数执行权转移出去，当异步函数执行完毕时再将执行权给转移回来。因此在 generator 内部对于异步操作的方式，可以以同步的顺序来书写。使用这种方式需要考虑的问题是何时将函数的控制权转移回来，因此需要有一个自动执行 generator 的机制，比如说 co 模块等方式来实现 generator 的自动执行。\nasync 函数 的方式，async 函数是 generator 和 promise 实现的一个自动执行的语法糖，它内部自带执行器，当函数内部执行到一个 await 语句的时候，如果语句返回一个 promise 对象，那么函数将会等待 promise 对象的状态变为 resolve 后再继续向下执行。因此可以将异步逻辑，转化为同步的顺序来书写，并且这个函数可以自动执行。\n\n2. setTimeout、Promise、Async/Await 的区别（1）setTimeoutconsole.log('script start')\t//1. 打印 script start\nsetTimeout(function()&#123;\n    console.log('settimeout')\t// 4. 打印 settimeout\n&#125;)\t// 2. 调用 setTimeout 函数，并定义其完成后执行的回调函数\nconsole.log('script end')\t//3. 打印 script start\n// 输出顺序：script start->script end->settimeout\n复制代码\n\n（2）PromisePromise本身是同步的立即执行函数， 当在executor中执行resolve或者reject的时候, 此时是异步操作， 会先执行then/catch等，当主栈完成后，才会去调用resolve/reject中存放的方法执行，打印p的时候，是打印的返回结果，一个Promise实例。\nconsole.log('script start')\nlet promise1 = new Promise(function (resolve) &#123;\n    console.log('promise1')\n    resolve()\n    console.log('promise1 end')\n&#125;).then(function () &#123;\n    console.log('promise2')\n&#125;)\nsetTimeout(function()&#123;\n    console.log('settimeout')\n&#125;)\nconsole.log('script end')\n// 输出顺序: script start->promise1->promise1 end->script end->promise2->settimeout\n复制代码\n\n当JS主线程执行到Promise对象时：\n\npromise1.then() 的回调就是一个 task\npromise1 是 resolved或rejected: 那这个 task 就会放入当前事件循环回合的 microtask queue\npromise1 是 pending: 这个 task 就会放入 事件循环的未来的某个(可能下一个)回合的 microtask queue 中\nsetTimeout 的回调也是个 task ，它会被放入 macrotask queue 即使是 0ms 的情况\n\n（3）async/awaitasync function async1()&#123;\n   console.log('async1 start');\n    await async2();\n    console.log('async1 end')\n&#125;\nasync function async2()&#123;\n    console.log('async2')\n&#125;\nconsole.log('script start');\nasync1();\nconsole.log('script end')\n// 输出顺序：script start->async1 start->async2->script end->async1 end\n复制代码\n\nasync 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。\n例如：\nasync function func1() &#123;\n    return 1\n&#125;\nconsole.log(func1())\n复制代码\n\n func1的运行结果其实就是一个Promise对象。因此也可以使用then来处理后续逻辑。\nfunc1().then(res => &#123;\n    console.log(res);  // 30\n&#125;)\n复制代码\n\nawait的含义为等待，也就是 async 函数需要等待await后的函数执行完成并且有了返回结果（Promise对象）之后，才能继续执行下面的代码。await通过返回一个Promise对象来实现同步的效果。\n3. 对Promise的理解Promise是异步编程的一种解决方案，它是一个对象，可以获取异步操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调，它比传统的解决方案回调函数和事件更合理和更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。\n（1）Promise的实例有三个状态:\n\nPending（进行中）\nResolved（已完成）\nRejected（已拒绝）\n\n当把一件事情交给promise时，它的状态就是Pending，任务完成了状态就变成了Resolved、没有完成失败了就变成了Rejected。\n（2）Promise的实例有两个过程：\n\npending -&gt; fulfilled : Resolved（已完成）\npending -&gt; rejected：Rejected（已拒绝）\n\n注意：一旦从进行状态变成为其他状态就永远不能更改状态了。\nPromise的特点：\n\n对象的状态不受外界影响。promise对象代表一个异步操作，有三种状态，pending（进行中）、fulfilled（已成功）、rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态，这也是promise这个名字的由来——“承诺”；\n一旦状态改变就不会再变，任何时候都可以得到这个结果。promise对象的状态改变，只有两种可能：从pending变为fulfilled，从pending变为rejected。这时就称为resolved（已定型）。如果改变已经发生了，你再对promise对象添加回调函数，也会立即得到这个结果。这与事件（event）完全不同，事件的特点是：如果你错过了它，再去监听是得不到结果的。\n\nPromise的缺点：\n\n无法取消Promise，一旦新建它就会立即执行，无法中途取消。\n如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。\n当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。\n\n总结： Promise 对象是异步编程的一种解决方案，最早由社区提出。Promise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。一个 Promise 实例有三种状态，分别是pending、resolved 和 rejected，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 resolved 或者rejected 状态，并且状态一经改变，就凝固了，无法再被改变了。\n状态的改变是通过 resolve() 和 reject() 函数来实现的，可以在异步操作结束后调用这两个函数改变 Promise 实例的状态，它的原型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的末尾执行。\n注意： 在构造 Promise 的时候，构造函数内部的代码是立即执行的\n4. Promise的基本用法（1）创建Promise对象Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。\nPromise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。\nconst promise = new Promise(function(resolve, reject) &#123;\n  // ... some code\n  if (/* 异步操作成功 */)&#123;\n    resolve(value);\n  &#125; else &#123;\n    reject(error);\n  &#125;\n&#125;);\n复制代码\n\n一般情况下都会使用new Promise()来创建promise对象，但是也可以使用promise.resolve和promise.reject这两个方法：\n\nPromise.resolve\n\nPromise.resolve(value)的返回值也是一个promise对象，可以对返回值进行.then调用，代码如下：\nPromise.resolve(11).then(function(value)&#123;\n  console.log(value); // 打印出11\n&#125;);\n复制代码\n\nresolve(11)代码中，会让promise对象进入确定(resolve状态)，并将参数11传递给后面的then所指定的onFulfilled 函数；\n创建promise对象可以使用new Promise的形式创建对象，也可以使用Promise.resolve(value)的形式创建promise对象；\n\nPromise.reject\n\nPromise.reject 也是new Promise的快捷形式，也创建一个promise对象。代码如下：\nPromise.reject(new Error(“我错了，请原谅俺！！”));\n复制代码\n\n就是下面的代码new Promise的简单形式：\nnew Promise(function(resolve,reject)&#123;\n   reject(new Error(\"我错了！\"));\n&#125;);\n复制代码\n\n下面是使用resolve方法和reject方法：\nfunction testPromise(ready) &#123;\n  return new Promise(function(resolve,reject)&#123;\n    if(ready) &#123;\n      resolve(\"hello world\");\n    &#125;else &#123;\n      reject(\"No thanks\");\n    &#125;\n  &#125;);\n&#125;;\n// 方法调用\ntestPromise(true).then(function(msg)&#123;\n  console.log(msg);\n&#125;,function(error)&#123;\n  console.log(error);\n&#125;);\n复制代码\n\n上面的代码的含义是给testPromise方法传递一个参数，返回一个promise对象，如果为true的话，那么调用promise对象中的resolve()方法，并且把其中的参数传递给后面的then第一个函数内，因此打印出 “hello world”, 如果为false的话，会调用promise对象中的reject()方法，则会进入then的第二个函数内，会打印No thanks；\n（2）Promise方法Promise有五个常用的方法：then()、catch()、all()、race()、finally。下面就来看一下这些方法。\n\nthen()\n\n当Promise执行的内容符合成功条件时，调用resolve函数，失败就调用reject函数。Promise创建完了，那该如何调用呢？\npromise.then(function(value) &#123;\n  &#x2F;&#x2F; success\n&#125;, function(error) &#123;\n  &#x2F;&#x2F; failure\n&#125;);\n复制代码\n\nthen方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中第二个参数可以省略。 then方法返回的是一个新的Promise实例（不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。\n当要写有顺序的异步事件时，需要串行时，可以这样写：\nlet promise = new Promise((resolve,reject)=>&#123;\n    ajax('first').success(function(res)&#123;\n        resolve(res);\n    &#125;)\n&#125;)\npromise.then(res=>&#123;\n    return new Promise((resovle,reject)=>&#123;\n        ajax('second').success(function(res)&#123;\n            resolve(res)\n        &#125;)\n    &#125;)\n&#125;).then(res=>&#123;\n    return new Promise((resovle,reject)=>&#123;\n        ajax('second').success(function(res)&#123;\n            resolve(res)\n        &#125;)\n    &#125;)\n&#125;).then(res=>&#123;\n    \n&#125;)\n复制代码\n\n那当要写的事件没有顺序或者关系时，还如何写呢？可以使用all 方法来解决。\n2. catch()\nPromise对象除了有then方法，还有一个catch方法，该方法相当于then方法的第二个参数，指向reject的回调函数。不过catch方法还有一个作用，就是在执行resolve回调函数时，如果出现错误，抛出异常，不会停止运行，而是进入catch方法中。\np.then((data) => &#123;\n     console.log('resolved',data);\n&#125;,(err) => &#123;\n     console.log('rejected',err);\n     &#125;\n); \np.then((data) => &#123;\n    console.log('resolved',data);\n&#125;).catch((err) => &#123;\n    console.log('rejected',err);\n&#125;);\n复制代码\n\n3. all()\nall方法可以完成并行任务， 它接收一个数组，数组的每一项都是一个promise对象。当数组中所有的promise的状态都达到resolved的时候，all方法的状态就会变成resolved，如果有一个状态变成了rejected，那么all方法的状态就会变成rejected。\njavascript\nlet promise1 = new Promise((resolve,reject)=>&#123;\n\tsetTimeout(()=>&#123;\n       resolve(1);\n\t&#125;,2000)\n&#125;);\nlet promise2 = new Promise((resolve,reject)=>&#123;\n\tsetTimeout(()=>&#123;\n       resolve(2);\n\t&#125;,1000)\n&#125;);\nlet promise3 = new Promise((resolve,reject)=>&#123;\n\tsetTimeout(()=>&#123;\n       resolve(3);\n\t&#125;,3000)\n&#125;);\nPromise.all([promise1,promise2,promise3]).then(res=>&#123;\n    console.log(res);\n    //结果为：[1,2,3] \n&#125;)\n复制代码\n\n调用all方法时的结果成功的时候是回调函数的参数也是一个数组，这个数组按顺序保存着每一个promise对象resolve执行时的值。\n（4）race()\nrace方法和all一样，接受的参数是一个每项都是promise的数组，但是与all不同的是，当最先执行完的事件执行完之后，就直接返回该promise对象的值。如果第一个promise对象状态变成resolved，那自身的状态变成了resolved；反之第一个promise变成rejected，那自身状态就会变成rejected。\nlet promise1 = new Promise((resolve,reject)=>&#123;\n\tsetTimeout(()=>&#123;\n       reject(1);\n\t&#125;,2000)\n&#125;);\nlet promise2 = new Promise((resolve,reject)=>&#123;\n\tsetTimeout(()=>&#123;\n       resolve(2);\n\t&#125;,1000)\n&#125;);\nlet promise3 = new Promise((resolve,reject)=>&#123;\n\tsetTimeout(()=>&#123;\n       resolve(3);\n\t&#125;,3000)\n&#125;);\nPromise.race([promise1,promise2,promise3]).then(res=>&#123;\n\tconsole.log(res);\n\t//结果：2\n&#125;,rej=>&#123;\n    console.log(rej)&#125;;\n)\n复制代码\n\n那么race方法有什么实际作用呢？当要做一件事，超过多长时间就不做了，可以用这个方法来解决：\nPromise.race([promise1,timeOutPromise(5000)]).then(res=>&#123;&#125;)\n复制代码\n\n5. finally()\nfinally方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。\npromise\n.then(result => &#123;···&#125;)\n.catch(error => &#123;···&#125;)\n.finally(() => &#123;···&#125;);\n复制代码\n\n上面代码中，不管promise最后的状态，在执行完then或catch指定的回调函数以后，都会执行finally方法指定的回调函数。\n下面是一个例子，服务器使用 Promise 处理请求，然后使用finally方法关掉服务器。\nserver.listen(port)\n  .then(function () &#123;\n    // ...\n  &#125;)\n  .finally(server.stop);\n复制代码\n\nfinally方法的回调函数不接受任何参数，这意味着没有办法知道，前面的 Promise 状态到底是fulfilled还是rejected。这表明，finally方法里面的操作，应该是与状态无关的，不依赖于 Promise 的执行结果。finally本质上是then方法的特例：\npromise\n.finally(() => &#123;\n  // 语句\n&#125;);\n// 等同于\npromise\n.then(\n  result => &#123;\n    // 语句\n    return result;\n  &#125;,\n  error => &#123;\n    // 语句\n    throw error;\n  &#125;\n);\n复制代码\n\n上面代码中，如果不使用finally方法，同样的语句需要为成功和失败两种情况各写一次。有了finally方法，则只需要写一次。\n5. Promise解决了什么问题在工作中经常会碰到这样一个需求，比如我使用ajax发一个A请求后，成功后拿到数据，需要把数据传给B请求；那么需要如下编写代码：\nlet fs = require('fs')\nfs.readFile('./a.txt','utf8',function(err,data)&#123;\n  fs.readFile(data,'utf8',function(err,data)&#123;\n    fs.readFile(data,'utf8',function(err,data)&#123;\n      console.log(data)\n    &#125;)\n  &#125;)\n&#125;)\n复制代码\n\n上面的代码有如下缺点：\n\n后一个请求需要依赖于前一个请求成功后，将数据往下传递，会导致多个ajax请求嵌套的情况，代码不够直观。\n如果前后两个请求不需要传递参数的情况下，那么后一个请求也需要前一个请求成功后再执行下一步操作，这种情况下，那么也需要如上编写代码，导致代码不够直观。\n\nPromise出现之后，代码变成这样：\nlet fs = require('fs')\nfunction read(url)&#123;\n  return new Promise((resolve,reject)=>&#123;\n    fs.readFile(url,'utf8',function(error,data)&#123;\n      error &amp;&amp; reject(error)\n      resolve(data)\n    &#125;)\n  &#125;)\n&#125;\nread('./a.txt').then(data=>&#123;\n  return read(data) \n&#125;).then(data=>&#123;\n  return read(data)  \n&#125;).then(data=>&#123;\n  console.log(data)\n&#125;)\n复制代码\n\n这样代码看起了就简洁了很多，解决了地狱回调的问题。\n6. Promise.all和Promise.race的区别的使用场景（1）Promise.all Promise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。\nPromise.all中传入的是数组，返回的也是是数组，并且会将进行映射，传入的promise对象返回的值是按照顺序在数组中排列的，但是注意的是他们执行的顺序并不是按照顺序的，除非可迭代对象为空。\n需要注意，Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的，这样当遇到发送多个请求并根据请求顺序获取和使用数据的场景，就可以使用Promise.all来解决。\n（2）Promise.race\n顾名思义，Promse.race就是赛跑的意思，意思就是说，Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。当要做一件事，超过多长时间就不做了，可以用这个方法来解决：\nPromise.race([promise1,timeOutPromise(5000)]).then(res=>&#123;&#125;)\n复制代码\n\n7.  对async/await 的理解async/await其实是Generator 的语法糖，它能实现的效果都能用then链来实现，它是为优化then链而开发出来的。从字面上来看，async是“异步”的简写，await则为等待，所以很好理解async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。当然语法上强制规定await只能出现在asnyc函数中，先来看看async函数返回了什么：\nasync function testAsy()&#123;\n   return 'hello world';\n&#125;\nlet result = testAsy(); \nconsole.log(result)\n复制代码\n\n\n所以，async 函数返回的是一个 Promise 对象。async 函数（包含函数语句、函数表达式、Lambda表达式）会返回一个 Promise 对象，如果在函数中 return 一个直接量，async 会把这个直接量通过 Promise.resolve() 封装成 Promise 对象。\nasync 函数返回的是一个 Promise 对象，所以在最外层不能用 await 获取其返回值的情况下，当然应该用原来的方式：then() 链来处理这个 Promise 对象，就像这样：\nasync function testAsy()&#123;\n   return 'hello world'\n&#125;\nlet result = testAsy() \nconsole.log(result)\nresult.then(v=>&#123;\n    console.log(v)   // hello world\n&#125;)\n复制代码\n\n那如果 async 函数没有返回值，又该如何？很容易想到，它会返回 Promise.resolve(undefined)。\n联想一下 Promise 的特点——无等待，所以在没有 await 的情况下执行 async 函数，它会立即执行，返回一个 Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回 Promise 对象的函数并无二致。\n注意：Promise.resolve(x) 可以看作是 new Promise(resolve =&gt; resolve(x)) 的简写，可以用于快速封装字面量对象或其他对象，将其封装成 Promise 实例。\n8. await 到底在等啥？await 在等待什么呢？ 一般来说，都认为 await 是在等待一个 async 函数完成。不过按语法说明，await 等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值（换句话说，就是没有特殊限定）。\n因为 async 函数返回一个 Promise 对象，所以 await 可以用于等待一个 async 函数的返回值——这也可以说是 await 在等 async 函数，但要清楚，它等的实际是一个返回值。注意到 await 不仅仅用于等 Promise 对象，它可以等任意表达式的结果，所以，await 后面实际是可以接普通函数调用或者直接量的。所以下面这个示例完全可以正确运行：\nfunction getSomething() &#123;\n    return \"something\";\n&#125;\nasync function testAsync() &#123;\n    return Promise.resolve(\"hello async\");\n&#125;\nasync function test() &#123;\n    const v1 = await getSomething();\n    const v2 = await testAsync();\n    console.log(v1, v2);\n&#125;\ntest();\n复制代码\n\nawait 表达式的运算结果取决于它等的是什么。\n\n如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。\n如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。\n\n来看一个例子：\nfunction testAsy(x)&#123;\n   return new Promise(resolve=>&#123;setTimeout(() => &#123;\n       resolve(x);\n     &#125;, 3000)\n    &#125;\n   )\n&#125;\nasync function testAwt()&#123;    \n  let result =  await testAsy('hello world');\n  console.log(result);    // 3秒钟之后出现hello world\n  console.log('cuger')   // 3秒钟之后出现cug\n&#125;\ntestAwt();\nconsole.log('cug')  //立即输出cug\n复制代码\n\n这就是 await 必须用在 async 函数中的原因。async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。await暂停当前async的执行，所以’cug’’最先输出，hello world’和‘cuger’是3秒钟后同时出现的。\n9.  async/await的优势单一的 Promise 链并不能发现 async/await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（很有意思，Promise 通过 then 链来解决多层回调的问题，现在又用 async/await 来进一步优化它）。\n假设一个业务，分多个步骤完成，每个步骤都是异步的，而且依赖于上一个步骤的结果。仍然用 setTimeout 来模拟异步操作：\n/**\n * 传入参数 n，表示这个函数执行的时间（毫秒）\n * 执行的结果是 n + 200，这个值将用于下一步骤\n */\nfunction takeLongTime(n) &#123;\n    return new Promise(resolve => &#123;\n        setTimeout(() => resolve(n + 200), n);\n    &#125;);\n&#125;\nfunction step1(n) &#123;\n    console.log(`step1 with $&#123;n&#125;`);\n    return takeLongTime(n);\n&#125;\nfunction step2(n) &#123;\n    console.log(`step2 with $&#123;n&#125;`);\n    return takeLongTime(n);\n&#125;\nfunction step3(n) &#123;\n    console.log(`step3 with $&#123;n&#125;`);\n    return takeLongTime(n);\n&#125;\n复制代码\n\n现在用 Promise 方式来实现这三个步骤的处理：\nfunction doIt() &#123;\n    console.time(\"doIt\");\n    const time1 = 300;\n    step1(time1)\n        .then(time2 => step2(time2))\n        .then(time3 => step3(time3))\n        .then(result => &#123;\n            console.log(`result is $&#123;result&#125;`);\n            console.timeEnd(\"doIt\");\n        &#125;);\n&#125;\ndoIt();\n// c:\\var\\test>node --harmony_async_await .\n// step1 with 300\n// step2 with 500\n// step3 with 700\n// result is 900\n// doIt: 1507.251ms\n复制代码\n\n输出结果 result 是 step3() 的参数 700 + 200 = 900。doIt() 顺序执行了三个步骤，一共用了 300 + 500 + 700 = 1500 毫秒，和 console.time()/console.timeEnd() 计算的结果一致。\n如果用 async/await 来实现呢，会是这样：\nasync function doIt() &#123;\n    console.time(\"doIt\");\n    const time1 = 300;\n    const time2 = await step1(time1);\n    const time3 = await step2(time2);\n    const result = await step3(time3);\n    console.log(`result is $&#123;result&#125;`);\n    console.timeEnd(\"doIt\");\n&#125;\ndoIt();\n复制代码\n\n结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样\n10. async/await对比Promise的优势\n代码读起来更加同步，Promise虽然摆脱了回调地狱，但是then的链式调⽤也会带来额外的阅读负担\nPromise传递中间值⾮常麻烦，⽽async/await⼏乎是同步的写法，⾮常优雅\n错误处理友好，async/await可以⽤成熟的try/catch，Promise的错误捕获⾮常冗余\n调试友好，Promise的调试很差，由于没有代码块，你不能在⼀个返回表达式的箭头函数中设置断点，如果你在⼀个.then代码块中使⽤调试器的步进(step-over)功能，调试器并不会进⼊后续的.then代码块，因为调试器只能跟踪同步代码的每⼀步。\n\n11. async/await 如何捕获异常async function fn()&#123;\n    try&#123;\n        let a = await Promise.reject('error')\n    &#125;catch(error)&#123;\n        console.log(error)\n    &#125;\n&#125;\n复制代码\n\n12. 并发与并行的区别？\n并发是宏观概念，我分别有任务 A 和任务 B，在一段时间内通过任务间的切换完成了这两个任务，这种情况就可以称之为并发。\n并行是微观概念，假设 CPU 中存在两个核心，那么我就可以同时完成任务 A、B。同时完成多个任务的情况就可以称之为并行。\n\n13. 什么是回调函数？回调函数有什么缺点？如何解决回调地狱问题？以下代码就是一个回调函数的例子：\najax(url, () => &#123;\n    // 处理逻辑\n&#125;)\n复制代码\n\n回调函数有一个致命的弱点，就是容易写出回调地狱（Callback hell）。假设多个请求存在依赖性，可能会有如下代码：\najax(url, () => &#123;\n    // 处理逻辑\n    ajax(url1, () => &#123;\n        // 处理逻辑\n        ajax(url2, () => &#123;\n            // 处理逻辑\n        &#125;)\n    &#125;)\n&#125;)\n复制代码\n\n以上代码看起来不利于阅读和维护，当然，也可以把函数分开来写：\nfunction firstAjax() &#123;\n  ajax(url1, () => &#123;\n    // 处理逻辑\n    secondAjax()\n  &#125;)\n&#125;\nfunction secondAjax() &#123;\n  ajax(url2, () => &#123;\n    // 处理逻辑\n  &#125;)\n&#125;\najax(url, () => &#123;\n  // 处理逻辑\n  firstAjax()\n&#125;)\n复制代码\n\n以上的代码虽然看上去利于阅读了，但是还是没有解决根本问题。回调地狱的根本问题就是：\n\n嵌套函数存在耦合性，一旦有所改动，就会牵一发而动全身\n嵌套函数一多，就很难处理错误\n\n当然，回调函数还存在着别的几个缺点，比如不能使用 try catch 捕获错误，不能直接 return。\n14. setTimeout、setInterval、requestAnimationFrame 各有什么特点？异步编程当然少不了定时器了，常见的定时器函数有 setTimeout、setInterval、requestAnimationFrame。最常用的是setTimeout，很多人认为 setTimeout 是延时多久，那就应该是多久后执行。\n其实这个观点是错误的，因为 JS 是单线程执行的，如果前面的代码影响了性能，就会导致 setTimeout 不会按期执行。当然了，可以通过代码去修正 setTimeout，从而使定时器相对准确：\nlet period = 60 * 1000 * 60 * 2\nlet startTime = new Date().getTime()\nlet count = 0\nlet end = new Date().getTime() + period\nlet interval = 1000\nlet currentInterval = interval\nfunction loop() &#123;\n  count++\n  // 代码执行所消耗的时间\n  let offset = new Date().getTime() - (startTime + count * interval);\n  let diff = end - new Date().getTime()\n  let h = Math.floor(diff / (60 * 1000 * 60))\n  let hdiff = diff % (60 * 1000 * 60)\n  let m = Math.floor(hdiff / (60 * 1000))\n  let mdiff = hdiff % (60 * 1000)\n  let s = mdiff / (1000)\n  let sCeil = Math.ceil(s)\n  let sFloor = Math.floor(s)\n  // 得到下一次循环所消耗的时间\n  currentInterval = interval - offset \n  console.log('时：'+h, '分：'+m, '毫秒：'+s, '秒向上取整：'+sCeil, '代码执行时间：'+offset, '下次循环间隔'+currentInterval) \n  setTimeout(loop, currentInterval)\n&#125;\nsetTimeout(loop, currentInterval)\n复制代码\n\n接下来看 setInterval，其实这个函数作用和 setTimeout 基本一致，只是该函数是每隔一段时间执行一次回调函数。\n通常来说不建议使用 setInterval。第一，它和 setTimeout 一样，不能保证在预期的时间执行任务。第二，它存在执行累积的问题，请看以下伪代码\nfunction demo() &#123;\n  setInterval(function()&#123;\n    console.log(2)\n  &#125;,1000)\n  sleep(2000)\n&#125;\ndemo()\n复制代码\n\n以上代码在浏览器环境中，如果定时器执行过程中出现了耗时操作，多个回调函数会在耗时操作结束以后同时执行，这样可能就会带来性能上的问题。\n如果有循环定时器的需求，其实完全可以通过 requestAnimationFrame 来实现：\nfunction setInterval(callback, interval) &#123;\n  let timer\n  const now = Date.now\n  let startTime = now()\n  let endTime = startTime\n  const loop = () => &#123;\n    timer = window.requestAnimationFrame(loop)\n    endTime = now()\n    if (endTime - startTime >= interval) &#123;\n      startTime = endTime = now()\n      callback(timer)\n    &#125;\n  &#125;\n  timer = window.requestAnimationFrame(loop)\n  return timer\n&#125;\nlet a = 0\nsetInterval(timer => &#123;\n  console.log(1)\n  a++\n  if (a === 3) cancelAnimationFrame(timer)\n&#125;, 1000)\n复制代码\n\n首先 requestAnimationFrame 自带函数节流功能，基本可以保证在 16.6 毫秒内只执行一次（不掉帧的情况下），并且该函数的延时效果是精确的，没有其他定时器时间不准的问题，当然你也可以通过该函数来实现 setTimeout。\n八、面向对象1. 对象创建的方式有哪些？一般使用字面量的形式直接创建对象，但是这种创建方式对于创建大量相似对象的时候，会产生大量的重复代码。但 js和一般的面向对象的语言不同，在 ES6 之前它没有类的概念。但是可以使用函数来进行模拟，从而产生出可复用的对象创建方式，常见的有以下几种：\n（1）第一种是工厂模式，工厂模式的主要工作原理是用函数来封装创建对象的细节，从而通过调用函数来达到复用的目的。但是它有一个很大的问题就是创建出来的对象无法和某个类型联系起来，它只是简单的封装了复用代码，而没有建立起对象和类型间的关系。\n（2）第二种是构造函数模式。js 中每一个函数都可以作为构造函数，只要一个函数是通过 new 来调用的，那么就可以把它称为构造函数。执行构造函数首先会创建一个对象，然后将对象的原型指向构造函数的 prototype 属性，然后将执行上下文中的 this 指向这个对象，最后再执行整个函数，如果返回值不是对象，则返回新建的对象。因为 this 的值指向了新建的对象，因此可以使用 this 给对象赋值。构造函数模式相对于工厂模式的优点是，所创建的对象和构造函数建立起了联系，因此可以通过原型来识别对象的类型。但是构造函数存在一个缺点就是，造成了不必要的函数对象的创建，因为在 js 中函数也是一个对象，因此如果对象属性中如果包含函数的话，那么每次都会新建一个函数对象，浪费了不必要的内存空间，因为函数是所有的实例都可以通用的。\n（3）第三种模式是原型模式，因为每一个函数都有一个 prototype 属性，这个属性是一个对象，它包含了通过构造函数创建的所有实例都能共享的属性和方法。因此可以使用原型对象来添加公用属性和方法，从而实现代码的复用。这种方式相对于构造函数模式来说，解决了函数对象的复用问题。但是这种模式也存在一些问题，一个是没有办法通过传入参数来初始化值，另一个是如果存在一个引用类型如 Array 这样的值，那么所有的实例将共享一个对象，一个实例对引用类型值的改变会影响所有的实例。\n（4）第四种模式是组合使用构造函数模式和原型模式，这是创建自定义类型的最常见方式。因为构造函数模式和原型模式分开使用都存在一些问题，因此可以组合使用这两种模式，通过构造函数来初始化对象的属性，通过原型对象来实现函数方法的复用。这种方法很好的解决了两种模式单独使用时的缺点，但是有一点不足的就是，因为使用了两种不同的模式，所以对于代码的封装性不够好。\n（5）第五种模式是动态原型模式，这一种模式将原型方法赋值的创建过程移动到了构造函数的内部，通过对属性是否存在的判断，可以实现仅在第一次调用函数时对原型对象赋值一次的效果。这一种方式很好地对上面的混合模式进行了封装。\n（6）第六种模式是寄生构造函数模式，这一种模式和工厂模式的实现基本相同，我对这个模式的理解是，它主要是基于一个已有的类型，在实例化时对实例化的对象进行扩展。这样既不用修改原来的构造函数，也达到了扩展对象的目的。它的一个缺点和工厂模式一样，无法实现对象的识别。\n2. 对象继承的方式有哪些？（1）第一种是以原型链的方式来实现继承，但是这种实现方式存在的缺点是，在包含有引用类型的数据时，会被所有的实例对象所共享，容易造成修改的混乱。还有就是在创建子类型的时候不能向超类型传递参数。\n（2）第二种方式是使用借用构造函数的方式，这种方式是通过在子类型的函数中调用超类型的构造函数来实现的，这一种方法解决了不能向超类型传递参数的缺点，但是它存在的一个问题就是无法实现函数方法的复用，并且超类型原型定义的方法子类型也没有办法访问到。\n（3）第三种方式是组合继承，组合继承是将原型链和借用构造函数组合起来使用的一种方式。通过借用构造函数的方式来实现类型的属性的继承，通过将子类型的原型设置为超类型的实例来实现方法的继承。这种方式解决了上面的两种模式单独使用时的问题，但是由于我们是以超类型的实例来作为子类型的原型，所以调用了两次超类的构造函数，造成了子类型的原型中多了很多不必要的属性。\n（4）第四种方式是原型式继承，原型式继承的主要思路就是基于已有的对象来创建新的对象，实现的原理是，向函数中传入一个对象，然后返回一个以这个对象为原型的对象。这种继承的思路主要不是为了实现创造一种新的类型，只是对某个对象实现一种简单继承，ES5 中定义的 Object.create() 方法就是原型式继承的实现。缺点与原型链方式相同。\n（5）第五种方式是寄生式继承，寄生式继承的思路是创建一个用于封装继承过程的函数，通过传入一个对象，然后复制一个对象的副本，然后对象进行扩展，最后返回这个对象。这个扩展的过程就可以理解是一种继承。这种继承的优点就是对一个简单对象实现继承，如果这个对象不是自定义类型时。缺点是没有办法实现函数的复用。\n（6）第六种方式是寄生式组合继承，组合继承的缺点就是使用超类型的实例做为子类型的原型，导致添加了不必要的原型属性。寄生式组合继承的方式是使用超类型的原型的副本来作为子类型的原型，这样就避免了创建不必要的属性。\n九、垃圾回收与内存泄漏1. 浏览器的垃圾回收机制（1）垃圾回收的概念垃圾回收：JavaScript代码运行时，需要分配内存空间来储存变量和值。当变量不在参与运行时，就需要系统收回被占用的内存空间，这就是垃圾回收。\n回收机制：\n\nJavascript 具有自动垃圾回收机制，会定期对那些不再使用的变量、对象所占用的内存进行释放，原理就是找到不再使用的变量，然后释放掉其占用的内存。\nJavaScript中存在两种变量：局部变量和全局变量。全局变量的生命周期会持续要页面卸载；而局部变量声明在函数中，它的生命周期从函数执行开始，直到函数执行结束，在这个过程中，局部变量会在堆或栈中存储它们的值，当函数执行结束后，这些局部变量不再被使用，它们所占有的空间就会被释放。\n不过，当局部变量被外部函数使用时，其中一种情况就是闭包，在函数执行结束后，函数外部的变量依然指向函数内部的局部变量，此时局部变量依然在被使用，所以不会回收。\n\n（2）垃圾回收的方式浏览器通常使用的垃圾回收方法有两种：标记清除，引用计数。 1）标记清除\n\n标记清除是浏览器常见的垃圾回收方式，当变量进入执行环境时，就标记这个变量“进入环境”，被标记为“进入环境”的变量是不能被回收的，因为他们正在被使用。当变量离开环境时，就会被标记为“离开环境”，被标记为“离开环境”的变量会被内存释放。\n垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后。垃圾收集器完成内存清除工作，销毁那些带标记的值，并回收他们所占用的内存空间。\n\n2）引用计数\n\n另外一种垃圾回收机制就是引用计数，这个用的相对较少。引用计数就是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减1。当这个引用次数变为0时，说明这个变量已经没有价值，因此，在在机回收期下次再运行时，这个变量所占有的内存空间就会被释放出来。\n这种方法会引起循环引用的问题：例如： obj1和obj2通过属性进行相互引用，两个对象的引用次数都是2。当使用循环计数时，由于函数执行完后，两个对象都离开作用域，函数执行结束，obj1和obj2还将会继续存在，因此它们的引用次数永远不会是0，就会引起循环引用。\n\nfunction fun() &#123;\n    let obj1 = &#123;&#125;;\n    let obj2 = &#123;&#125;;\n    obj1.a = obj2; // obj1 引用 obj2\n    obj2.a = obj1; // obj2 引用 obj1\n&#125;\n复制代码\n\n这种情况下，就要手动释放变量占用的内存：\nobj1.a =  null\n obj2.a =  null\n复制代码\n\n（3）减少垃圾回收虽然浏览器可以进行垃圾自动回收，但是当代码比较复杂时，垃圾回收所带来的代价比较大，所以应该尽量减少垃圾回收。\n\n对数组进行优化： 在清空一个数组时，最简单的方法就是给其赋值为[ ]，但是与此同时会创建一个新的空对象，可以将数组的长度设置为0，以此来达到清空数组的目的。\n对object进行优化： 对象尽量复用，对于不再使用的对象，就将其设置为null，尽快被回收。\n对函数进行优化： 在循环中的函数表达式，如果可以复用，尽量放在函数的外面。\n\n2. 哪些情况会导致内存泄漏以下四种情况会造成内存的泄漏：\n\n意外的全局变量： 由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。\n被遗忘的计时器或回调函数： 设置了 setInterval 定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留在内存中，而无法被回收。\n脱离 DOM 的引用： 获取一个 DOM 元素的引用，而后面这个元素被删除，由于一直保留了对这个元素的引用，所以它也无法被回收。\n闭包： 不合理的使用闭包，从而导致某些变量一直被留在内存当中。\n\n","slug":"JavaScript面试题","date":"2022-04-10T12:17:20.000Z","categories_index":"知识点","tags_index":"面试","author_index":"LIYUNFU"},{"id":"ed3b51444b604120b43f719995ea1a51","title":"HTML-CSS面试题","content":"HTML1. src和href的区别src和href都是用来引用外部的资源，它们的区别如下：\n\nsrc： 表示对资源的引用，它指向的内容会嵌入到当前标签所在的位置。src会将其指向的资源下载并应⽤到⽂档内，如请求js脚本。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执⾏完毕，所以⼀般js脚本会放在页面底部。\nhref： 表示超文本引用，它指向一些网络资源，建立和当前元素或本文档的链接关系。当浏览器识别到它他指向的⽂件时，就会并⾏下载资源，不会停⽌对当前⽂档的处理。 常用在a、link等标签上。\n\n2. 对HTML语义化的理解语义化是指根据内容的结构化（内容语义化），选择合适的标签（代码语义化）。通俗来讲就是用正确的标签做正确的事情。\n语义化的优点如下：\n\n对机器友好，带有语义的文字表现力丰富，更适合搜索引擎的爬虫爬取有效信息，有利于SEO。除此之外，语义类还支持读屏软件，根据文章可以自动生成目录；\n对开发者友好，使用语义类标签增强了可读性，结构更加清晰，开发者能清晰的看出网页的结构，便于团队的开发与维护。\n\n常见的语义化标签：\n&lt;header>&lt;/header>  头部\n\n&lt;nav>&lt;/nav>  导航栏\n\n&lt;section>&lt;/section>  区块（有语义化的div）\n\n&lt;main>&lt;/main>  主要区域\n\n&lt;article>&lt;/article>  主要内容\n\n&lt;aside>&lt;/aside>  侧边栏\n\n&lt;footer>&lt;/footer>  底部\n复制代码\n\n3. DOCTYPE(⽂档类型) 的作⽤DOCTYPE是HTML5中一种标准通用标记语言的文档类型声明，它的目的是告诉浏览器（解析器）应该以什么样（html或xhtml）的文档类型定义来解析文档，不同的渲染模式会影响浏览器对 CSS 代码甚⾄ JavaScript 脚本的解析。它必须声明在HTML⽂档的第⼀⾏。\n浏览器渲染页面的两种模式（可通过document.compatMode获取，比如，语雀官网的文档类型是CSS1Compat）：\n\nCSS1Compat：标准模式（Strick mode），默认模式，浏览器使用W3C的标准解析渲染页面。在标准模式中，浏览器以其支持的最高标准呈现页面。\n**BackCompat：怪异模式(混杂模式)(Quick mode)**，浏览器使用自己的怪异模式解析渲染页面。在怪异模式中，页面以一种比较宽松的向后兼容的方式显示。\n\n4. script标签中defer和async的区别如果没有defer或async属性，浏览器会立即加载并执行相应的脚本。它不会等待后续加载的文档元素，读取到就会开始加载和执行，这样就阻塞了后续文档的加载。\n下图可以直观的看出三者之间的区别:  其中蓝色代表js脚本网络加载时间，红色代表js脚本执行时间，绿色代表html解析。\ndefer 和 async属性都是去异步加载外部的JS脚本文件，它们都不会阻塞页面的解析，其区别如下：\n\n执行顺序： 多个带async属性的标签，不能保证加载的顺序；多个带defer属性的标签，按照加载顺序执行；\n**脚本是否并行执行：**async属性，表示**后续文档的加载和执行与js脚本的加载和执行是并行进行的**，即异步执行；defer属性，加载后续文档的过程和js脚本的加载(此时仅加载不执行)是并行进行的(异步)，js脚本需要等到文档所有元素解析完成之后才执行，DOMContentLoaded事件触发执行之前。\n\n5. 常⽤的meta标签有哪些meta 标签由 name 和 content 属性定义，用来描述网页文档的属性，比如网页的作者，网页描述，关键词等，除了HTTP标准固定了一些name作为大家使用的共识，开发者还可以自定义name。\n常用的meta标签： （1）charset，用来描述HTML文档的编码类型：\n&lt;meta charset=\"UTF-8\" >\n复制代码\n\n（2） keywords，页面关键词：\n&lt;meta name=\"keywords\" content=\"关键词\" />\n复制代码\n\n（3）description，页面描述：\n&lt;meta name=\"description\" content=\"页面描述内容\" />\n复制代码\n\n（4）refresh，页面重定向和刷新：\n&lt;meta http-equiv=\"refresh\" content=\"0;url=\" />\n复制代码\n\n（5）viewport，适配移动端，可以控制视口的大小和比例：\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n复制代码\n\n其中，content 参数有以下几种：\n\nwidth viewport ：宽度(数值/device-width)\nheight viewport ：高度(数值/device-height)\ninitial-scale ：初始缩放比例\nmaximum-scale ：最大缩放比例\nminimum-scale ：最小缩放比例\nuser-scalable ：是否允许用户缩放(yes/no）\n\n（6）搜索引擎索引方式：\n&lt;meta name=\"robots\" content=\"index,follow\" />\n复制代码\n\n其中，content 参数有以下几种：\n\nall：文件将被检索，且页面上的链接可以被查询；\nnone：文件将不被检索，且页面上的链接不可以被查询；\nindex：文件将被检索；\nfollow：页面上的链接可以被查询；\nnoindex：文件将不被检索；\nnofollow：页面上的链接不可以被查询。\n\n6. HTML5有哪些更新1. 语义化标签\nheader：定义文档的页眉（头部）；\nnav：定义导航链接的部分；\nfooter：定义文档或节的页脚（底部）；\narticle：定义文章内容；\nsection：定义文档中的节（section、区段）；\naside：定义其所处内容之外的内容（侧边）；\n\n2. 媒体标签（1） audio：音频\n&lt;audio src='' controls autoplay loop='true'>&lt;/audio>\n复制代码\n\n属性：\n\ncontrols 控制面板\nautoplay 自动播放\nloop=‘true’ 循环播放\n\n（2）video视频\n&lt;video src='' poster='imgs/aa.jpg' controls>&lt;/video>\n复制代码\n\n属性：\n\nposter：指定视频还没有完全下载完毕，或者用户还没有点击播放前显示的封面。默认显示当前视频文件的第一针画面，当然通过poster也可以自己指定。\ncontrols 控制面板\nwidth\nheight\n\n（3）source标签 因为浏览器对视频格式支持程度不一样，为了能够兼容不同的浏览器，可以通过source来指定视频源。\n&lt;video>\n \t&lt;source src='aa.flv' type='video/flv'>&lt;/source>\n \t&lt;source src='aa.mp4' type='video/mp4'>&lt;/source>\n&lt;/video>\n复制代码\n\n3. 表单表单类型：\n\nemail ：能够验证当前输入的邮箱地址是否合法\nurl ： 验证URL\nnumber ： 只能输入数字，其他输入不了，而且自带上下增大减小箭头，max属性可以设置为最大值，min可以设置为最小值，value为默认值。\nsearch ： 输入框后面会给提供一个小叉，可以删除输入的内容，更加人性化。\nrange ： 可以提供给一个范围，其中可以设置max和min以及value，其中value属性可以设置为默认值\ncolor ： 提供了一个颜色拾取器\ntime ： 时分秒\ndata ： 日期选择年月日\ndatatime ： 时间和日期(目前只有Safari支持)\ndatatime-local ：日期时间控件\nweek ：周控件\nmonth：月控件\n\n表单属性：\n\nplaceholder ：提示信息\nautofocus ：自动获取焦点\nautocomplete=“on” 或者 autocomplete=“off” 使用这个属性需要有两个前提：\n表单必须提交过\n必须有name属性。\n\n\nrequired：要求输入框不能为空，必须有值才能够提交。\npattern=” “ 里面写入想要的正则模式，例如手机号patte=”^(+86)?\\d{10}$”\nmultiple：可以选择多个文件或者多个邮箱\nform=” form表单的ID”\n\n表单事件：\n\noninput 每当input里的输入框内容发生变化都会触发此事件。\noninvalid 当验证不通过时触发此事件。\n\n4. 进度条、度量器\nprogress标签：用来表示任务的进度（IE、Safari不支持），max用来表示任务的进度，value表示已完成多少\nmeter属性：用来显示剩余容量或剩余库存（IE、Safari不支持）\nhigh/low：规定被视作高/低的范围\nmax/min：规定最大/小值\nvalue：规定当前度量值\n\n\n\n设置规则：min &lt; low &lt; high &lt; max\n5.DOM查询操作\ndocument.querySelector()\ndocument.querySelectorAll()\n\n它们选择的对象可以是标签，可以是类(需要加点)，可以是ID(需要加#)\n6. Web存储HTML5 提供了两种在客户端存储数据的新方法：\n\nlocalStorage - 没有时间限制的数据存储\nsessionStorage - 针对一个 session 的数据存储\n\n7. 其他\n拖放：拖放是一种常见的特性，即抓取对象以后拖到另一个位置。设置元素可拖放：\n\n&lt;img draggable=\"true\" />\n复制代码\n\n\n画布（canvas ）： canvas 元素使用 JavaScript 在网页上绘制图像。画布是一个矩形区域，可以控制其每一像素。canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。\n\n&lt;canvas id=\"myCanvas\" width=\"200\" height=\"100\">&lt;/canvas>\n复制代码\n\n\nSVG：SVG 指可伸缩矢量图形，用于定义用于网络的基于矢量的图形，使用 XML 格式定义图形，图像在放大或改变尺寸的情况下其图形质量不会有损失，它是万维网联盟的标准\n地理定位：Geolocation（地理定位）用于定位用户的位置。‘\n\n总结： （1）新增语义化标签：nav、header、footer、aside、section、article （2）音频、视频标签：audio、video （3）数据存储：localStorage、sessionStorage （4）canvas（画布）、Geolocation（地理定位）、websocket（通信协议） （5）input标签新增属性：placeholder、autocomplete、autofocus、required （6）history API：go、forward、back、pushstate\n移除的元素有：\n\n纯表现的元素：basefont，big，center，font, s，strike，tt，u;\n对可用性产生负面影响的元素：frame，frameset，noframes；\n\n7. img的srcset属性的作⽤？响应式页面中经常用到根据屏幕密度设置不同的图片。这时就用到了 img 标签的srcset属性。srcset属性用于设置不同屏幕密度下，img 会自动加载不同的图片。用法如下：\n&lt;img src=\"image-128.png\" srcset=\"image-256.png 2x\" />\n复制代码\n\n使用上面的代码，就能实现在屏幕密度为1x的情况下加载image-128.png, 屏幕密度为2x时加载image-256.png。\n按照上面的实现，不同的屏幕密度都要设置图片地址，目前的屏幕密度有1x,2x,3x,4x四种，如果每一个图片都设置4张图片，加载就会很慢。所以就有了新的srcset标准。代码如下：\n&lt;img src=\"image-128.png\"\n     srcset=\"image-128.png 128w, image-256.png 256w, image-512.png 512w\"\n     sizes=\"(max-width: 360px) 340px, 128px\" />\n复制代码\n\n其中srcset指定图片的地址和对应的图片质量。sizes用来设置图片的尺寸零界点。对于 srcset 中的 w 单位，可以理解成图片质量。如果可视区域小于这个质量的值，就可以使用。浏览器会自动选择一个最小的可用图片。\nsizes语法如下：\nsizes=\"[media query] [length], [media query] [length] ... \"\n复制代码\n\nsizes就是指默认显示128px, 如果视区宽度大于360px, 则显示340px。\n8.  行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？\n行内元素有：a b span img input select strong；\n块级元素有：div ul ol li dl dt dd h1 h2 h3 h4 h5 h6 p；\n\n空元素，即没有内容的HTML元素。空元素是在开始标签中关闭的，也就是空元素没有闭合标签：\n\n常见的有：&lt;br&gt;、&lt;hr&gt;、&lt;img&gt;、&lt;input&gt;、&lt;link&gt;、&lt;meta&gt;；\n鲜见的有：&lt;area&gt;、&lt;base&gt;、&lt;col&gt;、&lt;colgroup&gt;、&lt;command&gt;、&lt;embed&gt;、&lt;keygen&gt;、&lt;param&gt;、&lt;source&gt;、&lt;track&gt;、&lt;wbr&gt;。\n\n9. 说一下 web worker在 HTML 页面中，如果在执行脚本时，页面的状态是不可相应的，直到脚本执行完成后，页面才变成可相应。web worker 是运行在后台的 js，独立于其他脚本，不会影响页面的性能。 并且通过 postMessage 将结果回传到主线程。这样在进行复杂操作的时候，就不会阻塞主线程了。\n如何创建 web worker：\n\n检测浏览器对于 web worker 的支持性\n创建 web worker 文件（js，回传函数等）\n创建 web worker 对象\n\n10. HTML5的离线储存怎么使用，它的工作原理是什么离线存储指的是：在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。\n原理：HTML5的离线存储是基于一个新建的 .appcache 文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示\n使用方法： （1）创建一个和 html 同名的 manifest 文件，然后在页面头部加入 manifest 属性：\n&lt;html lang=\"en\" manifest=\"index.manifest\">\n复制代码\n\n（2）在 cache.manifest 文件中编写需要离线存储的资源：\nCACHE MANIFEST\n    #v0.11\n    CACHE:\n    js/app.js\n    css/style.css\n    NETWORK:\n    resourse/logo.png\n    FALLBACK:\n    / /offline.html\n复制代码\n\n\nCACHE: 表示需要离线存储的资源列表，由于包含 manifest 文件的页面将被自动离线存储，所以不需要把页面自身也列出来。\nNETWORK: 表示在它下面列出来的资源只有在在线的情况下才能访问，他们不会被离线存储，所以在离线情况下无法使用这些资源。不过，如果在 CACHE 和 NETWORK 中有一个相同的资源，那么这个资源还是会被离线存储，也就是说 CACHE 的优先级更高。\nFALLBACK: 表示如果访问第一个资源失败，那么就使用第二个资源来替换他，比如上面这个文件表示的就是如果访问根目录下任何一个资源失败了，那么就去访问 offline.html 。\n\n（3）在离线状态时，操作 window.applicationCache 进行离线缓存的操作。\n如何更新缓存：\n（1）更新 manifest 文件\n（2）通过 javascript 操作\n（3）清除浏览器缓存\n注意事项：\n（1）浏览器对缓存数据的容量限制可能不太一样（某些浏览器设置的限制是每个站点 5MB）。\n（2）如果 manifest 文件，或者内部列举的某一个文件不能正常下载，整个更新过程都将失败，浏览器继续全部使用老的缓存。\n（3）引用 manifest 的 html 必须与 manifest 文件同源，在同一个域下。\n（4）FALLBACK 中的资源必须和 manifest 文件同源。\n（5）当一个资源被缓存后，该浏览器直接请求这个绝对路径也会访问缓存中的资源。\n（6）站点中的其他页面即使没有设置 manifest 属性，请求的资源如果在缓存中也从缓存中访问。\n（7）当 manifest 文件发生改变时，资源请求本身也会触发更新。\n11. 浏览器是如何对 HTML5 的离线储存资源进行管理和加载？\n在线的情况下，浏览器发现 html 头部有 manifest 属性，它会请求 manifest 文件，如果是第一次访问页面 ，那么浏览器就会根据 manifest 文件的内容下载相应的资源并且进行离线存储。如果已经访问过页面并且资源已经进行离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的 manifest 文件与旧的 manifest 文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，就会重新下载文件中的资源并进行离线存储。\n离线的情况下，浏览器会直接使用离线存储的资源。\n\n12. title与h1的区别、b与strong的区别、i与em的区别？\nstrong标签有语义，是起到加重语气的效果，而b标签是没有的，b标签只是一个简单加粗标签。b标签之间的字符都设为粗体，strong标签加强字符的语气都是通过粗体来实现的，而搜索引擎更侧重strong标签。\ntitle属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取有很大的影响\ni内容展示为斜体，em表示强调的文本\n\n13. iframe 有那些优点和缺点？iframe 元素会创建包含另外一个文档的内联框架（即行内框架）。\n优点：\n\n用来加载速度较慢的内容（如广告）\n可以使脚本可以并行下载\n可以实现跨子域通信\n\n缺点：\n\niframe 会阻塞主页面的 onload 事件\n无法被一些搜索引擎索识别\n会产生很多页面，不容易管理\n\n14. label 的作用是什么？如何使用？label标签来定义表单控件的关系：当用户选择label标签时，浏览器会自动将焦点转到和label标签相关的表单控件上。\n\n使用方法1：\n\n&lt;label for=\"mobile\">Number:&lt;/label>\n&lt;input type=\"text\" id=\"mobile\"/>\n复制代码\n\n\n使用方法2：\n\n&lt;label>Date:&lt;input type=\"text\"/>&lt;/label>\n复制代码\n\n15. Canvas和SVG的区别（1）SVG： SVG可缩放矢量图形（Scalable Vector Graphics）是基于可扩展标记语言XML描述的2D图形的语言，SVG基于XML就意味着SVG DOM中的每个元素都是可用的，可以为某个元素附加Javascript事件处理器。在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。\n其特点如下：\n\n不依赖分辨率\n支持事件处理器\n最适合带有大型渲染区域的应用程序（比如谷歌地图）\n复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）\n不适合游戏应用\n\n（2）Canvas： Canvas是画布，通过Javascript来绘制2D图形，是逐像素进行渲染的。其位置发生改变，就会重新进行绘制。\n其特点如下：\n\n依赖分辨率\n不支持事件处理器\n弱的文本渲染能力\n能够以 .png 或 .jpg 格式保存结果图像\n最适合图像密集型的游戏，其中的许多对象会被频繁重绘\n\n注：矢量图，也称为面向对象的图像或绘图图像，在数学上定义为一系列由线连接的点。矢量文件中的图形元素称为对象。每个对象都是一个自成一体的实体，它具有颜色、形状、轮廓、大小和屏幕位置等属性。\n16. head 标签有什么作用，其中什么标签必不可少？ 标签用于定义文档的头部，它是所有头部元素的容器。 中的元素可以引用脚本、指示浏览器在哪里找到样式表、提供元信息等。\n文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。\n下面这些标签可用在 head 部分：&lt;base&gt;, &lt;link&gt;, &lt;meta&gt;, &lt;script&gt;, &lt;style&gt;, &lt;title&gt;。\n其中 &lt;title&gt; 定义文档的标题，它是 head 部分中唯一必需的元素。\n17. 文档声明（Doctype）和&lt;!Doctype html&gt;有何作用? 严格模式与混杂模式如何区分？它们有何意义?文档声明的作用： 文档声明是为了告诉浏览器，当前HTML文档使用什么版本的HTML来写的，这样浏览器才能按照声明的版本来正确的解析。\n的作用：&lt;!doctype html&gt; 的作用就是让浏览器进入标准模式，使用最新的 HTML5 标准来解析渲染页面；如果不写，浏览器就会进入混杂模式，我们需要避免此类情况发生。\n严格模式与混杂模式的区分：\n\n严格模式： 又称为标准模式，指浏览器按照W3C标准解析代码；\n混杂模式： 又称怪异模式、兼容模式，是指浏览器用自己的方式解析代码。混杂模式通常模拟老式浏览器的行为，以防止老站点无法工作；\n\n区分：网页中的DTD，直接影响到使用的是严格模式还是浏览模式，可以说DTD的使用与这两种方式的区别息息相关。\n\n如果文档包含严格的DOCTYPE ，那么它一般以严格模式呈现（严格 DTD ——严格模式）；\n包含过渡 DTD 和 URI 的 DOCTYPE ，也以严格模式呈现，但有过渡 DTD 而没有 URI （统一资源标识符，就是声明最后的地址）会导致页面以混杂模式呈现（有 URI 的过渡 DTD ——严格模式；没有 URI 的过渡 DTD ——混杂模式）；\nDOCTYPE 不存在或形式不正确会导致文档以混杂模式呈现（DTD不存在或者格式不正确——混杂模式）；\nHTML5 没有 DTD ，因此也就没有严格模式与混杂模式的区别，HTML5 有相对宽松的 法，实现时，已经尽可能大的实现了向后兼容(HTML5 没有严格和混杂之分)。\n\n总之，严格模式让各个浏览器统一执行一套规范兼容模式保证了旧网站的正常运行。\n18. 浏览器乱码的原因是什么？如何解决？产生乱码的原因：\n\n网页源代码是gbk的编码，而内容中的中文字是utf-8编码的，这样浏览器打开即会出现html乱码，反之也会出现乱码；\nhtml网页编码是gbk，而程序从数据库中调出呈现是utf-8编码的内容也会造成编码乱码；\n浏览器不能自动检测网页编码，造成网页乱码。\n\n解决办法：\n\n使用软件编辑HTML网页内容；\n如果网页设置编码是gbk，而数据库储存数据编码格式是UTF-8，此时需要程序查询数据库数据显示数据前进程序转码；\n如果浏览器浏览时候出现网页乱码，在浏览器中找到转换编码的菜单进行转换。\n\n19. 渐进增强和优雅降级之间的区别（1）渐进增强（progressive enhancement）：主要是针对低版本的浏览器进行页面重构，保证基本的功能情况下，再针对高级浏览器进行效果、交互等方面的改进和追加功能，以达到更好的用户体验。 （2）优雅降级 graceful degradation： 一开始就构建完整的功能，然后再针对低版本的浏览器进行兼容。\n两者区别：\n\n优雅降级是从复杂的现状开始的，并试图减少用户体验的供给；而渐进增强是从一个非常基础的，能够起作用的版本开始的，并在此基础上不断扩充，以适应未来环境的需要；\n降级（功能衰竭）意味着往回看，而渐进增强则意味着往前看，同时保证其根基处于安全地带。\n\n“优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。 在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。\n“渐进增强”观点则认为应关注于内容本身。内容是建立网站的诱因，有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。\n20. 说一下 HTML5 drag API\ndragstart：事件主体是被拖放元素，在开始拖放被拖放元素时触发。\ndarg：事件主体是被拖放元素，在正在拖放被拖放元素时触发。\ndragenter：事件主体是目标元素，在被拖放元素进入某元素时触发。\ndragover：事件主体是目标元素，在被拖放在某元素内移动时触发。\ndragleave：事件主体是目标元素，在被拖放元素移出目标元素是触发。\ndrop：事件主体是目标元素，在目标元素完全接受被拖放元素时触发。\ndragend：事件主体是被拖放元素，在整个拖放操作结束时触发。\n\n一、CSS基础1. CSS选择器及其优先级\n\n\n选择器\n格式\n优先级权重\n\n\n\nid选择器\n#id\n100\n\n\n类选择器\n#classname\n10\n\n\n属性选择器\na[ref=“eee”]\n10\n\n\n伪类选择器\nli:last-child\n10\n\n\n标签选择器\ndiv\n1\n\n\n伪元素选择器\nli:after\n1\n\n\n相邻兄弟选择器\nh1+p\n0\n\n\n子选择器\nul&gt;li\n0\n\n\n后代选择器\nli a\n0\n\n\n通配符选择器\n*\n0\n\n\n对于选择器的优先级：\n\n标签选择器、伪元素选择器：1\n类选择器、伪类选择器、属性选择器：10\nid 选择器：100\n内联样式：1000\n\n注意事项：\n\n!important声明的样式的优先级最高；\n如果优先级相同，则最后出现的样式生效；\n继承得到的样式的优先级最低；\n通用选择器（*）、子选择器（&gt;）和相邻同胞选择器（+）并不在这四个等级中，所以它们的权值都为 0 ；\n样式表的来源不同时，优先级顺序为：内联样式 &gt; 内部样式 &gt; 外部样式 &gt; 浏览器用户自定义样式 &gt; 浏览器默认样式。\n\n2. CSS中可继承与不可继承属性有哪些一、无继承性的属性\n\ndisplay：规定元素应该生成的框的类型\n文本属性：\n\n\nvertical-align：垂直文本对齐\ntext-decoration：规定添加到文本的装饰\ntext-shadow：文本阴影效果\nwhite-space：空白符的处理\nunicode-bidi：设置文本的方向\n\n\n盒子模型的属性：width、height、margin、border、padding\n背景属性：background、background-color、background-image、background-repeat、background-position、background-attachment\n定位属性：float、clear、position、top、right、bottom、left、min-width、min-height、max-width、max-height、overflow、clip、z-index\n生成内容属性：content、counter-reset、counter-increment\n轮廓样式属性：outline-style、outline-width、outline-color、outline\n页面样式属性：size、page-break-before、page-break-after\n声音样式属性：pause-before、pause-after、pause、cue-before、cue-after、cue、play-during\n\n二、有继承性的属性\n\n字体系列属性\n\n\nfont-family：字体系列\nfont-weight：字体的粗细\nfont-size：字体的大小\nfont-style：字体的风格\n\n\n文本系列属性\n\n\ntext-indent：文本缩进\ntext-align：文本水平对齐\nline-height：行高\nword-spacing：单词之间的间距\nletter-spacing：中文或者字母之间的间距\ntext-transform：控制文本大小写（就是uppercase、lowercase、capitalize这三个）\ncolor：文本颜色\n\n\n元素可见性\n\n\nvisibility：控制元素显示隐藏\n\n\n列表布局属性\n\n\nlist-style：列表风格，包括list-style-type、list-style-image等\n\n\n光标属性\n\n\ncursor：光标显示为何种形态\n\n3. display的属性值及其作用\n\n\n属性值\n作用\n\n\n\nnone\n元素不显示，并且会从文档流中移除。\n\n\nblock\n块类型。默认宽度为父元素宽度，可设置宽高，换行显示。\n\n\ninline\n行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。\n\n\ninline-block\n默认宽度为内容宽度，可以设置宽高，同行显示。\n\n\nlist-item\n像块类型元素一样显示，并添加样式列表标记。\n\n\ntable\n此元素会作为块级表格来显示。\n\n\ninherit\n规定应该从父元素继承display属性的值。\n\n\n4. display的block、inline和inline-block的区别（1）block： 会独占一行，多个元素会另起一行，可以设置width、height、margin和padding属性；\n（2）inline： 元素不会独占一行，设置width、height属性无效。但可以设置水平方向的margin和padding属性，不能设置垂直方向的padding和margin；\n（3）inline-block： 将对象设置为inline对象，但对象的内容作为block对象呈现，之后的内联对象会被排列在同一行内。\n对于行内元素和块级元素，其特点如下：\n（1）行内元素\n\n设置宽高无效；\n可以设置水平方向的margin和padding属性，不能设置垂直方向的padding和margin；\n不会自动换行；\n\n（2）块级元素\n\n可以设置宽高；\n设置margin和padding都有效；\n可以自动换行；\n多个块状，默认排列从上到下。\n\n5. 隐藏元素的方法有哪些\ndisplay: none：渲染树不会包含该渲染对象，因此该元素不会在页面中占据位置，也不会响应绑定的监听事件。\nvisibility: hidden：元素在页面中仍占据空间，但是不会响应绑定的监听事件。\nopacity: 0：将元素的透明度设置为 0，以此来实现元素的隐藏。元素在页面中仍然占据空间，并且能够响应元素绑定的监听事件。\nposition: absolute：通过使用绝对定位将元素移除可视区域内，以此来实现元素的隐藏。\nz-index: 负值：来使其他元素遮盖住该元素，以此来实现隐藏。\nclip/clip-path ：使用元素裁剪的方法来实现元素的隐藏，这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。\n**transform: scale(0,0)**：将元素缩放为 0，来实现元素的隐藏。这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。\n\n6. link和@import的区别两者都是外部引用CSS的方式，它们的区别如下：\n\nlink是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。\nlink引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。\nlink是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。\nlink支持使用Javascript控制DOM去改变样式；而@import不支持。\n\n7. transition和animation的区别\ntransition是过度属性，强调过度，它的实现需要触发一个事件（比如鼠标移动上去，焦点，点击等）才执行动画。它类似于flash的补间动画，设置一个开始关键帧，一个结束关键帧。\nanimation是动画属性，它的实现不需要触发事件，设定好时间之后可以自己执行，且可以循环一个动画。它也类似于flash的补间动画，但是它可以设置多个关键帧（用@keyframe定义）完成动画。\n\n8. display:none与visibility:hidden的区别这两个属性都是让元素隐藏，不可见。两者区别如下：\n（1）在渲染树中\n\ndisplay:none会让元素完全从渲染树中消失，渲染时不会占据任何空间；\nvisibility:hidden不会让元素从渲染树中消失，渲染的元素还会占据相应的空间，只是内容不可见。\n\n（2）是否是继承属性\n\ndisplay:none是非继承属性，子孙节点会随着父节点从渲染树消失，通过修改子孙节点的属性也无法显示；\nvisibility:hidden是继承属性，子孙节点消失是由于继承了hidden，通过设置visibility:visible可以让子孙节点显示；\n\n（3）修改常规文档流中元素的 display 通常会造成文档的重排，但是修改visibility属性只会造成本元素的重绘；\n（4）如果使用读屏器，设置为display:none的内容不会被读取，设置为visibility:hidden的内容会被读取。\n9. 伪元素和伪类的区别和作用？\n伪元素：在内容元素的前后插入额外的元素或样式，但是这些元素实际上并不在文档中生成。它们只在外部显示可见，但不会在文档的源代码中找到它们，因此，称为“伪”元素。例如：\n\np::before &#123;content:\"第一章：\";&#125;\np::after &#123;content:\"Hot!\";&#125;\np::first-line &#123;background:red;&#125;\np::first-letter &#123;font-size:30px;&#125;\n复制代码\n\n\n伪类：将特殊的效果添加到特定选择器上。它是已有元素上添加类别的，不会产生新的元素。例如：\n\na:hover &#123;color: #FF00FF&#125;\np:first-child &#123;color: red&#125;\n复制代码\n\n总结： 伪类是通过在元素选择器上加⼊伪类改变元素状态，⽽伪元素通过对元素的操作进⾏对元素的改变。\n10. 对requestAnimationframe的理解实现动画效果的方法比较多，Javascript 中可以通过定时器 setTimeout 来实现，CSS3 中可以使用 transition 和 animation 来实现，HTML5 中的 canvas 也可以实现。除此之外，HTML5 提供一个专门用于请求动画的API，那就是 requestAnimationFrame，顾名思义就是请求动画帧。\nMDN对该方法的描述：\n\n\n\n\n\n\n\n\n\nwindow.requestAnimationFrame() 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。\n语法： window.requestAnimationFrame(callback);  其中，callback是下一次重绘之前更新动画帧所调用的函数(即上面所说的回调函数)。该回调函数会被传入DOMHighResTimeStamp参数，它表示requestAnimationFrame() 开始去执行回调函数的时刻。该方法属于宏任务，所以会在执行完微任务之后再去执行。\n取消动画： 使用cancelAnimationFrame()来取消执行动画，该方法接收一个参数——requestAnimationFrame默认返回的id，只需要传入这个id就可以取消动画了。\n优势：\n\nCPU节能：使用SetTinterval 实现的动画，当页面被隐藏或最小化时，SetTinterval 仍然在后台执行动画任务，由于此时页面处于不可见或不可用状态，刷新动画是没有意义的，完全是浪费CPU资源。而RequestAnimationFrame则完全不同，当页面处理未激活的状态下，该页面的屏幕刷新任务也会被系统暂停，因此跟着系统走的RequestAnimationFrame也会停止渲染，当页面被激活时，动画就从上次停留的地方继续执行，有效节省了CPU开销。\n函数节流：在高频率事件( resize, scroll 等)中，为了防止在一个刷新间隔内发生多次函数执行，RequestAnimationFrame可保证每个刷新间隔内，函数只被执行一次，这样既能保证流畅性，也能更好的节省函数执行的开销，一个刷新间隔内函数执行多次时没有意义的，因为多数显示器每16.7ms刷新一次，多次绘制并不会在屏幕上体现出来。\n减少DOM操作：requestAnimationFrame 会把每一帧中的所有DOM操作集中起来，在一次重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率，一般来说，这个频率为每秒60帧。\n\nsetTimeout执行动画的缺点：它通过设定间隔时间来不断改变图像位置，达到动画效果。但是容易出现卡顿、抖动的现象；原因是：\n\nsettimeout任务被放入异步队列，只有当主线程任务执行完后才会执行队列中的任务，因此实际执行时间总是比设定时间要晚；\nsettimeout的固定时间间隔不一定与屏幕刷新间隔时间相同，会引起丢帧。\n\n11. 对盒模型的理解CSS3中的盒模型有以下两种：标准盒子模型、IE盒子模型   盒模型都是由四个部分组成的，分别是margin、border、padding和content。\n标准盒模型和IE盒模型的区别在于设置width和height时，所对应的范围不同：\n\n标准盒模型的width和height属性的范围只包含了content，\nIE盒模型的width和height属性的范围包含了border、padding和content。\n\n可以通过修改元素的box-sizing属性来改变元素的盒模型：\n\nbox-sizeing: content-box表示标准盒模型（默认值）\nbox-sizeing: border-box表示IE盒模型（怪异盒模型）\n\n12. 为什么有时候⽤translate来改变位置⽽不是定位？translate 是 transform 属性的⼀个值。改变transform或opacity不会触发浏览器重新布局（reflow）或重绘（repaint），只会触发复合（compositions）。⽽改变绝对定位会触发重新布局，进⽽触发重绘和复合。transform使浏览器为元素创建⼀个 GPU 图层，但改变绝对定位会使⽤到 CPU。 因此translate()更⾼效，可以缩短平滑动画的绘制时间。 ⽽translate改变位置时，元素依然会占据其原始空间，绝对定位就不会发⽣这种情况。\n13. li 与 li 之间有看不见的空白间隔是什么原因引起的？如何解决？浏览器会把inline内联元素间的空白字符（空格、换行、Tab等）渲染成一个空格。为了美观，通常是一个&lt;li&gt;放在一行，这导致&lt;li&gt;换行后产生换行字符，它变成一个空格，占用了一个字符的宽度。\n解决办法：\n（1）为&lt;li&gt;设置float:left。不足：有些容器是不能设置浮动，如左右切换的焦点图等。\n（2）将所有&lt;li&gt;写在同一行。不足：代码不美观。\n（3）将&lt;ul&gt;内的字符尺寸直接设为0，即font-size:0。不足：&lt;ul&gt;中的其他字符尺寸也被设为0，需要额外重新设定其他字符尺寸，且在Safari浏览器依然会出现空白间隔。\n（4）消除&lt;ul&gt;的字符间隔letter-spacing:-8px，不足：这也设置了&lt;li&gt;内的字符间隔，因此需要将&lt;li&gt;内的字符间隔设为默认letter-spacing:normal。\n14. CSS3中有哪些新特性\n新增各种CSS选择器 （: not(.input)：所有 class 不是“input”的节点）\n圆角 （border-radius:8px）\n多列布局 （multi-column layout）\n阴影和反射 （Shadoweflect）\n文字特效 （text-shadow）\n文字渲染 （Text-decoration）\n线性渐变 （gradient）\n旋转 （transform）\n增加了旋转,缩放,定位,倾斜,动画,多背景\n\n15. 替换元素的概念及计算规则通过修改某个属性值呈现的内容就可以被替换的元素就称为“替换元素”。\n替换元素除了内容可替换这一特性以外，还有以下特性：\n\n内容的外观不受页面上的CSS的影响：用专业的话讲就是在样式表现在CSS作用域之外。如何更改替换元素本身的外观需要类似appearance属性，或者浏览器自身暴露的一些样式接口。\n有自己的尺寸：在Web中，很多替换元素在没有明确尺寸设定的情况下，其默认的尺寸（不包括边框）是300像素×150像素，如\n在很多CSS属性上有自己的一套表现规则：比较具有代表性的就是vertical-align属性，对于替换元素和非替换元素，vertical-align属性值的解释是不一样的。比方说vertical-align的默认值的baseline，很简单的属性值，基线之意，被定义为字符x的下边缘，而替换元素的基线却被硬生生定义成了元素的下边缘。\n所有的替换元素都是内联水平元素：也就是替换元素和替换元素、替换元素和文字都是可以在一行显示的。但是，替换元素默认的display值却是不一样的，有的是inline，有的是inline-block。\n\n替换元素的尺寸从内而外分为三类：\n\n固有尺寸： 指的是替换内容原本的尺寸。例如，图片、视频作为一个独立文件存在的时候，都是有着自己的宽度和高度的。\nHTML尺寸： 只能通过HTML原生属性改变，这些HTML原生属性包括的width和height属性、的size属性。\nCSS尺寸： 特指可以通过CSS的width和height或者max-width/min-width和max-height/min-height设置的尺寸，对应盒尺寸中的content box。\n\n这三层结构的计算规则具体如下： （1）如果没有CSS尺寸和HTML尺寸，则使用固有尺寸作为最终的宽高。 （2）如果没有CSS尺寸，则使用HTML尺寸作为最终的宽高。 （3）如果有CSS尺寸，则最终尺寸由CSS属性决定。 （4）如果“固有尺寸”含有固有的宽高比例，同时仅设置了宽度或仅设置了高度，则元素依然按照固有的宽高比例显示。 （5）如果上面的条件都不符合，则最终宽度表现为300像素，高度为150像素。 （6）内联替换元素和块级替换元素使用上面同一套尺寸计算规则。\n16. 常见的图片格式及使用场景（1）BMP，是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以BMP格式的图片通常是较大的文件。\n（2）GIF是无损的、采用索引色的点阵图。采用LZW压缩算法进行编码。文件小，是GIF格式的优点，同时，GIF格式还具有支持动画以及透明的优点。但是GIF格式仅支持8bit的索引色，所以GIF格式适用于对色彩要求不高同时需要文件体积较小的场景。\n（3）JPEG是有损的、采用直接色的点阵图。JPEG的图片的优点是采用了直接色，得益于更丰富的色彩，JPEG非常适合用来存储照片，与GIF相比，JPEG不适合用来存储企业Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较GIF更大。\n（4）PNG-8是无损的、使用索引色的点阵图。PNG是一种比较新的图片格式，PNG-8是非常好的GIF格式替代者，在可能的情况下，应该尽可能的使用PNG-8而不是GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8还支持透明度的调节，而GIF并不支持。除非需要动画的支持，否则没有理由使用GIF而不是PNG-8。\n（5）PNG-24是无损的、使用直接色的点阵图。PNG-24的优点在于它压缩了图片的数据，使得同样效果的图片，PNG-24格式的文件大小要比BMP小得多。当然，PNG24的图片还是要比JPEG、GIF、PNG-8大得多。\n（6）SVG是无损的矢量图。SVG是矢量图意味着SVG图片由直线和曲线以及绘制它们的方法组成。当放大SVG图片时，看到的还是线和曲线，而不会出现像素点。SVG图片在放大时，不会失真，所以它适合用来绘制Logo、Icon等。\n（7）WebP是谷歌开发的一种新图片格式，WebP是同时支持有损和无损压缩的、使用直接色的点阵图。从名字就可以看出来它是为Web而生的，什么叫为Web而生呢？就是说相同质量的图片，WebP具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。目前只有Chrome浏览器和Opera浏览器支持WebP格式，兼容性不太好。\n\n在无损压缩的情况下，相同质量的WebP图片，文件大小要比PNG小26%；\n在有损压缩的情况下，具有相同图片精度的WebP图片，文件大小要比JPEG小25%~34%；\nWebP图片格式支持图片透明度，一个无损压缩的WebP图片，如果要支持透明度只需要22%的格外文件大小。\n\n17. 对 CSSSprites 的理解CSSSprites（精灵图），将一个页面涉及到的所有图片都包含到一张大图中去，然后利用CSS的 background-image，background-repeat，background-position属性的组合进行背景定位。\n优点：\n\n利用CSS Sprites能很好地减少网页的http请求，从而大大提高了页面的性能，这是CSS Sprites最大的优点；\nCSS Sprites能减少图片的字节，把3张图片合并成1张图片的字节总是小于这3张图片的字节总和。\n\n缺点：\n\n在图片合并时，要把多张图片有序的、合理的合并成一张图片，还要留好足够的空间，防止板块内出现不必要的背景。在宽屏及高分辨率下的自适应页面，如果背景不够宽，很容易出现背景断裂；\nCSSSprites在开发的时候相对来说有点麻烦，需要借助photoshop或其他工具来对每个背景单元测量其准确的位置。\n维护方面：CSS Sprites在维护的时候比较麻烦，页面背景有少许改动时，就要改这张合并的图片，无需改的地方尽量不要动，这样避免改动更多的CSS，如果在原来的地方放不下，又只能（最好）往下加图片，这样图片的字节就增加了，还要改动CSS。\n\n18. 什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x, @2x这种图片？以 iPhone XS 为例，当写 CSS 代码时，针对于单位 px，其宽度为 414px &amp; 896px，也就是说当赋予一个 DIV元素宽度为 414px，这个 DIV 就会填满手机的宽度；\n而如果有一把尺子来实际测量这部手机的物理像素，实际为 1242*2688 物理像素；经过计算可知，1242/414=3，也就是说，在单边上，一个逻辑像素=3个物理像素，就说这个屏幕的像素密度为 3，也就是常说的 3 倍屏。\n对于图片来说，为了保证其不失真，1 个图片像素至少要对应一个物理像素，假如原始图片是 500300 像素，那么在 3 倍屏上就要放一个 1500900 像素的图片才能保证 1 个物理像素至少对应一个图片像素，才能不失真。  当然，也可以针对所有屏幕，都只提供最高清图片。虽然低密度屏幕用不到那么多图片像素，而且会因为下载多余的像素造成带宽浪费和下载延迟，但从结果上说能保证图片在所有屏幕上都不会失真。\n还可以使用 CSS 媒体查询来判断不同的像素密度，从而选择不同的图片:\nmy-image &#123; background: (low.png); &#125;\n@media only screen and (min-device-pixel-ratio: 1.5) &#123;\n  #my-image &#123; background: (high.png); &#125;\n&#125;\n复制代码\n\n19. margin 和 padding 的使用场景\n需要在border外侧添加空白，且空白处不需要背景（色）时，使用 margin；\n需要在border内测添加空白，且空白处需要背景（色）时，使用 padding。\n\n20. 对line-height 的理解及其赋值方式（1）line-height的概念：\n\nline-height 指一行文本的高度，包含了字间距，实际上是下一行基线到上一行基线距离；\n如果一个标签没有定义 height 属性，那么其最终表现的高度由 line-height 决定；\n一个容器没有设置高度，那么撑开容器高度的是 line-height，而不是容器内的文本内容；\n把 line-height 值设置为 height 一样大小的值可以实现单行文字的垂直居中；\nline-height 和 height 都能撑开一个高度；\n\n（2）line-height 的赋值方式：\n\n带单位：px 是固定值，而 em 会参考父元素 font-size 值计算自身的行高\n纯数字：会把比例传递给后代。例如，父级行高为 1.5，子元素字体为 18px，则子元素行高为 1.5 * 18 = 27px\n百分比：将计算后的值传递给后代\n\n21. CSS 优化和提高性能的方法有哪些？加载性能：\n（1）css压缩：将写好的css进行打包压缩，可以减小文件体积。\n（2）css单一样式：当需要下边距和左边距的时候，很多时候会选择使用 margin:top 0 bottom 0；但margin-bottom:bottom;margin-left:left;执行效率会更高。\n（3）减少使用@import，建议使用link，因为后者在页面加载时一起加载，前者是等待页面加载完成之后再进行加载。\n选择器性能：\n（1）关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）。CSS选择符是从右到左进行匹配的。当使用后代选择器的时候，浏览器会遍历所有子元素来确定是否是指定的元素等等；\n（2）如果规则拥有ID选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）。\n（3）避免使用通配规则，如*{}计算次数惊人，只对需要用到的元素进行选择。\n（4）尽量少的去对标签进行选择，而是用class。\n（5）尽量少的去使用后代选择器，降低选择器的权重值。后代选择器的开销是最高的，尽量将选择器的深度降到最低，最高不要超过三层，更多的使用类来关联每一个标签元素。\n（6）了解哪些属性是可以通过继承而来的，然后避免对这些属性重复指定规则。\n渲染性能：\n（1）慎重使用高性能属性：浮动、定位。\n（2）尽量减少页面重排、重绘。\n（3）去除空规则：｛｝。空规则的产生原因一般来说是为了预留样式。去除这些空规则无疑能减少css文档体积。\n（4）属性值为0时，不加单位。\n（5）属性值为浮动小数0.**，可以省略小数点之前的0。\n（6）标准化各种浏览器前缀：带浏览器前缀的在前。标准属性在后。\n（7）不使用@import前缀，它会影响css的加载速度。\n（8）选择器优化嵌套，尽量避免层级过深。\n（9）css雪碧图，同一页面相近部分的小图标，方便使用，减少页面的请求次数，但是同时图片本身会变大，使用时，优劣考虑清楚，再使用。\n（10）正确使用display的属性，由于display的作用，某些样式组合会无效，徒增样式体积的同时也影响解析性能。\n（11）不滥用web字体。对于中文网站来说WebFonts可能很陌生，国外却很流行。web fonts通常体积庞大，而且一些浏览器在下载web fonts时会阻塞页面渲染损伤性能。\n可维护性、健壮性：\n（1）将具有相同属性的样式抽离出来，整合并通过class在页面中进行使用，提高css的可维护性。\n（2）样式与内容分离：将css代码定义到外部css中。\n22. CSS预处理器/后处理器是什么？为什么要使用它们？预处理器， 如：less，sass，stylus，用来预编译sass或者less，增加了css代码的复用性。层级，mixin， 变量，循环， 函数等对编写以及开发UI组件都极为方便。\n后处理器， 如： postCss，通常是在完成的样式表中根据css规范处理css，让其更加有效。目前最常做的是给css属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。\ncss预处理器为css增加一些编程特性，无需考虑浏览器的兼容问题，可以在CSS中使用变量，简单的逻辑程序，函数等在编程语言中的一些基本的性能，可以让css更加的简洁，增加适应性以及可读性，可维护性等。\n其它css预处理器语言：Sass（Scss）, Less, Stylus, Turbine, Swithch css, CSS Cacheer, DT Css。\n使用原因：\n\n结构清晰， 便于扩展\n可以很方便的屏蔽浏览器私有语法的差异\n可以轻松实现多重继承\n完美的兼容了CSS代码，可以应用到老项目中\n\n23. ::before 和 :after 的双冒号和单冒号有什么区别？（1）冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。 （2）::before就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于dom之中，只存在在页面之中。\n注意： :before 和 :after 这两个伪元素，是在CSS2.1里新出现的。起初，伪元素的前缀使用的是单冒号语法，但随着Web的进化，在CSS3的规范里，伪元素的语法被修改成使用双冒号，成为::before、::after。\n24. display:inline-block 什么时候会显示间隙？\n有空格时会有间隙，可以删除空格解决；\nmargin正值时，可以让margin使用负值解决；\n使用font-size时，可通过设置font-size:0、letter-spacing、word-spacing解决；\n\n25. 单行、多行文本溢出隐藏\n单行文本溢出\n\noverflow: hidden;            // 溢出隐藏\ntext-overflow: ellipsis;      // 溢出用省略号显示\nwhite-space: nowrap;         // 规定段落中的文本不进行换行\n复制代码\n\n\n多行文本溢出\n\noverflow: hidden;            // 溢出隐藏\ntext-overflow: ellipsis;     // 溢出用省略号显示\ndisplay:-webkit-box;         // 作为弹性伸缩盒子模型显示。\n-webkit-box-orient:vertical; // 设置伸缩盒子的子元素排列方式：从上到下垂直排列\n-webkit-line-clamp:3;        // 显示的行数\n复制代码\n\n注意：由于上面的三个属性都是 CSS3 的属性，没有浏览器可以兼容，所以要在前面加一个-webkit- 来兼容一部分浏览器。\n26. Sass、Less 是什么？为什么要使用他们？他们都是 CSS 预处理器，是 CSS 上的一种抽象层。他们是一种特殊的语法/语言编译成 CSS。 例如 Less 是一种动态样式语言，将 CSS 赋予了动态语言的特性，如变量，继承，运算， 函数，LESS 既可以在客户端上运行 (支持 IE 6+, Webkit, Firefox)，也可以在服务端运行 (借助 Node.js)。\n为什么要使用它们？\n\n结构清晰，便于扩展。 可以方便地屏蔽浏览器私有语法差异。封装对浏览器语法差异的重复处理， 减少无意义的机械劳动。\n可以轻松实现多重继承。 完全兼容 CSS 代码，可以方便地应用到老项目中。LESS 只是在 CSS 语法上做了扩展，所以老的 CSS 代码也可以与 LESS 代码一同编译。\n\n27. 对媒体查询的理解？媒体查询由⼀个可选的媒体类型和零个或多个使⽤媒体功能的限制了样式表范围的表达式组成，例如宽度、⾼度和颜⾊。媒体查询，添加⾃CSS3，允许内容的呈现针对⼀个特定范围的输出设备⽽进⾏裁剪，⽽不必改变内容本身，适合web⽹⻚应对不同型号的设备⽽做出对应的响应适配。\n媒体查询包含⼀个可选的媒体类型和满⾜CSS3规范的条件下，包含零个或多个表达式，这些表达式描述了媒体特征，最终会被解析为true或false。如果媒体查询中指定的媒体类型匹配展示⽂档所使⽤的设备类型，并且所有的表达式的值都是true，那么该媒体查询的结果为true。那么媒体查询内的样式将会⽣效。\n&lt;!-- link元素中的CSS媒体查询 --> \n&lt;link rel=\"stylesheet\" media=\"(max-width: 800px)\" href=\"example.css\" /> \n&lt;!-- 样式表中的CSS媒体查询 --> \n&lt;style> \n@media (max-width: 600px) &#123; \n  .facet_sidebar &#123; \n    display: none; \n  &#125; \n&#125;\n&lt;/style>\n复制代码\n\n简单来说，使用 @media 查询，可以针对不同的媒体类型定义不同的样式。@media 可以针对不同的屏幕尺寸设置不同的样式，特别是需要设置设计响应式的页面，@media 是非常有用的。当重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。\n28. 对 CSS 工程化的理解CSS 工程化是为了解决以下问题：\n\n宏观设计：CSS 代码如何组织、如何拆分、模块结构怎样设计？\n编码优化：怎样写出更好的 CSS？\n构建：如何处理我的 CSS，才能让它的打包结果最优？\n可维护性：代码写完了，如何最小化它后续的变更成本？如何确保任何一个同事都能轻松接手？\n\n以下三个方向都是时下比较流行的、普适性非常好的 CSS 工程化实践：\n\n预处理器：Less、 Sass 等；\n重要的工程化插件： PostCss；\nWebpack loader 等 。\n\n基于这三个方向，可以衍生出一些具有典型意义的子问题，这里我们逐个来看：\n（1）预处理器：为什么要用预处理器？它的出现是为了解决什么问题？\n预处理器，其实就是 CSS 世界的“轮子”。预处理器支持我们写一种类似 CSS、但实际并不是 CSS 的语言，然后把它编译成 CSS 代码：  那为什么写 CSS 代码写得好好的，偏偏要转去写“类 CSS”呢？这就和本来用 JS 也可以实现所有功能，但最后却写 React 的 jsx 或者 Vue 的模板语法一样——为了爽！要想知道有了预处理器有多爽，首先要知道的是传统 CSS 有多不爽。随着前端业务复杂度的提高，前端工程中对 CSS 提出了以下的诉求：\n\n宏观设计上：我们希望能优化 CSS 文件的目录结构，对现有的 CSS 文件实现复用；\n编码优化上：我们希望能写出结构清晰、简明易懂的 CSS，需要它具有一目了然的嵌套层级关系，而不是无差别的一铺到底写法；我们希望它具有变量特征、计算能力、循环能力等等更强的可编程性，这样我们可以少写一些无用的代码；\n可维护性上：更强的可编程性意味着更优质的代码结构，实现复用意味着更简单的目录结构和更强的拓展能力，这两点如果能做到，自然会带来更强的可维护性。\n\n这三点是传统 CSS 所做不到的，也正是预处理器所解决掉的问题。预处理器普遍会具备这样的特性：\n\n嵌套代码的能力，通过嵌套来反映不同 css 属性之间的层级关系 ；\n支持定义 css 变量；\n提供计算函数；\n允许对代码片段进行 extend 和 mixin；\n支持循环语句的使用；\n支持将 CSS 文件模块化，实现复用。\n\n（2）PostCss：PostCss 是如何工作的？我们在什么场景下会使用 PostCss？\n 它和预处理器的不同就在于，预处理器处理的是 类CSS，而 PostCss 处理的就是 CSS 本身。Babel 可以将高版本的 JS 代码转换为低版本的 JS 代码。PostCss 做的是类似的事情：它可以编译尚未被浏览器广泛支持的先进的 CSS 语法，还可以自动为一些需要额外兼容的语法增加前缀。更强的是，由于 PostCss 有着强大的插件机制，支持各种各样的扩展，极大地强化了 CSS 的能力。\nPostCss 在业务中的使用场景非常多：\n\n提高 CSS 代码的可读性：PostCss 其实可以做类似预处理器能做的工作；\n当我们的 CSS 代码需要适配低版本浏览器时，PostCss 的 Autoprefixer 插件可以帮助我们自动增加浏览器前缀；\n允许我们编写面向未来的 CSS：PostCss 能够帮助我们编译 CSS next 代码；\n\n（3）Webpack 能处理 CSS 吗？如何实现？ Webpack 能处理 CSS 吗：\n\nWebpack 在裸奔的状态下，是不能处理 CSS 的，Webpack 本身是一个面向 JavaScript 且只能处理 JavaScript 代码的模块化打包工具；\nWebpack 在 loader 的辅助下，是可以处理 CSS 的。\n\n如何用 Webpack 实现对 CSS 的处理：\n\nWebpack 中操作 CSS 需要使用的两个关键的 loader：css-loader 和 style-loader\n注意，答出“用什么”有时候可能还不够，面试官会怀疑你是不是在背答案，所以你还需要了解每个 loader 都做了什么事情：\ncss-loader：导入 CSS 模块，对 CSS 代码进行编译处理；\nstyle-loader：创建style标签，把 CSS 内容写入标签。\n\n\n\n在实际使用中，css-loader 的执行顺序一定要安排在 style-loader 的前面。因为只有完成了编译过程，才可以对 css 代码进行插入；若提前插入了未编译的代码，那么 webpack 是无法理解这坨东西的，它会无情报错。\n29. 如何判断元素是否到达可视区域以图片显示为例：\n\nwindow.innerHeight 是浏览器可视区的高度；\ndocument.body.scrollTop || document.documentElement.scrollTop 是浏览器滚动的过的距离；\nimgs.offsetTop 是元素顶部距离文档顶部的高度（包括滚动条的距离）；\n内容达到显示区域的：img.offsetTop &lt; window.innerHeight + document.body.scrollTop;\n\n\n30. z-index属性在什么情况下会失效通常 z-index 的使用是在有两个重叠的标签，在一定的情况下控制其中一个在另一个的上方或者下方出现。z-index值越大就越是在上层。z-index元素的position属性需要是relative，absolute或是fixed。\nz-index属性在下列情况下会失效：\n\n父元素position为relative时，子元素的z-index失效。解决：父元素position改为absolute或static；\n元素没有设置position属性为非static属性。解决：设置该元素的position属性为relative，absolute或是fixed中的一种；\n元素在设置z-index的同时还设置了float浮动。解决：float去除，改为display：inline-block；\n\n31. CSS3中的transform有哪些属性二、页面布局1. 常见的CSS布局单位常用的布局单位包括像素（px），百分比（%），em，rem，vw/vh。\n（1）像素（px）是页面布局的基础，一个像素表示终端（电脑、手机、平板等）屏幕所能显示的最小的区域，像素分为两种类型：CSS像素和物理像素：\n\nCSS像素：为web开发者提供，在CSS中使用的一个抽象单位；\n物理像素：只与设备的硬件密度有关，任何设备的物理像素都是固定的。\n\n（2）百分比（%），当浏览器的宽度或者高度发生变化时，通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。一般认为子元素的百分比相对于直接父元素。\n（3）em和rem相对于px更具灵活性，它们都是相对长度单位，它们之间的区别：em相对于父元素，rem相对于根元素。\n\nem： 文本相对长度单位。相对于当前对象内文本的字体尺寸。如果当前行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸(默认16px)。(相对父元素的字体大小倍数)。\nrem： rem是CSS3新增的一个相对单位，相对于根元素（html元素）的font-size的倍数。作用：利用rem可以实现简单的响应式布局，可以利用html元素中字体的大小与屏幕间的比值来设置font-size的值，以此实现当屏幕分辨率变化时让元素也随之变化。\n\n（4）vw/vh是与视图窗口有关的单位，vw表示相对于视图窗口的宽度，vh表示相对于视图窗口高度，除了vw和vh外，还有vmin和vmax两个相关的单位。\n\nvw：相对于视窗的宽度，视窗宽度是100vw；\nvh：相对于视窗的高度，视窗高度是100vh；\nvmin：vw和vh中的较小值；\nvmax：vw和vh中的较大值；\n\nvw/vh 和百分比很类似，两者的区别：\n\n百分比（%）：大部分相对于祖先元素，也有相对于自身的情况比如（border-radius、translate等)\nvw/vm：相对于视窗的尺寸\n\n2. px、em、rem的区别及使用场景三者的区别：\n\npx是固定的像素，一旦设置了就无法因为适应页面大小而改变。\nem和rem相对于px更具有灵活性，他们是相对长度单位，其长度不是固定的，更适用于响应式布局。\nem是相对于其父元素来设置字体大小，这样就会存在一个问题，进行任何元素设置，都有可能需要知道他父元素的大小。而rem是相对于根元素，这样就意味着，只需要在根元素确定一个参考值。\n\n使用场景：\n\n对于只需要适配少部分移动设备，且分辨率对页面影响不大的，使用px即可 。\n对于需要适配各种移动设备，使用rem，例如需要适配iPhone和iPad等分辨率差别比较挺大的设备。\n\n3. 两栏布局的实现一般两栏布局指的是左边一栏宽度固定，右边一栏宽度自适应，两栏布局的具体实现：\n\n利用浮动，将左边元素宽度设置为200px，并且设置向左浮动。将右边元素的margin-left设置为200px，宽度设置为auto（默认为auto，撑满整个父元素）。\n\n.outer &#123;\n  height: 100px;\n&#125;\n.left &#123;\n  float: left;\n  width: 200px;\n  background: tomato;\n&#125;\n.right &#123;\n  margin-left: 200px;\n  width: auto;\n  background: gold;\n&#125;\n复制代码\n\n\n利用浮动，左侧元素设置固定大小，并左浮动，右侧元素设置overflow: hidden; 这样右边就触发了BFC，BFC的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠。\n\n.left&#123;\n     width: 100px;\n     height: 200px;\n     background: red;\n     float: left;\n &#125;\n .right&#123;\n     height: 300px;\n     background: blue;\n     overflow: hidden;\n &#125;\n复制代码\n\n\n利用flex布局，将左边元素设置为固定宽度200px，将右边的元素设置为flex:1。\n\n.outer &#123;\n  display: flex;\n  height: 100px;\n&#125;\n.left &#123;\n  width: 200px;\n  background: tomato;\n&#125;\n.right &#123;\n  flex: 1;\n  background: gold;\n&#125;\n复制代码\n\n\n利用绝对定位，将父级元素设置为相对定位。左边元素设置为absolute定位，并且宽度设置为200px。将右边元素的margin-left的值设置为200px。\n\n.outer &#123;\n  position: relative;\n  height: 100px;\n&#125;\n.left &#123;\n  position: absolute;\n  width: 200px;\n  height: 100px;\n  background: tomato;\n&#125;\n.right &#123;\n  margin-left: 200px;\n  background: gold;\n&#125;\n复制代码\n\n\n利用绝对定位，将父级元素设置为相对定位。左边元素宽度设置为200px，右边元素设置为绝对定位，左边定位为200px，其余方向定位为0。\n\n.outer &#123;\n  position: relative;\n  height: 100px;\n&#125;\n.left &#123;\n  width: 200px;\n  background: tomato;\n&#125;\n.right &#123;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 200px;\n  background: gold;\n&#125;\n复制代码\n\n4. 三栏布局的实现三栏布局一般指的是页面中一共有三栏，左右两栏宽度固定，中间自适应的布局，三栏布局的具体实现：\n\n利用绝对定位，左右两栏设置为绝对定位，中间设置对应方向大小的margin的值。\n\n.outer &#123;\n  position: relative;\n  height: 100px;\n&#125;\n\n.left &#123;\n  position: absolute;\n  width: 100px;\n  height: 100px;\n  background: tomato;\n&#125;\n\n.right &#123;\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 200px;\n  height: 100px;\n  background: gold;\n&#125;\n\n.center &#123;\n  margin-left: 100px;\n  margin-right: 200px;\n  height: 100px;\n  background: lightgreen;\n&#125;\n复制代码\n\n\n利用flex布局，左右两栏设置固定大小，中间一栏设置为flex:1。\n\n.outer &#123;\n  display: flex;\n  height: 100px;\n&#125;\n\n.left &#123;\n  width: 100px;\n  background: tomato;\n&#125;\n\n.right &#123;\n  width: 100px;\n  background: gold;\n&#125;\n\n.center &#123;\n  flex: 1;\n  background: lightgreen;\n&#125;\n复制代码\n\n\n利用浮动，左右两栏设置固定大小，并设置对应方向的浮动。中间一栏设置左右两个方向的margin值，注意这种方式，中间一栏必须放到最后：\n\n.outer &#123;\n  height: 100px;\n&#125;\n\n.left &#123;\n  float: left;\n  width: 100px;\n  height: 100px;\n  background: tomato;\n&#125;\n\n.right &#123;\n  float: right;\n  width: 200px;\n  height: 100px;\n  background: gold;\n&#125;\n\n.center &#123;\n  height: 100px;\n  margin-left: 100px;\n  margin-right: 200px;\n  background: lightgreen;\n&#125;\n复制代码\n\n\n圣杯布局，利用浮动和负边距来实现。父级元素设置左右的 padding，三列均设置向左浮动，中间一列放在最前面，宽度设置为父级元素的宽度，因此后面两列都被挤到了下一行，通过设置 margin 负值将其移动到上一行，再利用相对定位，定位到两边。\n\n.outer &#123;\n  height: 100px;\n  padding-left: 100px;\n  padding-right: 200px;\n&#125;\n\n.left &#123;\n  position: relative;\n  left: -100px;\n\n  float: left;\n  margin-left: -100%;\n\n  width: 100px;\n  height: 100px;\n  background: tomato;\n&#125;\n\n.right &#123;\n  position: relative;\n  left: 200px;\n\n  float: right;\n  margin-left: -200px;\n\n  width: 200px;\n  height: 100px;\n  background: gold;\n&#125;\n\n.center &#123;\n  float: left;\n\n  width: 100%;\n  height: 100px;\n  background: lightgreen;\n&#125;\n复制代码\n\n\n双飞翼布局，双飞翼布局相对于圣杯布局来说，左右位置的保留是通过中间列的 margin 值来实现的，而不是通过父元素的 padding 来实现的。本质上来说，也是通过浮动和外边距负值来实现的。\n\n.outer &#123;\n  height: 100px;\n&#125;\n\n.left &#123;\n  float: left;\n  margin-left: -100%;\n\n  width: 100px;\n  height: 100px;\n  background: tomato;\n&#125;\n\n.right &#123;\n  float: left;\n  margin-left: -200px;\n\n  width: 200px;\n  height: 100px;\n  background: gold;\n&#125;\n\n.wrapper &#123;\n  float: left;\n\n  width: 100%;\n  height: 100px;\n  background: lightgreen;\n&#125;\n\n.center &#123;\n  margin-left: 100px;\n  margin-right: 200px;\n  height: 100px;\n&#125;\n复制代码\n\n5. 水平垂直居中的实现\n利用绝对定位，先将元素的左上角通过top:50%和left:50%定位到页面的中心，然后再通过translate来调整元素的中心点到页面的中心。该方法需要考虑浏览器兼容问题。\n\n.parent &#123;    position: relative;&#125; .child &#123;    position: absolute;    left: 50%;    top: 50%;    transform: translate(-50%,-50%);&#125;\n复制代码\n\n\n利用绝对定位，设置四个方向的值都为0，并将margin设置为auto，由于宽高固定，因此对应方向实现平分，可以实现水平和垂直方向上的居中。该方法适用于盒子有宽高的情况：\n\n.parent &#123;\n    position: relative;\n&#125;\n \n.child &#123;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    margin: auto;\n&#125;\n复制代码\n\n\n利用绝对定位，先将元素的左上角通过top:50%和left:50%定位到页面的中心，然后再通过margin负值来调整元素的中心点到页面的中心。该方法适用于盒子宽高已知的情况\n\n.parent &#123;\n    position: relative;\n&#125;\n \n.child &#123;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin-top: -50px;     /* 自身 height 的一半 */\n    margin-left: -50px;    /* 自身 width 的一半 */\n&#125;\n复制代码\n\n\n使用flex布局，通过align-items:center和justify-content:center设置容器的垂直和水平方向上为居中对齐，然后它的子元素也可以实现垂直和水平的居中。该方法要考虑兼容的问题，该方法在移动端用的较多：\n\n.parent &#123;\n    display: flex;\n    justify-content:center;\n    align-items:center;\n&#125;\n复制代码\n\n6. 如何根据设计稿进行移动端适配？移动端适配主要有两个维度：\n\n适配不同像素密度， 针对不同的像素密度，使用 CSS 媒体查询，选择不同精度的图片，以保证图片不会失真；\n适配不同屏幕大小， 由于不同的屏幕有着不同的逻辑像素大小，所以如果直接使用 px 作为开发单位，会使得开发的页面在某一款手机上可以准确显示，但是在另一款手机上就会失真。为了适配不同屏幕的大小，应按照比例来还原设计稿的内容。\n\n为了能让页面的尺寸自适应，可以使用 rem，em，vw，vh 等相对单位。\n7. 对Flex布局的理解及其使用场景Flex是FlexibleBox的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为Flex布局。行内元素也可以使用Flex布局。注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis），项目默认沿水平主轴排列。\n以下6个属性设置在容器上：\n\nflex-direction属性决定主轴的方向（即项目的排列方向）。\nflex-wrap属性定义，如果一条轴线排不下，如何换行。\nflex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\njustify-content属性定义了项目在主轴上的对齐方式。\nalign-items属性定义项目在交叉轴上如何对齐。\nalign-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n\n以下6个属性设置在项目上：\n\norder属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。\nflex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\nflex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\nflex-basis属性定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。\nflex属性是flex-grow，flex-shrink和flex-basis的简写，默认值为0 1 auto。\nalign-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\n\n简单来说： flex布局是CSS3新增的一种布局方式，可以通过将一个元素的display属性值设置为flex从而使它成为一个flex容器，它的所有子元素都会成为它的项目。一个容器默认有两条轴：一个是水平的主轴，一个是与主轴垂直的交叉轴。可以使用flex-direction来指定主轴的方向。可以使用justify-content来指定元素在主轴上的排列方式，使用align-items来指定元素在交叉轴上的排列方式。还可以使用flex-wrap来规定当一行排列不下时的换行方式。对于容器中的项目，可以使用order属性来指定项目的排列顺序，还可以使用flex-grow来指定当排列空间有剩余的时候，项目的放大比例，还可以使用flex-shrink来指定当排列空间不足时，项目的缩小比例。\n8. 响应式设计的概念及基本原理响应式网站设计（Responsive Web design）是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本。\n关于原理： 基本原理是通过媒体查询（@media）查询检测不同的设备屏幕尺寸做处理。 关于兼容： 页面头部必须有mate声明的viewport。\n&lt;meta name=\"’viewport’\" content=\"”width=device-width,\" initial-scale=\"1.\" maximum-scale=\"1,user-scalable=no”\"/>\n复制代码\n\n三、定位与浮动1. 为什么需要清除浮动？清除浮动的方式浮动的定义： 非IE浏览器下，容器不设高度且子元素浮动时，容器高度不能被内容撑开。 此时，内容会溢出到容器外面而影响布局。这种现象被称为浮动（溢出）。\n浮动的工作原理：\n\n浮动元素脱离文档流，不占据空间（引起“高度塌陷”现象）\n浮动元素碰到包含它的边框或者其他浮动元素的边框停留\n\n浮动元素可以左右移动，直到遇到另一个浮动元素或者遇到它外边缘的包含框。浮动框不属于文档流中的普通流，当元素浮动之后，不会影响块级元素的布局，只会影响内联元素布局。此时文档流中的普通流就会表现得该浮动框不存在一样的布局模式。当包含框的高度小于浮动框的时候，此时就会出现“高度塌陷”。\n浮动元素引起的问题？\n\n父元素的高度无法被撑开，影响与父元素同级的元素\n与浮动元素同级的非浮动元素会跟随其后\n若浮动的元素不是第一个元素，则该元素之前的元素也要浮动，否则会影响页面的显示结构\n\n清除浮动的方式如下：\n\n给父级div定义height属性\n最后一个浮动元素之后添加一个空的div标签，并添加clear:both样式\n包含浮动元素的父级标签添加overflow:hidden或者overflow:auto\n使用 :after 伪元素。由于IE6-7不支持 :after，使用 zoom:1 触发 hasLayout**\n\n.clearfix:after&#123;\n    content: \"\\200B\";\n    display: table; \n    height: 0;\n    clear: both;\n  &#125;\n  .clearfix&#123;\n    *zoom: 1;\n  &#125;\n复制代码\n\n2. 使用 clear 属性清除浮动的原理？使用clear属性清除浮动，其语法如下：\nclear:none|left|right|both\n复制代码\n\n如果单看字面意思，clear:left 是“清除左浮动”，clear:right 是“清除右浮动”，实际上，这种解释是有问题的，因为浮动一直还在，并没有清除。\n官方对clear属性解释：“元素盒子的边不能和前面的浮动元素相邻”，对元素设置clear属性是为了避免浮动元素对该元素的影响，而不是清除掉浮动。\n还需要注意 clear 属性指的是元素盒子的边不能和前面的浮动元素相邻，注意这里“前面的”3个字，也就是clear属性对“后面的”浮动元素是不闻不问的。考虑到float属性要么是left，要么是right，不可能同时存在，同时由于clear属性对“后面的”浮动元素不闻不问，因此，当clear:left有效的时候，clear:right必定无效，也就是此时clear:left等同于设置clear:both；同样地，clear:right如果有效也是等同于设置clear:both。由此可见，clear:left和clear:right这两个声明就没有任何使用的价值，至少在CSS世界中是如此，直接使用clear:both吧。\n一般使用伪元素的方式清除浮动：\n.clear::after&#123;  content:'';  display: block;   clear:both;&#125;\n复制代码\n\nclear属性只有块级元素才有效的，而::after等伪元素默认都是内联水平，这就是借助伪元素清除浮动影响时需要设置display属性值的原因。\n3. 对BFC的理解，如何创建BFC先来看两个相关的概念：\n\nBox: Box 是 CSS 布局的对象和基本单位，⼀个⻚⾯是由很多个 Box 组成的，这个Box就是我们所说的盒模型。\nFormatting context：块级上下⽂格式化，它是⻚⾯中的⼀块渲染区域，并且有⼀套渲染规则，它决定了其⼦元素将如何定位，以及和其他元素的关系和相互作⽤。\n\n块格式化上下文（Block Formatting Context，BFC）是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。\n通俗来讲：BFC是一个独立的布局环境，可以理解为一个容器，在这个容器中按照一定规则进行物品摆放，并且不会影响其它环境中的物品。如果一个元素符合触发BFC的条件，则BFC中的元素布局不受外部影响。\n创建BFC的条件：\n\n根元素：body；\n元素设置浮动：float 除 none 以外的值；\n元素设置绝对定位：position (absolute、fixed)；\ndisplay 值为：inline-block、table-cell、table-caption、flex等；\noverflow 值为：hidden、auto、scroll；\n\nBFC的特点：\n\n垂直方向上，自上而下排列，和文档流的排列方式一致。\n在BFC中上下相邻的两个容器的margin会重叠\n计算BFC的高度时，需要计算浮动元素的高度\nBFC区域不会与浮动的容器发生重叠\nBFC是独立的容器，容器内部元素不会影响外部元素\n每个元素的左margin值和容器的左border相接触\n\nBFC的作用：\n\n解决margin的重叠问题：由于BFC是一个独立的区域，内部的元素和外部的元素互不影响，将两个元素变为两个BFC，就解决了margin重叠的问题。\n解决高度塌陷的问题：在对子元素设置浮动后，父元素会发生高度塌陷，也就是父元素的高度变为0。解决这个问题，只需要把父元素变成一个BFC。常用的办法是给父元素设置overflow:hidden。\n创建自适应两栏布局：可以用来创建自适应两栏布局：左边的宽度固定，右边的宽度自适应。\n\n.left&#123;\n     width: 100px;\n     height: 200px;\n     background: red;\n     float: left;\n &#125;\n .right&#123;\n     height: 300px;\n     background: blue;\n     overflow: hidden;\n &#125;\n \n&lt;div class=\"left\">&lt;/div>\n&lt;div class=\"right\">&lt;/div>\n复制代码\n\n左侧设置float:left，右侧设置overflow: hidden。这样右边就触发了BFC，BFC的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠，实现了自适应两栏布局。\n4. 什么是margin重叠问题？如何解决？问题描述： 两个块级元素的上外边距和下外边距可能会合并（折叠）为一个外边距，其大小会取其中外边距值大的那个，这种行为就是外边距折叠。需要注意的是，浮动的元素和绝对定位这种脱离文档流的元素的外边距不会折叠。重叠只会出现在垂直方向。\n计算原则： 折叠合并后外边距的计算原则如下：\n\n如果两者都是正数，那么就去最大者\n如果是一正一负，就会正值减去负值的绝对值\n两个都是负值时，用0减去两个中绝对值大的那个\n\n解决办法： 对于折叠的情况，主要有两种：兄弟之间重叠和父子之间重叠 （1）兄弟之间重叠\n\n底部元素变为行内盒子：display: inline-block\n底部元素设置浮动：float\n底部元素的position的值为absolute/fixed\n\n（2）父子之间重叠\n\n父元素加入：overflow: hidden\n父元素添加透明边框：border:1px solid transparent\n子元素变为行内盒子：display: inline-block\n子元素加入浮动属性或定位\n\n5. 元素的层叠顺序层叠顺序，英文称作 stacking order，表示元素发生层叠时有着特定的垂直显示顺序。下面是盒模型的层叠规则：  对于上图，由上到下分别是： （1）背景和边框：建立当前层叠上下文元素的背景和边框。 （2）负的z-index：当前层叠上下文中，z-index属性值为负的元素。 （3）块级盒：文档流内非行内级非定位后代元素。 （4）浮动盒：非定位浮动元素。 （5）行内盒：文档流内行内级非定位后代元素。 （6）z-index:0：层叠级数为0的定位元素。 （7）正z-index：z-index属性值为正的定位元素。\n注意: 当定位元素z-index:auto，生成盒在当前层叠上下文中的层级为 0，不会建立新的层叠上下文，除非是根元素。\n6. position的属性有哪些，区别是什么position有以下属性值：\n\n\n\n属性值\n概述\n\n\n\nabsolute\n生成绝对定位的元素，相对于static定位以外的一个父元素进行定位。元素的位置通过left、top、right、bottom属性进行规定。\n\n\nrelative\n生成相对定位的元素，相对于其原来的位置进行定位。元素的位置通过left、top、right、bottom属性进行规定。\n\n\nfixed\n生成绝对定位的元素，指定元素相对于屏幕视⼝（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变，⽐如回到顶部的按钮⼀般都是⽤此定位⽅式。\n\n\nstatic\n默认值，没有定位，元素出现在正常的文档流中，会忽略 top, bottom, left, right 或者 z-index 声明，块级元素从上往下纵向排布，⾏级元素从左向右排列。\n\n\ninherit\n规定从父元素继承position属性的值\n\n\n前面三者的定位方式如下：\n\nrelative： 元素的定位永远是相对于元素自身位置的，和其他元素没关系，也不会影响其他元素。\n\n\n\nfixed： 元素的定位是相对于 window （或者 iframe）边界的，和其他元素没有关系。但是它具有破坏性，会导致其他元素位置的变化。\n\n\n\nabsolute： 元素的定位相对于前两者要复杂许多。如果为 absolute 设置了 top、left，浏览器会根据什么去确定它的纵向和横向的偏移量呢？答案是浏览器会递归查找该元素的所有父元素，如果找到一个设置了position:relative/absolute/fixed的元素，就以该元素为基准定位，如果没找到，就以浏览器边界定位。如下两个图所示：\n\n \n7. display、float、position的关系（1）首先判断display属性是否为none，如果为none，则position和float属性的值不影响元素最后的表现。\n（2）然后判断position的值是否为absolute或者fixed，如果是，则float属性失效，并且display的值应该被设置为table或者block，具体转换需要看初始转换值。\n（3）如果position的值不为absolute或者fixed，则判断float属性的值是否为none，如果不是，则display的值则按上面的规则转换。注意，如果position的值为relative并且float属性的值存在，则relative相对于浮动后的最终位置定位。\n（4）如果float的值为none，则判断元素是否为根元素，如果是根元素则display属性按照上面的规则转换，如果不是，则保持指定的display属性值不变。\n总的来说，可以把它看作是一个类似优先级的机制，”position:absolute”和”position:fixed”优先级最高，有它存在的时候，浮动不起作用，’display’的值也需要调整；其次，元素的’float’特性的值不是”none”的时候或者它是根元素的时候，调整’display’的值；最后，非根元素，并且非浮动元素，并且非绝对定位的元素，’display’特性值同设置值。\n8. absolute与fixed共同点与不同点共同点：\n\n改变行内元素的呈现方式，将display置为inline-block \n使元素脱离普通文档流，不再占据文档物理空间\n覆盖非定位文档元素\n\n不同点：\n\nabuselute与fixed的根元素不同，abuselute的根元素可以设置，fixed根元素是浏览器。\n在有滚动条的页面中，absolute会跟着父元素进行移动，fixed固定在页面的具体位置。\n\n9. 对 sticky 定位的理解sticky 英文字面意思是粘贴，所以可以把它称之为粘性定位。语法：position: sticky; 基于用户的滚动位置来定位。\n粘性定位的元素是依赖于用户的滚动，在 position:relative 与 position:fixed 定位之间切换。它的行为就像 position:relative; 而当页面滚动超出目标区域时，它的表现就像 **position:fixed;**，它会固定在目标位置。元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。这个特定阈值指的是 top, right, bottom 或 left 之一，换言之，指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。\n四、场景应用1. 实现一个三角形CSS绘制三角形主要用到的是border属性，也就是边框。\n平时在给盒子设置边框时，往往都设置很窄，就可能误以为边框是由矩形组成的。实际上，border属性是右三角形组成的，下面看一个例子：\ndiv &#123;\n    width: 0;\n    height: 0;\n    border: 100px solid;\n    border-color: orange blue red green;\n&#125;\n复制代码\n\n将元素的长宽都设置为0，显示出来的效果是这样的：  所以可以根据border这个特性来绘制三角形： （1）三角1\ndiv &#123;    width: 0;    height: 0;    border-top: 50px solid red;    border-right: 50px solid transparent;    border-left: 50px solid transparent;&#125;\n复制代码\n\n （2）三角2\ndiv &#123;\n    width: 0;\n    height: 0;\n    border-bottom: 50px solid red;\n    border-right: 50px solid transparent;\n    border-left: 50px solid transparent;\n&#125;\n复制代码\n\n （3）三角3\ndiv &#123;\n    width: 0;\n    height: 0;\n    border-left: 50px solid red;\n    border-top: 50px solid transparent;\n    border-bottom: 50px solid transparent;\n&#125;\n复制代码\n\n （4）三角4\ndiv &#123;\n    width: 0;\n    height: 0;\n    border-right: 50px solid red;\n    border-top: 50px solid transparent;\n    border-bottom: 50px solid transparent;\n&#125;\n复制代码\n\n （5）三角5\ndiv &#123;\n    width: 0;\n    height: 0;\n    border-top: 100px solid red;\n    border-right: 100px solid transparent;\n&#125;\n复制代码\n\n 还有很多，就不一一实现了，总体的原则就是通过上下左右边框来控制三角形的方向，用边框的宽度比来控制三角形的角度。\n2. 实现一个扇形用CSS实现扇形的思路和三角形基本一致，就是多了一个圆角的样式，实现一个90°的扇形：\ndiv&#123;\n    border: 100px solid transparent;\n    width: 0;\n    heigt: 0;\n    border-radius: 100px;\n    border-top-color: red;\n&#125;\n复制代码\n\n\n3. 实现一个宽高自适应的正方形\n利用vw来实现：\n\n.square &#123;\n  width: 10%;\n  height: 10vw;\n  background: tomato;\n&#125;\n复制代码\n\n\n利用元素的margin/padding百分比是相对父元素width的性质来实现：\n\n.square &#123;\n  width: 20%;\n  height: 0;\n  padding-top: 20%;\n  background: orange;\n&#125;\n复制代码\n\n\n利用子元素的margin-top的值来实现：\n\n.square &#123;\n  width: 30%;\n  overflow: hidden;\n  background: yellow;\n&#125;\n.square::after &#123;\n  content: '';\n  display: block;\n  margin-top: 100%;\n&#125;\n复制代码\n\n4. 画一条0.5px的线\n采用transform: scale()的方式，该方法用来定义元素的2D 缩放转换：\n\ntransform: scale(0.5,0.5);\n复制代码\n\n\n采用meta viewport的方式\n\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=0.5, minimum-scale=0.5, maximum-scale=0.5\"/>\n复制代码\n\n这样就能缩放到原来的0.5倍，如果是1px那么就会变成0.5px。viewport只针对于移动端，只在移动端上才能看到效果\n5. 设置小于12px的字体在谷歌下css设置字体大小为12px及以下时，显示都是一样大小，都是默认12px。\n解决办法：\n\n使用Webkit的内核的-webkit-text-size-adjust的私有CSS属性来解决，只要加了-webkit-text-size-adjust:none;字体大小就不受限制了。但是chrome更新到27版本之后就不可以用了。所以高版本chrome谷歌浏览器已经不再支持-webkit-text-size-adjust样式，所以要使用时候慎用。\n使用css3的transform缩放属性-webkit-transform:scale(0.5); 注意-webkit-transform:scale(0.75);收缩的是整个元素的大小，这时候，如果是内联元素，必须要将内联元素转换成块元素，可以使用display：block/inline-block/…；\n使用图片：如果是内容固定不变情况下，使用将小于12px文字内容切出做图片，这样不影响兼容也不影响美观。\n\n6. 如何解决 1px 问题？1px 问题指的是：在一些 Retina屏幕 的机型上，移动端页面的 1px 会变得很粗，呈现出不止 1px 的效果。原因很简单——CSS 中的 1px 并不能和移动设备上的 1px 划等号。它们之间的比例关系有一个专门的属性来描述：\nwindow.devicePixelRatio = 设备的物理像素 / CSS像素。\n复制代码\n\n打开 Chrome 浏览器，启动移动端调试模式，在控制台去输出这个 devicePixelRatio 的值。这里选中 iPhone6/7/8 这系列的机型，输出的结果就是2：  这就意味着设置的 1px CSS 像素，在这个设备上实际会用 2 个物理像素单元来进行渲染，所以实际看到的一定会比 1px 粗一些。 解决1px 问题的三种思路：\n思路一：直接写 0.5px如果之前 1px 的样式这样写：\nborder:1px solid #333\n复制代码\n\n可以先在 JS 中拿到 window.devicePixelRatio 的值，然后把这个值通过 JSX 或者模板语法给到 CSS 的 data 里，达到这样的效果（这里用 JSX 语法做示范）：\n&lt;div id=\"container\" data-device=&#123;&#123;window.devicePixelRatio&#125;&#125;>&lt;/div>\n复制代码\n\n然后就可以在 CSS 中用属性选择器来命中 devicePixelRatio 为某一值的情况，比如说这里尝试命中 devicePixelRatio 为2的情况：\n#container[data-device=\"2\"] &#123;\n  border:0.5px solid #333\n&#125;\n复制代码\n\n直接把 1px 改成 1/devicePixelRatio 后的值，这是目前为止最简单的一种方法。这种方法的缺陷在于兼容性不行，IOS 系统需要8及以上的版本，安卓系统则直接不兼容。\n思路二：伪元素先放大后缩小这个方法的可行性会更高，兼容性也更好。唯一的缺点是代码会变多。\n思路是先放大、后缩小：在目标元素的后面追加一个 ::after 伪元素，让这个元素布局为 absolute 之后、整个伸展开铺在目标元素上，然后把它的宽和高都设置为目标元素的两倍，border值设为 1px。接着借助 CSS 动画特效中的放缩能力，把整个伪元素缩小为原来的 50%。此时，伪元素的宽高刚好可以和原有的目标元素对齐，而 border 也缩小为了 1px 的二分之一，间接地实现了 0.5px 的效果。\n代码如下：\n#container[data-device=\"2\"] &#123;\n    position: relative;\n&#125;\n#container[data-device=\"2\"]::after&#123;\n      position:absolute;\n      top: 0;\n      left: 0;\n      width: 200%;\n      height: 200%;\n      content:\"\";\n      transform: scale(0.5);\n      transform-origin: left top;\n      box-sizing: border-box;\n      border: 1px solid #333;\n    &#125;\n&#125;\n复制代码\n\n思路三：viewport 缩放来解决这个思路就是对 meta 标签里几个关键属性下手：\n&lt;meta name=\"viewport\" content=\"initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no\">\n复制代码\n\n这里针对像素比为2的页面，把整个页面缩放为了原来的1/2大小。这样，本来占用2个物理像素的 1px 样式，现在占用的就是标准的一个物理像素。根据像素比的不同，这个缩放比例可以被计算为不同的值，用 js 代码实现如下：\nconst scale = 1 / window.devicePixelRatio;\n// 这里 metaEl 指的是 meta 标签对应的 Dom\nmetaEl.setAttribute('content', `width=device-width,user-scalable=no,initial-scale=$&#123;scale&#125;,maximum-scale=$&#123;scale&#125;,minimum-scale=$&#123;scale&#125;`);\n复制代码\n\n这样解决了，但这样做的副作用也很大，整个页面被缩放了。这时 1px 已经被处理成物理像素大小，这样的大小在手机上显示边框很合适。但是，一些原本不需要被缩小的内容，比如文字、图片等，也被无差别缩小掉了。\n","slug":"HTML-CSS面试题","date":"2022-04-10T12:17:02.000Z","categories_index":"知识点","tags_index":"面试","author_index":"LIYUNFU"},{"id":"c1e8ab70e0a19618b82b65eaec3559f1","title":"React面试题","content":"一、组件基础1. React 事件机制&lt;div onClick=&#123;this.handleClick.bind(this)&#125;>点我&lt;/div>\n\nReact并不是将click事件绑定到了div的真实DOM上，而是在document处监听了所有的事件，当事件发生并且冒泡到document处的时候，React将事件内容封装并交由真正的处理函数运行。这样的方式不仅仅减少了内存的消耗，还能在组件挂在销毁时统一订阅和移除事件。\n除此之外，冒泡到document上的事件也不是原生的浏览器事件，而是由react自己实现的合成事件（SyntheticEvent）。因此如果不想要是事件冒泡的话应该调用event.preventDefault()方法，而不是调用event.stopProppagation()方法。  JSX 上写的事件并没有绑定在对应的真实 DOM 上，而是通过事件代理的方式，将所有的事件都统一绑定在了 document 上。这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统一订阅和移除事件。\n另外冒泡到 document 上的事件也不是原生浏览器事件，而是 React 自己实现的合成事件（SyntheticEvent）。因此我们如果不想要事件冒泡的话，调用 event.stopPropagation 是无效的，而应该调用 event.preventDefault。\n实现合成事件的目的如下：\n\n合成事件首先抹平了浏览器之间的兼容问题，另外这是一个跨浏览器原生事件包装器，赋予了跨浏览器开发的能力；\n对于原生浏览器事件来说，浏览器会给监听器创建一个事件对象。如果你有很多的事件监听，那么就需要分配很多的事件对象，造成高额的内存分配问题。但是对于合成事件来说，有一个事件池专门来管理它们的创建和销毁，当事件需要被使用时，就会从池子中复用对象，事件回调结束后，就会销毁事件对象上的属性，从而便于下次复用事件对象。\n\n2. React的事件和普通的HTML事件有什么不同？区别：\n\n对于事件名称命名方式，原生事件为全小写，react 事件采用小驼峰；\n对于事件函数处理语法，原生事件为字符串，react 事件为函数；\nreact 事件不能采用 return false 的方式来阻止浏览器的默认行为，而必须要地明确地调用preventDefault()来阻止默认行为。\n\n合成事件是 react 模拟原生 DOM 事件所有能力的一个事件对象，其优点如下：\n\n兼容所有浏览器，更好的跨平台；\n将事件统一存放在一个数组，避免频繁的新增与删除（垃圾回收）。\n方便 react 统一管理和事务机制。\n\n事件的执行顺序为原生事件先执行，合成事件后执行，合成事件会冒泡绑定到 document 上，所以尽量避免原生事件与合成事件混用，如果原生事件阻止冒泡，可能会导致合成事件不执行，因为需要冒泡到document 上合成事件才会执行。\n3. React 组件中怎么做事件代理？它的原理是什么？React基于Virtual DOM实现了一个SyntheticEvent层（合成事件层），定义的事件处理器会接收到一个合成事件对象的实例，它符合W3C标准，且与原生的浏览器事件拥有同样的接口，支持冒泡机制，所有的事件都自动绑定在最外层上。\n在React底层，主要对合成事件做了两件事：\n\n事件委派： React会把所有的事件绑定到结构的最外层，使用统一的事件监听器，这个事件监听器上维持了一个映射来保存所有组件内部事件监听和处理函数。\n自动绑定： React组件中，每个方法的上下文都会指向该组件的实例，即自动绑定this为当前组件。\n\n4. React 高阶组件、Render props、hooks 有什么区别，为什么要不断迭代这三者是目前react解决代码复用的主要方式：\n\n高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧。HOC 自身不是 React API 的一部分，它是一种基于 React 的组合特性而形成的设计模式。具体而言，高阶组件是参数为组件，返回值为新组件的函数。\nrender props是指一种在 React 组件之间使用一个值为函数的 prop 共享代码的简单技术，更具体的说，render prop 是一个用于告知组件需要渲染什么内容的函数 prop。\n通常，render props 和高阶组件只渲染一个子节点。让 Hook 来服务这个使用场景更加简单。这两种模式仍有用武之地，（例如，一个虚拟滚动条组件或许会有一个 renderltem 属性，或是一个可见的容器组件或许会有它自己的 DOM 结构）。但在大部分场景下，Hook 足够了，并且能够帮助减少嵌套。\n\n（1）HOC 官方解释∶\n\n\n\n\n\n\n\n\n\n高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧。HOC 自身不是 React API 的一部分，它是一种基于 React 的组合特性而形成的设计模式。\n简言之，HOC是一种组件的设计模式，HOC接受一个组件和额外的参数（如果需要），返回一个新的组件。HOC 是纯函数，没有副作用。\n// hoc的定义\nfunction withSubscription(WrappedComponent, selectData) &#123;\n  return class extends React.Component &#123;\n    constructor(props) &#123;\n      super(props);\n      this.state = &#123;\n        data: selectData(DataSource, props)\n      &#125;;\n    &#125;\n    // 一些通用的逻辑处理\n    render() &#123;\n      // ... 并使用新数据渲染被包装的组件!\n      return &lt;WrappedComponent data=&#123;this.state.data&#125; &#123;...this.props&#125; />;\n    &#125;\n  &#125;;\n\n// 使用\nconst BlogPostWithSubscription = withSubscription(BlogPost,\n  (DataSource, props) => DataSource.getBlogPost(props.id));\n\nHOC的优缺点∶\n\n优点∶ 逻辑服用、不影响被包裹组件的内部逻辑。\n缺点∶ hoc传递给被包裹组件的props容易和被包裹后的组件重名，进而被覆盖\n\n（2）Render props 官方解释∶\n\n\n\n\n\n\n\n\n\n“render prop”是指一种在 React 组件之间使用一个值为函数的 prop 共享代码的简单技术\n具有render prop 的组件接受一个返回React元素的函数，将render的渲染逻辑注入到组件内部。在这里，”render”的命名可以是任何其他有效的标识符。\n// DataProvider组件内部的渲染逻辑如下\nclass DataProvider extends React.Components &#123;\n     state = &#123;\n    name: 'Tom'\n  &#125;\n\n    render() &#123;\n    return (\n        &lt;div>\n          &lt;p>共享数据组件自己内部的渲染逻辑&lt;/p>\n          &#123; this.props.render(this.state) &#125;\n      &lt;/div>\n    );\n  &#125;\n&#125;\n\n// 调用方式\n&lt;DataProvider render=&#123;data => (\n  &lt;h1>Hello &#123;data.name&#125;&lt;/h1>\n)&#125;/>\n\n\n由此可以看到，render props的优缺点也很明显∶\n\n优点：数据共享、代码复用，将组件内的state作为props传递给调用者，将渲染逻辑交给调用者。\n缺点：无法在 return 语句外访问数据、嵌套写法不够优雅\n\n（3）Hooks 官方解释∶\n\n\n\n\n\n\n\n\n\nHook是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。通过自定义hook，可以复用代码逻辑。\n// 自定义一个获取订阅数据的hook\nfunction useSubscription() &#123;\n  const data = DataSource.getComments();\n  return [data];\n&#125;\n// \nfunction CommentList(props) &#123;\n  const &#123;data&#125; = props;\n  const [subData] = useSubscription();\n    ...\n&#125;\n// 使用\n&lt;CommentList data='hello' />\n\n以上可以看出，hook解决了hoc的prop覆盖的问题，同时使用的方式解决了render props的嵌套地狱的问题。hook的优点如下∶\n\n使用直观；\n解决hoc的prop 重名问题；\n解决render props 因共享数据 而出现嵌套地狱的问题；\n能在return之外使用数据的问题。\n\n需要注意的是：hook只能在组件顶层使用，不可在分支语句中使用。\n总结∶ Hoc、render props和hook都是为了解决代码复用的问题，但是hoc和render props都有特定的使用场景和明显的缺点。hook是react16.8更新的新的API，让组件逻辑复用更简洁明了，同时也解决了hoc和render props的一些缺点。\n5. 对React-Fiber的理解，它解决了什么问题？React V15 在渲染时，会递归比对 VirtualDOM 树，找出需要变动的节点，然后同步更新它们， 一气呵成。这个过程期间， React 会占据浏览器资源，这会导致用户触发的事件得不到响应，并且会导致掉帧，导致用户感觉到卡顿。\n为了给用户制造一种应用很快的“假象”，不能让一个任务长期霸占着资源。 可以将浏览器的渲染、布局、绘制、资源加载(例如 HTML 解析)、事件响应、脚本执行视作操作系统的“进程”，需要通过某些调度策略合理地分配 CPU 资源，从而提高浏览器的用户响应速率, 同时兼顾任务执行效率。\n所以 React 通过Fiber 架构，让这个执行过程变成可被中断。“适时”地让出 CPU 执行权，除了可以让浏览器及时地响应用户的交互，还有其他好处:\n\n分批延时对DOM进行操作，避免一次性操作大量 DOM 节点，可以得到更好的用户体验；\n给浏览器一点喘息的机会，它会对代码进行编译优化（JIT）及进行热代码优化，或者对 reflow 进行修正。\n\n核心思想: Fiber 也称协程或者纤程。它和线程并不一样，协程本身是没有并发或者并行能力的（需要配合线程），它只是一种控制流程的让出机制。让出 CPU 的执行权，让 CPU 能在这段时间执行其他的操作。渲染的过程可以被中断，可以将控制权交回浏览器，让位给高优先级的任务，浏览器空闲后再恢复渲染。\n6. React.Component 和 React.PureComponent 的区别PureComponent表示一个纯组件，可以用来优化React程序，减少render函数执行的次数，从而提高组件的性能。\n在React中，当prop或者state发生变化时，可以通过在shouldComponentUpdate生命周期函数中执行return false来阻止页面的更新，从而减少不必要的render执行。React.PureComponent会自动执行 shouldComponentUpdate。\n不过，pureComponent中的 shouldComponentUpdate() 进行的是浅比较，也就是说如果是引用数据类型的数据，只会比较不是同一个地址，而不会比较这个地址里面的数据是否一致。浅比较会忽略属性和或状态突变情况，其实也就是数据引用指针没有变化，而数据发生改变的时候render是不会执行的。如果需要重新渲染那么就需要重新开辟空间引用数据。PureComponent一般会用在一些纯展示组件上。\n使用pureComponent的好处：当组件更新时，如果组件的props或者state都没有改变，render函数就不会触发。省去虚拟DOM的生成和对比过程，达到提升性能的目的。这是因为react自动做了一层浅比较。\n7. Component, Element, Instance 之间有什么区别和联系？\n元素： 一个元素element是一个普通对象(plain object)，描述了对于一个DOM节点或者其他组件component，你想让它在屏幕上呈现成什么样子。元素element可以在它的属性props中包含其他元素(译注:用于形成元素树)。创建一个React元素element成本很低。元素element创建之后是不可变的。\n组件： 一个组件component可以通过多种方式声明。可以是带有一个render()方法的类，简单点也可以定义为一个函数。这两种情况下，它都把属性props作为输入，把返回的一棵元素树作为输出。\n实例： 一个实例instance是你在所写的组件类component class中使用关键字this所指向的东西(译注:组件实例)。它用来存储本地状态和响应生命周期事件很有用。\n\n函数式组件(Functional component)根本没有实例instance。类组件(Class component)有实例instance，但是永远也不需要直接创建一个组件的实例，因为React帮我们做了这些。\n8. React.createClass和extends Component的区别有哪些？React.createClass和extends Component的bai区别主要在于：\n（1）语法区别\n\ncreateClass本质上是一个工厂函数，extends的方式更加接近最新的ES6规范的class写法。两种方式在语法上的差别主要体现在方法的定义和静态属性的声明上。\ncreateClass方式的方法定义使用逗号，隔开，因为creatClass本质上是一个函数，传递给它的是一个Object；而class的方式定义方法时务必谨记不要使用逗号隔开，这是ES6 class的语法规范。\n\n（2）propType 和 getDefaultProps\n\nReact.createClass：通过proTypes对象和getDefaultProps()方法来设置和获取props.\nReact.Component：通过设置两个属性propTypes和defaultProps\n\n（3）状态的区别\n\nReact.createClass：通过getInitialState()方法返回一个包含初始值的对象\nReact.Component：通过constructor设置初始状态\n\n（4）this区别\n\nReact.createClass：会正确绑定this\nReact.Component：由于使用了 ES6，这里会有些微不同，属性并不会自动绑定到 React 类的实例上。\n\n（5）Mixins\n\nReact.createClass：使用 React.createClass 的话，可以在创建组件时添加一个叫做 mixins 的属性，并将可供混合的类的集合以数组的形式赋给 mixins。\n如果使用 ES6 的方式来创建组件，那么 React mixins 的特性将不能被使用了。\n\n9. React 高阶组件是什么，和普通组件有什么区别，适用什么场景官方解释∶\n\n\n\n\n\n\n\n\n\n高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧。HOC 自身不是 React API 的一部分，它是一种基于 React 的组合特性而形成的设计模式。\n高阶组件（HOC）就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件，它只是一种组件的设计模式，这种设计模式是由react自身的组合性质必然产生的。我们将它们称为纯组件，因为它们可以接受任何动态提供的子组件，但它们不会修改或复制其输入组件中的任何行为。\n// hoc的定义\nfunction withSubscription(WrappedComponent, selectData) &#123;\n  return class extends React.Component &#123;\n    constructor(props) &#123;\n      super(props);\n      this.state = &#123;\n        data: selectData(DataSource, props)\n      &#125;;\n    &#125;\n    // 一些通用的逻辑处理\n    render() &#123;\n      // ... 并使用新数据渲染被包装的组件!\n      return &lt;WrappedComponent data=&#123;this.state.data&#125; &#123;...this.props&#125; />;\n    &#125;\n  &#125;;\n\n// 使用\nconst BlogPostWithSubscription = withSubscription(BlogPost,\n  (DataSource, props) => DataSource.getBlogPost(props.id));\n\n1）HOC的优缺点\n\n优点∶ 逻辑服用、不影响被包裹组件的内部逻辑。\n缺点∶hoc传递给被包裹组件的props容易和被包裹后的组件重名，进而被覆盖\n\n2）适用场景\n\n代码复用，逻辑抽象\n渲染劫持\nState 抽象和更改\nProps 更改\n\n3）具体应用例子\n\n权限控制： 利用高阶组件的 条件渲染 特性可以对页面进行权限控制，权限控制一般分为两个维度：页面级别和 页面元素级别\n\n// HOC.js\nfunction withAdminAuth(WrappedComponent) &#123;\n    return class extends React.Component &#123;\n        state = &#123;\n            isAdmin: false,\n        &#125;\n        async UNSAFE_componentWillMount() &#123;\n            const currentRole = await getCurrentUserRole();\n            this.setState(&#123;\n                isAdmin: currentRole === 'Admin',\n            &#125;);\n        &#125;\n        render() &#123;\n            if (this.state.isAdmin) &#123;\n                return &lt;WrappedComponent &#123;...this.props&#125; />;\n            &#125; else &#123;\n                return (&lt;div>您没有权限查看该页面，请联系管理员！&lt;/div>);\n            &#125;\n        &#125;\n    &#125;;\n&#125;\n\n// pages/page-a.js\nclass PageA extends React.Component &#123;\n    constructor(props) &#123;\n        super(props);\n        // something here...\n    &#125;\n    UNSAFE_componentWillMount() &#123;\n        // fetching data\n    &#125;\n    render() &#123;\n        // render page with data\n    &#125;\n&#125;\nexport default withAdminAuth(PageA);\n\n\n// pages/page-b.js\nclass PageB extends React.Component &#123;\n    constructor(props) &#123;\n        super(props);\n    // something here...\n        &#125;\n    UNSAFE_componentWillMount() &#123;\n    // fetching data\n    &#125;\n    render() &#123;\n    // render page with data\n    &#125;\n&#125;\nexport default withAdminAuth(PageB);\n\n\n组件渲染性能追踪： 借助父组件子组件生命周期规则捕获子组件的生命周期，可以方便的对某个组件的渲染时间进行记录∶\n\nclass Home extends React.Component &#123;\n        render() &#123;\n            return (&lt;h1>Hello World.&lt;/h1>);\n        &#125;\n    &#125;\n    function withTiming(WrappedComponent) &#123;\n        return class extends WrappedComponent &#123;\n            constructor(props) &#123;\n                super(props);\n                this.start = 0;\n                this.end = 0;\n            &#125;\n            UNSAFE_componentWillMount() &#123;\n                super.componentWillMount &amp;&amp; super.componentWillMount();\n                this.start = Date.now();\n            &#125;\n            componentDidMount() &#123;\n                super.componentDidMount &amp;&amp; super.componentDidMount();\n                this.end = Date.now();\n                console.log(`$&#123;WrappedComponent.name&#125; 组件渲染时间为 $&#123;this.end - this.start&#125; ms`);\n            &#125;\n            render() &#123;\n                return super.render();\n            &#125;\n        &#125;;\n    &#125;\n&#125;\n\n    export default withTiming(Home);   \n\n注意：withTiming 是利用 反向继承 实现的一个高阶组件，功能是计算被包裹组件（这里是 Home 组件）的渲染时间。\n\n页面复用\n\nconst withFetching = fetching => WrappedComponent => &#123;\n    return class extends React.Component &#123;\n        state = &#123;\n            data: [],\n        &#125;\n        async UNSAFE_componentWillMount() &#123;\n            const data = await fetching();\n            this.setState(&#123;\n                data,\n            &#125;);\n        &#125;\n        render() &#123;\n            return &lt;WrappedComponent data=&#123;this.state.data&#125; &#123;...this.props&#125; />;\n        &#125;\n    &#125;\n&#125;\n\n// pages/page-a.js\nexport default withFetching(fetching('science-fiction'))(MovieList);\n// pages/page-b.js\nexport default withFetching(fetching('action'))(MovieList);\n// pages/page-other.js\nexport default withFetching(fetching('some-other-type'))(MovieList);\n复制代码\n\n10. 对componentWillReceiveProps 的理解该方法当props发生变化时执行，初始化render时不执行，在这个回调函数里面，你可以根据属性的变化，通过调用this.setState()来更新你的组件状态，旧的属性还是可以通过this.props来获取,这里调用更新状态是安全的，并不会触发额外的render调用。\n使用好处： 在这个生命周期中，可以在子组件的render函数执行前获取新的props，从而更新子组件自己的state。 可以将数据请求放在这里进行执行，需要传的参数则从componentWillReceiveProps(nextProps)中获取。而不必将所有的请求都放在父组件中。于是该请求只会在该组件渲染时才会发出，从而减轻请求负担。\ncomponentWillReceiveProps在初始化render的时候不会执行，它会在Component接受到新的状态(Props)时被触发，一般用于父组件状态更新时子组件的重新渲染。\n11. 哪些方法会触发 React 重新渲染？重新渲染 render 会做些什么？（1）哪些方法会触发 react 重新渲染?\n\nsetState（）方法被调用\n\nsetState 是 React 中最常用的命令，通常情况下，执行 setState 会触发 render。但是这里有个点值得关注，执行 setState 的时候不一定会重新渲染。当 setState 传入 null 时，并不会触发 render。\nclass App extends React.Component &#123;\n  state = &#123;\n    a: 1\n  &#125;;\n\n  render() &#123;\n    console.log(\"render\");\n    return (\n      &lt;React.Fragement>\n        &lt;p>&#123;this.state.a&#125;&lt;/p>\n        &lt;button\n          onClick=&#123;() => &#123;\n            this.setState(&#123; a: 1 &#125;); // 这里并没有改变 a 的值\n          &#125;&#125;\n        >\n          Click me\n        &lt;/button>\n        &lt;button onClick=&#123;() => this.setState(null)&#125;>setState null&lt;/button>\n        &lt;Child />\n      &lt;/React.Fragement>\n    );\n  &#125;\n&#125;\n复制代码\n\n\n父组件重新渲染\n\n只要父组件重新渲染了，即使传入子组件的 props 未发生变化，那么子组件也会重新渲染，进而触发 render\n（2）重新渲染 render 会做些什么?\n\n会对新旧 VNode 进行对比，也就是我们所说的Diff算法。\n对新旧两棵树进行一个深度优先遍历，这样每一个节点都会一个标记，在到深度遍历的时候，每遍历到一和个节点，就把该节点和新的节点树进行对比，如果有差异就放到一个对象里面\n遍历差异对象，根据差异的类型，根据对应对规则更新VNode\n\nReact 的处理 render 的基本思维模式是每次一有变动就会去重新渲染整个应用。在 Virtual DOM 没有出现之前，最简单的方法就是直接调用 innerHTML。Virtual DOM厉害的地方并不是说它比直接操作 DOM 快，而是说不管数据怎么变，都会尽量以最小的代价去更新 DOM。React 将 render 函数返回的虚拟 DOM 树与老的进行比较，从而确定 DOM 要不要更新、怎么更新。当 DOM 树很大时，遍历两棵树进行各种比对还是相当耗性能的，特别是在顶层 setState 一个微小的修改，默认会去遍历整棵树。尽管 React 使用高度优化的 Diff 算法，但是这个过程仍然会损耗性能.\n12. React如何判断什么时候重新渲染组件？组件状态的改变可以因为props的改变，或者直接通过setState方法改变。组件获得新的状态，然后React决定是否应该重新渲染组件。只要组件的state发生变化，React就会对组件进行重新渲染。这是因为React中的shouldComponentUpdate方法默认返回true，这就是导致每次更新都重新渲染的原因。\n当React将要渲染组件时会执行shouldComponentUpdate方法来看它是否返回true（组件应该更新，也就是重新渲染）。所以需要重写shouldComponentUpdate方法让它根据情况返回true或者false来告诉React什么时候重新渲染什么时候跳过重新渲染。\n13. React声明组件有哪几种方法，有什么不同？React 声明组件的三种方式：\n\n函数式定义的无状态组件\nES5原生方式React.createClass定义的组件\nES6形式的extends React.Component定义的组件\n\n（1）无状态函数式组件 它是为了创建纯展示组件，这种组件只负责根据传入的props来展示，不涉及到state状态的操作 组件不会被实例化，整体渲染性能得到提升，不能访问this对象，不能访问生命周期的方法\n（2）ES5 原生方式 React.createClass // RFC React.createClass会自绑定函数方法，导致不必要的性能开销，增加代码过时的可能性。\n（3）E6继承形式 React.Component // RCC 目前极为推荐的创建有状态组件的方式，最终会取代React.createClass形式；相对于 React.createClass可以更好实现代码复用。\n无状态组件相对于于后者的区别： 与无状态组件相比，React.createClass和React.Component都是创建有状态的组件，这些组件是要被实例化的，并且可以访问组件的生命周期方法。\nReact.createClass与React.Component区别：\n① 函数this自绑定\n\nReact.createClass创建的组件，其每一个成员函数的this都有React自动绑定，函数中的this会被正确设置。\nReact.Component创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对象。\n\n② 组件属性类型propTypes及其默认props属性defaultProps配置不同\n\nReact.createClass在创建组件时，有关组件props的属性类型及组件默认的属性会作为组件实例的属性来配置，其中defaultProps是使用getDefaultProps的方法来获取默认组件属性的\nReact.Component在创建组件时配置这两个对应信息时，他们是作为组件类的属性，不是组件实例的属性，也就是所谓的类的静态属性来配置的。\n\n③ 组件初始状态state的配置不同\n\nReact.createClass创建的组件，其状态state是通过getInitialState方法来配置组件相关的状态；\nReact.Component创建的组件，其状态state是在constructor中像初始化组件属性一样声明的。\n\n14. 对有状态组件和无状态组件的理解及使用场景（1）有状态组件\n特点：\n\n是类组件\n有继承\n可以使用this\n可以使用react的生命周期\n使用较多，容易频繁触发生命周期钩子函数，影响性能\n内部使用 state，维护自身状态的变化，有状态组件根据外部组件传入的 props 和自身的 state进行渲染。\n\n使用场景：\n\n需要使用到状态的。\n需要使用状态操作组件的（无状态组件的也可以实现新版本react hooks也可实现）\n\n总结： 类组件可以维护自身的状态变量，即组件的 state ，类组件还有不同的生命周期方法，可以让开发者能够在组件的不同阶段（挂载、更新、卸载），对组件做更多的控制。类组件则既可以充当无状态组件，也可以充当有状态组件。当一个类组件不需要管理自身状态时，也可称为无状态组件。\n（2）无状态组件 特点：\n\n不依赖自身的状态state\n可以是类组件或者函数组件。\n可以完全避免使用 this 关键字。（由于使用的是箭头函数事件无需绑定）\n有更高的性能。当不需要使用生命周期钩子时，应该首先使用无状态函数组件\n组件内部不维护 state ，只根据外部组件传入的 props 进行渲染的组件，当 props 改变时，组件重新渲染。\n\n使用场景：\n\n组件不需要管理 state，纯展示\n\n优点：\n\n简化代码、专注于 render\n组件不需要被实例化，无生命周期，提升性能。 输出（渲染）只取决于输入（属性），无副作用\n视图和数据的解耦分离\n\n缺点：\n\n无法使用 ref\n无生命周期方法\n无法控制组件的重渲染，因为无法使用shouldComponentUpdate 方法，当组件接受到新的属性时则会重渲染\n\n总结： 组件内部状态且与外部无关的组件，可以考虑用状态组件，这样状态树就不会过于复杂，易于理解和管理。当一个组件不需要管理自身状态时，也就是无状态组件，应该优先设计为函数组件。比如自定义的 &lt;Button/&gt;、 &lt;Input /&gt; 等组件。\n15. 对React中Fragment的理解，它的使用场景是什么？在React中，组件返回的元素只能有一个根元素。为了不添加多余的DOM节点，我们可以使用Fragment标签来包裹所有的元素，Fragment标签不会渲染出任何元素。React官方对Fragment的解释：\n\n\n\n\n\n\n\n\n\nReact 中的一个常见模式是一个组件返回多个元素。Fragments 允许你将子列表分组，而无需向 DOM 添加额外节点。\nimport React, &#123; Component, Fragment &#125; from 'react'\n\n// 一般形式\nrender() &#123;\n  return (\n    &lt;React.Fragment>\n      &lt;ChildA />\n      &lt;ChildB />\n      &lt;ChildC />\n    &lt;/React.Fragment>\n  );\n&#125;\n// 也可以写成以下形式\nrender() &#123;\n  return (\n    &lt;>\n      &lt;ChildA />\n      &lt;ChildB />\n      &lt;ChildC />\n    &lt;/>\n  );\n&#125;\n复制代码\n\n16. React如何获取组件对应的DOM元素？可以用ref来获取某个子节点的实例，然后通过当前class组件实例的一些特定属性来直接获取子节点实例。ref有三种实现方法:\n\n字符串格式：字符串格式，这是React16版本之前用得最多的，例如：&lt;p ref=&quot;info&quot;&gt;span&lt;/p&gt;\n函数格式：ref对应一个方法，该方法有一个参数，也就是对应的节点实例，例如：&lt;p ref=&#123;ele =&gt; this.info = ele&#125;&gt;&lt;/p&gt;\ncreateRef方法：React 16提供的一个API，使用React.createRef()来实现 　　　　　　 \n\n17. React中可以在render访问refs吗？为什么？&lt;>\n  &lt;span id=\"name\" ref=&#123;this.spanRef&#125;>&#123;this.state.title&#125;&lt;/span>\n  &lt;span>&#123;\n     this.spanRef.current ? '有值' : '无值'\n  &#125;&lt;/span>\n&lt;/>\n复制代码\n\n不可以，render 阶段 DOM 还没有生成，无法获取 DOM。DOM 的获取需要在 pre-commit 阶段和 commit 阶段： \n18. 对React的插槽(Portals)的理解，如何使用，有哪些使用场景React 官方对 Portals 的定义：\n\n\n\n\n\n\n\n\n\nPortal 提供了一种将子节点渲染到存在于父组件以外的 DOM 节点的优秀的方案\nPortals 是React 16提供的官方解决方案，使得组件可以脱离父组件层级挂载在DOM树的任何位置。通俗来讲，就是我们 render 一个组件，但这个组件的 DOM 结构并不在本组件内。\nPortals语法如下：\nReactDOM.createPortal(child, container);\n复制代码\n\n\n第一个参数 child 是可渲染的 React 子项，比如元素，字符串或者片段等;\n第二个参数 container 是一个 DOM 元素。\n\n一般情况下，组件的render函数返回的元素会被挂载在它的父级组件上：\nimport DemoComponent from './DemoComponent';\nrender() &#123;\n  // DemoComponent元素会被挂载在id为parent的div的元素上\n  return (\n    &lt;div id=\"parent\">\n        &lt;DemoComponent />\n    &lt;/div>\n  );\n&#125;\n复制代码\n\n然而，有些元素需要被挂载在更高层级的位置。最典型的应用场景：当父组件具有overflow: hidden或者z-index的样式设置时，组件有可能被其他元素遮挡，这时就可以考虑要不要使用Portal使组件的挂载脱离父组件。例如：对话框，模态窗。\nimport DemoComponent from './DemoComponent';\nrender() &#123;\n  // DemoComponent元素会被挂载在id为parent的div的元素上\n  return (\n    &lt;div id=\"parent\">\n        &lt;DemoComponent />\n    &lt;/div>\n  );\n&#125;\n复制代码\n\n19. 在React中如何避免不必要的render？React 基于虚拟 DOM 和高效 Diff 算法的完美配合，实现了对 DOM 最小粒度的更新。大多数情况下，React 对 DOM 的渲染效率足以业务日常。但在个别复杂业务场景下，性能问题依然会困扰我们。此时需要采取一些措施来提升运行性能，其很重要的一个方向，就是避免不必要的渲染（Render）。这里提下优化的点：\n\nshouldComponentUpdate 和 PureComponent\n\n在 React 类组件中，可以利用 shouldComponentUpdate或者 PureComponent 来减少因父组件更新而触发子组件的 render，从而达到目的。shouldComponentUpdate 来决定是否组件是否重新渲染，如果不希望组件重新渲染，返回 false 即可。\n\n利用高阶组件\n\n在函数组件中，并没有 shouldComponentUpdate 这个生命周期，可以利用高阶组件，封装一个类似 PureComponet 的功能\n\n使用 React.memo\n\nReact.memo 是 React 16.6 新的一个 API，用来缓存组件的渲染，避免不必要的更新，其实也是一个高阶组件，与 PureComponent 十分类似，但不同的是， React.memo只能用于函数组件。\n20. 对 React-Intl 的理解，它的工作原理？React-intl是雅虎的语言国际化开源项目FormatJS的一部分，通过其提供的组件和API可以与ReactJS绑定。\nReact-intl提供了两种使用方法，一种是引用React组件，另一种是直接调取API，官方更加推荐在React项目中使用前者，只有在无法使用React组件的地方，才应该调用框架提供的API。它提供了一系列的React组件，包括数字格式化、字符串格式化、日期格式化等。\n在React-intl中，可以配置不同的语言包，他的工作原理就是根据需要，在语言包之间进行切换。\n21. 对 React context 的理解在React中，数据传递一般使用props传递数据，维持单向数据流，这样可以让组件之间的关系变得简单且可预测，但是单项数据流在某些场景中并不适用。单纯一对的父子组件传递并无问题，但要是组件之间层层依赖深入，props就需要层层传递显然，这样做太繁琐了。\nContext 提供了一种在组件之间共享此类值的方式，而不必显式地通过组件树的逐层传递 props。\n可以把context当做是特定一个组件树内共享的store，用来做数据传递。简单说就是，当你不想在组件树中通过逐层传递props或者state的方式来传递数据时，可以使用Context来实现跨层级的组件数据传递。\nJS的代码块在执行期间，会创建一个相应的作用域链，这个作用域链记录着运行时JS代码块执行期间所能访问的活动对象，包括变量和函数，JS程序通过作用域链访问到代码块内部或者外部的变量和函数。\n假如以JS的作用域链作为类比，React组件提供的Context对象其实就好比一个提供给子组件访问的作用域，而 Context对象的属性可以看成作用域上的活动对象。由于组件 的 Context 由其父节点链上所有组件通 过 getChildContext（）返回的Context对象组合而成，所以，组件通过Context是可以访问到其父组件链上所有节点组件提供的Context的属性。\n22. 为什么React并不推荐优先考虑使用Context？\nContext目前还处于实验阶段，可能会在后面的发行版本中有很大的变化，事实上这种情况已经发生了，所以为了避免给今后升级带来大的影响和麻烦，不建议在app中使用context。\n尽管不建议在app中使用context，但是独有组件而言，由于影响范围小于app，如果可以做到高内聚，不破坏组件树之间的依赖关系，可以考虑使用context\n对于组件之间的数据通信或者状态管理，有效使用props或者state解决，然后再考虑使用第三方的成熟库进行解决，以上的方法都不是最佳的方案的时候，在考虑context。\ncontext的更新需要通过setState()触发，但是这并不是很可靠的，Context支持跨组件的访问，但是如果中间的子组件通过一些方法不影响更新，比如 shouldComponentUpdate() 返回false 那么不能保证Context的更新一定可以使用Context的子组件，因此，Context的可靠性需要关注\n\n23. React中什么是受控组件和非控组件？（1）受控组件 在使用表单来收集用户输入时，例如&lt;input&gt;&lt;select&gt;&lt;textearea&gt;等元素都要绑定一个change事件，当表单的状态发生变化，就会触发onChange事件，更新组件的state。这种组件在React中被称为受控组件，在受控组件中，组件渲染出的状态与它的value或checked属性相对应，react通过这种方式消除了组件的局部状态，使整个状态可控。react官方推荐使用受控表单组件。\n受控组件更新state的流程：\n\n可以通过初始state中设置表单的默认值\n每当表单的值发生变化时，调用onChange事件处理器\n事件处理器通过事件对象e拿到改变后的状态，并更新组件的state\n一旦通过setState方法更新state，就会触发视图的重新渲染，完成表单组件的更新\n\n受控组件缺陷： 表单元素的值都是由React组件进行管理，当有多个输入框，或者多个这种组件时，如果想同时获取到全部的值就必须每个都要编写事件处理函数，这会让代码看着很臃肿，所以为了解决这种情况，出现了非受控组件。\n（2）非受控组件 如果一个表单组件没有value props（单选和复选按钮对应的是checked props）时，就可以称为非受控组件。在非受控组件中，可以使用一个ref来从DOM获得表单值。而不是为每个状态更新编写一个事件处理程序。\nReact官方的解释：\n\n\n\n\n\n\n\n\n\n要编写一个非受控组件，而不是为每个状态更新都编写数据处理函数，你可以使用 ref来从 DOM 节点中获取表单数据。 因为非受控组件将真实数据储存在 DOM 节点中，所以在使用非受控组件时，有时候反而更容易同时集成 React 和非 React 代码。如果你不介意代码美观性，并且希望快速编写代码，使用非受控组件往往可以减少你的代码量。否则，你应该使用受控组件。\n例如，下面的代码在非受控组件中接收单个属性：\nclass NameForm extends React.Component &#123;\n  constructor(props) &#123;\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  &#125;\n  handleSubmit(event) &#123;\n    alert('A name was submitted: ' + this.input.value);\n    event.preventDefault();\n  &#125;\n  render() &#123;\n    return (\n      &lt;form onSubmit=&#123;this.handleSubmit&#125;>\n        &lt;label>\n          Name:\n          &lt;input type=\"text\" ref=&#123;(input) => this.input = input&#125; />\n        &lt;/label>\n        &lt;input type=\"submit\" value=\"Submit\" />\n      &lt;/form>\n    );\n  &#125;\n&#125;\n复制代码\n\n总结： 页面中所有输入类的DOM如果是现用现取的称为非受控组件，而通过setState将输入的值维护到了state中，需要时再从state中取出，这里的数据就受到了state的控制，称为受控组件。\n24. React中refs的作用是什么？有哪些应用场景？Refs 提供了一种方式，用于访问在 render 方法中创建的 React 元素或 DOM 节点。Refs 应该谨慎使用，如下场景使用 Refs 比较适合：\n\n处理焦点、文本选择或者媒体的控制\n触发必要的动画\n集成第三方 DOM 库\n\nRefs 是使用 React.createRef() 方法创建的，他通过 ref 属性附加到 React 元素上。要在整个组件中使用 Refs，需要将 ref 在构造函数中分配给其实例属性：\nclass MyComponent extends React.Component &#123;\n  constructor(props) &#123;\n    super(props)\n    this.myRef = React.createRef()\n  &#125;\n  render() &#123;\n    return &lt;div ref=&#123;this.myRef&#125; />\n  &#125;\n&#125;\n复制代码\n\n由于函数组件没有实例，因此不能在函数组件上直接使用 ref：\nfunction MyFunctionalComponent() &#123;\n  return &lt;input />;\n&#125;\nclass Parent extends React.Component &#123;\n  constructor(props) &#123;\n    super(props);\n    this.textInput = React.createRef();\n  &#125;\n  render() &#123;\n    // 这将不会工作！\n    return (\n      &lt;MyFunctionalComponent ref=&#123;this.textInput&#125; />\n    );\n  &#125;\n&#125;\n复制代码\n\n但可以通过闭合的帮助在函数组件内部进行使用 Refs：\nfunction CustomTextInput(props) &#123;\n  // 这里必须声明 textInput，这样 ref 回调才可以引用它\n  let textInput = null;\n  function handleClick() &#123;\n    textInput.focus();\n  &#125;\n  return (\n    &lt;div>\n      &lt;input\n        type=\"text\"\n        ref=&#123;(input) => &#123; textInput = input; &#125;&#125; />\n      &lt;input\n        type=\"button\"\n        value=\"Focus the text input\"\n        onClick=&#123;handleClick&#125;\n      />\n    &lt;/div>\n  );  \n&#125;\n复制代码\n\n注意：\n\n不应该过度的使用 Refs\n\n```ref\n\n   的返回值取决于节点的类型：\n\n  - 当 &#96;ref&#96; 属性被用于一个普通的 HTML 元素时，&#96;React.createRef()&#96; 将接收底层 DOM 元素作为他的 &#96;current&#96; 属性以创建 &#96;ref&#96;。\n  - 当 &#96;ref&#96; 属性被用于一个自定义的类组件时，&#96;ref&#96; 对象将接收该组件已挂载的实例作为他的 &#96;current&#96;。\n\n- 当在父组件中需要访问子组件中的 &#96;ref&#96; 时可使用传递 Refs 或回调 Refs。\n\n### 26. React组件的构造函数有什么作用？它是必须的吗？\n\n构造函数主要用于两个目的：\n\n- 通过将对象分配给this.state来初始化本地状态\n- 将事件处理程序方法绑定到实例上\n\n所以，当在React class中需要设置state的初始值或者绑定事件时，需要加上构造函数，官方Demo：\n\n&#96;&#96;&#96;javascript\nclass LikeButton extends React.Component &#123;\n  constructor() &#123;\n    super();\n    this.state &#x3D; &#123;\n      liked: false\n    &#125;;\n    this.handleClick &#x3D; this.handleClick.bind(this);\n  &#125;\n  handleClick() &#123;\n    this.setState(&#123;liked: !this.state.liked&#125;);\n  &#125;\n  render() &#123;\n    const text &#x3D; this.state.liked ? &#39;liked&#39; : &#39;haven\\&#39;t liked&#39;;\n    return (\n      &lt;div onClick&#x3D;&#123;this.handleClick&#125;&gt;\n        You &#123;text&#125; this. Click to toggle.\n      &lt;&#x2F;div&gt;\n    );\n  &#125;\n&#125;\nReactDOM.render(\n  &lt;LikeButton &#x2F;&gt;,\n  document.getElementById(&#39;example&#39;)\n);\n复制代码\n\n构造函数用来新建父类的this对象；子类必须在constructor方法中调用super方法；否则新建实例时会报错；因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法；子类就得不到this对象。\n注意：\n\nconstructor () 必须配上 super(), 如果要在constructor 内部使用 this.props 就要 传入props , 否则不用\nJavaScript中的 bind 每次都会返回一个新的函数, 为了性能等考虑, 尽量在constructor中绑定事件\n\n27. React.forwardRef是什么？它有什么作用？React.forwardRef 会创建一个React组件，这个组件能够将其接受的 ref 属性转发到其组件树下的另一个组件中。这种技术并不常见，但在以下两种场景中特别有用：\n\n转发 refs 到 DOM 组件\n在高阶组件中转发 refs\n\n28. 类组件与函数组件有什么异同？相同点： 组件是 React 可复用的最小代码片段，它们会返回要在页面中渲染的 React 元素。也正因为组件是 React 的最小编码单位，所以无论是函数组件还是类组件，在使用方式和最终呈现效果上都是完全一致的。\n我们甚至可以将一个类组件改写成函数组件，或者把函数组件改写成一个类组件（虽然并不推荐这种重构行为）。从使用者的角度而言，很难从使用体验上区分两者，而且在现代浏览器中，闭包和类的性能只在极端场景下才会有明显的差别。所以，基本可认为两者作为组件是完全一致的。\n不同点：\n\n它们在开发时的心智模型上却存在巨大的差异。类组件是基于面向对象编程的，它主打的是继承、生命周期等核心概念；而函数组件内核是函数式编程，主打的是 immutable、没有副作用、引用透明等特点。\n之前，在使用场景上，如果存在需要使用生命周期的组件，那么主推类组件；设计模式上，如果需要使用继承，那么主推类组件。但现在由于 React Hooks 的推出，生命周期概念的淡出，函数组件可以完全取代类组件。其次继承并不是组件最佳的设计模式，官方更推崇“组合优于继承”的设计概念，所以类组件在这方面的优势也在淡出。\n性能优化上，类组件主要依靠 shouldComponentUpdate 阻断渲染来提升性能，而函数组件依靠 React.memo 缓存渲染结果来提升性能。\n从上手程度而言，类组件更容易上手，从未来趋势上看，由于React Hooks 的推出，函数组件成了社区未来主推的方案。\n类组件在未来时间切片与并发模式中，由于生命周期带来的复杂度，并不易于优化。而函数组件本身轻量简单，且在 Hooks 的基础上提供了比原先更细粒度的逻辑组织与复用，更能适应 React 的未来发展。\n\n二、数据管理1. React setState 调用的原理 具体的执行过程如下（源码级解析）：\n\n首先调用了setState 入口函数，入口函数在这里就是充当一个分发器的角色，根据入参的不同，将其分发到不同的功能函数中去；\n\nReactComponent.prototype.setState = function (partialState, callback) &#123;\n  this.updater.enqueueSetState(this, partialState);\n  if (callback) &#123;\n    this.updater.enqueueCallback(this, callback, 'setState');\n  &#125;\n&#125;;\n复制代码\n\n\nenqueueSetState 方法将新的 state 放进组件的状态队列里，并调用 enqueueUpdate 来处理将要更新的实例对象；\n\nenqueueSetState: function (publicInstance, partialState) &#123;\n  // 根据 this 拿到对应的组件实例\n  var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');\n  // 这个 queue 对应的就是一个组件实例的 state 数组\n  var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);\n  queue.push(partialState);\n  //  enqueueUpdate 用来处理当前的组件实例\n  enqueueUpdate(internalInstance);\n&#125;\n复制代码\n\n\n在 enqueueUpdate 方法中引出了一个关键的对象——batchingStrategy，该对象所具备的isBatchingUpdates 属性直接决定了当下是要走更新流程，还是应该排队等待；如果轮到执行，就调用 batchedUpdates 方法来直接发起更新流程。由此可以推测，batchingStrategy 或许正是 React 内部专门用于管控批量更新的对象。\n\nfunction enqueueUpdate(component) &#123;\n  ensureInjected();\n  // 注意这一句是问题的关键，isBatchingUpdates标识着当前是否处于批量创建/更新组件的阶段\n  if (!batchingStrategy.isBatchingUpdates) &#123;\n    // 若当前没有处于批量创建/更新组件的阶段，则立即更新组件\n    batchingStrategy.batchedUpdates(enqueueUpdate, component);\n    return;\n  &#125;\n  // 否则，先把组件塞入 dirtyComponents 队列里，让它“再等等”\n  dirtyComponents.push(component);\n  if (component._updateBatchNumber == null) &#123;\n    component._updateBatchNumber = updateBatchNumber + 1;\n  &#125;\n&#125;\n复制代码\n\n注意：batchingStrategy 对象可以理解为“锁管理器”。这里的“锁”，是指 React 全局唯一的 isBatchingUpdates 变量，isBatchingUpdates 的初始值是 false，意味着“当前并未进行任何批量更新操作”。每当 React 调用 batchedUpdate 去执行更新动作时，会先把这个锁给“锁上”（置为 true），表明“现在正处于批量更新过程中”。当锁被“锁上”的时候，任何需要更新的组件都只能暂时进入 dirtyComponents 里排队等候下一次的批量更新，而不能随意“插队”。此处体现的“任务锁”的思想，是 React 面对大量状态仍然能够实现有序分批处理的基石。\n2. React setState 调用之后发生了什么？是同步还是异步？（1）React中setState后发生了什么\n在代码中调用setState函数之后，React 会将传入的参数对象与组件当前的状态合并，然后触发调和过程(Reconciliation)。经过调和过程，React 会以相对高效的方式根据新的状态构建 React 元素树并且着手重新渲染整个UI界面。\n在 React 得到元素树之后，React 会自动计算出新的树与老树的节点差异，然后根据差异对界面进行最小化重渲染。在差异计算算法中，React 能够相对精确地知道哪些位置发生了改变以及应该如何改变，这就保证了按需更新，而不是全部重新渲染。\n如果在短时间内频繁setState。React会将state的改变压入栈中，在合适的时机，批量更新state和视图，达到提高性能的效果。\n（2）setState 是同步还是异步的\n假如所有setState是同步的，意味着每执行一次setState时（有可能一个同步代码中，多次setState），都重新vnode diff + dom修改，这对性能来说是极为不好的。如果是异步，则可以把一个同步代码中的多个setState合并成一次组件更新。所以默认是异步的，但是在一些情况下是同步的。\nsetState 并不是单纯同步/异步的，它的表现会因调用场景的不同而不同。在源码中，通过 isBatchingUpdates 来判断setState 是先存进 state 队列还是直接更新，如果值为 true 则执行异步操作，为 false 则直接更新。\n\n异步： 在 React 可以控制的地方，就为 true，比如在 React 生命周期事件和合成事件中，都会走合并操作，延迟更新的策略。\n同步： 在 React 无法控制的地方，比如原生事件，具体就是在 addEventListener 、setTimeout、setInterval 等事件中，就只能同步更新。\n\n一般认为，做异步设计是为了性能优化、减少渲染次数：\n\nsetState设计为异步，可以显著的提升性能。如果每次调用 setState都进行一次更新，那么意味着render函数会被频繁调用，界面重新渲染，这样效率是很低的；最好的办法应该是获取到多个更新，之后进行批量更新；\n如果同步更新了state，但是还没有执行render函数，那么state和props不能保持同步。state和props不能保持一致性，会在开发中产生很多的问题；\n\n3. React中的setState批量更新的过程是什么？调用 setState 时，组件的 state 并不会立即改变， setState 只是把要修改的 state 放入一个队列， React 会优化真正的执行时机，并出于性能原因，会将 React 事件处理程序中的多次React 事件处理程序中的多次 setState 的状态修改合并成一次状态修改。 最终更新只产生一次组件及其子组件的重新渲染，这对于大型应用程序中的性能提升至关重要。\nthis.setState(&#123;\n  count: this.state.count + 1    ===>    入队，[count+1的任务]\n&#125;);\nthis.setState(&#123;\n  count: this.state.count + 1    ===>    入队，[count+1的任务，count+1的任务]\n&#125;);\n                                          ↓\n                                         合并 state，[count+1的任务]\n                                          ↓\n                                         执行 count+1的任务\n复制代码\n\n需要注意的是，只要同步代码还在执行，“攒起来”这个动作就不会停止。（注：这里之所以多次 +1 最终只有一次生效，是因为在同一个方法中多次 setState 的合并动作不是单纯地将更新累加。比如这里对于相同属性的设置，React 只会为其保留最后一次的更新）。\n4.  React中有使用过getDefaultProps吗？它有什么作用？通过实现组件的getDefaultProps，对属性设置默认值（ES5的写法）：\nvar ShowTitle = React.createClass(&#123;\n  getDefaultProps:function()&#123;\n    return&#123;\n      title : \"React\"\n    &#125;\n  &#125;,\n  render : function()&#123;\n    return &lt;h1>&#123;this.props.title&#125;&lt;/h1>\n  &#125;\n&#125;);\n复制代码\n\n5. React中setState的第二个参数作用是什么？setState 的第二个参数是一个可选的回调函数。这个回调函数将在组件重新渲染后执行。等价于在 componentDidUpdate 生命周期内执行。通常建议使用 componentDidUpdate 来代替此方式。在这个回调函数中你可以拿到更新后 state 的值：\nthis.setState(&#123;\n    key1: newState1,\n    key2: newState2,\n    ...\n&#125;, callback) // 第二个参数是 state 更新完成后的回调函数\n复制代码\n\n6. React中的setState和replaceState的区别是什么？（1）setState() setState()用于设置状态对象，其语法如下：\nsetState(object nextState[, function callback])\n复制代码\n\n\nnextState，将要设置的新状态，该状态会和当前的state合并\ncallback，可选参数，回调函数。该函数会在setState设置成功，且组件重新渲染后调用。\n\n合并nextState和当前state，并重新渲染组件。setState是React事件处理函数中和请求回调函数中触发UI更新的主要方法。\n（2）replaceState() replaceState()方法与setState()类似，但是方法只会保留nextState中状态，原state不在nextState中的状态都会被删除。其语法如下：\nreplaceState(object nextState[, function callback])\n复制代码\n\n\nnextState，将要设置的新状态，该状态会替换当前的state。\ncallback，可选参数，回调函数。该函数会在replaceState设置成功，且组件重新渲染后调用。\n\n总结： setState 是修改其中的部分状态，相当于 Object.assign，只是覆盖，不会减少原来的状态。而replaceState 是完全替换原来的状态，相当于赋值，将原来的 state 替换为另一个对象，如果新状态属性减少，那么 state 中就没有这个状态了。\n7. 在React中组件的this.state和setState有什么区别？this.state通常是用来初始化state的，this.setState是用来修改state值的。如果初始化了state之后再使用this.state，之前的state会被覆盖掉，如果使用this.setState，只会替换掉相应的state值。所以，如果想要修改state的值，就需要使用setState，而不能直接修改state，直接修改state之后页面是不会更新的。\n8. state 是怎么注入到组件的，从 reducer 到组件经历了什么样的过程通过connect和mapStateToProps将state注入到组件中：\nimport &#123; connect &#125; from 'react-redux'\nimport &#123; setVisibilityFilter &#125; from '@/reducers/Todo/actions'\nimport Link from '@/containers/Todo/components/Link'\n\nconst mapStateToProps = (state, ownProps) => (&#123;\n    active: ownProps.filter === state.visibilityFilter\n&#125;)\n\nconst mapDispatchToProps = (dispatch, ownProps) => (&#123;\n    setFilter: () => &#123;\n        dispatch(setVisibilityFilter(ownProps.filter))\n    &#125;\n&#125;)\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Link)\n复制代码\n\n上面代码中，active就是注入到Link组件中的状态。 mapStateToProps（state，ownProps）中带有两个参数，含义是∶\n\nstate-store管理的全局状态对象，所有都组件状态数据都存储在该对象中。\nownProps 组件通过props传入的参数。\n\nreducer 到组件经历的过程：\n\nreducer对action对象处理，更新组件状态，并将新的状态值返回store。\n通过connect（mapStateToProps，mapDispatchToProps）（Component）对组件 Component进行升级，此时将状态值从store取出并作为props参数传递到组件。\n\n高阶组件实现源码∶\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\n// 高阶组件 contect \nexport const connect = (mapStateToProps, mapDispatchToProps) => (WrappedComponent) => &#123;\n    class Connect extends React.Component &#123;\n        // 通过对context调用获取store\n        static contextTypes = &#123;\n            store: PropTypes.object\n        &#125;\n\n        constructor() &#123;\n            super()\n            this.state = &#123;\n                allProps: &#123;&#125;\n            &#125;\n        &#125;\n\n        // 第一遍需初始化所有组件初始状态\n        componentWillMount() &#123;\n            const store = this.context.store\n            this._updateProps()\n            store.subscribe(() => this._updateProps()); // 加入_updateProps()至store里的监听事件列表\n        &#125;\n\n        // 执行action后更新props，使组件可以更新至最新状态（类似于setState）\n        _updateProps() &#123;\n            const store = this.context.store;\n            let stateProps = mapStateToProps ?\n                mapStateToProps(store.getState(), this.props) : &#123;&#125; // 防止 mapStateToProps 没有传入\n            let dispatchProps = mapDispatchToProps ?\n                mapDispatchToProps(store.dispatch, this.props) : &#123;\n                                    dispatch: store.dispatch\n                                &#125; // 防止 mapDispatchToProps 没有传入\n            this.setState(&#123;\n                allProps: &#123;\n                    ...stateProps,\n                    ...dispatchProps,\n                    ...this.props\n                &#125;\n            &#125;)\n        &#125;\n\n        render() &#123;\n            return &lt;WrappedComponent &#123;...this.state.allProps&#125; />\n        &#125;\n    &#125;\n    return Connect\n&#125;\n复制代码\n\n9. React组件的state和props有什么区别？（1）props\nprops是一个从外部传进组件的参数，主要作为就是从父组件向子组件传递数据，它具有可读性和不变性，只能通过外部组件主动传入新的props来重新渲染子组件，否则子组件的props以及展现形式不会改变。\n（2）state\nstate的主要作用是用于组件保存、控制以及修改自己的状态，它只能在constructor中初始化，它算是组件的私有属性，不可通过外部访问和修改，只能通过组件内部的this.setState来修改，修改state属性会导致组件的重新渲染。\n（3）区别\n\nprops 是传递给组件的（类似于函数的形参），而state 是在组件内被组件自己管理的（类似于在一个函数内声明的变量）。\nprops 是不可修改的，所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。\nstate 是在组件中创建的，一般在 constructor中初始化 state。state 是多变的、可以修改，每次setState都异步更新的。\n\n10. React中的props为什么是只读的？this.props是组件之间沟通的一个接口，原则上来讲，它只能从父组件流向子组件。React具有浓重的函数式编程的思想。\n提到函数式编程就要提一个概念：纯函数。它有几个特点：\n\n给定相同的输入，总是返回相同的输出。\n过程没有副作用。\n不依赖外部状态。\n\nthis.props就是汲取了纯函数的思想。props的不可以变性就保证的相同的输入，页面显示的内容是一样的，并且不会产生副作用\n11. 在React中组件的props改变时更新组件的有哪些方法？在一个组件传入的props更新时重新渲染该组件常用的方法是在componentWillReceiveProps中将新的props更新到组件的state中（这种state被成为派生状态（Derived State）），从而实现重新渲染。React 16.3中还引入了一个新的钩子函数getDerivedStateFromProps来专门实现这一需求。\n（1）componentWillReceiveProps（已废弃）\n在react的componentWillReceiveProps(nextProps)生命周期中，可以在子组件的render函数执行前，通过this.props获取旧的属性，通过nextProps获取新的props，对比两次props是否相同，从而更新子组件自己的state。\n这样的好处是，可以将数据请求放在这里进行执行，需要传的参数则从componentWillReceiveProps(nextProps)中获取。而不必将所有的请求都放在父组件中。于是该请求只会在该组件渲染时才会发出，从而减轻请求负担。\n（2）getDerivedStateFromProps（16.3引入）\n这个生命周期函数是为了替代componentWillReceiveProps存在的，所以在需要使用componentWillReceiveProps时，就可以考虑使用getDerivedStateFromProps来进行替代。\n两者的参数是不相同的，而getDerivedStateFromProps是一个静态函数，也就是这个函数不能通过this访问到class的属性，也并不推荐直接访问属性。而是应该通过参数提供的nextProps以及prevState来进行判断，根据新传入的props来映射到state。\n需要注意的是，如果props传入的内容不需要影响到你的state，那么就需要返回一个null，这个返回值是必须的，所以尽量将其写到函数的末尾：\nstatic getDerivedStateFromProps(nextProps, prevState) &#123;\n    const &#123;type&#125; = nextProps;\n    // 当传入的type发生变化的时候，更新state\n    if (type !== prevState.type) &#123;\n        return &#123;\n            type,\n        &#125;;\n    &#125;\n    // 否则，对于state不进行任何操作\n    return null;\n&#125;\n复制代码\n\n12. React中怎么检验props？验证props的目的是什么？React为我们提供了PropTypes以供验证使用。当我们向Props传入的数据无效（向Props传入的数据类型和验证的数据类型不符）就会在控制台发出警告信息。它可以避免随着应用越来越复杂从而出现的问题。并且，它还可以让程序变得更易读。\nimport PropTypes from 'prop-types';\n\nclass Greeting extends React.Component &#123;\n  render() &#123;\n    return (\n      &lt;h1>Hello, &#123;this.props.name&#125;&lt;/h1>\n    );\n  &#125;\n&#125;\n\nGreeting.propTypes = &#123;\n  name: PropTypes.string\n&#125;;\n复制代码\n\n当然，如果项目汇中使用了TypeScript，那么就可以不用PropTypes来校验，而使用TypeScript定义接口来校验props。\n三、生命周期1. React的生命周期有哪些？React 通常将组件生命周期分为三个阶段：\n\n装载阶段（Mount），组件第一次在DOM树中被渲染的过程；\n更新过程（Update），组件状态发生变化，重新更新渲染的过程；\n卸载过程（Unmount），组件从DOM树中被移除的过程；\n\n\n1）组件挂载阶段挂载阶段组件被创建，然后组件实例插入到 DOM 中，完成组件的第一次渲染，该过程只会发生一次，在此阶段会依次调用以下这些方法：\n\nconstructor\ngetDerivedStateFromProps\nrender\ncomponentDidMount\n\n（1）constructor组件的构造函数，第一个被执行，若没有显式定义它，会有一个默认的构造函数，但是若显式定义了构造函数，我们必须在构造函数中执行 super(props)，否则无法在构造函数中拿到this。\n如果不初始化 state 或不进行方法绑定，则不需要为 React 组件实现构造函数Constructor。\nconstructor中通常只做两件事：\n\n初始化组件的 state\n给事件处理方法绑定 this\n\nconstructor(props) &#123;\n  super(props);\n  // 不要在构造函数中调用 setState，可以直接给 state 设置初始值\n  this.state = &#123; counter: 0 &#125;\n  this.handleClick = this.handleClick.bind(this)\n&#125;\n复制代码\n\n（2）getDerivedStateFromPropsstatic getDerivedStateFromProps(props, state)\n复制代码\n\n这是个静态方法，所以不能在这个函数里使用 this，有两个参数 props 和 state，分别指接收到的新参数和当前组件的 state 对象，这个函数会返回一个对象用来更新当前的 state 对象，如果不需要更新可以返回 null。\n该函数会在装载时，接收到新的 props 或者调用了 setState 和 forceUpdate 时被调用。如当接收到新的属性想修改 state ，就可以使用。\n// 当 props.counter 变化时，赋值给 state \nclass App extends React.Component &#123;\n  constructor(props) &#123;\n    super(props)\n    this.state = &#123;\n      counter: 0\n    &#125;\n  &#125;\n  static getDerivedStateFromProps(props, state) &#123;\n    if (props.counter !== state.counter) &#123;\n      return &#123;\n        counter: props.counter\n      &#125;\n    &#125;\n    return null\n  &#125;\n  \n  handleClick = () => &#123;\n    this.setState(&#123;\n      counter: this.state.counter + 1\n    &#125;)\n  &#125;\n  render() &#123;\n    return (\n      &lt;div>\n        &lt;h1 onClick=&#123;this.handleClick&#125;>Hello, world!&#123;this.state.counter&#125;&lt;/h1>\n      &lt;/div>\n    )\n  &#125;\n&#125;\n复制代码\n\n现在可以显式传入 counter ，但是这里有个问题，如果想要通过点击实现 state.counter 的增加，但这时会发现值不会发生任何变化，一直保持 props 传进来的值。这是由于在 React 16.4^ 的版本中 setState 和 forceUpdate 也会触发这个生命周期，所以当组件内部 state 变化后，就会重新走这个方法，同时会把 state 值赋值为 props 的值。因此需要多加一个字段来记录之前的 props 值，这样就会解决上述问题。具体如下：\n// 这里只列出需要变化的地方\nclass App extends React.Component &#123;\n  constructor(props) &#123;\n    super(props)\n    this.state = &#123;\n      // 增加一个 preCounter 来记录之前的 props 传来的值\n      preCounter: 0,\n      counter: 0\n    &#125;\n  &#125;\n  static getDerivedStateFromProps(props, state) &#123;\n    // 跟 state.preCounter 进行比较\n    if (props.counter !== state.preCounter) &#123;\n      return &#123;\n        counter: props.counter,\n        preCounter: props.counter\n      &#125;\n    &#125;\n    return null\n  &#125;\n  handleClick = () => &#123;\n    this.setState(&#123;\n      counter: this.state.counter + 1\n    &#125;)\n  &#125;\n  render() &#123;\n    return (\n      &lt;div>\n        &lt;h1 onClick=&#123;this.handleClick&#125;>Hello, world!&#123;this.state.counter&#125;&lt;/h1>\n      &lt;/div>\n    )\n  &#125;\n&#125;\n复制代码\n\n（3）renderrender是React 中最核心的方法，一个组件中必须要有这个方法，它会根据状态 state 和属性 props 渲染组件。这个函数只做一件事，就是返回需要渲染的内容，所以不要在这个函数内做其他业务逻辑，通常调用该方法会返回以下类型中一个：\n\nReact 元素：这里包括原生的 DOM 以及 React 组件；\n数组和 Fragment（片段）：可以返回多个元素；\nPortals（插槽）：可以将子元素渲染到不同的 DOM 子树种；\n字符串和数字：被渲染成 DOM 中的 text 节点；\n布尔值或 null：不渲染任何内容。\n\n（4）componentDidMount()componentDidMount()会在组件挂载后（插入 DOM 树中）立即调。该阶段通常进行以下操作：\n\n执行依赖于DOM的操作；\n发送网络请求；（官方建议）\n添加订阅消息（会在componentWillUnmount取消订阅）；\n\n如果在 componentDidMount 中调用 setState ，就会触发一次额外的渲染，多调用了一次 render 函数，由于它是在浏览器刷新屏幕前执行的，所以用户对此是没有感知的，但是我应当避免这样使用，这样会带来一定的性能问题，尽量是在 constructor 中初始化 state 对象。\n在组件装载之后，将计数数字变为1：\nclass App extends React.Component  &#123;\n  constructor(props) &#123;\n    super(props)\n    this.state = &#123;\n      counter: 0\n    &#125;\n  &#125;\n  componentDidMount () &#123;\n    this.setState(&#123;\n      counter: 1\n    &#125;)\n  &#125;\n  render ()  &#123;\n    return (\n      &lt;div className=\"counter\">\n        counter值: &#123; this.state.counter &#125;\n      &lt;/div>\n    )\n  &#125;\n&#125;\n复制代码\n\n2）组件更新阶段当组件的 props 改变了，或组件内部调用了 setState/forceUpdate，会触发更新重新渲染，这个过程可能会发生多次。这个阶段会依次调用下面这些方法：\n\ngetDerivedStateFromProps\nshouldComponentUpdate\nrender\ngetSnapshotBeforeUpdate\ncomponentDidUpdate\n\n（1）shouldComponentUpdateshouldComponentUpdate(nextProps, nextState)\n复制代码\n\n在说这个生命周期函数之前，来看两个问题：\n\nsetState 函数在任何情况下都会导致组件重新渲染吗？例如下面这种情况：\n\nthis.setState(&#123;number: this.state.number&#125;)\n复制代码\n\n\n如果没有调用 setState，props 值也没有变化，是不是组件就不会重新渲染？\n\n第一个问题答案是 会 ，第二个问题如果是父组件重新渲染时，不管传入的 props 有没有变化，都会引起子组件的重新渲染。\n那么有没有什么方法解决在这两个场景下不让组件重新渲染进而提升性能呢？这个时候 shouldComponentUpdate 登场了，这个生命周期函数是用来提升速度的，它是在重新渲染组件开始前触发的，默认返回 true，可以比较 this.props 和 nextProps ，this.state 和 nextState 值是否变化，来确认返回 true 或者 false。当返回 false 时，组件的更新过程停止，后续的 render、componentDidUpdate 也不会被调用。\n注意： 添加 shouldComponentUpdate 方法时，不建议使用深度相等检查（如使用 JSON.stringify()），因为深比较效率很低，可能会比重新渲染组件效率还低。而且该方法维护比较困难，建议使用该方法会产生明显的性能提升时使用。\n（2）getSnapshotBeforeUpdategetSnapshotBeforeUpdate(prevProps, prevState)\n复制代码\n\n这个方法在 render 之后，componentDidUpdate 之前调用，有两个参数 prevProps 和 prevState，表示更新之前的 props 和 state，这个函数必须要和 componentDidUpdate 一起使用，并且要有一个返回值，默认是 null，这个返回值作为第三个参数传给 componentDidUpdate。\n（3）componentDidUpdatecomponentDidUpdate() 会在更新后会被立即调用，首次渲染不会执行此方法。 该阶段通常进行以下操作：\n\n当组件更新后，对 DOM 进行操作；\n如果你对更新前后的 props 进行了比较，也可以选择在此处进行网络请求；（例如，当 props 未发生变化时，则不会执行网络请求）。\n\ncomponentDidUpdate(prevProps, prevState, snapshot)&#123;&#125;\n复制代码\n\n该方法有三个参数：\n\nprevProps: 更新前的props\nprevState: 更新前的state\nsnapshot: getSnapshotBeforeUpdate()生命周期的返回值\n\n3）组件卸载阶段卸载阶段只有一个生命周期函数，componentWillUnmount() 会在组件卸载及销毁之前直接调用。在此方法中执行必要的清理操作：\n\n清除 timer，取消网络请求或清除\n取消在 componentDidMount() 中创建的订阅等；\n\n这个生命周期在一个组件被卸载和销毁之前被调用，因此你不应该再这个方法中使用 setState，因为组件一旦被卸载，就不会再装载，也就不会重新渲染。\n4）错误处理阶段componentDidCatch(error, info)，此生命周期在后代组件抛出错误后被调用。 它接收两个参数∶\n\nerror：抛出的错误。\ninfo：带有 componentStack key 的对象，其中包含有关组件引发错误的栈信息\n\nReact常见的生命周期如下：  React常见生命周期的过程大致如下：\n\n挂载阶段，首先执行constructor构造方法，来创建组件\n创建完成之后，就会执行render方法，该方法会返回需要渲染的内容\n随后，React会将需要渲染的内容挂载到DOM树上\n挂载完成之后就会执行componentDidMount生命周期函数\n如果我们给组件创建一个props（用于组件通信）、调用setState（更改state中的数据）、调用forceUpdate（强制更新组件）时，都会重新调用render函数\nrender函数重新执行之后，就会重新进行DOM树的挂载\n挂载完成之后就会执行componentDidUpdate生命周期函数\n当移除组件时，就会执行componentWillUnmount生命周期函数\n\nReact主要生命周期总结：\n\ngetDefaultProps：这个函数会在组件创建之前被调用一次（有且仅有一次），它被用来初始化组件的 Props；\ngetInitialState：用于初始化组件的 state 值；\ncomponentWillMount：在组件创建后、render 之前，会走到 componentWillMount 阶段。这个阶段我个人一直没用过、非常鸡肋。后来React 官方已经不推荐大家在 componentWillMount 里做任何事情、到现在 React16 直接废弃了这个生命周期，足见其鸡肋程度了；\nrender：这是所有生命周期中唯一一个你必须要实现的方法。一般来说需要返回一个 jsx 元素，这时 React 会根据 props 和 state 来把组件渲染到界面上；不过有时，你可能不想渲染任何东西，这种情况下让它返回 null 或者 false 即可；\ncomponentDidMount：会在组件挂载后（插入 DOM 树中后）立即调用，标志着组件挂载完成。一些操作如果依赖获取到 DOM 节点信息，我们就会放在这个阶段来做。此外，这还是 React 官方推荐的发起 ajax 请求的时机。该方法和 componentWillMount 一样，有且仅有一次调用。\n\n2. React 废弃了哪些生命周期？为什么？被废弃的三个函数都是在render之前，因为fber的出现，很可能因为高优先级任务的出现而打断现有任务导致它们会被执行多次。另外的一个原因则是，React想约束使用者，好的框架能够让人不得已写出容易维护和扩展的代码，这一点又是从何谈起，可以从新增加以及即将废弃的生命周期分析入手\n1) componentWillMount\n首先这个函数的功能完全可以使用componentDidMount和 constructor来代替，异步获取的数据的情况上面已经说明了，而如果抛去异步获取数据，其余的即是初始化而已，这些功能都可以在constructor中执行，除此之外，如果在 willMount 中订阅事件，但在服务端这并不会执行 willUnMount事件，也就是说服务端会导致内存泄漏所以componentWilIMount完全可以不使用，但使用者有时候难免因为各 种各样的情况在 componentWilMount中做一些操作，那么React为了约束开发者，干脆就抛掉了这个API\n2) componentWillReceiveProps\n在老版本的 React 中，如果组件自身的某个 state 跟其 props 密切相关的话，一直都没有一种很优雅的处理方式去更新 state，而是需要在 componentWilReceiveProps 中判断前后两个 props 是否相同，如果不同再将新的 props更新到相应的 state 上去。这样做一来会破坏 state 数据的单一数据源，导致组件状态变得不可预测，另一方面也会增加组件的重绘次数。类似的业务需求也有很多，如一个可以横向滑动的列表，当前高亮的 Tab 显然隶属于列表自身的时，根据传入的某个值，直接定位到某个 Tab。为了解决这些问题，React引入了第一个新的生命周期：getDerivedStateFromProps。它有以下的优点∶\n\ngetDSFP是静态方法，在这里不能使用this，也就是一个纯函数，开发者不能写出副作用的代码\n开发者只能通过prevState而不是prevProps来做对比，保证了state和props之间的简单关系以及不需要处理第一次渲染时prevProps为空的情况\n基于第一点，将状态变化（setState）和昂贵操作（tabChange）区分开，更加便于 render 和 commit 阶段操作或者说优化。\n\n3) componentWillUpdate\n与 componentWillReceiveProps 类似，许多开发者也会在 componentWillUpdate 中根据 props 的变化去触发一些回调 。 但不论是 componentWilReceiveProps 还 是 componentWilUpdate，都有可能在一次更新中被调用多次，也就是说写在这里的回调函数也有可能会被调用多次，这显然是不可取的。与 componentDidMount 类 似， componentDidUpdate 也不存在这样的问题，一次更新中 componentDidUpdate 只会被调用一次，所以将原先写在 componentWillUpdate 中 的 回 调 迁 移 至 componentDidUpdate 就可以解决这个问题。\n另外一种情况则是需要获取DOM元素状态，但是由于在fber中，render可打断，可能在wilMount中获取到的元素状态很可能与实际需要的不同，这个通常可以使用第二个新增的生命函数的解决 getSnapshotBeforeUpdate(prevProps, prevState)\n4) getSnapshotBeforeUpdate(prevProps, prevState)\n返回的值作为componentDidUpdate的第三个参数。与willMount不同的是，getSnapshotBeforeUpdate会在最终确定的render执行之前执行，也就是能保证其获取到的元素状态与didUpdate中获取到的元素状态相同。官方参考代码：\nclass ScrollingList extends React.Component &#123;\n  constructor(props) &#123;\n    super(props);\n    this.listRef = React.createRef();\n  &#125;\n\n  getSnapshotBeforeUpdate(prevProps, prevState) &#123;\n    // 我们是否在 list 中添加新的 items ？\n    // 捕获滚动位置以便我们稍后调整滚动位置。\n    if (prevProps.list.length &lt; this.props.list.length) &#123;\n      const list = this.listRef.current;\n      return list.scrollHeight - list.scrollTop;\n    &#125;\n    return null;\n  &#125;\n\n  componentDidUpdate(prevProps, prevState, snapshot) &#123;\n    // 如果我们 snapshot 有值，说明我们刚刚添加了新的 items，\n    // 调整滚动位置使得这些新 items 不会将旧的 items 推出视图。\n    //（这里的 snapshot 是 getSnapshotBeforeUpdate 的返回值）\n    if (snapshot !== null) &#123;\n      const list = this.listRef.current;\n      list.scrollTop = list.scrollHeight - snapshot;\n    &#125;\n  &#125;\n\n  render() &#123;\n    return (\n      &lt;div ref=&#123;this.listRef&#125;>&#123;/* ...contents... */&#125;&lt;/div>\n    );\n  &#125;\n&#125;\n复制代码\n\n3. React 16.X 中 props 改变后在哪个生命周期中处理在getDerivedStateFromProps中进行处理。\n这个生命周期函数是为了替代componentWillReceiveProps存在的，所以在需要使用componentWillReceiveProps时，就可以考虑使用getDerivedStateFromProps来进行替代。\n两者的参数是不相同的，而getDerivedStateFromProps是一个静态函数，也就是这个函数不能通过this访问到class的属性，也并不推荐直接访问属性。而是应该通过参数提供的nextProps以及prevState来进行判断，根据新传入的props来映射到state。\n需要注意的是，如果props传入的内容不需要影响到你的state，那么就需要返回一个null，这个返回值是必须的，所以尽量将其写到函数的末尾：\nstatic getDerivedStateFromProps(nextProps, prevState) &#123;\n    const &#123;type&#125; = nextProps;\n    // 当传入的type发生变化的时候，更新state\n    if (type !== prevState.type) &#123;\n        return &#123;\n            type,\n        &#125;;\n    &#125;\n    // 否则，对于state不进行任何操作\n    return null;\n&#125;\n复制代码\n\n4. React 性能优化在哪个生命周期？它优化的原理是什么？react的父级组件的render函数重新渲染会引起子组件的render方法的重新渲染。但是，有的时候子组件的接受父组件的数据没有变动。子组件render的执行会影响性能，这时就可以使用shouldComponentUpdate来解决这个问题。\n使用方法如下：\nshouldComponentUpdate(nexrProps) &#123;\n    if (this.props.num === nexrProps.num) &#123;\n        return false\n    &#125;\n    return true;\n&#125;\n复制代码\n\nshouldComponentUpdate提供了两个参数nextProps和nextState，表示下一次props和一次state的值，当函数返回false时候，render()方法不执行，组件也就不会渲染，返回true时，组件照常重渲染。此方法就是拿当前props中值和下一次props中的值进行对比，数据相等时，返回false，反之返回true。\n需要注意，在进行新旧对比的时候，是浅对比，也就是说如果比较的数据时引用数据类型，只要数据的引用的地址没变，即使内容变了，也会被判定为true。\n面对这个问题，可以使用如下方法进行解决： （1）使用setState改变数据之前，先采用ES6中assgin进行拷贝，但是assgin只深拷贝的数据的第一层，所以说不是最完美的解决办法：\nconst o2 = Object.assign(&#123;&#125;,this.state.obj)\n    o2.student.count = '00000';\n    this.setState(&#123;\n        obj: o2,\n    &#125;)\n复制代码\n\n（2）使用JSON.parse(JSON.stringfy())进行深拷贝，但是遇到数据为undefined和函数时就会错。\nconst o2 = JSON.parse(JSON.stringify(this.state.obj))\n    o2.student.count = '00000';\n    this.setState(&#123;\n        obj: o2,\n    &#125;)\n复制代码\n\n5. state 和 props 触发更新的生命周期分别有什么区别？state 更新流程：  这个过程当中涉及的函数：\n\nshouldComponentUpdate: 当组件的 state 或 props 发生改变时，都会首先触发这个生命周期函数。它会接收两个参数：nextProps, nextState——它们分别代表传入的新 props 和新的 state 值。拿到这两个值之后，我们就可以通过一些对比逻辑来决定是否有 re-render（重渲染）的必要了。如果该函数的返回值为 false，则生命周期终止，反之继续；\n\n\n\n\n\n\n\n\n\n\n注意：此方法仅作为性能优化的方式而存在。不要企图依靠此方法来“阻止”渲染，因为这可能会产生 bug。应该考虑使用内置的 PureComponent 组件，而不是手动编写 shouldComponentUpdate()\n\ncomponentWillUpdate：当组件的 state 或 props 发生改变时，会在渲染之前调用 componentWillUpdate。componentWillUpdate 是 React16 废弃的三个生命周期之一。过去，我们可能希望能在这个阶段去收集一些必要的信息（比如更新前的 DOM 信息等等），现在我们完全可以在 React16 的 getSnapshotBeforeUpdate 中去做这些事；\ncomponentDidUpdate：componentDidUpdate() 会在UI更新后会被立即调用。它接收 prevProps（上一次的 props 值）作为入参，也就是说在此处我们仍然可以进行 props 值对比（再次说明 componentWillUpdate 确实鸡肋哈）。\n\n\nprops 更新流程：  相对于 state 更新，props 更新后唯一的区别是增加了对 componentWillReceiveProps 的调用。关于 componentWillReceiveProps，需要知道这些事情：\n\ncomponentWillReceiveProps：它在Component接受到新的 props 时被触发。componentWillReceiveProps 会接收一个名为 nextProps 的参数（对应新的 props 值）。该生命周期是 React16 废弃掉的三个生命周期之一。在它被废弃前，可以用它来比较 this.props 和 nextProps 来重新setState。在 React16 中，用一个类似的新生命周期 getDerivedStateFromProps 来代替它。\n\n6. React中发起网络请求应该在哪个生命周期中进行？为什么？对于异步请求，最好放在componentDidMount中去操作，对于同步的状态改变，可以放在componentWillMount中，一般用的比较少。\n如果认为在componentWillMount里发起请求能提早获得结果，这种想法其实是错误的，通常componentWillMount比componentDidMount早不了多少微秒，网络上任何一点延迟，这一点差异都可忽略不计。\nreact的生命周期： constructor() -&gt; componentWillMount() -&gt; render() -&gt; componentDidMount()\n上面这些方法的调用是有次序的，由上而下依次调用。\n\nconstructor被调用是在组件准备要挂载的最开始，此时组件尚未挂载到网页上。\ncomponentWillMount方法的调用在constructor之后，在render之前，在这方法里的代码调用setState方法不会触发重新render，所以它一般不会用来作加载数据之用。\ncomponentDidMount方法中的代码，是在组件已经完全挂载到网页上才会调用被执行，所以可以保证数据的加载。此外，在这方法中调用setState方法，会触发重新渲染。所以，官方设计这个方法就是用来加载外部数据用的，或处理其他的副作用代码。与组件上的数据无关的加载，也可以在constructor里做，但constructor是做组件state初绐化工作，并不是做加载数据这工作的，constructor里也不能setState，还有加载的时间太长或者出错，页面就无法加载出来。所以有副作用的代码都会集中在componentDidMount方法里。\n\n总结：\n\n跟服务器端渲染（同构）有关系，如果在componentWillMount里面获取数据，fetch data会执行两次，一次在服务器端一次在客户端。在componentDidMount中可以解决这个问题，componentWillMount同样也会render两次。\n在componentWillMount中fetch data，数据一定在render后才能到达，如果忘记了设置初始状态，用户体验不好。\nreact16.0以后，componentWillMount可能会被执行多次。\n\n7. React 16中新生命周期有哪些关于 React16 开始应用的新生命周期：  可以看出，React16 自上而下地对生命周期做了另一种维度的解读：\n\nRender 阶段：用于计算一些必要的状态信息。这个阶段可能会被 React 暂停，这一点和 React16 引入的 Fiber 架构（我们后面会重点讲解）是有关的；\nPre-commit阶段：所谓“commit”，这里指的是“更新真正的 DOM 节点”这个动作。所谓 Pre-commit，就是说我在这个阶段其实还并没有去更新真实的 DOM，不过 DOM 信息已经是可以读取的了；\nCommit 阶段：在这一步，React 会完成真实 DOM 的更新工作。Commit 阶段，我们可以拿到真实 DOM（包括 refs）。\n\n与此同时，新的生命周期在流程方面，仍然遵循“挂载”、“更新”、“卸载”这三个广义的划分方式。它们分别对应到：\n\n挂载过程：\nconstructor\ngetDerivedStateFromProps\nrender\ncomponentDidMount\n\n\n更新过程：\ngetDerivedStateFromProps\nshouldComponentUpdate\nrender\ngetSnapshotBeforeUpdate\ncomponentDidUpdate\n\n\n卸载过程：\ncomponentWillUnmount\n\n\n\n四、组件通信React组件间通信常见的几种情况:\n\n父组件向子组件通信\n子组件向父组件通信\n跨级组件通信\n非嵌套关系的组件通信\n\n1. 父子组件的通信方式？父组件向子组件通信：父组件通过 props 向子组件传递需要的信息。\n// 子组件: Child\nconst Child = props =>&#123;\n  return &lt;p>&#123;props.name&#125;&lt;/p>\n&#125;\n// 父组件 Parent\nconst Parent = ()=>&#123;\n    return &lt;Child name=\"react\">&lt;/Child>\n&#125;\n复制代码\n\n子组件向父组件通信：: props+回调的方式。\n// 子组件: Child\nconst Child = props =>&#123;\n  const cb = msg =>&#123;\n      return ()=>&#123;\n          props.callback(msg)\n      &#125;\n  &#125;\n  return (\n      &lt;button onClick=&#123;cb(\"你好!\")&#125;>你好&lt;/button>\n  )\n&#125;\n// 父组件 Parent\nclass Parent extends Component &#123;\n    callback(msg)&#123;\n        console.log(msg)\n    &#125;\n    render()&#123;\n        return &lt;Child callback=&#123;this.callback.bind(this)&#125;>&lt;/Child>    \n    &#125;\n&#125;\n复制代码\n\n2. 跨级组件的通信方式？父组件向子组件的子组件通信，向更深层子组件通信：\n\n使用props，利用中间组件层层传递,但是如果父组件结构较深，那么中间每一层组件都要去传递props，增加了复杂度，并且这些props并不是中间组件自己需要的。\n使用context，context相当于一个大容器，可以把要通信的内容放在这个容器中，这样不管嵌套多深，都可以随意取用，对于跨越多层的全局数据可以使用context实现。\n\n// context方式实现跨级组件通信 \n// Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据\nconst BatteryContext = createContext();\n//  子组件的子组件 \nclass GrandChild extends Component &#123;\n    render()&#123;\n        return (\n            &lt;BatteryContext.Consumer>\n                &#123;\n                    color => &lt;h1 style=&#123;&#123;\"color\":color&#125;&#125;>我是红色的:&#123;color&#125;&lt;/h1>\n                &#125;\n            &lt;/BatteryContext.Consumer>\n        )\n    &#125;\n&#125;\n//  子组件\nconst Child = () =>&#123;\n    return (\n        &lt;GrandChild/>\n    )\n&#125;\n// 父组件\nclass Parent extends Component &#123;\n      state = &#123;\n          color:\"red\"\n      &#125;\n      render()&#123;\n          const &#123;color&#125; = this.state\n          return (\n          &lt;BatteryContext.Provider value=&#123;color&#125;>\n              &lt;Child>&lt;/Child>\n          &lt;/BatteryContext.Provider>\n          )\n      &#125;\n&#125;\n复制代码\n\n3. 非嵌套关系组件的通信方式？即没有任何包含关系的组件，包括兄弟组件以及不在同一个父级中的非兄弟组件。\n\n可以使用自定义事件通信（发布订阅模式）\n可以通过redux等进行全局状态管理\n如果是兄弟组件通信，可以找到这两个兄弟节点共同的父节点, 结合父子间通信方式进行通信。\n\n4. 如何解决 props 层级过深的问题\n使用Context API：提供一种组件之间的状态共享，而不必通过显式组件树逐层传递props；\n使用Redux等状态库。\n\n5. 组件通信的方式有哪些\n⽗组件向⼦组件通讯: ⽗组件可以向⼦组件通过传 props 的⽅式，向⼦组件进⾏通讯\n⼦组件向⽗组件通讯: props+回调的⽅式，⽗组件向⼦组件传递props进⾏通讯，此props为作⽤域为⽗组件⾃身的函 数，⼦组件调⽤该函数，将⼦组件想要传递的信息，作为参数，传递到⽗组件的作⽤域中\n兄弟组件通信: 找到这两个兄弟节点共同的⽗节点,结合上⾯两种⽅式由⽗节点转发信息进⾏通信\n跨层级通信: Context 设计⽬的是为了共享那些对于⼀个组件树⽽⾔是“全局”的数据，例如当前认证的⽤户、主题或⾸选语⾔，对于跨越多层的全局数据通过 Context 通信再适合不过\n发布订阅模式: 发布者发布事件，订阅者监听事件并做出反应,我们可以通过引⼊event模块进⾏通信\n全局状态管理⼯具: 借助Redux或者Mobx等全局状态管理⼯具进⾏通信,这种⼯具会维护⼀个全局状态中⼼Store,并根据不同的事件产⽣新的状态\n\n五、路由1. React-Router的实现原理是什么？客户端路由实现的思想：\n\n基于 hash 的路由：通过监听\nhashchange\n\n事件，感知 hash 的变化\n\n改变 hash 可以直接通过 location.hash=xxx\n\n\n基于 H5 history 路由：\n\n改变 url 可以通过 history.pushState 和 resplaceState 等，会将URL压入堆栈，同时能够应用 history.go() 等 API\n监听 url 的变化可以通过自定义事件触发实现\n\n\n\nreact-router 实现的思想：\n\n基于 history 库来实现上述不同的客户端路由实现思想，并且能够保存历史记录等，磨平浏览器差异，上层无感知\n通过维护的列表，在每次 URL 发生变化的回收，通过配置的 路由路径，匹配到对应的 Component，并且 render\n\n2. 如何配置 React-Router 实现路由切换（1）使用&lt;Route&gt; 组件\n路由匹配是通过比较 &lt;Route&gt; 的 path 属性和当前地址的 pathname 来实现的。当一个 &lt;Route&gt; 匹配成功时，它将渲染其内容，当它不匹配时就会渲染 null。没有路径的 &lt;Route&gt; 将始终被匹配。\n// when location = &#123; pathname: '/about' &#125;\n&lt;Route path='/about' component=&#123;About&#125;/> // renders &lt;About/>\n&lt;Route path='/contact' component=&#123;Contact&#125;/> // renders null\n&lt;Route component=&#123;Always&#125;/> // renders &lt;Always/>\n复制代码\n\n（2）结合使用 &lt;Switch&gt; 组件和 &lt;Route&gt; 组件\n&lt;Switch&gt; 用于将 &lt;Route&gt; 分组。\n&lt;Switch>\n    &lt;Route exact path=\"/\" component=&#123;Home&#125; />\n    &lt;Route path=\"/about\" component=&#123;About&#125; />\n    &lt;Route path=\"/contact\" component=&#123;Contact&#125; />\n&lt;/Switch>\n复制代码\n\n&lt;Switch&gt; 不是分组 &lt;Route&gt; 所必须的，但他通常很有用。 一个 &lt;Switch&gt; 会遍历其所有的子 &lt;Route&gt;元素，并仅渲染与当前地址匹配的第一个元素。\n（3）使用 &lt;Link&gt;、 &lt;NavLink&gt;、&lt;Redirect&gt; 组件\n&lt;Link&gt; 组件来在你的应用程序中创建链接。无论你在何处渲染一个&lt;Link&gt; ，都会在应用程序的 HTML 中渲染锚（&lt;a&gt;）。\n&lt;Link to=\"/\">Home&lt;/Link>   \n// &lt;a href='/'>Home&lt;/a>\n复制代码\n\n 是一种特殊类型的  当它的 to属性与当前地址匹配时，可以将其定义为”活跃的”。\n// location = &#123; pathname: '/react' &#125;\n&lt;NavLink to=\"/react\" activeClassName=\"hurray\">\n    React\n&lt;/NavLink>\n// &lt;a href='/react' className='hurray'>React&lt;/a>\n复制代码\n\n当我们想强制导航时，可以渲染一个&lt;Redirect&gt;，当一个&lt;Redirect&gt;渲染时，它将使用它的to属性进行定向。\n3. React-Router怎么设置重定向？使用&lt;Redirect&gt;组件实现路由的重定向：\n&lt;Switch>\n  &lt;Redirect from='/users/:id' to='/users/profile/:id'/>\n  &lt;Route path='/users/profile/:id' component=&#123;Profile&#125;/>\n&lt;/Switch>\n复制代码\n\n当请求 /users/:id 被重定向去 &#39;/users/profile/:id&#39;：\n\n属性 from: string：需要匹配的将要被重定向路径。\n属性 to: string：重定向的 URL 字符串\n属性 to: object：重定向的 location 对象\n属性 push: bool：若为真，重定向操作将会把新地址加入到访问历史记录里面，并且无法回退到前面的页面。\n\n4. react-router 里的 Link 标签和 a 标签的区别从最终渲染的 DOM 来看，这两者都是链接，都是 标签，区别是∶ &lt;Link&gt;是react-router 里实现路由跳转的链接，一般配合&lt;Route&gt; 使用，react-router接管了其默认的链接跳转行为，区别于传统的页面跳转，&lt;Link&gt; 的“跳转”行为只会触发相匹配的&lt;Route&gt;对应的页面内容更新，而不会刷新整个页面。\n&lt;Link&gt;做了3件事情:\n\n有onclick那就执行onclick\nclick的时候阻止a标签默认事件\n根据跳转href(即是to)，用history (web前端路由两种方式之一，history &amp; hash)跳转，此时只是链接变了，并没有刷新页面而&lt;a&gt;标签就是普通的超链接了，用于从当前页面跳转到href指向的另一 个页面(非锚点情况)。\n\na标签默认事件禁掉之后做了什么才实现了跳转?\nlet domArr = document.getElementsByTagName('a')\n[...domArr].forEach(item=>&#123;\n    item.addEventListener('click',function () &#123;\n        location.href = this.href\n    &#125;)\n&#125;)\n复制代码\n\n5. React-Router如何获取URL的参数和历史对象？（1）获取URL的参数\n\nget传值\n\n路由配置还是普通的配置，如：&#39;admin&#39;，传参方式如：&#39;admin?id=&#39;1111&#39;&#39;。通过this.props.location.search获取url获取到一个字符串&#39;?id=&#39;1111&#39; 可以用url，qs，querystring，浏览器提供的api URLSearchParams对象或者自己封装的方法去解析出id的值。\n\n动态路由传值\n\n路由需要配置成动态路由：如path=&#39;/admin/:id&#39;，传参方式，如&#39;admin/111&#39;。通过this.props.match.params.id 取得url中的动态路由id部分的值，除此之外还可以通过useParams（Hooks）来获取\n\n通过query或state传值\n\n传参方式如：在Link组件的to属性中可以传递对象&#123;pathname:&#39;/admin&#39;,query:&#39;111&#39;,state:&#39;111&#39;&#125;;。通过this.props.location.state或this.props.location.query来获取即可，传递的参数可以是对象、数组等，但是存在缺点就是只要刷新页面，参数就会丢失。\n（2）获取历史对象\n\n如果React &gt;= 16.8 时可以使用 React Router中提供的Hooks\n\nimport &#123; useHistory &#125; from \"react-router-dom\";\nlet history = useHistory();\n复制代码\n\n2.使用this.props.history获取历史对象\nlet history = this.props.history;\n复制代码\n\n6. React-Router 4怎样在路由变化时重新渲染同一个组件？当路由变化时，即组件的props发生了变化，会调用componentWillReceiveProps等生命周期钩子。那需要做的只是： 当路由改变时，根据路由，也去请求数据：\nclass NewsList extends Component &#123;\n  componentDidMount () &#123;\n     this.fetchData(this.props.location);\n  &#125;\n  \n  fetchData(location) &#123;\n    const type = location.pathname.replace('/', '') || 'top'\n    this.props.dispatch(fetchListData(type))\n  &#125;\n  componentWillReceiveProps(nextProps) &#123;\n     if (nextProps.location.pathname != this.props.location.pathname) &#123;\n         this.fetchData(nextProps.location);\n     &#125; \n  &#125;\n  render () &#123;\n    ...\n  &#125;\n&#125;\n复制代码\n\n利用生命周期componentWillReceiveProps，进行重新render的预处理操作。\n7. React-Router的路由有几种模式？React-Router 支持使用 hash（对应 HashRouter）和 browser（对应 BrowserRouter） 两种路由规则， react-router-dom 提供了 BrowserRouter 和 HashRouter 两个组件来实现应用的 UI 和 URL 同步：\n\nBrowserRouter 创建的 URL 格式：xxx.com/path\nHashRouter 创建的 URL 格式：xxx.com/#/path\n\n（1）BrowserRouter\n它使用 HTML5 提供的 history API（pushState、replaceState 和 popstate 事件）来保持 UI 和 URL 的同步。由此可以看出，BrowserRouter 是使用 HTML 5 的 history API 来控制路由跳转的：\n&lt;BrowserRouter\n    basename=&#123;string&#125;\n    forceRefresh=&#123;bool&#125;\n    getUserConfirmation=&#123;func&#125;\n    keyLength=&#123;number&#125;\n/>\n复制代码\n\n其中的属性如下：\n\nbasename 所有路由的基准 URL。basename 的正确格式是前面有一个前导斜杠，但不能有尾部斜杠；\n\n&lt;BrowserRouter basename=\"/calendar\">\n    &lt;Link to=\"/today\" />\n&lt;/BrowserRouter>\n复制代码\n\n等同于\n&lt;a href=\"/calendar/today\" />\n复制代码\n\n\nforceRefresh 如果为 true，在导航的过程中整个页面将会刷新。一般情况下，只有在不支持 HTML5 history API 的浏览器中使用此功能；\ngetUserConfirmation 用于确认导航的函数，默认使用 window.confirm。例如，当从 /a 导航至 /b 时，会使用默认的 confirm 函数弹出一个提示，用户点击确定后才进行导航，否则不做任何处理；\n\n// 这是默认的确认函数\nconst getConfirmation = (message, callback) => &#123;\n  const allowTransition = window.confirm(message);\n  callback(allowTransition);\n&#125;\n&lt;BrowserRouter getUserConfirmation=&#123;getConfirmation&#125; />\n复制代码\n\n\n\n\n\n\n\n\n\n\n需要配合&lt;Prompt&gt; 一起使用。\n\nKeyLength 用来设置 Location.Key 的长度。\n\n（2）HashRouter\n使用 URL 的 hash 部分（即 window.location.hash）来保持 UI 和 URL 的同步。由此可以看出，HashRouter 是通过 URL 的 hash 属性来控制路由跳转的：\n&lt;HashRouter\n    basename=&#123;string&#125;\n    getUserConfirmation=&#123;func&#125;\n    hashType=&#123;string&#125;  \n/>\n复制代码\n\n其参数如下：\n\nbasename, getUserConfirmation 和 BrowserRouter 功能一样；\nhashType window.location.hash 使用的 hash 类型，有如下几种：\nslash - 后面跟一个斜杠，例如 #/ 和 #/sunshine/lollipops；\nnoslash - 后面没有斜杠，例如 # 和 #sunshine/lollipops；\nhashbang - Google 风格的 ajax crawlable，例如 #!/ 和 #!/sunshine/lollipops。\n\n\n\n8. React-Router 4的Switch有什么用？Switch 通常被用来包裹 Route，用于渲染与路径匹配的第一个子 &lt;Route&gt; 或 &lt;Redirect&gt;，它里面不能放其他元素。\n假如不加 &lt;Switch&gt; ：\nimport &#123; Route &#125; from 'react-router-dom'\n\n&lt;Route path=\"/\" component=&#123;Home&#125;>&lt;/Route>\n&lt;Route path=\"/login\" component=&#123;Login&#125;>&lt;/Route>\n复制代码\n\nRoute 组件的 path 属性用于匹配路径，因为需要匹配 / 到 Home，匹配 /login 到 Login，所以需要两个 Route，但是不能这么写。这样写的话，当 URL 的 path 为 “/login” 时，&lt;Route path=&quot;/&quot; /&gt;和&lt;Route path=&quot;/login&quot; /&gt; 都会被匹配，因此页面会展示 Home 和 Login 两个组件。这时就需要借助 &lt;Switch&gt; 来做到只显示一个匹配组件：\nimport &#123; Switch, Route&#125; from 'react-router-dom'\n    \n&lt;Switch>\n    &lt;Route path=\"/\" component=&#123;Home&#125;>&lt;/Route>\n    &lt;Route path=\"/login\" component=&#123;Login&#125;>&lt;/Route>\n&lt;/Switch>\n复制代码\n\n此时，再访问 “/login” 路径时，却只显示了 Home 组件。这是就用到了exact属性，它的作用就是精确匹配路径，经常与&lt;Switch&gt; 联合使用。只有当 URL 和该 &lt;Route&gt; 的 path 属性完全一致的情况下才能匹配上：\nimport &#123; Switch, Route&#125; from 'react-router-dom'\n   \n&lt;Switch>\n   &lt;Route exact path=\"/\" component=&#123;Home&#125;>&lt;/Route>\n   &lt;Route exact path=\"/login\" component=&#123;Login&#125;>&lt;/Route>\n&lt;/Switch>\n\n六、Redux1. 对 Redux 的理解，主要解决什么问题React是视图层框架。Redux是一个用来管理数据状态和UI状态的JavaScript应用工具。随着JavaScript单页应用（SPA）开发日趋复杂， JavaScript需要管理比任何时候都要多的state（状态）， Redux就是降低管理难度的。（Redux支持React、Angular、jQuery甚至纯JavaScript）。\n在 React 中，UI 以组件的形式来搭建，组件之间可以嵌套组合。但 React 中组件间通信的数据流是单向的，顶层组件可以通过 props 属性向下层组件传递数据，而下层组件不能向上层组件传递数据，兄弟组件之间同样不能。这样简单的单向数据流支撑起了 React 中的数据可控性。\n当项目越来越大的时候，管理数据的事件或回调函数将越来越多，也将越来越不好管理。管理不断变化的 state 非常困难。如果一个 model 的变化会引起另一个 model 变化，那么当 view 变化时，就可能引起对应 model 以及另一个 model 的变化，依次地，可能会引起另一个 view 的变化。直至你搞不清楚到底发生了什么。state 在什么时候，由于什么原因，如何变化已然不受控制。 当系统变得错综复杂的时候，想重现问题或者添加新功能就会变得举步维艰。如果这还不够糟糕，考虑一些来自前端开发领域的新需求，如更新调优、服务端渲染、路由跳转前请求数据等。state 的管理在大项目中相当复杂。\nRedux 提供了一个叫 store 的统一仓储库，组件通过 dispatch 将 state 直接传入store，不用通过其他的组件。并且组件通过 subscribe 从 store获取到 state 的改变。使用了 Redux，所有的组件都可以从 store 中获取到所需的 state，他们也能从store 获取到 state 的改变。这比组件之间互相传递数据清晰明朗的多。\n主要解决的问题： 单纯的Redux只是一个状态机，是没有UI呈现的，react- redux作用是将Redux的状态机和React的UI呈现绑定在一起，当你dispatch action改变state的时候，会自动更新页面。\n2. Redux 原理及工作流程（1）原理 Redux源码主要分为以下几个模块文件\n\ncompose.js 提供从右到左进行函数式编程\ncreateStore.js 提供作为生成唯一store的函数\ncombineReducers.js 提供合并多个reducer的函数，保证store的唯一性\nbindActionCreators.js 可以让开发者在不直接接触dispacth的前提下进行更改state的操作\napplyMiddleware.js 这个方法通过中间件来增强dispatch的功能\n\nconst actionTypes = &#123;\n    ADD: 'ADD',\n    CHANGEINFO: 'CHANGEINFO',\n&#125;\n\nconst initState = &#123;\n    info: '初始化',\n&#125;\n\nexport default function initReducer(state=initState, action) &#123;\n    switch(action.type) &#123;\n        case actionTypes.CHANGEINFO:\n            return &#123;\n                ...state,\n                info: action.preload.info || '',\n            &#125;\n        default:\n            return &#123; ...state &#125;;\n    &#125;\n&#125;\n\nexport default function createStore(reducer, initialState, middleFunc) &#123;\n\n    if (initialState &amp;&amp; typeof initialState === 'function') &#123;\n        middleFunc = initialState;\n        initialState = undefined;\n    &#125;\n\n    let currentState = initialState;\n\n    const listeners = [];\n\n    if (middleFunc &amp;&amp; typeof middleFunc === 'function') &#123;\n        // 封装dispatch \n        return middleFunc(createStore)(reducer, initialState);\n    &#125;\n\n    const getState = () => &#123;\n        return currentState;\n    &#125;\n\n    const dispatch = (action) => &#123;\n        currentState = reducer(currentState, action);\n\n        listeners.forEach(listener => &#123;\n            listener();\n        &#125;)\n    &#125;\n\n    const subscribe = (listener) => &#123;\n        listeners.push(listener);\n    &#125;\n\n    return &#123;\n        getState,\n        dispatch,\n        subscribe\n    &#125;\n&#125;\n复制代码\n\n（2）工作流程\n\nconst store= createStore（fn）生成数据;\naction: {type: Symble(‘action01), payload:’payload’ }定义行为;\ndispatch发起action：store.dispatch(doSomething(‘action001’));\nreducer：处理action，返回新的state;\n\n通俗点解释：\n\n首先，用户（通过View）发出Action，发出方式就用到了dispatch方法\n然后，Store自动调用Reducer，并且传入两个参数：当前State和收到的Action，Reducer会返回新的State\nState—旦有变化，Store就会调用监听函数，来更新View\n\n以 store 为核心，可以把它看成数据存储中心，但是他要更改数据的时候不能直接修改，数据修改更新的角色由Reducers来担任，store只做存储，中间人，当Reducers的更新完成以后会通过store的订阅来通知react component，组件把新的状态重新获取渲染，组件中也能主动发送action，创建action后这个动作是不会执行的，所以要dispatch这个action，让store通过reducers去做更新React Component 就是react的每个组件。\n3. Redux 中异步的请求怎么处理可以在 componentDidmount 中直接进⾏请求⽆须借助redux。但是在⼀定规模的项⽬中,上述⽅法很难进⾏异步流的管理,通常情况下我们会借助redux的异步中间件进⾏异步处理。redux异步流中间件其实有很多，当下主流的异步中间件有两种redux-thunk、redux-saga。\n（1）使用react-thunk中间件\nredux-thunk优点:\n\n体积⼩: redux-thunk的实现⽅式很简单,只有不到20⾏代码\n使⽤简单: redux-thunk没有引⼊像redux-saga或者redux-observable额外的范式,上⼿简单\n\nredux-thunk缺陷:\n\n样板代码过多: 与redux本身⼀样,通常⼀个请求需要⼤量的代码,⽽且很多都是重复性质的\n耦合严重: 异步操作与redux的action偶合在⼀起,不⽅便管理\n功能孱弱: 有⼀些实际开发中常⽤的功能需要⾃⼰进⾏封装\n\n使用步骤：\n\n配置中间件，在store的创建中配置\n\nimport &#123;createStore, applyMiddleware, compose&#125; from 'redux';\nimport reducer from './reducer';\nimport thunk from 'redux-thunk'\n\n// 设置调试工具\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(&#123;&#125;) : compose;\n// 设置中间件\nconst enhancer = composeEnhancers(\n  applyMiddleware(thunk)\n);\n\nconst store = createStore(reducer, enhancer);\n\nexport default store;\n复制代码\n\n\n添加一个返回函数的actionCreator，将异步请求逻辑放在里面\n\n/**\n  发送get请求，并生成相应action，更新store的函数\n  @param url &#123;string&#125; 请求地址\n  @param func &#123;function&#125; 真正需要生成的action对应的actionCreator\n  @return &#123;function&#125; \n*/\n// dispatch为自动接收的store.dispatch函数 \nexport const getHttpAction = (url, func) => (dispatch) => &#123;\n    axios.get(url).then(function(res)&#123;\n        const action = func(res.data)\n        dispatch(action)\n    &#125;)\n&#125;\n复制代码\n\n\n生成action，并发送action\n\ncomponentDidMount()&#123;\n    var action = getHttpAction('/getData', getInitTodoItemAction)\n    // 发送函数类型的action时，该action的函数体会自动执行\n    store.dispatch(action)\n&#125;\n复制代码\n\n（2）使用redux-saga中间件\nredux-saga优点:\n\n异步解耦: 异步操作被被转移到单独 saga.js 中，不再是掺杂在 action.js 或 component.js 中\naction摆脱thunk function: dispatch 的参数依然是⼀个纯粹的 action (FSA)，⽽不是充满 “⿊魔法” thunk function\n异常处理: 受益于 generator function 的 saga 实现，代码异常/请求失败 都可以直接通过 try/catch 语法直接捕获处理\n功能强⼤: redux-saga提供了⼤量的Saga 辅助函数和Effect 创建器供开发者使⽤,开发者⽆须封装或者简单封装即可使⽤\n灵活: redux-saga可以将多个Saga可以串⾏/并⾏组合起来,形成⼀个⾮常实⽤的异步flow\n易测试，提供了各种case的测试⽅案，包括mock task，分⽀覆盖等等\n\nredux-saga缺陷:\n\n额外的学习成本: redux-saga不仅在使⽤难以理解的 generator function,⽽且有数⼗个API,学习成本远超redux-thunk,最重要的是你的额外学习成本是只服务于这个库的,与redux-observable不同,redux-observable虽然也有额外学习成本但是背后是rxjs和⼀整套思想\n体积庞⼤: 体积略⼤,代码近2000⾏，min版25KB左右\n功能过剩: 实际上并发控制等功能很难⽤到,但是我们依然需要引⼊这些代码\nts⽀持不友好: yield⽆法返回TS类型\n\nredux-saga可以捕获action，然后执行一个函数，那么可以把异步代码放在这个函数中，使用步骤如下：\n\n配置中间件\n\nimport &#123;createStore, applyMiddleware, compose&#125; from 'redux';\nimport reducer from './reducer';\nimport createSagaMiddleware from 'redux-saga'\nimport TodoListSaga from './sagas'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(&#123;&#125;) : compose;\nconst sagaMiddleware = createSagaMiddleware()\n\nconst enhancer = composeEnhancers(\n  applyMiddleware(sagaMiddleware)\n);\n\nconst store = createStore(reducer, enhancer);\nsagaMiddleware.run(TodoListSaga)\n\nexport default store;\n复制代码\n\n\n将异步请求放在sagas.js中\n\nimport &#123;takeEvery, put&#125; from 'redux-saga/effects'\nimport &#123;initTodoList&#125; from './actionCreator'\nimport &#123;GET_INIT_ITEM&#125; from './actionTypes'\nimport axios from 'axios'\n\nfunction* func()&#123;\n    try&#123;\n        // 可以获取异步返回数据\n        const res = yield axios.get('/getData')\n        const action = initTodoList(res.data)\n        // 将action发送到reducer\n        yield put(action)\n    &#125;catch(e)&#123;\n        console.log('网络请求失败')\n    &#125;\n&#125;\n\nfunction* mySaga()&#123;\n    // 自动捕获GET_INIT_ITEM类型的action，并执行func\n    yield takeEvery(GET_INIT_ITEM, func)\n&#125;\n\nexport default mySaga\n复制代码\n\n\n发送action\n\ncomponentDidMount()&#123;\n  const action = getInitTodoItemAction()\n  store.dispatch(action)\n&#125;\n复制代码\n\n4. Redux 怎么实现属性传递，介绍下原理react-redux 数据传输∶ view–&gt;action–&gt;reducer–&gt;store–&gt;view。看下点击事件的数据是如何通过redux传到view上：\n\nview 上的AddClick 事件通过mapDispatchToProps 把数据传到action —&gt; click:()=&gt;dispatch(ADD)\naction 的ADD 传到reducer上\nreducer传到store上 const store = createStore(reducer);\nstore再通过 mapStateToProps 映射穿到view上text:State.text\n\n代码示例∶\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport &#123; createStore &#125; from 'redux';\nimport &#123; Provider, connect &#125; from 'react-redux';\nclass App extends React.Component&#123;\n    render()&#123;\n        let &#123; text, click, clickR &#125; = this.props;\n        return(\n            &lt;div>\n                &lt;div>数据:已有人&#123;text&#125;&lt;/div>\n                &lt;div onClick=&#123;click&#125;>加人&lt;/div>\n                &lt;div onClick=&#123;clickR&#125;>减人&lt;/div>\n            &lt;/div>\n        )\n    &#125;\n&#125;\nconst initialState = &#123;\n    text:5\n&#125;\nconst reducer = function(state,action)&#123;\n    switch(action.type)&#123;\n        case 'ADD':\n            return &#123;text:state.text+1&#125;\n        case 'REMOVE':\n            return &#123;text:state.text-1&#125;\n        default:\n            return initialState;\n    &#125;\n&#125;\n\nlet ADD = &#123;\n    type:'ADD'\n&#125;\nlet Remove = &#123;\n    type:'REMOVE'\n&#125;\n\nconst store = createStore(reducer);\n\nlet mapStateToProps = function (state)&#123;\n    return&#123;\n        text:state.text\n    &#125;\n&#125;\n\nlet mapDispatchToProps = function(dispatch)&#123;\n    return&#123;\n        click:()=>dispatch(ADD),\n        clickR:()=>dispatch(Remove)\n    &#125;\n&#125;\n\nconst App1 = connect(mapStateToProps,mapDispatchToProps)(App);\n\nReactDOM.render(\n    &lt;Provider store = &#123;store&#125;>\n        &lt;App1>&lt;/App1>\n    &lt;/Provider>,document.getElementById('root')\n)\n复制代码\n\n5. Redux 中间件是什么？接受几个参数？柯里化函数两端的参数具体是什么？Redux 的中间件提供的是位于 action 被发起之后，到达 reducer 之前的扩展点，换而言之，原本 view -→&gt; action -&gt; reducer -&gt; store 的数据流加上中间件后变成了 view -&gt; action -&gt; middleware -&gt; reducer -&gt; store ，在这一环节可以做一些”副作用”的操作，如异步请求、打印日志等。\napplyMiddleware源码：\nexport default function applyMiddleware(...middlewares) &#123;\n    return createStore => (...args) => &#123;\n        // 利用传入的createStore和reducer和创建一个store\n        const store = createStore(...args)\n        let dispatch = () => &#123;\n            throw new Error()\n        &#125;\n        const middlewareAPI = &#123;\n            getState: store.getState,\n            dispatch: (...args) => dispatch(...args)\n        &#125;\n        // 让每个 middleware 带着 middlewareAPI 这个参数分别执行一遍\n        const chain = middlewares.map(middleware => middleware(middlewareAPI))\n        // 接着 compose 将 chain 中的所有匿名函数，组装成一个新的函数，即新的 dispatch\n        dispatch = compose(...chain)(store.dispatch)\n        return &#123;\n            ...store,\n            dispatch\n        &#125;\n    &#125;\n&#125;\n复制代码\n\n从applyMiddleware中可以看出∶\n\nredux中间件接受一个对象作为参数，对象的参数上有两个字段 dispatch 和 getState，分别代表着 Redux Store 上的两个同名函数。\n柯里化函数两端一个是 middewares，一个是store.dispatch\n\n6. Redux 请求中间件如何处理并发使用redux-Saga redux-saga是一个管理redux应用异步操作的中间件，用于代替 redux-thunk 的。它通过创建 Sagas 将所有异步操作逻辑存放在一个地方进行集中处理，以此将react中的同步操作与异步操作区分开来，以便于后期的管理与维护。 redux-saga如何处理并发：\n\ntakeEvery\n\n可以让多个 saga 任务并行被 fork 执行。\nimport &#123;\n    fork,\n    take\n&#125; from \"redux-saga/effects\"\n\nconst takeEvery = (pattern, saga, ...args) => fork(function*() &#123;\n    while (true) &#123;\n        const action = yield take(pattern)\n        yield fork(saga, ...args.concat(action))\n    &#125;\n&#125;)\n复制代码\n\n\ntakeLatest\n\ntakeLatest 不允许多个 saga 任务并行地执行。一旦接收到新的发起的 action，它就会取消前面所有 fork 过的任务（如果这些任务还在执行的话）。 在处理 AJAX 请求的时候，如果只希望获取最后那个请求的响应， takeLatest 就会非常有用。\nimport &#123;\n    cancel,\n    fork,\n    take\n&#125; from \"redux-saga/effects\"\n\nconst takeLatest = (pattern, saga, ...args) => fork(function*() &#123;\n    let lastTask\n    while (true) &#123;\n        const action = yield take(pattern)\n        if (lastTask) &#123;\n            yield cancel(lastTask) // 如果任务已经结束，则 cancel 为空操作\n        &#125;\n        lastTask = yield fork(saga, ...args.concat(action))\n    &#125;\n&#125;)\n复制代码\n\n7. Redux 状态管理器和变量挂载到 window 中有什么区别两者都是存储数据以供后期使用。但是Redux状态更改可回溯——Time travel，数据多了的时候可以很清晰的知道改动在哪里发生，完整的提供了一套状态管理模式。\n随着 JavaScript 单页应用开发日趋复杂，JavaScript 需要管理比任何时候都要多的 state （状态）。 这些 state 可能包括服务器响应、缓存数据、本地生成尚未持久化到服务器的数据，也包括 UI状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器等等。\n管理不断变化的 state 非常困难。如果一个 model 的变化会引起另一个 model 变化，那么当 view 变化时，就可能引起对应 model 以及另一个model 的变化，依次地，可能会引起另一个 view 的变化。直至你搞不清楚到底发生了什么。state 在什么时候，由于什么原因，如何变化已然不受控制。 当系统变得错综复杂的时候，想重现问题或者添加新功能就会变得举步维艰。 如果这还不够糟糕，考虑一些来自前端开发领域的新需求，如更新调优、服务端渲染、路由跳转前请求数据等等。前端开发者正在经受前所未有的复杂性，难道就这么放弃了吗?当然不是。\n这里的复杂性很大程度上来自于：我们总是将两个难以理清的概念混淆在一起：变化和异步。 可以称它们为曼妥思和可乐。如果把二者分开，能做的很好，但混到一起，就变得一团糟。一些库如 React 视图在视图层禁止异步和直接操作 DOM来解决这个问题。美中不足的是，React 依旧把处理 state 中数据的问题留给了你。Redux就是为了帮你解决这个问题。\n8. mobox 和 redux 有什么区别？（1）共同点\n\n为了解决状态管理混乱，无法有效同步的问题统一维护管理应用状态;\n某一状态只有一个可信数据来源（通常命名为store，指状态容器）;\n操作更新状态方式统一，并且可控（通常以action方式提供更新状态的途径）;\n支持将store与React组件连接，如react-redux，mobx- react;\n\n（2）区别 Redux更多的是遵循Flux模式的一种实现，是一个 JavaScript库，它关注点主要是以下几方面∶\n\nAction∶ 一个JavaScript对象，描述动作相关信息，主要包含type属性和payload属性∶\no type∶ action 类型; o payload∶ 负载数据;\n复制代码\nReducer∶ 定义应用状态如何响应不同动作（action），如何更新状态;\n\nStore∶ 管理action和reducer及其关系的对象，主要提供以下功能∶\no 维护应用状态并支持访问状态(getState());\no 支持监听action的分发，更新状态(dispatch(action)); \no 支持订阅store的变更(subscribe(listener));\n复制代码\n异步流∶ 由于Redux所有对store状态的变更，都应该通过action触发，异步任务（通常都是业务或获取数据任务）也不例外，而为了不将业务或数据相关的任务混入React组件中，就需要使用其他框架配合管理异步任务流程，如redux-thunk，redux-saga等;\n\n\nMobx是一个透明函数响应式编程的状态管理库，它使得状态管理简单可伸缩∶\n\nAction∶定义改变状态的动作函数，包括如何变更状态;\nStore∶ 集中管理模块状态（State）和动作(action)\nDerivation（衍生）∶ 从应用状态中派生而出，且没有任何其他影响的数据\n\n对比总结：\n\nredux将数据保存在单一的store中，mobx将数据保存在分散的多个store中\nredux使用plain object保存数据，需要手动处理变化后的操作;mobx适用observable保存数据，数据变化后自动处理响应的操作\nredux使用不可变状态，这意味着状态是只读的，不能直接去修改它，而是应该返回一个新的状态，同时使用纯函数;mobx中的状态是可变的，可以直接对其进行修改\nmobx相对来说比较简单，在其中有很多的抽象，mobx更多的使用面向对象的编程思维;redux会比较复杂，因为其中的函数式编程思想掌握起来不是那么容易，同时需要借助一系列的中间件来处理异步和副作用\nmobx中有更多的抽象和封装，调试会比较困难，同时结果也难以预测;而redux提供能够进行时间回溯的开发工具，同时其纯函数以及更少的抽象，让调试变得更加的容易\n\n9. Redux 和 Vuex 有什么区别，它们的共同思想（1）Redux 和 Vuex区别\n\nVuex改进了Redux中的Action和Reducer函数，以mutations变化函数取代Reducer，无需switch，只需在对应的mutation函数里改变state值即可\nVuex由于Vue自动重新渲染的特性，无需订阅重新渲染函数，只要生成新的State即可\nVuex数据流的顺序是∶View调用store.commit提交对应的请求到Store中对应的mutation函数-&gt;store改变（vue检测到数据变化自动渲染）\n\n通俗点理解就是，vuex 弱化 dispatch，通过commit进行 store状态的一次更变；取消了action概念，不必传入特定的 action形式进行指定变更；弱化reducer，基于commit参数直接对数据进行转变，使得框架更加简易;\n（2）共同思想\n\n单—的数据源\n变化可以预测\n\n本质上∶ redux与vuex都是对mvvm思想的服务，将数据从视图中抽离的一种方案。\n10. Redux 中间件是怎么拿到store 和 action? 然后怎么处理?redux中间件本质就是一个函数柯里化。redux applyMiddleware Api 源码中每个middleware 接受2个参数， Store 的getState 函数和dispatch 函数，分别获得store和action，最终返回一个函数。该函数会被传入 next 的下一个 middleware 的 dispatch 方法，并返回一个接收 action 的新函数，这个函数可以直接调用 next（action），或者在其他需要的时刻调用，甚至根本不去调用它。调用链中最后一个 middleware 会接受真实的 store的 dispatch 方法作为 next 参数，并借此结束调用链。所以，middleware 的函数签名是（{ getState，dispatch })=&gt; next =&gt; action。\n11. Redux中的connect有什么作用connect负责连接React和Redux\n（1）获取state\nconnect 通过 context获取 Provider 中的 store，通过 store.getState() 获取整个store tree 上所有state\n（2）包装原组件\n将state和action通过props的方式传入到原组件内部 wrapWithConnect 返回—个 ReactComponent 对 象 Connect，Connect 重 新 render 外部传入的原组件 WrappedComponent ，并把 connect 中传入的 mapStateToProps，mapDispatchToProps与组件上原有的 props合并后，通过属性的方式传给WrappedComponent\n（3）监听store tree变化\nconnect缓存了store tree中state的状态，通过当前state状态 和变更前 state 状态进行比较，从而确定是否调用 this.setState()方法触发Connect及其子组件的重新渲染\n七、Hooks1. 对 React Hook 的理解，它的实现原理是什么React-Hooks 是 React 团队在 React 组件开发实践中，逐渐认知到的一个改进点，这背后其实涉及对类组件和函数组件两种组件形式的思考和侧重。\n（1）类组件： 所谓类组件，就是基于 ES6 Class 这种写法，通过继承 React.Component 得来的 React 组件。以下是一个类组件：\nclass DemoClass extends React.Component &#123;\n  state = &#123;\n    text: \"\"\n  &#125;;\n  componentDidMount() &#123;\n    //...\n  &#125;\n  changeText = (newText) => &#123;\n    this.setState(&#123;\n      text: newText\n    &#125;);\n  &#125;;\n\n  render() &#123;\n    return (\n      &lt;div className=\"demoClass\">\n        &lt;p>&#123;this.state.text&#125;&lt;/p>\n        &lt;button onClick=&#123;this.changeText&#125;>修改&lt;/button>\n      &lt;/div>\n    );\n  &#125;\n&#125;\n\n复制代码\n\n可以看出，React 类组件内部预置了相当多的“现成的东西”等着我们去调度/定制，state 和生命周期就是这些“现成东西”中的典型。要想得到这些东西，难度也不大，只需要继承一个 React.Component 即可。\n当然，这也是类组件的一个不便，它太繁杂了，对于解决许多问题来说，编写一个类组件实在是一个过于复杂的姿势。复杂的姿势必然带来高昂的理解成本，这也是我们所不想看到的。除此之外，由于开发者编写的逻辑在封装后是和组件粘在一起的，这就使得类组件内部的逻辑难以实现拆分和复用。\n（2）函数组件：函数组件就是以函数的形态存在的 React 组件。早期并没有 React-Hooks，函数组件内部无法定义和维护 state，因此它还有一个别名叫“无状态组件”。以下是一个函数组件：\nfunction DemoFunction(props) &#123;\n  const &#123; text &#125; = props\n  return (\n    &lt;div className=\"demoFunction\">\n      &lt;p>&#123;`函数组件接收的内容：[$&#123;text&#125;]`&#125;&lt;/p>\n    &lt;/div>\n  );\n&#125;\n复制代码\n\n相比于类组件，函数组件肉眼可见的特质自然包括轻量、灵活、易于组织和维护、较低的学习成本等。\n通过对比，从形态上可以对两种组件做区分，它们之间的区别如下：\n\n类组件需要继承 class，函数组件不需要；\n类组件可以访问生命周期方法，函数组件不能；\n类组件中可以获取到实例化后的 this，并基于这个 this 做各种各样的事情，而函数组件不可以；\n类组件中可以定义并维护 state（状态），而函数组件不可以；\n\n除此之外，还有一些其他的不同。通过上面的区别，我们不能说谁好谁坏，它们各有自己的优势。在 React-Hooks 出现之前，类组件的能力边界明显强于函数组件。\n实际上，类组件和函数组件之间，是面向对象和函数式编程这两套不同的设计思想之间的差异。而函数组件更加契合 React 框架的设计理念：  React 组件本身的定位就是函数，一个输入数据、输出 UI 的函数。作为开发者，我们编写的是声明式的代码，而 React 框架的主要工作，就是及时地把声明式的代码转换为命令式的 DOM 操作，把数据层面的描述映射到用户可见的 UI 变化中去。这就意味着从原则上来讲，React 的数据应该总是紧紧地和渲染绑定在一起的，而类组件做不到这一点。函数组件就真正地将数据和渲染绑定到了一起。函数组件是一个更加匹配其设计理念、也更有利于逻辑拆分与重用的组件表达形式。\n为了能让开发者更好的的去编写函数式组件。于是，React-Hooks 便应运而生。\nReact-Hooks 是一套能够使函数组件更强大、更灵活的“钩子”。\n函数组件比起类组件少了很多东西，比如生命周期、对 state 的管理等。这就给函数组件的使用带来了非常多的局限性，导致我们并不能使用函数这种形式，写出一个真正的全功能的组件。而React-Hooks 的出现，就是为了帮助函数组件补齐这些（相对于类组件来说）缺失的能力。\n如果说函数组件是一台轻巧的快艇，那么 React-Hooks 就是一个内容丰富的零部件箱。“重装战舰”所预置的那些设备，这个箱子里基本全都有，同时它还不强制你全都要，而是允许你自由地选择和使用你需要的那些能力，然后将这些能力以 Hook（钩子）的形式“钩”进你的组件里，从而定制出一个最适合你的“专属战舰”。\n2. 为什么 useState 要使用数组而不是对象useState 的用法：\nconst [count, setCount] = useState(0)\n复制代码\n\n可以看到 useState 返回的是一个数组，那么为什么是返回数组而不是返回对象呢？\n这里用到了解构赋值，所以先来看一下ES6 的解构赋值：\n数组的解构赋值const foo = [1, 2, 3];\nconst [one, two, three] = foo;\nconsole.log(one);\t// 1\nconsole.log(two);\t// 2\nconsole.log(three);\t// 3\n复制代码\n\n对象的解构赋值const user = &#123;\n  id: 888,\n  name: \"xiaoxin\"\n&#125;;\nconst &#123; id, name &#125; = user;\nconsole.log(id);\t// 888\nconsole.log(name);\t// \"xiaoxin\"\n复制代码\n\n看完这两个例子，答案应该就出来了：\n\n如果 useState 返回的是数组，那么使用者可以对数组中的元素命名，代码看起来也比较干净\n如果 useState 返回的是对象，在解构对象的时候必须要和 useState 内部实现返回的对象同名，想要使用多次的话，必须得设置别名才能使用返回值\n\n下面来看看如果 useState 返回对象的情况：\n// 第一次使用\nconst &#123; state, setState &#125; = useState(false);\n// 第二次使用\nconst &#123; state: counter, setState: setCounter &#125; = useState(0) \n复制代码\n\n这里可以看到，返回对象的使用方式还是挺麻烦的，更何况实际项目中会使用的更频繁。 **总结：**useState 返回的是 array 而不是 object 的原因就是为了**降低使用的复杂度**，返回数组的话可以直接根据顺序解构，而返回对象的话要想使用多次就需要定义别名了。\n3. React Hooks 解决了哪些问题？React Hooks 主要解决了以下问题：\n（1）在组件之间复用状态逻辑很难\nReact 没有提供将可复用性行为“附加”到组件的途径（例如，把组件连接到 store）解决此类问题可以使用 render props 和 高阶组件。但是这类方案需要重新组织组件结构，这可能会很麻烦，并且会使代码难以理解。由 providers，consumers，高阶组件，render props 等其他抽象层组成的组件会形成“嵌套地狱”。尽管可以在 DevTools 过滤掉它们，但这说明了一个更深层次的问题：React 需要为共享状态逻辑提供更好的原生途径。\n可以使用 Hook 从组件中提取状态逻辑，使得这些逻辑可以单独测试并复用。Hook 使我们在无需修改组件结构的情况下复用状态逻辑。 这使得在组件间或社区内共享 Hook 变得更便捷。\n（2）复杂组件变得难以理解\n在组件中，每个生命周期常常包含一些不相关的逻辑。例如，组件常常在 componentDidMount 和 componentDidUpdate 中获取数据。但是，同一个 componentDidMount 中可能也包含很多其它的逻辑，如设置事件监听，而之后需在 componentWillUnmount 中清除。相互关联且需要对照修改的代码被进行了拆分，而完全不相关的代码却在同一个方法中组合在一起。如此很容易产生 bug，并且导致逻辑不一致。\n在多数情况下，不可能将组件拆分为更小的粒度，因为状态逻辑无处不在。这也给测试带来了一定挑战。同时，这也是很多人将 React 与状态管理库结合使用的原因之一。但是，这往往会引入了很多抽象概念，需要你在不同的文件之间来回切换，使得复用变得更加困难。\n为了解决这个问题，Hook 将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据），而并非强制按照生命周期划分。你还可以使用 reducer 来管理组件的内部状态，使其更加可预测。\n（3）难以理解的 class\n除了代码复用和代码管理会遇到困难外，class 是学习 React 的一大屏障。我们必须去理解 JavaScript 中 this 的工作方式，这与其他语言存在巨大差异。还不能忘记绑定事件处理器。没有稳定的语法提案，这些代码非常冗余。大家可以很好地理解 props，state 和自顶向下的数据流，但对 class 却一筹莫展。即便在有经验的 React 开发者之间，对于函数组件与 class 组件的差异也存在分歧，甚至还要区分两种组件的使用场景。\n为了解决这些问题，Hook 使你在非 class 的情况下可以使用更多的 React 特性。 从概念上讲，React 组件一直更像是函数。而 Hook 则拥抱了函数，同时也没有牺牲 React 的精神原则。Hook 提供了问题的解决方案，无需学习复杂的函数式或响应式编程技术\n4. React Hook 的使用限制有哪些？React Hooks 的限制主要有两条：\n\n不要在循环、条件或嵌套函数中调用 Hook；\n在 React 的函数组件中调用 Hook。\n\n那为什么会有这样的限制呢？Hooks 的设计初衷是为了改进 React 组件的开发模式。在旧有的开发模式下遇到了三个问题。\n\n组件之间难以复用状态逻辑。过去常见的解决方案是高阶组件、render props 及状态管理框架。\n复杂的组件变得难以理解。生命周期函数与业务逻辑耦合太深，导致关联部分难以拆分。\n人和机器都很容易混淆类。常见的有 this 的问题，但在 React 团队中还有类难以优化的问题，希望在编译优化层面做出一些改进。\n\n这三个问题在一定程度上阻碍了 React 的后续发展，所以为了解决这三个问题，Hooks 基于函数组件开始设计。然而第三个问题决定了 Hooks 只支持函数组件。\n那为什么不要在循环、条件或嵌套函数中调用 Hook 呢？因为 Hooks 的设计是基于数组实现。在调用时按顺序加入数组中，如果使用循环、条件或嵌套函数很有可能导致数组取值错位，执行错误的 Hook。当然，实质上 React 的源码里不是数组，是链表。\n这些限制会在编码上造成一定程度的心智负担，新手可能会写错，为了避免这样的情况，可以引入 ESLint 的 Hooks 检查插件进行预防。\n5. useEffect 与 useLayoutEffect 的区别（1）共同点\n\n运用效果： useEffect 与 useLayoutEffect 两者都是用于处理副作用，这些副作用包括改变 DOM、设置订阅、操作定时器等。在函数组件内部操作副作用是不被允许的，所以需要使用这两个函数去处理。\n使用方式： useEffect 与 useLayoutEffect 两者底层的函数签名是完全一致的，都是调用的 mountEffectImpl方法，在使用上也没什么差异，基本可以直接替换。\n\n（2）不同点\n\n使用场景： useEffect 在 React 的渲染过程中是被异步调用的，用于绝大多数场景；而 useLayoutEffect 会在所有的 DOM 变更之后同步调用，主要用于处理 DOM 操作、调整样式、避免页面闪烁等问题。也正因为是同步处理，所以需要避免在 useLayoutEffect 做计算量较大的耗时任务从而造成阻塞。\n使用效果： useEffect是按照顺序执行代码的，改变屏幕像素之后执行（先渲染，后改变DOM），当改变屏幕内容时可能会产生闪烁；useLayoutEffect是改变屏幕像素之前就执行了（会推迟页面显示的事件，先改变DOM后渲染），不会产生闪烁。useLayoutEffect总是比useEffect先执行。\n\n在未来的趋势上，两个 API 是会长期共存的，暂时没有删减合并的计划，需要开发者根据场景去自行选择。React 团队的建议非常实用，如果实在分不清，先用 useEffect，一般问题不大；如果页面有异常，再直接替换为 useLayoutEffect 即可。\n6. React Hooks在平时开发中需要注意的问题和原因（1）不要在循环，条件或嵌套函数中调用Hook，必须始终在 React函数的顶层使用Hook\n这是因为React需要利用调用顺序来正确更新相应的状态，以及调用相应的钩子函数。一旦在循环或条件分支语句中调用Hook，就容易导致调用顺序的不一致性，从而产生难以预料到的后果。\n（2）使用useState时候，使用push，pop，splice等直接更改数组对象的坑\n使用push直接更改数组无法获取到新值，应该采用析构方式，但是在class里面不会有这个问题。代码示例：\nfunction Indicatorfilter() &#123;\n  let [num,setNums] = useState([0,1,2,3])\n  const test = () => &#123;\n    // 这里坑是直接采用push去更新num\n    // setNums(num)是无法更新num的\n    // 必须使用num = [...num ,1]\n    num.push(1)\n    // num = [...num ,1]\n    setNums(num)\n  &#125;\nreturn (\n    &lt;div className='filter'>\n      &lt;div onClick=&#123;test&#125;>测试&lt;/div>\n        &lt;div>\n          &#123;num.map((item,index) => (\n              &lt;div key=&#123;index&#125;>&#123;item&#125;&lt;/div>\n          ))&#125;\n      &lt;/div>\n    &lt;/div>\n  )\n&#125;\n\nclass Indicatorfilter extends React.Component&lt;any,any>&#123;\n  constructor(props:any)&#123;\n      super(props)\n      this.state = &#123;\n          nums:[1,2,3]\n      &#125;\n      this.test = this.test.bind(this)\n  &#125;\n\n  test()&#123;\n      // class采用同样的方式是没有问题的\n      this.state.nums.push(1)\n      this.setState(&#123;\n          nums: this.state.nums\n      &#125;)\n  &#125;\n\n  render()&#123;\n      let &#123;nums&#125; = this.state\n      return(\n          &lt;div>\n              &lt;div onClick=&#123;this.test&#125;>测试&lt;/div>\n                  &lt;div>\n                      &#123;nums.map((item:any,index:number) => (\n                          &lt;div key=&#123;index&#125;>&#123;item&#125;&lt;/div>\n                      ))&#125;\n                  &lt;/div>\n          &lt;/div>\n\n      )\n  &#125;\n&#125;\n复制代码\n\n（3）useState设置状态的时候，只有第一次生效，后期需要更新状态，必须通过useEffect\nTableDeail是一个公共组件，在调用它的父组件里面，我们通过set改变columns的值，以为传递给TableDeail 的 columns是最新的值，所以tabColumn每次也是最新的值，但是实际tabColumn是最开始的值，不会随着columns的更新而更新：\nconst TableDeail = (&#123;\n    columns,\n&#125;:TableData) => &#123;\n    const [tabColumn, setTabColumn] = useState(columns) \n&#125;\n\n// 正确的做法是通过useEffect改变这个值\nconst TableDeail = (&#123;\n    columns,\n&#125;:TableData) => &#123;\n    const [tabColumn, setTabColumn] = useState(columns) \n    useEffect(() =>&#123;setTabColumn(columns)&#125;,[columns])\n&#125;\n\n复制代码\n\n（4）善用useCallback\n父组件传递给子组件事件句柄时，如果我们没有任何参数变动可能会选用useMemo。但是每一次父组件渲染子组件即使没变化也会跟着渲染一次。\n（5）不要滥用useContext\n可以使用基于 useContext 封装的状态管理工具。\n7. React Hooks 和生命周期的关系？函数组件 的本质是函数，没有 state 的概念的，因此不存在生命周期一说，仅仅是一个 render 函数而已。 但是引入 Hooks 之后就变得不同了，它能让组件在不使用 class 的情况下拥有 state，所以就有了生命周期的概念，所谓的生命周期其实就是 useState、 useEffect() 和 useLayoutEffect() 。\n即：Hooks 组件（使用了Hooks的函数组件）有生命周期，而函数组件（未使用Hooks的函数组件）是没有生命周期的。\n下面是具体的 class 与 Hooks 的生命周期对应关系：\n\nconstructor：函数组件不需要构造函数，可以通过调用 **useState 来初始化 state**。如果计算的代价比较昂贵，也可以传一个函数给 useState。\n\nconst [num, UpdateNum] = useState(0)\n复制代码\n\n\ngetDerivedStateFromProps：一般情况下，我们不需要使用它，可以在渲染过程中更新 state，以达到实现 getDerivedStateFromProps 的目的。\n\nfunction ScrollView(&#123;row&#125;) &#123;\n  let [isScrollingDown, setIsScrollingDown] = useState(false);\n  let [prevRow, setPrevRow] = useState(null);\n  if (row !== prevRow) &#123;\n    // Row 自上次渲染以来发生过改变。更新 isScrollingDown。\n    setIsScrollingDown(prevRow !== null &amp;&amp; row > prevRow);\n    setPrevRow(row);\n  &#125;\n  return `Scrolling down: $&#123;isScrollingDown&#125;`;\n&#125;\n复制代码\n\nReact 会立即退出第一次渲染并用更新后的 state 重新运行组件以避免耗费太多性能。\n\nshouldComponentUpdate：可以用 **React.memo** 包裹一个组件来对它的 props 进行浅比较\n\nconst Button = React.memo((props) => &#123;  // 具体的组件&#125;);\n复制代码\n\n注意：**React.memo 等效于 **``**PureComponent**，它只浅比较 props。这里也可以使用 useMemo 优化每一个节点。\n\nrender：这是函数组件体本身。\ncomponentDidMount, componentDidUpdate： useLayoutEffect 与它们两的调用阶段是一样的。但是，我们推荐你一开始先用 useEffect，只有当它出问题的时候再尝试使用 useLayoutEffect。useEffect 可以表达所有这些的组合。\n\n// componentDidMount\nuseEffect(()=>&#123;\n  // 需要在 componentDidMount 执行的内容\n&#125;, [])\nuseEffect(() => &#123; \n  // 在 componentDidMount，以及 count 更改时 componentDidUpdate 执行的内容\n  document.title = `You clicked $&#123;count&#125; times`; \n  return () => &#123;\n    // 需要在 count 更改时 componentDidUpdate（先于 document.title = ... 执行，遵守先清理后更新）\n    // 以及 componentWillUnmount 执行的内容       \n  &#125; // 当函数中 Cleanup 函数会按照在代码中定义的顺序先后执行，与函数本身的特性无关\n&#125;, [count]); // 仅在 count 更改时更新\n复制代码\n\n请记得 React 会等待浏览器完成画面渲染之后才会延迟调用 ，因此会使得额外操作很方便\n\ncomponentWillUnmount：相当于 useEffect 里面返回的 cleanup 函数\n\n// componentDidMount/componentWillUnmount\nuseEffect(()=>&#123;\n  // 需要在 componentDidMount 执行的内容\n  return function cleanup() &#123;\n    // 需要在 componentWillUnmount 执行的内容      \n  &#125;\n&#125;, [])\n复制代码\n\n\ncomponentDidCatch and getDerivedStateFromError：目前还没有这些方法的 Hook 等价写法，但很快会加上。\n\n\n\n\nclass 组件\nHooks 组件\n\n\n\nconstructor\nuseState\n\n\ngetDerivedStateFromProps\nuseState 里面 update 函数\n\n\nshouldComponentUpdate\nuseMemo\n\n\nrender\n函数本身\n\n\ncomponentDidMount\nuseEffect\n\n\ncomponentDidUpdate\nuseEffect\n\n\ncomponentWillUnmount\nuseEffect 里面返回的函数\n\n\ncomponentDidCatch\n无\n\n\ngetDerivedStateFromError\n无\n\n\n八、虚拟DOM1. 对虚拟 DOM 的理解？虚拟 DOM 主要做了什么？虚拟 DOM 本身是什么？从本质上来说，Virtual Dom是一个JavaScript对象，通过对象的方式来表示DOM结构。将页面的状态抽象为JS对象的形式，配合不同的渲染工具，使跨平台渲染成为可能。通过事务处理机制，将多次DOM修改的结果一次性的更新到页面上，从而有效的减少页面渲染的次数，减少修改DOM的重绘重排次数，提高渲染性能。\n虚拟DOM是对DOM的抽象，这个对象是更加轻量级的对DOM的描述。它设计的最初目的，就是更好的跨平台，比如node.js就没有DOM，如果想实现SSR，那么一个方式就是借助虚拟dom，因为虚拟dom本身是js对象。 在代码渲染到页面之前，vue或者react会把代码转换成一个对象（虚拟DOM）。以对象的形式来描述真实dom结构，最终渲染到页面。在每次数据发生变化前，虚拟dom都会缓存一份，变化之时，现在的虚拟dom会与缓存的虚拟dom进行比较。在vue或者react内部封装了diff算法，通过这个算法来进行比较，渲染时修改改变的变化，原先没有发生改变的通过原先的数据进行渲染。\n另外现代前端框架的一个基本要求就是无须手动操作DOM，一方面是因为手动操作DOM无法保证程序性能，多人协作的项目中如果review不严格，可能会有开发者写出性能较低的代码，另一方面更重要的是省略手动DOM操作可以大大提高开发效率。\n为什么要用 Virtual DOM：\n（1）保证性能下限，在不进行手动优化的情况下，提供过得去的性能\n下面对比一下修改DOM时真实DOM操作和Virtual DOM的过程，来看一下它们重排重绘的性能消耗∶\n\n真实DOM∶ 生成HTML字符串＋ 重建所有的DOM元素\nVirtual DOM∶ 生成vNode＋ DOMDiff＋必要的DOM更新\n\nVirtual DOM的更新DOM的准备工作耗费更多的时间，也就是JS层面，相比于更多的DOM操作它的消费是极其便宜的。尤雨溪在社区论坛中说道∶ 框架给你的保证是，你不需要手动优化的情况下，我依然可以给你提供过得去的性能。 （2）跨平台 Virtual DOM本质上是JavaScript的对象，它可以很方便的跨平台操作，比如服务端渲染、uniapp等。\n2. React diff 算法的原理是什么？实际上，diff 算法探讨的就是虚拟 DOM 树发生变化后，生成 DOM 树更新补丁的方式。它通过对比新旧两株虚拟 DOM 树的变更差异，将更新补丁作用于真实 DOM，以最小成本完成视图更新。  具体的流程如下：\n\n真实的 DOM 首先会映射为虚拟 DOM；\n当虚拟 DOM 发生变化后，就会根据差距计算生成 patch，这个 patch 是一个结构化的数据，内容包含了增加、更新、移除等；\n根据 patch 去更新真实的 DOM，反馈到用户的界面上。\n\n 一个简单的例子：\nimport React from 'react'\nexport default class ExampleComponent extends React.Component &#123;\n  render() &#123;\n    if(this.props.isVisible) &#123;\n       return &lt;div className=\"visible\">visbile&lt;/div>;\n    &#125;\n     return &lt;div className=\"hidden\">hidden&lt;/div>;\n  &#125;\n&#125;\n复制代码\n\n这里，首先假定 ExampleComponent 可见，然后再改变它的状态，让它不可见 。映射为真实的 DOM 操作是这样的，React 会创建一个 div 节点。\n&lt;div class=\"visible\">visbile&lt;/div>\n复制代码\n\n当把 visbile 的值变为 false 时，就会替换 class 属性为 hidden，并重写内部的 innerText 为 hidden。这样一个生成补丁、更新差异的过程统称为 diff 算法。\ndiff算法可以总结为三个策略，分别从树、组件及元素三个层面进行复杂度的优化：\n策略一：忽略节点跨层级操作场景，提升比对效率。（基于树进行对比）\n这一策略需要进行树比对，即对树进行分层比较。树比对的处理手法是非常“暴力”的，即两棵树只对同一层次的节点进行比较，如果发现节点已经不存在了，则该节点及其子节点会被完全删除掉，不会用于进一步的比较，这就提升了比对效率。\n策略二：如果组件的 class 一致，则默认为相似的树结构，否则默认为不同的树结构。（基于组件进行对比）\n在组件比对的过程中：\n\n如果组件是同一类型则进行树比对；\n如果不是则直接放入补丁中。\n\n只要父组件类型不同，就会被重新渲染。这也就是为什么 shouldComponentUpdate、PureComponent 及 React.memo 可以提高性能的原因。\n策略三：同一层级的子节点，可以通过标记 key 的方式进行列表对比。（基于节点进行对比）\n元素比对主要发生在同层级中，通过标记节点操作生成补丁。节点操作包含了插入、移动、删除等。其中节点重新排序同时涉及插入、移动、删除三个操作，所以效率消耗最大，此时策略三起到了至关重要的作用。通过标记 key 的方式，React 可以直接移动 DOM 节点，降低内耗。\n3. React key 是干嘛用的 为什么要加？key 主要是解决哪一类问题的Keys 是 React 用于追踪哪些列表中元素被修改、被添加或者被移除的辅助标识。在开发过程中，我们需要保证某个元素的 key 在其同级元素中具有唯一性。\n在 React Diff 算法中 React 会借助元素的 Key 值来判断该元素是新近创建的还是被移动而来的元素，从而减少不必要的元素重渲染此外，React 还需要借助 Key 值来判断元素与本地状态的关联关系。\n注意事项：\n\nkey值一定要和具体的元素—一对应；\n尽量不要用数组的index去作为key；\n不要在render的时候用随机数或者其他操作给元素加上不稳定的key，这样造成的性能开销比不加key的情况下更糟糕。\n\n4. 虚拟 DOM 的引入与直接操作原生 DOM 相比，哪一个效率更高，为什么虚拟DOM相对原生的DOM不一定是效率更高，如果只修改一个按钮的文案，那么虚拟 DOM 的操作无论如何都不可能比真实的 DOM 操作更快。在首次渲染大量DOM时，由于多了一层虚拟DOM的计算，虚拟DOM也会比innerHTML插入慢。它能保证性能下限，在真实DOM操作的时候进行针对性的优化时，还是更快的。所以要根据具体的场景进行探讨。\n在整个 DOM 操作的演化过程中，其实主要矛盾并不在于性能，而在于开发者写得爽不爽，在于研发体验/研发效率。虚拟 DOM 不是别的，正是前端开发们为了追求更好的研发体验和研发效率而创造出来的高阶产物。虚拟 DOM 并不一定会带来更好的性能，React 官方也从来没有把虚拟 DOM 作为性能层面的卖点对外输出过。虚拟 DOM 的优越之处在于，它能够在提供更爽、更高效的研发模式（也就是函数式的 UI 编程方式）的同时，仍然保持一个还不错的性能。\n5. React 与 Vue 的 diff 算法有何不同？diff 算法是指生成更新补丁的方式，主要应用于虚拟 DOM 树变化后，更新真实 DOM。所以 diff 算法一定存在这样一个过程：触发更新 → 生成补丁 → 应用补丁。\nReact 的 diff 算法，触发更新的时机主要在 state 变化与 hooks 调用之后。此时触发虚拟 DOM 树变更遍历，采用了深度优先遍历算法。但传统的遍历方式，效率较低。为了优化效率，使用了分治的方式。将单一节点比对转化为了 3 种类型节点的比对，分别是树、组件及元素，以此提升效率。\n\n树比对：由于网页视图中较少有跨层级节点移动，两株虚拟 DOM 树只对同一层次的节点进行比较。\n组件比对：如果组件是同一类型，则进行树比对，如果不是，则直接放入到补丁中。\n元素比对：主要发生在同层级中，通过标记节点操作生成补丁，节点操作对应真实的 DOM 剪裁操作。\n\n以上是经典的 React diff 算法内容。自 React 16 起，引入了 Fiber 架构。为了使整个更新过程可随时暂停恢复，节点与树分别采用了 FiberNode 与 FiberTree 进行重构。fiberNode 使用了双链表的结构，可以直接找到兄弟节点与子节点。整个更新过程由 current 与 workInProgress 两株树双缓冲完成。workInProgress 更新完成后，再通过修改 current 相关指针指向新节点。\nVue 的整体 diff 策略与 React 对齐，虽然缺乏时间切片能力，但这并不意味着 Vue 的性能更差，因为在 Vue 3 初期引入过，后期因为收益不高移除掉了。除了高帧率动画，在 Vue 中其他的场景几乎都可以使用防抖和节流去提高响应性能。\n九、其他1. React组件命名推荐的方式是哪个？通过引用而不是使用来命名组件displayName。\n使用displayName命名组件：\nexport default React.createClass(&#123;  displayName: 'TodoApp',  // ...&#125;)\n复制代码\n\nReact推荐的方法：\nexport default class TodoApp extends React.Component &#123;  // ...&#125;\n复制代码\n\n2. react 最新版本解决了什么问题，增加了哪些东西React 16.x的三大新特性 Time Slicing、Suspense、 hooks\n\nTime Slicing（解决CPU速度问题）使得在执行任务的期间可以随时暂停，跑去干别的事情，这个特性使得react能在性能极其差的机器跑时，仍然保持有良好的性能\nSuspense （解决网络IO问题） 和lazy配合，实现异步加载组件。 能暂停当前组件的渲染， 当完成某件事以后再继续渲染，解决从react出生到现在都存在的「异步副作用」的问题，而且解决得非的优雅，使用的是 T异步但是同步的写法，这是最好的解决异步问题的方式\n提供了一个内置函数componentDidCatch，当有错误发生时，可以友好地展示 fallback 组件; 可以捕捉到它的子元素（包括嵌套子元素）抛出的异常; 可以复用错误组件。\n\n（1）React16.8 加入hooks，让React函数式组件更加灵活，hooks之前，React存在很多问题：\n\n在组件间复用状态逻辑很难\n复杂组件变得难以理解，高阶组件和函数组件的嵌套过深。\nclass组件的this指向问题\n难以记忆的生命周期\n\nhooks很好的解决了上述问题，hooks提供了很多方法\n\nuseState 返回有状态值，以及更新这个状态值的函数\nuseEffect 接受包含命令式，可能有副作用代码的函数。\nuseContext 接受上下文对象（从 React.createContext返回的值）并返回当前上下文值，\nuseReducer useState 的替代方案。接受类型为 （state，action）=&gt; newState的reducer，并返回与dispatch方法配对的当前状态。\nuseCalLback 返回一个回忆的memoized版本，该版本仅在其中一个输入发生更改时才会更改。纯函数的输入输出确定性 o useMemo 纯的一个记忆函数 o useRef 返回一个可变的ref对象，其Current 属性被初始化为传递的参数，返回的 ref 对象在组件的整个生命周期内保持不变。\nuseImperativeMethods 自定义使用ref时公开给父组件的实例值\nuseMutationEffect 更新兄弟组件之前，它在React执行其DOM改变的同一阶段同步触发\nuseLayoutEffect DOM改变后同步触发。使用它来从DOM读取布局并同步重新渲染\n\n（2）React16.9\n\n重命名 Unsafe 的生命周期方法。新的 UNSAFE_前缀将有助于在代码 review 和 debug 期间，使这些有问题的字样更突出\n废弃 javascrip:形式的 URL。以javascript:开头的URL 非常容易遭受攻击，造成安全漏洞。\n废弃”Factory”组件。 工厂组件会导致 React 变大且变慢。\nact（）也支持异步函数，并且你可以在调用它时使用 await。\n使用 &lt;React.ProfiLer&gt; 进行性能评估。在较大的应用中追踪性能回归可能会很方便\n\n（3）React16.13.0\n\n支持在渲染期间调用setState，但仅适用于同一组件\n可检测冲突的样式规则并记录警告\n废弃 unstable_createPortal，使用CreatePortal\n将组件堆栈添加到其开发警告中，使开发人员能够隔离bug并调试其程序，这可以清楚地说明问题所在，并更快地定位和修复错误。\n\n3. react 实现一个全局的 dialogimport React, &#123; Component &#125; from 'react';\nimport &#123; is, fromJS &#125; from 'immutable';\nimport ReactDOM from 'react-dom';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport './dialog.css';\nlet defaultState = &#123;\n  alertStatus:false,\n  alertTip:\"提示\",\n  closeDialog:function()&#123;&#125;,\n  childs:''\n&#125;\nclass Dialog extends Component&#123;\n  state = &#123;\n    ...defaultState\n  &#125;;\n  // css动画组件设置为目标组件\n  FirstChild = props => &#123;\n    const childrenArray = React.Children.toArray(props.children);\n    return childrenArray[0] || null;\n  &#125;\n  //打开弹窗\n  open =(options)=>&#123;\n    options = options || &#123;&#125;;\n    options.alertStatus = true;\n    var props = options.props || &#123;&#125;;\n    var childs = this.renderChildren(props,options.childrens) || '';\n    console.log(childs);\n    this.setState(&#123;\n      ...defaultState,\n      ...options,\n      childs\n    &#125;)\n  &#125;\n  //关闭弹窗\n  close()&#123;\n    this.state.closeDialog();\n    this.setState(&#123;\n      ...defaultState\n    &#125;)\n  &#125;\n  renderChildren(props,childrens) &#123;\n    //遍历所有子组件\n    var childs = [];\n    childrens = childrens || [];\n    var ps = &#123;\n        ...props,  //给子组件绑定props\n        _close:this.close  //给子组件也绑定一个关闭弹窗的事件    \n       &#125;;\n    childrens.forEach((currentItem,index) => &#123;\n        childs.push(React.createElement(\n            currentItem,\n            &#123;\n                ...ps,\n                key:index\n            &#125;\n        ));\n    &#125;)\n    return childs;\n  &#125;\n  shouldComponentUpdate(nextProps, nextState)&#123;\n    return !is(fromJS(this.props), fromJS(nextProps)) || !is(fromJS(this.state), fromJS(nextState))\n  &#125;\n   \n  render()&#123;\n    return (\n      &lt;ReactCSSTransitionGroup\n        component=&#123;this.FirstChild&#125;\n        transitionName='hide'\n        transitionEnterTimeout=&#123;300&#125;\n        transitionLeaveTimeout=&#123;300&#125;>\n        &lt;div className=\"dialog-con\" style=&#123;this.state.alertStatus? &#123;display:'block'&#125;:&#123;display:'none'&#125;&#125;>\n            &#123;this.state.childs&#125;\n        &lt;/div>\n      &lt;/ReactCSSTransitionGroup>\n    );\n  &#125;\n&#125;\nlet div = document.createElement('div');\nlet props = &#123;\n   \n&#125;;\ndocument.body.appendChild(div);\nlet Box = ReactD\n复制代码\n\n子类：\n//子类jsx\nimport React, &#123; Component &#125; from 'react';\nclass Child extends Component &#123;\n    constructor(props)&#123;\n        super(props);\n        this.state = &#123;date: new Date()&#125;;\n  &#125;\n  showValue=()=>&#123;\n    this.props.showValue &amp;&amp; this.props.showValue()\n  &#125;\n  render() &#123;\n    return (\n      &lt;div className=\"Child\">\n        &lt;div className=\"content\">\n           Child\n           &lt;button onClick=&#123;this.showValue&#125;>调用父的方法&lt;/button>\n        &lt;/div>\n      &lt;/div>\n    );\n  &#125;\n&#125;\nexport default Child;\n复制代码\n\ncss：\n.dialog-con&#123;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.3);\n&#125;\n复制代码\n\n4. React 数据持久化有什么实践吗？封装数据持久化组件：\n】let storage=&#123;\n    // 增加\n    set(key, value)&#123;\n        localStorage.setItem(key, JSON.stringify(value));\n    &#125;,\n    // 获取\n    get(key)&#123;\n        return JSON.parse(localStorage.getItem(key));\n    &#125;,\n    // 删除\n    remove(key)&#123;\n        localStorage.removeItem(key);\n    &#125;\n&#125;;\nexport default Storage;\n复制代码\n\n在React项目中，通过redux存储全局数据时，会有一个问题，如果用户刷新了网页，那么通过redux存储的全局数据就会被全部清空，比如登录信息等。这时就会有全局数据持久化存储的需求。首先想到的就是localStorage，localStorage是没有时间限制的数据存储，可以通过它来实现数据的持久化存储。\n但是在已经使用redux来管理和存储全局数据的基础上，再去使用localStorage来读写数据，这样不仅是工作量巨大，还容易出错。那么有没有结合redux来达到持久数据存储功能的框架呢？当然，它就是redux-persist。redux-persist会将redux的store中的数据缓存到浏览器的localStorage中。其使用步骤如下：\n（1）首先要安装redux-persist：\nnpm i redux-persist\n复制代码\n\n（2）对于reducer和action的处理不变，只需修改store的生成代码，修改如下：\nimport &#123;createStore&#125; from 'redux'\nimport reducers from '../reducers/index'\nimport &#123;persistStore, persistReducer&#125; from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\nconst persistConfig = &#123;\n    key: 'root',\n    storage: storage,\n    stateReconciler: autoMergeLevel2 // 查看 'Merge Process' 部分的具体情况\n&#125;;\nconst myPersistReducer = persistReducer(persistConfig, reducers)\nconst store = createStore(myPersistReducer)\nexport const persistor = persistStore(store)\nexport default store\n复制代码\n\n（3）在index.js中，将PersistGate标签作为网页内容的父标签：\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport &#123;Provider&#125; from 'react-redux'\nimport store from './redux/store/store'\nimport &#123;persistor&#125; from './redux/store/store'\nimport &#123;PersistGate&#125; from 'redux-persist/lib/integration/react';\nReactDOM.render(&lt;Provider store=&#123;store&#125;>\n            &lt;PersistGate loading=&#123;null&#125; persistor=&#123;persistor&#125;>\n                &#123;/*网页内容*/&#125;\n            &lt;/PersistGate>\n        &lt;/Provider>, document.getElementById('root'));\n复制代码\n\n这就完成了通过redux-persist实现React持久化本地数据存储的简单应用。\n5. 对 React 和 Vue 的理解，它们的异同相似之处：\n\n都将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库\n都有自己的构建工具，能让你得到一个根据最佳实践设置的项目模板。\n都使用了Virtual DOM（虚拟DOM）提高重绘性能\n都有props的概念，允许组件间的数据传递\n都鼓励组件化应用，将应用分拆成一个个功能明确的模块，提高复用性\n\n不同之处：\n1）数据流\nVue默认支持数据双向绑定，而React一直提倡单向数据流\n2）虚拟DOM\nVue2.x开始引入”Virtual DOM”，消除了和React在这方面的差异，但是在具体的细节还是有各自的特点。\n\nVue宣称可以更快地计算出Virtual DOM的差异，这是由于它在渲染过程中，会跟踪每一个组件的依赖关系，不需要重新渲染整个组件树。\n对于React而言，每当应用的状态被改变时，全部子组件都会重新渲染。当然，这可以通过 PureComponent/shouldComponentUpdate这个生命周期方法来进行控制，但Vue将此视为默认的优化。\n\n3）组件化\nReact与Vue最大的不同是模板的编写。\n\nVue鼓励写近似常规HTML的模板。写起来很接近标准 HTML元素，只是多了一些属性。\nReact推荐你所有的模板通用JavaScript的语法扩展——JSX书写。\n\n具体来讲：React中render函数是支持闭包特性的，所以我们import的组件在render中可以直接调用。但是在Vue中，由于模板中使用的数据都必须挂在 this 上进行一次中转，所以 import 完组件之后，还需要在 components 中再声明下。\n4）监听数据变化的实现原理不同\n\nVue 通过 getter/setter 以及一些函数的劫持，能精确知道数据变化，不需要特别的优化就能达到很好的性能\nReact 默认是通过比较引用的方式进行的，如果不优化（PureComponent/shouldComponentUpdate）可能导致大量不必要的vDOM的重新渲染。这是因为 Vue 使用的是可变数据，而React更强调数据的不可变。\n\n5）高阶组件\nreact可以通过高阶组件（Higher Order Components– HOC）来扩展，而vue需要通过mixins来扩展。\n原因高阶组件就是高阶函数，而React的组件本身就是纯粹的函数，所以高阶函数对React来说易如反掌。相反Vue.js使用HTML模板创建视图组件，这时模板无法有效的编译，因此Vue不采用HOC来实现。\n6）构建工具\n两者都有自己的构建工具\n\nReact ==&gt; Create React APP\nVue ==&gt; vue-cli\n\n7）跨平台\n\nReact ==&gt; React Native\nVue ==&gt; Weex\n\n6. 可以使用TypeScript写React应用吗？怎么操作？（1）如果还未创建 Create React App 项目\n\n直接创建一个具有 typescript 的 Create React App 项目：\n\n npx create-react-app demo --typescript\n复制代码\n\n（2）如果已经创建了 Create React App 项目，需要将 typescript 引入到已有项目中\n\n通过命令将 typescript 引入项目：\n\nnpm install --save typescript @types/node @types/react @types/react-dom @types/jest\n复制代码\n\n\n将项目中任何 后缀名为 ‘.js’ 的 JavaScript 文件重命名为 TypeScript 文件即后缀名为 ‘.tsx’（例如 src/index.js 重命名为 src/index.tsx ）\n\n7. React 设计思路，它的理念是什么？（1）编写简单直观的代码\nReact最大的价值不是高性能的虚拟DOM、封装的事件机制、服务器端渲染，而是声明式的直观的编码方式。react文档第一条就是声明式，React 使创建交互式 UI 变得轻而易举。为应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。 以声明式编写 UI，可以让代码更加可靠，且方便调试。\n（2）简化可复用的组件\nReact框架里面使用了简化的组件模型，但更彻底地使用了组件化的概念。React将整个UI上的每一个功能模块定义成组件，然后将小的组件通过组合或者嵌套的方式构成更大的组件。React的组件具有如下的特性∶\n\n可组合：简单组件可以组合为复杂的组件\n可重用：每个组件都是独立的，可以被多个组件使用\n可维护：和组件相关的逻辑和UI都封装在了组件的内部，方便维护\n可测试：因为组件的独立性，测试组件就变得方便很多。\n\n（3) Virtual DOM\n真实页面对应一个 DOM 树。在传统页面的开发模式中，每次需要更新页面时，都要手动操作 DOM 来进行更新。 DOM 操作非常昂贵。在前端开发中，性能消耗最大的就是 DOM 操作，而且这部分代码会让整体项目的代码变得难 以维护。React 把真实 DOM 树转换成 JavaScript 对象树，也就是 Virtual DOM，每次数据更新后，重新计算 Virtual DOM，并和上一次生成的 Virtual DOM 做对比，对发生变化的部分做批量更新。React 也提供了直观的 shouldComponentUpdate 生命周期回调，来减少数据变化后不必要的 Virtual DOM 对比过程，以保证性能。\n（4）函数式编程\nReact 把过去不断重复构建 UI 的过程抽象成了组件，且在给定参数的情况下约定渲染对应的 UI 界面。React 能充分利用很多函数式方法去减少冗余代码。此外，由于它本身就是简单函数，所以易于测试。\n（5）一次学习，随处编写\n无论现在正在使用什么技术栈，都可以随时引入 React来开发新特性，而不需要重写现有代码。\nReact 还可以使用 Node 进行服务器渲染，或使用 React Native 开发原生移动应用。因为 React 组件可以映射为对应的原生控件。在输出的时候，是输出 Web DOM，还是 Android 控件，还是 iOS 控件，就由平台本身决定了。所以，react很方便和其他平台集成\n8. React中props.children和React.Children的区别在React中，当涉及组件嵌套，在父组件中使用props.children把所有子组件显示出来。如下：\nfunction ParentComponent(props)&#123;\n\treturn (\n\t\t&lt;div>\n\t\t\t&#123;props.children&#125;\n\t\t&lt;/div>\n\t)\n&#125;\n复制代码\n\n如果想把父组件中的属性传给所有的子组件，需要使用React.Children方法。\n比如，把几个Radio组合起来，合成一个RadioGroup，这就要求所有的Radio具有同样的name属性值。可以这样：把Radio看做子组件，RadioGroup看做父组件，name的属性值在RadioGroup这个父组件中设置。\n首先是子组件：\n//子组件\nfunction RadioOption(props) &#123;\n  return (\n    &lt;label>\n      &lt;input type=\"radio\" value=&#123;props.value&#125; name=&#123;props.name&#125; />\n      &#123;props.label&#125;\n    &lt;/label>\n  )\n&#125;\n复制代码\n\n然后是父组件，不仅需要把它所有的子组件显示出来，还需要为每个子组件赋上name属性和值：\n//父组件用,props是指父组件的props\nfunction renderChildren(props) &#123;\n    \n  //遍历所有子组件\n  return React.Children.map(props.children, child => &#123;\n    if (child.type === RadioOption)\n      return React.cloneElement(child, &#123;\n        //把父组件的props.name赋值给每个子组件\n        name: props.name\n      &#125;)\n    else\n      return child\n  &#125;)\n&#125;\n//父组件\nfunction RadioGroup(props) &#123;\n  return (\n    &lt;div>\n      &#123;renderChildren(props)&#125;\n    &lt;/div>\n  )\n&#125;\nfunction App() &#123;\n  return (\n    &lt;RadioGroup name=\"hello\">\n      &lt;RadioOption label=\"选项一\" value=\"1\" />\n      &lt;RadioOption label=\"选项二\" value=\"2\" />\n      &lt;RadioOption label=\"选项三\" value=\"3\" />\n    &lt;/RadioGroup>\n  )\n&#125;\nexport default App;\n复制代码\n\n以上，React.Children.map让我们对父组件的所有子组件又更灵活的控制。\n9. React的状态提升是什么？使用场景有哪些？React的状态提升就是用户对子组件操作，子组件不改变自己的状态，通过自己的props把这个操作改变的数据传递给父组件，改变父组件的状态，从而改变受父组件控制的所有子组件的状态，这也是React单项数据流的特性决定的。官方的原话是：共享 state(状态) 是通过将其移动到需要它的组件的最接近的共同祖先组件来实现的。 这被称为“状态提升(Lifting State Up)”。\n概括来说就是将多个组件需要共享的状态提升到它们最近的父组件上，在父组件上改变这个状态然后通过props分发给子组件。\n一个简单的例子，父组件中有两个input子组件，如果想在第一个输入框输入数据，来改变第二个输入框的值，这就需要用到状态提升。\nclass Father extends React.Component &#123;\n    constructor(props) &#123;\n        super(props)\n        this.state = &#123;\n            Value1: '',\n            Value2: ''\n        &#125;\n    &#125;\n    value1Change(aa) &#123;\n        this.setState(&#123;\n            Value1: aa\n        &#125;)\n    &#125;\n    value2Change(bb) &#123;\n        this.setState(&#123;\n            Value2: bb\n        &#125;)\n    &#125;\n    render() &#123;\n        return (\n            &lt;div style=&#123;&#123; padding: \"100px\" &#125;&#125;>\n                &lt;Child1 value1=&#123;this.state.Value1&#125; onvalue1Change=&#123;this.value1Change.bind(this)&#125; />\n                \n\n                &lt;Child2 value2=&#123;this.state.Value1&#125; />\n            &lt;/div>\n        )\n    &#125;\n&#125;\nclass Child1 extends React.Component &#123;\n    constructor(props) &#123;\n        super(props)\n    &#125;\n    changeValue(e) &#123;\n        this.props.onvalue1Change(e.target.value)\n    &#125;\n    render() &#123;\n        return (\n            &lt;input value=&#123;this.props.Value1&#125; onChange=&#123;this.changeValue.bind(this)&#125; />\n        )\n    &#125;\n&#125;\nclass Child2 extends React.Component &#123;\n    constructor(props) &#123;\n        super(props)\n    &#125;\n    render() &#123;\n        return (\n            &lt;input value=&#123;this.props.value2&#125; />\n        )\n    &#125;\n&#125;\n \nReactDOM.render(\n    &lt;Father />,\n    document.getElementById('root')\n)\n复制代码\n\n10. React中constructor和getInitialState的区别?两者都是用来初始化state的。前者是ES6中的语法，后者是ES5中的语法，新版本的React中已经废弃了该方法。\ngetInitialState是ES5中的方法，如果使用createClass方法创建一个Component组件，可以自动调用它的getInitialState方法来获取初始化的State对象，\nvar APP = React.creatClass (&#123;\n  getInitialState() &#123;\n    return &#123; \n        userName: 'hi',\n        userId: 0\n     &#125;;\n　&#125;\n&#125;)\n复制代码\n\nReact在ES6的实现中去掉了getInitialState这个hook函数，规定state在constructor中实现，如下：\nClass App extends React.Component&#123;\n    constructor(props)&#123;\n      super(props);\n      this.state=&#123;&#125;;\n    &#125;\n  &#125;\n复制代码\n\n11. React的严格模式如何使用，有什么用处？StrictMode 是一个用来突出显示应用程序中潜在问题的工具。与 Fragment 一样，StrictMode 不会渲染任何可见的 UI。它为其后代元素触发额外的检查和警告。 可以为应用程序的任何部分启用严格模式。例如：\nimport React from 'react';\nfunction ExampleApplication() &#123;\n  return (\n    &lt;div>\n      &lt;Header />\n      &lt;React.StrictMode>        \n        &lt;div>\n          &lt;ComponentOne />\n          &lt;ComponentTwo />\n        &lt;/div>\n      &lt;/React.StrictMode>      \n      &lt;Footer />\n    &lt;/div>\n  );\n&#125;\n复制代码\n\n在上述的示例中，不会对 Header 和 Footer 组件运行严格模式检查。但是，ComponentOne 和 ComponentTwo 以及它们的所有后代元素都将进行检查。\nStrictMode 目前有助于：\n\n识别不安全的生命周期\n关于使用过时字符串 ref API 的警告\n关于使用废弃的 findDOMNode 方法的警告\n检测意外的副作用\n检测过时的 context API\n\n12. 在React中遍历的方法有哪些？（1）遍历数组：map &amp;&amp; forEach\nimport React from 'react';\n\nclass App extends React.Component &#123;\n  render() &#123;\n    let arr = ['a', 'b', 'c', 'd'];\n    return (\n      &lt;ul>\n        &#123;\n          arr.map((item, index) => &#123;\n            return &lt;li key=&#123;index&#125;>&#123;item&#125;&lt;/li>\n          &#125;)\n        &#125;\n      &lt;/ul>\n    )\n  &#125;\n&#125;\n\nclass App extends React.Component &#123;\n  render() &#123;\n    let arr = ['a', 'b', 'c', 'd'];\n    return (\n      &lt;ul>\n        &#123;\n          arr.forEach((item, index) => &#123;\n            return &lt;li key=&#123;index&#125;>&#123;item&#125;&lt;/li>\n          &#125;)\n        &#125;\n      &lt;/ul>\n    )\n  &#125;\n&#125;\n复制代码\n\n（2）遍历对象：map &amp;&amp; for in\nclass App extends React.Component &#123;\n  render() &#123;\n    let obj = &#123;\n      a: 1,\n      b: 2,\n      c: 3\n    &#125;\n    return (\n      &lt;ul>\n        &#123;\n          (() => &#123;\n            let domArr = [];\n            for(const key in obj) &#123;\n              if(obj.hasOwnProperty(key)) &#123;\n                const value = obj[key]\n                domArr.push(&lt;li key=&#123;key&#125;>&#123;value&#125;&lt;/li>)\n              &#125;\n            &#125;\n            return domArr;\n          &#125;)()\n        &#125;\n      &lt;/ul>\n    )\n  &#125;\n&#125;\n\n// Object.entries() 把对象转换成数组\nclass App extends React.Component &#123;\n  render() &#123;\n    let obj = &#123;\n      a: 1,\n      b: 2,\n      c: 3\n    &#125;\n    return (\n      &lt;ul>\n        &#123;\n          Object.entries(obj).map(([key, value], index) => &#123;   // item是一个数组，把item解构，写法是[key, value]\n            return &lt;li key=&#123;key&#125;>&#123;value&#125;&lt;/li>\n          &#125;) \n        &#125;\n      &lt;/ul>\n    )\n  &#125;\n&#125;\n复制代码\n\n13. 在React中页面重新加载时怎样保留数据？这个问题就设计到了数据持久化， 主要的实现方式有以下几种：\n\nRedux： 将页面的数据存储在redux中，在重新加载页面时，获取Redux中的数据；\ndata.js： 使用webpack构建的项目，可以建一个文件，data.js，将数据保存data.js中，跳转页面后获取；\nsessionStorge： 在进入选择地址页面之前，componentWillUnMount的时候，将数据存储到sessionStorage中，每次进入页面判断sessionStorage中有没有存储的那个值，有，则读取渲染数据；没有，则说明数据是初始化的状态。返回或进入除了选择地址以外的页面，清掉存储的sessionStorage，保证下次进入是初始化的数据\nhistory API： History API 的 pushState 函数可以给历史记录关联一个任意的可序列化 state，所以可以在路由 push 的时候将当前页面的一些信息存到 state 中，下次返回到这个页面的时候就能从 state 里面取出离开前的数据重新渲染。react-router 直接可以支持。这个方法适合一些需要临时存储的场景。\n\n14. 同时引用这三个库react.js、react-dom.js和babel.js它们都有什么作用？\nreact：包含react所必须的核心代码\nreact-dom：react渲染在不同平台所需要的核心代码\nbabel：将jsx转换成React代码的工具\n\n15. React必须使用JSX吗？React 并不强制要求使用 JSX。当不想在构建环境中配置有关 JSX 编译时，不在 React 中使用 JSX 会更加方便。\n每个 JSX 元素只是调用 React.createElement(component, props, ...children) 的语法糖。因此，使用 JSX 可以完成的任何事情都可以通过纯 JavaScript 完成。\n例如，用 JSX 编写的代码：\nclass Hello extends React.Component &#123;\n  render() &#123;\n    return &lt;div>Hello &#123;this.props.toWhat&#125;&lt;/div>;\n  &#125;\n&#125;\nReactDOM.render(\n  &lt;Hello toWhat=\"World\" />,\n  document.getElementById('root')\n);\n复制代码\n\n可以编写为不使用 JSX 的代码：\nclass Hello extends React.Component &#123;\n  render() &#123;\n    return React.createElement('div', null, `Hello $&#123;this.props.toWhat&#125;`);\n  &#125;\n&#125;\nReactDOM.render(\n  React.createElement(Hello, &#123;toWhat: 'World'&#125;, null),\n  document.getElementById('root')\n);\n复制代码\n\n16. 为什么使用jsx的组件中没有看到使用react却需要引入react？本质上来说JSX是React.createElement(component, props, ...children)方法的语法糖。在React 17之前，如果使用了JSX，其实就是在使用React， babel 会把组件转换为 CreateElement 形式。在React 17之后，就不再需要引入，因为 babel 已经可以帮我们自动引入react。\n17. 在React中怎么使用async/await？async/await是ES7标准中的新特性。如果是使用React官方的脚手架创建的项目，就可以直接使用。如果是在自己搭建的webpack配置的项目中使用，可能会遇到 regeneratorRuntime is not defined 的异常错误。那么我们就需要引入babel，并在babel中配置使用async/await。可以利用babel的 transform-async-to-module-method 插件来转换其成为浏览器支持的语法，虽然没有性能的提升，但对于代码编写体验要更好。\n18. React.Children.map和js的map有什么区别？JavaScript中的map不会对为null或者undefined的数据进行处理，而React.Children.map中的map可以处理React.Children为null或者undefined的情况。\n19. 对React SSR的理解服务端渲染是数据与模版组成的html，即 HTML = 数据 ＋ 模版。将组件或页面通过服务器生成html字符串，再发送到浏览器，最后将静态标记”混合”为客户端上完全交互的应用程序。页面没使用服务渲染，当请求页面时，返回的body里为空，之后执行js将html结构注入到body里，结合css显示出来;\nSSR的优势：\n\n对SEO友好\n所有的模版、图片等资源都存在服务器端\n一个html返回所有数据\n减少HTTP请求\n响应快、用户体验好、首屏渲染快\n\n1）更利于SEO\n不同爬虫工作原理类似，只会爬取源码，不会执行网站的任何脚本使用了React或者其它MVVM框架之后，页面大多数DOM元素都是在客户端根据js动态生成，可供爬虫抓取分析的内容大大减少。另外，浏览器爬虫不会等待我们的数据完成之后再去抓取页面数据。服务端渲染返回给客户端的是已经获取了异步数据并执行JavaScript脚本的最终HTML，网络爬中就可以抓取到完整页面的信息。\n2）更利于首屏渲染\n首屏的渲染是node发送过来的html字符串，并不依赖于js文件了，这就会使用户更快的看到页面的内容。尤其是针对大型单页应用，打包后文件体积比较大，普通客户端渲染加载所有所需文件时间较长，首页就会有一个很长的白屏等待时间。\nSSR的局限：\n1）服务端压力较大\n本来是通过客户端完成渲染，现在统一到服务端node服务去做。尤其是高并发访问的情况，会大量占用服务端CPU资源;\n2）开发条件受限\n在服务端渲染中，只会执行到componentDidMount之前的生命周期钩子，因此项目引用的第三方的库也不可用其它生命周期钩子，这对引用库的选择产生了很大的限制;\n3）学习成本相对较高 除了对webpack、MVVM框架要熟悉，还需要掌握node、 Koa2等相关技术。相对于客户端渲染，项目构建、部署过程更加复杂。\n时间耗时比较：\n1）数据请求\n由服务端请求首屏数据，而不是客户端请求首屏数据，这是”快”的一个主要原因。服务端在内网进行请求，数据响应速度快。客户端在不同网络环境进行数据请求，且外网http请求开销大，导致时间差\n\n客户端数据请求\n\n\n\n服务端数据请求\n\n 2）html渲染 服务端渲染是先向后端服务器请求数据，然后生成完整首屏 html返回给浏览器；而客户端渲染是等js代码下载、加载、解析完成后再请求数据渲染，等待的过程页面是什么都没有的，就是用户看到的白屏。就是服务端渲染不需要等待js代码下载完成并请求数据，就可以返回一个已有完整数据的首屏页面。\n\n非ssr html渲染\n\n\n\nssr html渲染\n\n\n20. 为什么 React 要用 JSX？JSX 是一个 JavaScript 的语法扩展，或者说是一个类似于 XML 的 ECMAScript 语法扩展。它本身没有太多的语法定义，也不期望引入更多的标准。\n其实 React 本身并不强制使用 JSX。在没有 JSX 的时候，React 实现一个组件依赖于使用 React.createElement 函数。代码如下：\nclass Hello extends React.Component &#123;\n  render() &#123;\n    return React.createElement(\n        'div',\n        null, \n        `Hello $&#123;this.props.toWhat&#125;`\n      );\n  &#125;\n&#125;\nReactDOM.render(\n  React.createElement(Hello, &#123;toWhat: 'World'&#125;, null),\n  document.getElementById('root')\n);\n复制代码\n\n而 JSX 更像是一种语法糖，通过类似 XML 的描述方式，描写函数对象。在采用 JSX 之后，这段代码会这样写：\nclass Hello extends React.Component &#123;\n  render() &#123;\n    return &lt;div>Hello &#123;this.props.toWhat&#125;&lt;/div>;\n  &#125;\n&#125;\nReactDOM.render(\n  &lt;Hello toWhat=\"World\" />,\n  document.getElementById('root')\n);\n复制代码\n\n通过对比，可以清晰地发现，代码变得更为简洁，而且代码结构层次更为清晰。\n因为 React 需要将组件转化为虚拟 DOM 树，所以在编写代码时，实际上是在手写一棵结构树。而XML 在树结构的描述上天生具有可读性强的优势。\n但这样可读性强的代码仅仅是给写程序的同学看的，实际上在运行的时候，会使用 Babel 插件将 JSX 语法的代码还原为 React.createElement 的代码。\n总结： JSX 是一个 JavaScript 的语法扩展，结构类似 XML。JSX 主要用于声明 React 元素，但 React 中并不强制使用 JSX。即使使用了 JSX，也会在构建过程中，通过 Babel 插件编译为 React.createElement。所以 JSX 更像是 React.createElement 的一种语法糖。\nReact 团队并不想引入 JavaScript 本身以外的开发体系。而是希望通过合理的关注点分离保持组件开发的纯粹性。\n21. HOC相比 mixins 有什么优点？HOC 和 Vue 中的 mixins 作用是一致的，并且在早期 React 也是使用 mixins 的方式。但是在使用 class 的方式创建组件以后，mixins 的方式就不能使用了，并且其实 mixins 也是存在一些问题的，比如：\n\n隐含了一些依赖，比如我在组件中写了某个 state 并且在 mixin 中使用了，就这存在了一个依赖关系。万一下次别人要移除它，就得去 mixin 中查找依赖\n多个 mixin 中可能存在相同命名的函数，同时代码组件中也不能出现相同命名的函数，否则就是重写了，其实我一直觉得命名真的是一件麻烦事。。\n雪球效应，虽然我一个组件还是使用着同一个 mixin，但是一个 mixin 会被多个组件使用，可能会存在需求使得 mixin 修改原本的函数或者新增更多的函数，这样可能就会产生一个维护成本\n\nHOC 解决了这些问题，并且它们达成的效果也是一致的，同时也更加的政治正确（毕竟更加函数式了）。\n22. React 中的高阶组件运用了什么设计模式？使用了装饰模式，高阶组件的运用：\nfunction withWindowWidth(BaseComponent) &#123;\n  class DerivedClass extends React.Component &#123;\n    state = &#123;\n      windowWidth: window.innerWidth,\n    &#125;\n    onResize = () => &#123;\n      this.setState(&#123;\n        windowWidth: window.innerWidth,\n      &#125;)\n    &#125;\n    componentDidMount() &#123;\n      window.addEventListener('resize', this.onResize)\n    &#125;\n    componentWillUnmount() &#123;\n      window.removeEventListener('resize', this.onResize);\n    &#125;\n    render() &#123;\n      return &lt;BaseComponent &#123;...this.props&#125; &#123;...this.state&#125;/>\n    &#125;\n  &#125;\n  return DerivedClass;\n&#125;\nconst MyComponent = (props) => &#123;\n  return &lt;div>Window width is: &#123;props.windowWidth&#125;&lt;/div>\n&#125;;\nexport default withWindowWidth(MyComponent);\n复制代码\n\n装饰模式的特点是不需要改变 被装饰对象 本身，而只是在外面套一个外壳接口。JavaScript 目前已经有了原生装饰器的提案，其用法如下：\n@testable\n   class MyTestableClass &#123;\n&#125;\n","slug":"React面试题","date":"2022-04-10T12:16:43.000Z","categories_index":"知识点","tags_index":"面试","author_index":"LIYUNFU"},{"id":"4107f22ea5c4f17ae1d9ef16d88c06b2","title":"vue面试题","content":"一、Vue 基础1. Vue的基本原理当一个Vue实例创建时，Vue会遍历data中的属性，用 Object.defineProperty（vue3.0使用proxy ）将它们转为 getter/setter，并且在内部追踪相关依赖，在属性被访问和修改时通知变化。 每个组件实例都有相应的 watcher 程序实例，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的setter被调用时，会通知watcher重新计算，从而致使它关联的组件得以更新。 \n2. 双向数据绑定的原理Vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。主要分为以下几个步骤：\n\n需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上setter和getter这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化\ncompile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图\nWatcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是: ①在自身实例化时往属性订阅器(dep)里面添加自己 ②自身必须有一个update()方法 ③待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。\nMVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据model变更的双向绑定效果。\n\n\n3. 使用 Object.defineProperty() 来进行数据劫持有什么缺点？在对一些属性进行操作时，使用这种方法无法拦截，比如通过下标方式修改数组数据或者给对象新增属性，这都不能触发组件的重新渲染，因为 Object.defineProperty 不能拦截到这些操作。更精确的来说，对于数组而言，大部分操作都是拦截不到的，只是 Vue 内部通过重写函数的方式解决了这个问题。\n在 Vue3.0 中已经不使用这种方式了，而是通过使用 Proxy 对对象进行代理，从而实现数据劫持。使用Proxy 的好处是它可以完美的监听到任何方式的数据改变，唯一的缺点是兼容性的问题，因为 Proxy 是 ES6 的语法。\n4. MVVM、MVC、MVP的区别MVC、MVP 和 MVVM 是三种常见的软件架构设计模式，主要通过分离关注点的方式来组织代码结构，优化开发效率。\n在开发单页面应用时，往往一个路由页面对应了一个脚本文件，所有的页面逻辑都在一个脚本文件里。页面的渲染、数据的获取，对用户事件的响应所有的应用逻辑都混合在一起，这样在开发简单项目时，可能看不出什么问题，如果项目变得复杂，那么整个文件就会变得冗长、混乱，这样对项目开发和后期的项目维护是非常不利的。\n（1）MVC\nMVC 通过分离 Model、View 和 Controller 的方式来组织代码结构。其中 View 负责页面的显示逻辑，Model 负责存储页面的业务数据，以及对相应数据的操作。并且 View 和 Model 应用了观察者模式，当 Model 层发生改变的时候它会通知有关 View 层更新页面。Controller 层是 View 层和 Model 层的纽带，它主要负责用户与应用的响应操作，当用户与页面产生交互的时候，Controller 中的事件触发器就开始工作了，通过调用 Model 层，来完成对 Model 的修改，然后 Model 层再去通知 View 层更新。 \n（2）MVVM\nMVVM 分为 Model、View、ViewModel：\n\nModel代表数据模型，数据和业务逻辑都在Model层中定义；\nView代表UI视图，负责数据的展示；\nViewModel负责监听Model中数据的改变并且控制视图的更新，处理用户交互操作；\n\nModel和View并无直接关联，而是通过ViewModel来进行联系的，Model和ViewModel之间有着双向数据绑定的联系。因此当Model中的数据改变时会触发View层的刷新，View中由于用户交互操作而改变的数据也会在Model中同步。\n这种模式实现了 Model和View的数据自动同步，因此开发者只需要专注于数据的维护操作即可，而不需要自己操作DOM。 \n（3）MVP\nMVP 模式与 MVC 唯一不同的在于 Presenter 和 Controller。在 MVC 模式中使用观察者模式，来实现当 Model 层数据发生变化的时候，通知 View 层的更新。这样 View 层和 Model 层耦合在一起，当项目逻辑变得复杂的时候，可能会造成代码的混乱，并且可能会对代码的复用性造成一些问题。MVP 的模式通过使用 Presenter 来实现对 View 层和 Model 层的解耦。MVC 中的Controller 只知道 Model 的接口，因此它没有办法控制 View 层的更新，MVP 模式中，View 层的接口暴露给了 Presenter 因此可以在 Presenter 中将 Model 的变化和 View 的变化绑定在一起，以此来实现 View 和 Model 的同步更新。这样就实现了对 View 和 Model 的解耦，Presenter 还包含了其他的响应逻辑。\n5. Computed 和 Watch 的区别对于Computed：\n\n它支持缓存，只有依赖的数据发生了变化，才会重新计算\n不支持异步，当Computed中有异步操作时，无法监听数据的变化\ncomputed的值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于data声明过，或者父组件传递过来的props中的数据进行计算的。\n如果一个属性是由其他属性计算而来的，这个属性依赖其他的属性，一般会使用computed\n如果computed属性的属性值是函数，那么默认使用get方法，函数的返回值就是属性的属性值；在computed中，属性有一个get方法和一个set方法，当数据发生变化时，会调用set方法。\n\n对于Watch：\n\n它不支持缓存，数据变化时，它就会触发相应的操作\n支持异步监听\n监听的函数接收两个参数，第一个参数是最新的值，第二个是变化之前的值\n当一个属性发生变化时，就需要执行相应的操作\n监听数据必须是data中声明的或者父组件传递过来的props中的数据，当发生变化时，会触发其他操作，函数有两个的参数：\nimmediate：组件加载立即触发回调函数\ndeep：深度监听，发现数据内部的变化，在复杂数据类型中使用，例如数组中的对象发生变化。需要注意的是，deep无法监听到数组和对象内部的变化。\n\n\n\n当想要执行异步或者昂贵的操作以响应不断的变化时，就需要使用watch。\n总结：\n\ncomputed 计算属性 : 依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值。\nwatch 侦听器 : 更多的是观察的作用，无缓存性，类似于某些数据的监听回调，每当监听的数据变化时都会执行回调进行后续操作。\n\n运用场景：\n\n当需要进行数值计算,并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时都要重新计算。\n当需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许执行异步操作 ( 访问一个 API )，限制执行该操作的频率，并在得到最终结果前，设置中间状态。这些都是计算属性无法做到的。\n\n6. Computed 和 Methods 的区别可以将同一函数定义为一个 method 或者一个计算属性。对于最终的结果，两种方式是相同的\n不同点：\n\ncomputed: 计算属性是基于它们的依赖进行缓存的，只有在它的相关依赖发生改变时才会重新求值；\nmethod 调用总会执行该函数。\n\n7. slot是什么？有什么作用？原理是什么？slot又名插槽，是Vue的内容分发机制，组件内部的模板引擎使用slot元素作为承载分发内容的出口。插槽slot是子组件的一个模板标签元素，而这一个标签元素是否显示，以及怎么显示是由父组件决定的。slot又分三类，默认插槽，具名插槽和作用域插槽。\n\n默认插槽：又名匿名查抄，当slot没有指定name属性值的时候一个默认显示插槽，一个组件内只有有一个匿名插槽。\n具名插槽：带有具体名字的插槽，也就是带有name属性的slot，一个组件可以出现多个具名插槽。\n作用域插槽：默认插槽、具名插槽的一个变体，可以是匿名插槽，也可以是具名插槽，该插槽的不同点是在子组件渲染作用域插槽时，可以将子组件内部的数据传递给父组件，让父组件根据子组件的传递过来的数据决定如何渲染该插槽。\n\n实现原理：当子组件vm实例化时，获取到父组件传入的slot标签的内容，存放在vm.$slot中，默认插槽为vm.$slot.default，具名插槽为vm.$slot.xxx，xxx 为插槽名，当组件执行渲染函数时候，遇到slot标签，使用$slot中的内容进行替换，此时可以为插槽传递数据，若存在数据，则可称该插槽为作用域插槽。\n8. 过滤器的作用，如何实现一个过滤器根据过滤器的名称，过滤器是用来过滤数据的，在Vue中使用filters来过滤数据，filters不会修改数据，而是过滤数据，改变用户看到的输出（计算属性 computed ，方法 methods 都是通过修改数据来处理数据格式的输出显示）。\n使用场景：\n\n需要格式化数据的情况，比如需要处理时间、价格等数据格式的输出 / 显示。\n比如后端返回一个 年月日的日期字符串，前端需要展示为 多少天前 的数据格式，此时就可以用fliters过滤器来处理数据。\n\n过滤器是一个函数，它会把表达式中的值始终当作函数的第一个参数。过滤器用在插值表达式 *&#123;&#123; &#125;&#125; 和 v-bind* 表达式 中，然后放在操作符“ | ”后面进行指示。\n例如，在显示金额，给商品价格添加单位：\n&lt;li>商品价格：&#123;&#123;item.price | filterPrice&#125;&#125;&lt;/li>\n\n filters: &#123;\n    filterPrice (price) &#123;\n      return price ? ('￥' + price) : '--'\n    &#125;\n  &#125;\n复制代码\n\n9. 如何保存页面的当前的状态既然是要保持页面的状态（其实也就是组件的状态），那么会出现以下两种情况：\n\n前组件会被卸载\n前组件不会被卸载\n\n那么可以按照这两种情况分别得到以下方法：\n组件会被卸载：\n（1）将状态存储在LocalStorage / SessionStorage\n只需要在组件即将被销毁的生命周期 componentWillUnmount （react）中在 LocalStorage / SessionStorage 中把当前组件的 state 通过 JSON.stringify() 储存下来就可以了。在这里面需要注意的是组件更新状态的时机。\n比如从 B 组件跳转到 A 组件的时候，A 组件需要更新自身的状态。但是如果从别的组件跳转到 B 组件的时候，实际上是希望 B 组件重新渲染的，也就是不要从 Storage 中读取信息。所以需要在 Storage 中的状态加入一个 flag 属性，用来控制 A 组件是否读取 Storage 中的状态。\n优点：\n\n兼容性好，不需要额外库或工具。\n简单快捷，基本可以满足大部分需求。\n\n缺点：\n\n状态通过 JSON 方法储存（相当于深拷贝），如果状态中有特殊情况（比如 Date 对象、Regexp 对象等）的时候会得到字符串而不是原来的值。（具体参考用 JSON 深拷贝的缺点）\n如果 B 组件后退或者下一页跳转并不是前组件，那么 flag 判断会失效，导致从其他页面进入 A 组件页面时 A 组件会重新读取 Storage，会造成很奇怪的现象\n\n（2）路由传值\n通过 react-router 的 Link 组件的 prop —— to 可以实现路由间传递参数的效果。\n在这里需要用到 state 参数，在 B 组件中通过 history.location.state 就可以拿到 state 值，保存它。返回 A 组件时再次携带 state 达到路由状态保持的效果。\n优点：\n\n简单快捷，不会污染 LocalStorage / SessionStorage。\n可以传递 Date、RegExp 等特殊对象（不用担心 JSON.stringify / parse 的不足）\n\n缺点：\n\n如果 A 组件可以跳转至多个组件，那么在每一个跳转组件内都要写相同的逻辑。\n\n组件不会被卸载：\n（1）单页面渲染\n要切换的组件作为子组件全屏渲染，父组件中正常储存页面状态。\n优点：\n\n代码量少\n不需要考虑状态传递过程中的错误\n\n缺点：\n\n增加 A 组件维护成本\n需要传入额外的 prop 到 B 组件\n无法利用路由定位页面\n\n除此之外，在Vue中，还可以是用keep-alive来缓存页面，当组件在keep-alive内被切换时组件的activated、deactivated这两个生命周期钩子函数会被执行 被包裹在keep-alive中的组件的状态将会被保留：\n&lt;keep-alive>\n\t&lt;router-view v-if=\"$route.meta.keepAlive\">&lt;/router-view>\n&lt;/kepp-alive>\n复制代码\n\nrouter.js\n&#123;\n  path: '/',\n  name: 'xxx',\n  component: ()=>import('../src/views/xxx.vue'),\n  meta:&#123;\n    keepAlive: true // 需要被缓存\n  &#125;\n&#125;,\n复制代码\n\n10. 常见的事件修饰符及其作用\n.stop：等同于 JavaScript 中的 event.stopPropagation() ，防止事件冒泡；\n.prevent ：等同于 JavaScript 中的 event.preventDefault() ，防止执行预设的行为（如果事件可取消，则取消该事件，而不停止事件的进一步传播）；\n.capture ：与事件冒泡的方向相反，事件捕获由外到内；\n.self ：只会触发自己范围内的事件，不包含子元素；\n.once ：只会触发一次。\n\n11. v-if、v-show、v-html 的原理\nv-if会调用addIfCondition方法，生成vnode的时候会忽略对应节点，render的时候就不会渲染；\nv-show会生成vnode，render的时候也会渲染成真实节点，只是在render过程中会在节点的属性中修改show属性值，也就是常说的display；\nv-html会先移除节点下的所有节点，调用html方法，通过addProp添加innerHTML属性，归根结底还是设置innerHTML为v-html的值。\n\n13. v-if和v-show的区别\n手段：v-if是动态的向DOM树内添加或者删除DOM元素；v-show是通过设置DOM元素的display样式属性控制显隐；\n编译过程：v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；v-show只是简单的基于css切换；\n编译条件：v-if是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局部编译; v-show是在任何条件下，无论首次条件是否为真，都被编译，然后被缓存，而且DOM元素保留；\n性能消耗：v-if有更高的切换消耗；v-show有更高的初始渲染消耗；\n使用场景：v-if适合运营条件不大可能改变；v-show适合频繁切换。\n\n14. v-model 是如何实现的，语法糖实际是什么？（1）作用在表单元素上 动态绑定了 input 的 value 指向了 messgae 变量，并且在触发 input 事件的时候去动态把 message设置为目标值：\n&lt;input v-model=\"sth\" />\n//  等同于\n&lt;input \n    v-bind:value=\"message\" \n    v-on:input=\"message=$event.target.value\"\n>\n//$event 指代当前触发的事件对象;\n//$event.target 指代当前触发的事件对象的dom;\n//$event.target.value 就是当前dom的value值;\n//在@input方法中，value => sth;\n//在:value中,sth => value;\n复制代码\n\n（2）作用在组件上 在自定义组件中，v-model 默认会利用名为 value 的 prop和名为 input 的事件\n本质是一个父子组件通信的语法糖，通过prop和$.emit实现。 因此父组件 v-model 语法糖本质上可以修改为：\n&lt;child :value=\"message\"  @input=\"function(e)&#123;message = e&#125;\">&lt;/child>\n复制代码\n\n在组件的实现中，可以通过 v-model属性来配置子组件接收的prop名称，以及派发的事件名称。 例子：\n// 父组件\n&lt;aa-input v-model=\"aa\">&lt;/aa-input>\n// 等价于\n&lt;aa-input v-bind:value=\"aa\" v-on:input=\"aa=$event.target.value\">&lt;/aa-input>\n\n// 子组件：\n&lt;input v-bind:value=\"aa\" v-on:input=\"onmessage\">&lt;/aa-input>\n\nprops:&#123;value:aa,&#125;\nmethods:&#123;\n    onmessage(e)&#123;\n        $emit('input',e.target.value)\n    &#125;\n&#125;\n复制代码\n\n默认情况下，一个组件上的v-model 会把 value 用作 prop且把 input 用作 event。但是一些输入类型比如单选框和复选框按钮可能想使用 value prop 来达到不同的目的。使用 model 选项可以回避这些情况产生的冲突。js 监听input 输入框输入数据改变，用oninput，数据改变以后就会立刻出发这个事件。通过input事件把数据$emit 出去，在父组件接受。父组件设置v-model的值为input $emit过来的值。\n15. v-model 可以被用在自定义组件上吗？如果可以，如何使用？可以。v-model 实际上是一个语法糖，如：\n&lt;input v-model=\"searchText\">\n复制代码\n\n实际上相当于：\n&lt;input\n  v-bind:value=\"searchText\"\n  v-on:input=\"searchText = $event.target.value\"\n>\n复制代码\n\n用在自定义组件上也是同理：\n&lt;custom-input v-model=\"searchText\">\n复制代码\n\n相当于：\n&lt;custom-input\n  v-bind:value=\"searchText\"\n  v-on:input=\"searchText = $event\"\n>&lt;/custom-input>\n复制代码\n\n显然，custom-input 与父组件的交互如下：\n\n父组件将searchText变量传入custom-input 组件，使用的 prop 名为value；\ncustom-input 组件向父组件传出名为input的事件，父组件将接收到的值赋值给searchText；\n\n所以，custom-input 组件的实现应该类似于这样：\nVue.component('custom-input', &#123;\n  props: ['value'],\n  template: `\n    &lt;input\n      v-bind:value=\"value\"\n      v-on:input=\"$emit('input', $event.target.value)\"\n    >\n  `\n&#125;)\n复制代码\n\n16. data为什么是一个函数而不是对象JavaScript中的对象是引用类型的数据，当多个实例引用同一个对象时，只要一个实例对这个对象进行操作，其他实例中的数据也会发生变化。\n而在Vue中，更多的是想要复用组件，那就需要每个组件都有自己的数据，这样组件之间才不会相互干扰。\n所以组件的数据不能写成对象的形式，而是要写成函数的形式。数据以函数返回值的形式定义，这样当每次复用组件的时候，就会返回一个新的data，也就是说每个组件都有自己的私有数据空间，它们各自维护自己的数据，不会干扰其他组件的正常运行。\n17. 对keep-alive的理解，它是如何实现的，具体缓存的是什么？如果需要在组件切换的时候，保存一些组件的状态防止多次渲染，就可以使用 keep-alive 组件包裹需要保存的组件。\n（1）keep-alive\nkeep-alive有以下三个属性：\n\ninclude 字符串或正则表达式，只有名称匹配的组件会被匹配；\nexclude 字符串或正则表达式，任何名称匹配的组件都不会被缓存；\nmax 数字，最多可以缓存多少组件实例。\n\n注意：keep-alive 包裹动态组件时，会缓存不活动的组件实例。\n主要流程\n\n判断组件 name ，不在 include 或者在 exclude 中，直接返回 vnode，说明该组件不被缓存。\n获取组件实例 key ，如果有获取实例的 key，否则重新生成。\nkey生成规则，cid +”∶∶”+ tag ，仅靠cid是不够的，因为相同的构造函数可以注册为不同的本地组件。\n如果缓存对象内存在，则直接从缓存对象中获取组件实例给 vnode ，不存在则添加到缓存对象中。 5.最大缓存数量，当缓存组件数量超过 max 值时，清除 keys 数组内第一个组件。\n\n（2）keep-alive 的实现\nconst patternTypes: Array&lt;Function> = [String, RegExp, Array] // 接收：字符串，正则，数组\n\nexport default &#123;\n  name: 'keep-alive',\n  abstract: true, // 抽象组件，是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中。\n\n  props: &#123;\n    include: patternTypes, // 匹配的组件，缓存\n    exclude: patternTypes, // 不去匹配的组件，不缓存\n    max: [String, Number], // 缓存组件的最大实例数量, 由于缓存的是组件实例（vnode），数量过多的时候，会占用过多的内存，可以用max指定上限\n  &#125;,\n\n  created() &#123;\n    // 用于初始化缓存虚拟DOM数组和vnode的key\n    this.cache = Object.create(null)\n    this.keys = []\n  &#125;,\n\n  destroyed() &#123;\n    // 销毁缓存cache的组件实例\n    for (const key in this.cache) &#123;\n      pruneCacheEntry(this.cache, key, this.keys)\n    &#125;\n  &#125;,\n\n  mounted() &#123;\n    // prune 削减精简[v.]\n    // 去监控include和exclude的改变，根据最新的include和exclude的内容，来实时削减缓存的组件的内容\n    this.$watch('include', (val) => &#123;\n      pruneCache(this, (name) => matches(val, name))\n    &#125;)\n    this.$watch('exclude', (val) => &#123;\n      pruneCache(this, (name) => !matches(val, name))\n    &#125;)\n  &#125;,\n&#125;\n复制代码\n\nrender函数：\n\n会在 keep-alive 组件内部去写自己的内容，所以可以去获取默认 slot 的内容，然后根据这个去获取组件\nkeep-alive 只对第一个组件有效，所以获取第一个子组件。\n和 keep-alive 搭配使用的一般有：动态组件 和router-view\n\nrender () &#123;\n  //\n  function getFirstComponentChild (children: ?Array&lt;VNode>): ?VNode &#123;\n    if (Array.isArray(children)) &#123;\n  for (let i = 0; i &lt; children.length; i++) &#123;\n    const c = children[i]\n    if (isDef(c) &amp;&amp; (isDef(c.componentOptions) || isAsyncPlaceholder(c))) &#123;\n      return c\n    &#125;\n  &#125;\n  &#125;\n  &#125;\n  const slot = this.$slots.default // 获取默认插槽\n  const vnode: VNode = getFirstComponentChild(slot)// 获取第一个子组件\n  const componentOptions: ?VNodeComponentOptions = vnode &amp;&amp; vnode.componentOptions // 组件参数\n  if (componentOptions) &#123; // 是否有组件参数\n    // check pattern\n    const name: ?string = getComponentName(componentOptions) // 获取组件名\n    const &#123; include, exclude &#125; = this\n    if (\n      // not included\n      (include &amp;&amp; (!name || !matches(include, name))) ||\n      // excluded\n      (exclude &amp;&amp; name &amp;&amp; matches(exclude, name))\n    ) &#123;\n      // 如果不匹配当前组件的名字和include以及exclude\n      // 那么直接返回组件的实例\n      return vnode\n    &#125;\n\n    const &#123; cache, keys &#125; = this\n\n    // 获取这个组件的key\n    const key: ?string = vnode.key == null\n      // same constructor may get registered as different local components\n      // so cid alone is not enough (#3269)\n      ? componentOptions.Ctor.cid + (componentOptions.tag ? `::$&#123;componentOptions.tag&#125;` : '')\n      : vnode.key\n\n    if (cache[key]) &#123;\n      // LRU缓存策略执行\n      vnode.componentInstance = cache[key].componentInstance // 组件初次渲染的时候componentInstance为undefined\n\n      // make current key freshest\n      remove(keys, key)\n      keys.push(key)\n      // 根据LRU缓存策略执行，将key从原来的位置移除，然后将这个key值放到最后面\n    &#125; else &#123;\n      // 在缓存列表里面没有的话，则加入，同时判断当前加入之后，是否超过了max所设定的范围，如果是，则去除\n      // 使用时间间隔最长的一个\n      cache[key] = vnode\n      keys.push(key)\n      // prune oldest entry\n      if (this.max &amp;&amp; keys.length > parseInt(this.max)) &#123;\n        pruneCacheEntry(cache, keys[0], keys, this._vnode)\n      &#125;\n    &#125;\n    // 将组件的keepAlive属性设置为true\n    vnode.data.keepAlive = true // 作用：判断是否要执行组件的created、mounted生命周期函数\n  &#125;\n  return vnode || (slot &amp;&amp; slot[0])\n&#125;\n复制代码\n\nkeep-alive 具体是通过 cache 数组缓存所有组件的 vnode 实例。当 cache 内原有组件被使用时会将该组件 key 从 keys 数组中删除，然后 push 到 keys数组最后，以便清除最不常用组件。\n实现步骤：\n\n获取 keep-alive 下第一个子组件的实例对象，通过他去获取这个组件的组件名\n通过当前组件名去匹配原来 include 和 exclude，判断当前组件是否需要缓存，不需要缓存，直接返回当前组件的实例vNode\n需要缓存，判断他当前是否在缓存数组里面：\n\n\n存在，则将他原来位置上的 key 给移除，同时将这个组件的 key 放到数组最后面（LRU）\n不存在，将组件 key 放入数组，然后判断当前 key数组是否超过 max 所设置的范围，超过，那么削减未使用时间最长的一个组件的 key\n\n\n最后将这个组件的 keepAlive 设置为 true\n\n（3）keep-alive 本身的创建过程和 patch 过程\n缓存渲染的时候，会根据 vnode.componentInstance（首次渲染 vnode.componentInstance 为 undefined） 和 keepAlive 属性判断不会执行组件的 created、mounted 等钩子函数，而是对缓存的组件执行 patch 过程∶ 直接把缓存的 DOM 对象直接插入到目标元素中，完成了数据更新的情况下的渲染过程。\n首次渲染\n\n组件的首次渲染∶判断组件的 abstract 属性，才往父组件里面挂载 DOM\n\n// core/instance/lifecycle\nfunction initLifecycle (vm: Component) &#123;\n  const options = vm.$options\n\n  // locate first non-abstract parent\n  let parent = options.parent\n  if (parent &amp;&amp; !options.abstract) &#123; // 判断组件的abstract属性，才往父组件里面挂载DOM\n    while (parent.$options.abstract &amp;&amp; parent.$parent) &#123;\n      parent = parent.$parent\n    &#125;\n    parent.$children.push(vm)\n  &#125;\n\n  vm.$parent = parent\n  vm.$root = parent ? parent.$root : vm\n\n  vm.$children = []\n  vm.$refs = &#123;&#125;\n\n  vm._watcher = null\n  vm._inactive = null\n  vm._directInactive = false\n  vm._isMounted = false\n  vm._isDestroyed = false\n  vm._isBeingDestroyed = false\n&#125;\n复制代码\n\n\n判断当前 keepAlive 和 componentInstance 是否存在来判断是否要执行组件 prepatch 还是执行创建 componentlnstance\n\n// core/vdom/create-component\ninit (vnode: VNodeWithData, hydrating: boolean): ?boolean &#123;\n    if (\n      vnode.componentInstance &amp;&amp;\n      !vnode.componentInstance._isDestroyed &amp;&amp;\n      vnode.data.keepAlive\n    ) &#123; // componentInstance在初次是undefined!!!\n      // kept-alive components, treat as a patch\n      const mountedNode: any = vnode // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode) // prepatch函数执行的是组件更新的过程\n    &#125; else &#123;\n      const child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      )\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating)\n    &#125;\n  &#125;,\n复制代码\n\nprepatch 操作就不会在执行组件的 mounted 和 created 生命周期函数，而是直接将 DOM 插入\n（4）LRU （least recently used）缓存策略\nLRU 缓存策略∶ 从内存中找出最久未使用的数据并置换新的数据。 LRU（Least rencently used）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是 **”如果数据最近被访问过，那么将来被访问的几率也更高”**。 最常见的实现是使用一个链表保存缓存数据，详细算法实现如下∶\n\n新数据插入到链表头部\n每当缓存命中（即缓存数据被访问），则将数据移到链表头部\n链表满的时候，将链表尾部的数据丢弃。\n\n18. $nextTick 原理及作用Vue 的 nextTick 其本质是对 JavaScript 执行原理 EventLoop 的一种应用。\nnextTick 的核心是利用了如 Promise 、MutationObserver、setImmediate、setTimeout的原生 JavaScript 方法来模拟对应的微/宏任务的实现，本质是为了利用 JavaScript 的这些异步回调任务队列来实现 Vue 框架中自己的异步回调队列。\nnextTick 不仅是 Vue 内部的异步队列的调用方法，同时也允许开发者在实际项目中使用这个方法来满足实际应用中对 DOM 更新数据时机的后续逻辑处理\nnextTick 是典型的将底层 JavaScript 执行原理应用到具体案例中的示例，引入异步更新队列机制的原因∶\n\n如果是同步更新，则多次对一个或多个属性赋值，会频繁触发 UI/DOM 的渲染，可以减少一些无用渲染\n同时由于 VirtualDOM 的引入，每一次状态发生变化后，状态变化的信号会发送给组件，组件内部使用 VirtualDOM 进行计算得出需要更新的具体的 DOM 节点，然后对 DOM 进行更新操作，每次更新状态后的渲染过程需要更多的计算，而这种无用功也将浪费更多的性能，所以异步渲染变得更加至关重要\n\nVue采用了数据驱动视图的思想，但是在一些情况下，仍然需要操作DOM。有时候，可能遇到这样的情况，DOM1的数据发生了变化，而DOM2需要从DOM1中获取数据，那这时就会发现DOM2的视图并没有更新，这时就需要用到了nextTick了。\n由于Vue的DOM操作是异步的，所以，在上面的情况中，就要将DOM2获取数据的操作写在$nextTick中。\nthis.$nextTick(() => &#123;    // 获取数据的操作...&#125;)\n复制代码\n\n所以，在以下情况下，会用到nextTick：\n\n在数据变化后执行的某个操作，而这个操作需要使用随数据变化而变化的DOM结构的时候，这个操作就需要方法在nextTick()的回调函数中。\n在vue生命周期中，如果在created()钩子进行DOM操作，也一定要放在nextTick()的回调函数中。\n\n因为在created()钩子函数中，页面的DOM还未渲染，这时候也没办法操作DOM，所以，此时如果想要操作DOM，必须将操作的代码放在nextTick()的回调函数中。\n19. Vue 中给 data 中的对象属性添加一个新的属性时会发生什么？如何解决？&lt;template> \n   &lt;div>\n      &lt;ul>\n         &lt;li v-for=\"value in obj\" :key=\"value\"> &#123;&#123;value&#125;&#125; &lt;/li> \n      &lt;/ul> \n      &lt;button @click=\"addObjB\">添加 obj.b&lt;/button> \n   &lt;/div>\n&lt;/template>\n\n&lt;script>\n    export default &#123; \n       data () &#123; \n          return &#123; \n              obj: &#123; \n                  a: 'obj.a' \n              &#125; \n          &#125; \n       &#125;,\n       methods: &#123; \n          addObjB () &#123; \n              this.obj.b = 'obj.b' \n              console.log(this.obj) \n          &#125; \n      &#125;\n   &#125;\n&lt;/script>\n复制代码\n\n点击 button 会发现，obj.b 已经成功添加，但是视图并未刷新。这是因为在Vue实例创建时，obj.b并未声明，因此就没有被Vue转换为响应式的属性，自然就不会触发视图的更新，这时就需要使用Vue的全局 api $set()：\naddObjB () (\n   this.$set(this.obj, 'b', 'obj.b')\n   console.log(this.obj)\n&#125;\n复制代码\n\n$set()方法相当于手动的去把obj.b处理成一个响应式的属性，此时视图也会跟着改变了。\n20. Vue中封装的数组方法有哪些，其如何实现页面更新在Vue中，对响应式处理利用的是Object.defineProperty对数据进行拦截，而这个方法并不能监听到数组内部变化，数组长度变化，数组的截取变化等，所以需要对这些操作进行hack，让Vue能监听到其中的变化。  那Vue是如何实现让这些数组方法实现元素的实时更新的呢，下面是Vue中对这些方法的封装：\n// 缓存数组原型\nconst arrayProto = Array.prototype;\n// 实现 arrayMethods.__proto__ === Array.prototype\nexport const arrayMethods = Object.create(arrayProto);\n// 需要进行功能拓展的方法\nconst methodsToPatch = [\n  \"push\",\n  \"pop\",\n  \"shift\",\n  \"unshift\",\n  \"splice\",\n  \"sort\",\n  \"reverse\"\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function(method) &#123;\n  // 缓存原生数组方法\n  const original = arrayProto[method];\n  def(arrayMethods, method, function mutator(...args) &#123;\n    // 执行并缓存原生数组功能\n    const result = original.apply(this, args);\n    // 响应式处理\n    const ob = this.__ob__;\n    let inserted;\n    switch (method) &#123;\n    // push、unshift会新增索引，所以要手动observer\n      case \"push\":\n      case \"unshift\":\n        inserted = args;\n        break;\n      // splice方法，如果传入了第三个参数，也会有索引加入，也要手动observer。\n      case \"splice\":\n        inserted = args.slice(2);\n        break;\n    &#125;\n    // \n    if (inserted) ob.observeArray(inserted);// 获取插入的值，并设置响应式监听\n    // notify change\n    ob.dep.notify();// 通知依赖更新\n    // 返回原生数组方法的执行结果\n    return result;\n  &#125;);\n&#125;);\n复制代码\n\n简单来说就是，重写了数组中的那些原生方法，首先获取到这个数组的__ob__，也就是它的Observer对象，如果有新的值，就调用observeArray继续对新的值观察变化（也就是通过target__proto__ == arrayMethods来改变了数组实例的型），然后手动调用notify，通知渲染watcher，执行update。\n21. Vue 单页应用与多页应用的区别概念：\n\nSPA单页面应用（SinglePage Web Application），指只有一个主页面的应用，一开始只需要加载一次js、css等相关资源。所有内容都包含在主页面，对每一个功能模块组件化。单页应用跳转，就是切换相关组件，仅仅刷新局部资源。\nMPA多页面应用 （MultiPage Application），指有多个独立页面的应用，每个页面必须重复加载js、css等相关资源。多页应用跳转，需要整页资源刷新。\n\n区别： \n22. Vue template 到 render 的过程vue的模版编译过程主要如下：template -&gt; ast -&gt; render函数\nvue 在模版编译版本的码中会执行 compileToFunctions 将template转化为render函数：\n// 将模板编译为render函数const &#123; render, staticRenderFns &#125; = compileToFunctions(template,options//省略&#125;, this)\n复制代码\n\nCompileToFunctions中的主要逻辑如下∶ （1）调用parse方法将template转化为ast（抽象语法树）\nconstast = parse(template.trim(), options)\n复制代码\n\n\nparse的目标：把tamplate转换为AST树，它是一种用 JavaScript对象的形式来描述整个模板。\n解析过程：利用正则表达式顺序解析模板，当解析到开始标签、闭合标签、文本的时候都会分别执行对应的 回调函数，来达到构造AST树的目的。\n\nAST元素节点总共三种类型：type为1表示普通元素、2为表达式、3为纯文本\n（2）对静态节点做优化\noptimize(ast,options)\n复制代码\n\n这个过程主要分析出哪些是静态节点，给其打一个标记，为后续更新渲染可以直接跳过静态节点做优化\n深度遍历AST，查看每个子树的节点元素是否为静态节点或者静态节点根。如果为静态节点，他们生成的DOM永远不会改变，这对运行时模板更新起到了极大的优化作用。\n（3）生成代码\nconst code = generate(ast, options)\n复制代码\n\ngenerate将ast抽象语法树编译成 render字符串并将静态部分放到 staticRenderFns 中，最后通过 new Function(`` render``) 生成render函数。\n23. Vue data 中某一个属性的值发生改变后，视图会立即同步执行重新渲染吗？不会立即同步执行重新渲染。Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新。Vue 在更新 DOM 时是异步执行的。只要侦听到数据变化， Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。\n如果同一个watcher被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个的事件循环tick中，Vue 刷新队列并执行实际（已去重的）工作。\n24. 简述 mixin、extends 的覆盖逻辑（1）mixin 和 extends mixin 和 extends均是用于合并、拓展组件的，两者均通过 mergeOptions 方法实现合并。\n\nmixins 接收一个混入对象的数组，其中混入对象可以像正常的实例对象一样包含实例选项，这些选项会被合并到最终的选项中。Mixin 钩子按照传入顺序依次调用，并在调用组件自身的钩子之前被调用。\nextends 主要是为了便于扩展单文件组件，接收一个对象或构造函数。\n\n （2）mergeOptions 的执行过程\n\n规范化选项（normalizeProps、normalizelnject、normalizeDirectives)\n对未合并的选项，进行判断\n\nif(!child._base) &#123;    if(child.extends) &#123;        parent = mergeOptions(parent, child.extends, vm)    &#125;    if(child.mixins) &#123;        for(let i = 0, l = child.mixins.length; i &lt; l; i++)&#123;            parent = mergeOptions(parent, child.mixins[i], vm)        &#125;    &#125;&#125;\n复制代码\n\n\n合并处理。根据一个通用 Vue 实例所包含的选项进行分类逐一判断合并，如 props、data、 methods、watch、computed、生命周期等，将合并结果存储在新定义的 options 对象里。\n返回合并结果 options。\n\n25. 描述下Vue自定义指令在 Vue2.0 中，代码复用和抽象的主要形式是组件。然而，有的情况下，你仍然需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令。 一般需要对DOM元素进行底层操作时使用，尽量只用来操作 DOM展示，不修改内部的值。当使用自定义指令直接修改 value 值时绑定v-model的值也不会同步更新；如必须修改可以在自定义指令中使用keydown事件，在vue组件中使用 change事件，回调中修改vue数据;\n（1）自定义指令基本内容\n\n全局定义：Vue.directive(&quot;focus&quot;,&#123;&#125;)\n\n局部定义：directives:&#123;focus:&#123;&#125;&#125;\n\n钩子函数：指令定义对象提供钩子函数\no bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。\no inSerted：被绑定元素插入父节点时调用（仅保证父节点存在，但不一定已被插入文档中）。\no update：所在组件的VNode更新时调用，但是可能发生在其子VNode更新之前调用。指令的值可能发生了改变，也可能没有。但是可以通过比较更新前后的值来忽略不必要的模板更新。\no ComponentUpdate：指令所在组件的 VNode及其子VNode全部更新后调用。\no unbind：只调用一次，指令与元素解绑时调用。\n\n钩子函数参数 o el：绑定元素\no bing： 指令核心对象，描述指令全部信息属性\no name\no value\no oldValue\no expression\no arg\no modifers\no vnode  虚拟节点\no oldVnode：上一个虚拟节点（更新钩子函数中才有用）\n\n\n（2）使用场景\n\n普通DOM元素进行底层操作的时候，可以使用自定义指令\n自定义指令是用来操作DOM的。尽管Vue推崇数据驱动视图的理念，但并非所有情况都适合数据驱动。自定义指令就是一种有效的补充和扩展，不仅可用于定义任何的DOM操作，并且是可复用的。\n\n（3）使用案例\n初级应用：\n\n鼠标聚焦\n下拉菜单\n相对时间转换\n滚动动画\n\n高级应用：\n\n自定义指令实现图片懒加载\n自定义指令集成第三方插件\n\n26. 子组件可以直接改变父组件的数据吗？子组件不可以直接改变父组件的数据。这样做主要是为了维护父子组件的单向数据流。每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。如果这样做了，Vue 会在浏览器的控制台中发出警告。\nVue提倡单向数据流，即父级 props 的更新会流向子组件，但是反过来则不行。这是为了防止意外的改变父组件状态，使得应用的数据流变得难以理解，导致数据流混乱。如果破坏了单向数据流，当应用复杂时，debug 的成本会非常高。\n只能通过 *$emit* 派发一个自定义事件，父组件接收到后，由父组件修改。\n27. Vue是如何收集依赖的？在初始化 Vue 的每个组件时，会对组件的 data 进行初始化，就会将由普通对象变成响应式对象，在这个过程中便会进行依赖收集的相关逻辑，如下所示∶\nfunction defieneReactive (obj, key, val)&#123;\n  const dep = new Dep();\n  ...\n  Object.defineProperty(obj, key, &#123;\n    ...\n    get: function reactiveGetter () &#123;\n      if(Dep.target)&#123;\n        dep.depend();\n        ...\n      &#125;\n      return val\n    &#125;\n    ...\n  &#125;)\n&#125;\n复制代码\n\n以上只保留了关键代码，主要就是 const dep = new Dep()实例化一个 Dep 的实例，然后在 get 函数中通过 dep.depend() 进行依赖收集。 （1）Dep Dep是整个依赖收集的核心，其关键代码如下：\nclass Dep &#123;\n  static target;\n  subs;\n\n  constructor () &#123;\n    ...\n    this.subs = [];\n  &#125;\n  addSub (sub) &#123;\n    this.subs.push(sub)\n  &#125;\n  removeSub (sub) &#123;\n    remove(this.sub, sub)\n  &#125;\n  depend () &#123;\n    if(Dep.target)&#123;\n      Dep.target.addDep(this)\n    &#125;\n  &#125;\n  notify () &#123;\n    const subs = this.subds.slice();\n    for(let i = 0;i &lt; subs.length; i++)&#123;\n      subs[i].update()\n    &#125;\n  &#125;\n&#125;\n复制代码\n\nDep 是一个 class ，其中有一个关 键的静态属性 static，它指向了一个全局唯一 Watcher，保证了同一时间全局只有一个 watcher 被计算，另一个属性 subs 则是一个 Watcher 的数组，所以 Dep 实际上就是对 Watcher 的管理，再看看 Watcher 的相关代码∶\n（2）Watcher\nclass Watcher &#123;\n  getter;\n  ...\n  constructor (vm, expression)&#123;\n    ...\n    this.getter = expression;\n    this.get();\n  &#125;\n  get () &#123;\n    pushTarget(this);\n    value = this.getter.call(vm, vm)\n    ...\n    return value\n  &#125;\n  addDep (dep)&#123;\n        ...\n    dep.addSub(this)\n  &#125;\n  ...\n&#125;\nfunction pushTarget (_target) &#123;\n  Dep.target = _target\n&#125;\n复制代码\n\nWatcher 是一个 class，它定义了一些方法，其中和依赖收集相关的主要有 get、addDep 等。\n（3）过程\n在实例化 Vue 时，依赖收集的相关过程如下∶ 初 始 化 状 态 initState ， 这 中 间 便 会 通 过 defineReactive 将数据变成响应式对象，其中的 getter 部分便是用来依赖收集的。 初始化最终会走 mount 过程，其中会实例化 Watcher ，进入 Watcher 中，便会执行 this.get() 方法，\nupdateComponent = () => &#123;\n  vm._update(vm._render())\n&#125;\nnew Watcher(vm, updateComponent)\n复制代码\n\nget 方法中的 pushTarget 实际上就是把 Dep.target 赋值为当前的 watcher。\nthis.getter.call（vm，vm），这里的 getter 会执行 vm._render() 方法，在这个过程中便会触发数据对象的 getter。那么每个对象值的 getter 都持有一个 dep，在触发 getter 的时候会调用 dep.depend() 方法，也就会执行 Dep.target.addDep(this)。刚才 Dep.target 已经被赋值为 watcher，于是便会执行 addDep 方法，然后走到 dep.addSub() 方法，便将当前的 watcher 订阅到这个数据持有的 dep 的 subs 中，这个目的是为后续数据变化时候能通知到哪些 subs 做准备。所以在 vm._render() 过程中，会触发所有数据的 getter，这样便已经完成了一个依赖收集的过程。\n28. 对 React 和 Vue 的理解，它们的异同相似之处：\n\n都将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库；\n都有自己的构建工具，能让你得到一个根据最佳实践设置的项目模板；\n都使用了Virtual DOM（虚拟DOM）提高重绘性能；\n都有props的概念，允许组件间的数据传递；\n都鼓励组件化应用，将应用分拆成一个个功能明确的模块，提高复用性。\n\n不同之处 ：\n1）数据流\nVue默认支持数据双向绑定，而React一直提倡单向数据流\n2）虚拟DOM\nVue2.x开始引入”Virtual DOM”，消除了和React在这方面的差异，但是在具体的细节还是有各自的特点。\n\nVue宣称可以更快地计算出Virtual DOM的差异，这是由于它在渲染过程中，会跟踪每一个组件的依赖关系，不需要重新渲染整个组件树。\n对于React而言，每当应用的状态被改变时，全部子组件都会重新渲染。当然，这可以通过 PureComponent/shouldComponentUpdate这个生命周期方法来进行控制，但Vue将此视为默认的优化。\n\n3）组件化\nReact与Vue最大的不同是模板的编写。\n\nVue鼓励写近似常规HTML的模板。写起来很接近标准 HTML元素，只是多了一些属性。\nReact推荐你所有的模板通用JavaScript的语法扩展——JSX书写。\n\n具体来讲：React中render函数是支持闭包特性的，所以import的组件在render中可以直接调用。但是在Vue中，由于模板中使用的数据都必须挂在 this 上进行一次中转，所以 import 一个组件完了之后，还需要在 components 中再声明下。 4）监听数据变化的实现原理不同\n\nVue 通过 getter/setter 以及一些函数的劫持，能精确知道数据变化，不需要特别的优化就能达到很好的性能\nReact 默认是通过比较引用的方式进行的，如果不优化（PureComponent/shouldComponentUpdate）可能导致大量不必要的vDOM的重新渲染。这是因为 Vue 使用的是可变数据，而React更强调数据的不可变。\n\n5）高阶组件\nreact可以通过高阶组件（HOC）来扩展，而Vue需要通过mixins来扩展。\n高阶组件就是高阶函数，而React的组件本身就是纯粹的函数，所以高阶函数对React来说易如反掌。相反Vue.js使用HTML模板创建视图组件，这时模板无法有效的编译，因此Vue不能采用HOC来实现。\n6）构建工具\n两者都有自己的构建工具：\n\nReact ==&gt; Create React APP\nVue ==&gt; vue-cli\n\n7）跨平台\n\nReact ==&gt; React Native\nVue ==&gt; Weex\n\n29. Vue的优点\n轻量级框架：只关注视图层，是一个构建数据的视图集合，大小只有几十 kb ；\n简单易学：国人开发，中文文档，不存在语言障碍 ，易于理解和学习；\n双向数据绑定：保留了 angular 的特点，在数据操作方面更为简单；\n组件化：保留了 react 的优点，实现了 html 的封装和重用，在构建单页面应用方面有着独特的优势；\n视图，数据，结构分离：使数据的更改更为简单，不需要进行逻辑代码的修改，只需要操作数据就能完成相关操作；\n虚拟DOM：dom 操作是非常耗费性能的，不再使用原生的 dom 操作节点，极大解放 dom 操作，但具体操作的还是 dom 不过是换了另一种方式；\n运行速度更快：相比较于 react 而言，同样是操作虚拟 dom，就性能而言， vue 存在很大的优势。\n\n30. assets和static的区别相同点： assets 和 static 两个都是存放静态资源文件。项目中所需要的资源文件图片，字体图标，样式文件等都可以放在这两个文件下，这是相同点\n不相同点：assets 中存放的静态资源文件在项目打包时，也就是运行 npm run build 时会将 assets 中放置的静态资源文件进行打包上传，所谓打包简单点可以理解为压缩体积，代码格式化。而压缩后的静态资源文件最终也都会放置在 static 文件中跟着 index.html 一同上传至服务器。static 中放置的静态资源文件就不会要走打包压缩格式化等流程，而是直接进入打包好的目录，直接上传至服务器。因为避免了压缩直接进行上传，在打包时会提高一定的效率，但是 static 中的资源文件由于没有进行压缩等操作，所以文件的体积也就相对于 assets 中打包后的文件提交较大点。在服务器中就会占据更大的空间。\n建议： 将项目中 template需要的样式文件js文件等都可以放置在 assets 中，走打包这一流程。减少体积。而项目中引入的第三方的资源文件如iconfoont.css 等文件可以放置在 static 中，因为这些引入的第三方文件已经经过处理，不再需要处理，直接上传。\n31. delete和Vue.delete删除数组的区别\ndelete 只是被删除的元素变成了 empty/undefined 其他的元素的键值还是不变。\nVue.delete 直接删除了数组 改变了数组的键值。\n\n32. vue如何监听对象或者数组某个属性的变化当在项目中直接设置数组的某一项的值，或者直接设置对象的某个属性值，这个时候，你会发现页面并没有更新。这是因为Object.defineProperty()限制，监听不到变化。\n解决方式：\n\nthis.$set(你要改变的数组/对象，你要改变的位置/key，你要改成什么value)\n\nthis.$set(this.arr, 0, \"OBKoro1\"); // 改变数组this.$set(this.obj, \"c\", \"OBKoro1\"); // 改变对象\n复制代码\n\n\n调用以下几个数组的方法\n\nsplice()、 push()、pop()、shift()、unshift()、sort()、reverse()\n复制代码\n\nvue源码里缓存了array的原型链，然后重写了这几个方法，触发这几个方法的时候会observer数据，意思是使用这些方法不用再进行额外的操作，视图自动进行更新。 推荐使用splice方法会比较好自定义,因为splice可以在数组的任何位置进行删除/添加操作\nvm.$set 的实现原理是：\n\n如果目标是数组，直接使用数组的 splice 方法触发相应式；\n如果目标是对象，会先判读属性是否存在、对象是否是响应式，最终如果要对属性进行响应式处理，则是通过调用 defineReactive 方法进行响应式处理（ defineReactive 方法就是 Vue 在初始化对象时，给对象属性采用 Object.defineProperty 动态添加 getter 和 setter 的功能所调用的方法）\n\n33. 什么是 mixin ？\nMixin 使我们能够为 Vue 组件编写可插拔和可重用的功能。\n如果希望在多个组件之间重用一组组件选项，例如生命周期 hook、 方法等，则可以将其编写为 mixin，并在组件中简单的引用它。\n然后将 mixin 的内容合并到组件中。如果你要在 mixin 中定义生命周期 hook，那么它在执行时将优化于组件自已的 hook。\n\n34. Vue模版编译原理vue中的模板template无法被浏览器解析并渲染，因为这不属于浏览器的标准，不是正确的HTML语法，所有需要将template转化成一个JavaScript函数，这样浏览器就可以执行这一个函数并渲染出对应的HTML元素，就可以让视图跑起来了，这一个转化的过程，就成为模板编译。模板编译又分三个阶段，解析parse，优化optimize，生成generate，最终生成可执行函数render。\n\n解析阶段：使用大量的正则表达式对template字符串进行解析，将标签、指令、属性等转化为抽象语法树AST。\n优化阶段：遍历AST，找到其中的一些静态节点并进行标记，方便在页面重渲染的时候进行diff比较时，直接跳过这一些静态节点，优化runtime的性能。\n生成阶段：将最终的AST转化为render函数字符串。\n\n35. 对SSR的理解SSR也就是服务端渲染，也就是将Vue在客户端把标签渲染成HTML的工作放在服务端完成，然后再把html直接返回给客户端\nSSR的优势：\n\n更好的SEO\n首屏加载速度更快\n\nSSR的缺点：\n\n开发条件会受到限制，服务器端渲染只支持beforeCreate和created两个钩子；\n当需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于Node.js的运行环境；\n更多的服务端负载。\n\n36. Vue的性能优化有哪些（1）编码阶段\n\n尽量减少data中的数据，data中的数据都会增加getter和setter，会收集对应的watcher\nv-if和v-for不能连用\n如果需要使用v-for给每项元素绑定事件时使用事件代理\nSPA 页面采用keep-alive缓存组件\n在更多的情况下，使用v-if替代v-show\nkey保证唯一\n使用路由懒加载、异步组件\n防抖、节流\n第三方模块按需导入\n长列表滚动到可视区域动态加载\n图片懒加载\n\n（2）SEO优化\n\n预渲染\n服务端渲染SSR\n\n（3）打包优化\n\n压缩代码\nTree Shaking/Scope Hoisting\n使用cdn加载第三方模块\n多线程打包happypack\nsplitChunks抽离公共文件\nsourceMap优化\n\n（4）用户体验\n\n骨架屏\nPWA\n还可以使用缓存(客户端缓存、服务端缓存)优化、服务端开启gzip压缩等。\n\n37. 对 SPA 单页面的理解，它的优缺点分别是什么？SPA（ single-page application ）仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。\n优点：\n\n用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；\n基于上面一点，SPA 相对对服务器压力小；\n前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；\n\n缺点：\n\n初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面按需加载；\n前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；\nSEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。\n\n38. template和jsx的有什么分别？对于 runtime 来说，只需要保证组件存在 render 函数即可，而有了预编译之后，只需要保证构建过程中生成 render 函数就可以。在 webpack 中，使用vue-loader编译.vue文件，内部依赖的vue-template-compiler模块，在 webpack 构建过程中，将template预编译成 render 函数。与 react 类似，在添加了jsx的语法糖解析器babel-plugin-transform-vue-jsx之后，就可以直接手写render函数。\n所以，template和jsx的都是render的一种表现形式，不同的是：JSX相对于template而言，具有更高的灵活性，在复杂的组件中，更具有优势，而 template 虽然显得有些呆滞。但是 template 在代码结构上更符合视图与逻辑分离的习惯，更简单、更直观、更好维护。\n39. vue初始化页面闪动问题使用vue开发时，在vue初始化之前，由于div是不归vue管的，所以我们写的代码在还没有解析的情况下会容易出现花屏现象，看到类似于的字样，虽然一般情况下这个时间很短暂，但是还是有必要让解决这个问题的。\n首先：在css里加上以下代码：\n[v-cloak] &#123;    display: none;&#125;\n复制代码\n\n如果没有彻底解决问题，则在根元素加上style=&quot;display: none;&quot; :style=&quot;&#123;display: &#39;block&#39;&#125;&quot;\n40. extend 有什么作用这个 API 很少用到，作用是扩展组件生成一个构造器，通常会与 $mount 一起使用。\n// 创建组件构造器let Component = Vue.extend(&#123;  template: '&lt;div>test&lt;/div>'&#125;)// 挂载到 #app 上new Component().$mount('#app')// 除了上面的方式，还可以用来扩展已有的组件let SuperComponent = Vue.extend(Component)new SuperComponent(&#123;    created() &#123;        console.log(1)    &#125;&#125;)new SuperComponent().$mount('#app')\n复制代码\n\n41. mixin 和 mixins 区别mixin 用于全局混入，会影响到每个组件实例，通常插件都是这样做初始化的。\nVue.mixin(&#123;    beforeCreate() &#123;        // ...逻辑        // 这种方式会影响到每个组件的 beforeCreate 钩子函数    &#125;&#125;)\n复制代码\n\n虽然文档不建议在应用中直接使用 mixin，但是如果不滥用的话也是很有帮助的，比如可以全局混入封装好的 ajax 或者一些工具函数等等。\nmixins 应该是最常使用的扩展组件的方式了。如果多个组件中有相同的业务逻辑，就可以将这些逻辑剥离出来，通过 mixins 混入代码，比如上拉下拉加载数据这种逻辑等等。 另外需要注意的是 mixins 混入的钩子函数会先于组件内的钩子函数执行，并且在遇到同名选项的时候也会有选择性的进行合并。\n42. MVVM的优缺点?优点:\n\n分离视图（View）和模型（Model），降低代码耦合，提⾼视图或者逻辑的重⽤性: ⽐如视图（View）可以独⽴于Model变化和修改，⼀个ViewModel可以绑定不同的”View”上，当View变化的时候Model不可以不变，当Model变化的时候View也可以不变。你可以把⼀些视图逻辑放在⼀个ViewModel⾥⾯，让很多view重⽤这段视图逻辑\n提⾼可测试性: ViewModel的存在可以帮助开发者更好地编写测试代码\n⾃动更新dom: 利⽤双向绑定,数据更新后视图⾃动更新,让开发者从繁琐的⼿动dom中解放\n\n缺点:\n\nBug很难被调试: 因为使⽤双向绑定的模式，当你看到界⾯异常了，有可能是你View的代码有Bug，也可能是Model的代码有问题。数据绑定使得⼀个位置的Bug被快速传递到别的位置，要定位原始出问题的地⽅就变得不那么容易了。另外，数据绑定的声明是指令式地写在View的模版当中的，这些内容是没办法去打断点debug的\n⼀个⼤的模块中model也会很⼤，虽然使⽤⽅便了也很容易保证了数据的⼀致性，当时⻓期持有，不释放内存就造成了花费更多的内存\n对于⼤型的图形应⽤程序，视图状态较多，ViewModel的构建和维护的成本都会⽐较⾼。\n\n二、生命周期1. 说一下Vue的生命周期Vue 实例有⼀个完整的⽣命周期，也就是从开始创建、初始化数据、编译模版、挂载Dom -&gt; 渲染、更新 -&gt; 渲染、卸载 等⼀系列过程，称这是Vue的⽣命周期。\n\nbeforeCreate（创建前）：数据观测和初始化事件还未开始，此时 data 的响应式追踪、event/watcher 都还没有被设置，也就是说不能访问到data、computed、watch、methods上的方法和数据。\ncreated（创建后） ：实例创建完成，实例上配置的 options 包括 data、computed、watch、methods 等都配置完成，但是此时渲染得节点还未挂载到 DOM，所以不能访问到 $el 属性。\nbeforeMount（挂载前）：在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。此时还没有挂载html到页面上。\nmounted（挂载后）：在el被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html 页面中。此过程中进行ajax交互。\nbeforeUpdate（更新前）：响应式数据更新时调用，此时虽然响应式数据更新了，但是对应的真实 DOM 还没有被渲染。\nupdated（更新后） ：在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。此时 DOM 已经根据响应式数据的变化更新了。调用时，组件 DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。\nbeforeDestroy（销毁前）：实例销毁之前调用。这一步，实例仍然完全可用，this 仍能获取到实例。\ndestroyed（销毁后）：实例销毁后调用，调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务端渲染期间不被调用。\n\n另外还有 keep-alive 独有的生命周期，分别为 activated 和 deactivated 。用 keep-alive 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 deactivated 钩子函数，命中缓存渲染后会执行 activated 钩子函数。\n2. Vue 子组件和父组件执行顺序加载渲染过程：\n\n父组件 beforeCreate\n父组件 created\n父组件 beforeMount\n子组件 beforeCreate\n子组件 created\n子组件 beforeMount\n子组件 mounted\n父组件 mounted\n\n更新过程：\n\n父组件 beforeUpdate\n子组件 beforeUpdate\n子组件 updated\n父组件 updated\n\n销毁过程：\n\n父组件 beforeDestroy\n子组件 beforeDestroy\n子组件 destroyed\n父组件 destoryed\n\n3. created和mounted的区别\ncreated:在模板渲染成html前调用，即通常初始化某些属性值，然后再渲染成视图。\nmounted:在模板渲染成html后调用，通常是初始化页面完成后，再对html的dom节点进行一些需要的操作。\n\n4. 一般在哪个生命周期请求异步数据我们可以在钩子函数 created、beforeMount、mounted 中进行调用，因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。 \n推荐在 created 钩子函数中调用异步请求，因为在 created 钩子函数中调用异步请求有以下优点：\n\n能更快获取到服务端数据，减少页面加载时间，用户体验更好；\nSSR不支持 beforeMount 、mounted 钩子函数，放在 created 中有助于一致性。\n\n5. keep-alive 中的生命周期哪些keep-alive是 Vue 提供的一个内置组件，用来对组件进行缓存——在组件切换过程中将状态保留在内存中，防止重复渲染DOM。\n如果为一个组件包裹了 keep-alive，那么它会多出两个生命周期：deactivated、activated。同时，beforeDestroy 和 destroyed 就不会再被触发了，因为组件不会被真正销毁。\n当组件被换掉时，会被缓存到内存中、触发 deactivated 生命周期；当组件被切回来时，再去缓存里找这个组件、触发 activated钩子函数。\n三、组件通信组件通信的方式如下：\n（1） props  /  $emit父组件通过props向子组件传递数据，子组件通过$emit和父组件通信\n1. 父组件向子组件传值\nprops只能是父组件向子组件进行传值，props使得父子组件之间形成了一个单向下行绑定。子组件的数据会随着父组件不断更新。\nprops 可以显示定义一个或一个以上的数据，对于接收的数据，可以是各种数据类型，同样也可以传递一个函数。\nprops属性名规则：若在props中使用驼峰形式，模板中需要使用短横线的形式\n\n// 父组件\n&lt;template>\n    &lt;div id=\"father\">\n        &lt;son :msg=\"msgData\" :fn=\"myFunction\">&lt;/son>\n    &lt;/div>\n&lt;/template>\n\n&lt;script>\nimport son from \"./son.vue\";\nexport default &#123;\n    name: father,\n    data() &#123;\n        msgData: \"父组件数据\";\n    &#125;,\n    methods: &#123;\n        myFunction() &#123;\n            console.log(\"vue\");\n        &#125;\n    &#125;,\n    components: &#123;\n        son\n    &#125;\n&#125;;\n&lt;/script>\n复制代码\n// 子组件\n&lt;template>\n    &lt;div id=\"son\">\n        &lt;p>&#123;&#123;msg&#125;&#125;&lt;/p>\n        &lt;button @click=\"fn\">按钮&lt;/button>\n    &lt;/div>\n&lt;/template>\n&lt;script>\nexport default &#123;\n    name: \"son\",\n    props: [\"msg\", \"fn\"]\n&#125;;\n&lt;/script>\n复制代码\n\n2. 子组件向父组件传值\n$emit绑定一个自定义事件，当这个事件被执行的时就会将参数传递给父组件，而父组件通过v-on监听并接收参数。\n\n// 父组件\n&lt;template>\n  &lt;div class=\"section\">\n    &lt;com-article :articles=\"articleList\" @onEmitIndex=\"onEmitIndex\">&lt;/com-article>\n    &lt;p>&#123;&#123;currentIndex&#125;&#125;&lt;/p>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\nimport comArticle from './test/article.vue'\nexport default &#123;\n  name: 'comArticle',\n  components: &#123; comArticle &#125;,\n  data() &#123;\n    return &#123;\n      currentIndex: -1,\n      articleList: ['红楼梦', '西游记', '三国演义']\n    &#125;\n  &#125;,\n  methods: &#123;\n    onEmitIndex(idx) &#123;\n      this.currentIndex = idx\n    &#125;\n  &#125;\n&#125;\n&lt;/script>\n复制代码\n//子组件\n&lt;template>\n  &lt;div>\n    &lt;div v-for=\"(item, index) in articles\" :key=\"index\" @click=\"emitIndex(index)\">&#123;&#123;item&#125;&#125;&lt;/div>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\nexport default &#123;\n  props: ['articles'],\n  methods: &#123;\n    emitIndex(index) &#123;\n      this.$emit('onEmitIndex', index) // 触发父组件的方法，并传递参数index\n    &#125;\n  &#125;\n&#125;\n&lt;/script>\n复制代码\n\n（2）eventBus事件总线（$emit / $on）eventBus事件总线适用于父子组件、非父子组件等之间的通信，使用步骤如下： （1）创建事件中心管理组件之间的通信\n// event-bus.js\n\nimport Vue from 'vue'\nexport const EventBus = new Vue()\n复制代码\n\n（2）发送事件 假设有两个兄弟组件firstCom和secondCom：\n&lt;template>\n  &lt;div>\n    &lt;first-com>&lt;/first-com>\n    &lt;second-com>&lt;/second-com>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\nimport firstCom from './firstCom.vue'\nimport secondCom from './secondCom.vue'\nexport default &#123;\n  components: &#123; firstCom, secondCom &#125;\n&#125;\n&lt;/script>\n复制代码\n\n在firstCom组件中发送事件：\n&lt;template>\n  &lt;div>\n    &lt;button @click=\"add\">加法&lt;/button>    \n  &lt;/div>\n&lt;/template>\n\n&lt;script>\nimport &#123;EventBus&#125; from './event-bus.js' // 引入事件中心\n\nexport default &#123;\n  data()&#123;\n    return&#123;\n      num:0\n    &#125;\n  &#125;,\n  methods:&#123;\n    add()&#123;\n      EventBus.$emit('addition', &#123;\n        num:this.num++\n      &#125;)\n    &#125;\n  &#125;\n&#125;\n&lt;/script>\n复制代码\n\n（3）接收事件 在secondCom组件中发送事件：\n&lt;template>\n  &lt;div>求和: &#123;&#123;count&#125;&#125;&lt;/div>\n&lt;/template>\n\n&lt;script>\nimport &#123; EventBus &#125; from './event-bus.js'\nexport default &#123;\n  data() &#123;\n    return &#123;\n      count: 0\n    &#125;\n  &#125;,\n  mounted() &#123;\n    EventBus.$on('addition', param => &#123;\n      this.count = this.count + param.num;\n    &#125;)\n  &#125;\n&#125;\n&lt;/script>\n复制代码\n\n在上述代码中，这就相当于将num值存贮在了事件总线中，在其他组件中可以直接访问。事件总线就相当于一个桥梁，不用组件通过它来通信。\n虽然看起来比较简单，但是这种方法也有不变之处，如果项目过大，使用这种方式进行通信，后期维护起来会很困难。\n（3）依赖注入（provide / inject）这种方式就是Vue中的依赖注入，该方法用于父子组件之间的通信。当然这里所说的父子不一定是真正的父子，也可以是祖孙组件，在层数很深的情况下，可以使用这种方法来进行传值。就不用一层一层的传递了。\nprovide / inject是Vue提供的两个钩子，和data、methods是同级的。并且provide的书写形式和data一样。\n\nprovide 钩子用来发送数据或方法\ninject钩子用来接收数据或方法\n\n在父组件中：\nprovide() &#123; \n    return &#123;     \n        num: this.num  \n    &#125;;\n&#125;\n复制代码\n\n在子组件中：\ninject: ['num']\n复制代码\n\n还可以这样写，这样写就可以访问父组件中的所有属性：\nprovide() &#123;\n return &#123;\n    app: this\n  &#125;;\n&#125;\ndata() &#123;\n return &#123;\n    num: 1\n  &#125;;\n&#125;\n\ninject: ['app']\nconsole.log(this.app.num)\n复制代码\n\n注意： 依赖注入所提供的属性是非响应式的。\n（3）ref / $refs这种方式也是实现父子组件之间的通信。\nref： 这个属性用在子组件上，它的引用就指向了子组件的实例。可以通过实例来访问组件的数据和方法。\n在子组件中：\nexport default &#123;\n  data () &#123;\n    return &#123;\n      name: 'JavaScript'\n    &#125;\n  &#125;,\n  methods: &#123;\n    sayHello () &#123;\n      console.log('hello')\n    &#125;\n  &#125;\n&#125;\n复制代码\n\n在父组件中：\n&lt;template>\n  &lt;child ref=\"child\">&lt;/component-a>\n&lt;/template>\n&lt;script>\n  import child from './child.vue'\n  export default &#123;\n    components: &#123; child &#125;,\n    mounted () &#123;\n      console.log(this.$refs.child.name);  // JavaScript\n      this.$refs.child.sayHello();  // hello\n    &#125;\n  &#125;\n&lt;/script>\n复制代码\n\n（4）$parent / $children\n使用$parent可以让组件访问父组件的实例（访问的是上一级父组件的属性和方法）\n使用$children可以让组件访问子组件的实例，但是，$children并不能保证顺序，并且访问的数据也不是响应式的。\n\n在子组件中：\n&lt;template>\n  &lt;div>\n    &lt;span>&#123;&#123;message&#125;&#125;&lt;/span>\n    &lt;p>获取父组件的值为:  &#123;&#123;parentVal&#125;&#125;&lt;/p>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\nexport default &#123;\n  data() &#123;\n    return &#123;\n      message: 'Vue'\n    &#125;\n  &#125;,\n  computed:&#123;\n    parentVal()&#123;\n      return this.$parent.msg;\n    &#125;\n  &#125;\n&#125;\n&lt;/script>\n复制代码\n\n在父组件中：\n// 父组件中\n&lt;template>\n  &lt;div class=\"hello_world\">\n    &lt;div>&#123;&#123;msg&#125;&#125;&lt;/div>\n    &lt;child>&lt;/child>\n    &lt;button @click=\"change\">点击改变子组件值&lt;/button>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\nimport child from './child.vue'\nexport default &#123;\n  components: &#123; child &#125;,\n  data() &#123;\n    return &#123;\n      msg: 'Welcome'\n    &#125;\n  &#125;,\n  methods: &#123;\n    change() &#123;\n      // 获取到子组件\n      this.$children[0].message = 'JavaScript'\n    &#125;\n  &#125;\n&#125;\n&lt;/script>\n复制代码\n\n在上面的代码中，子组件获取到了父组件的parentVal值，父组件改变了子组件中message的值。 需要注意：\n\n通过$parent访问到的是上一级父组件的实例，可以使用$root来访问根组件的实例\n在组件中使用$children拿到的是所有的子组件的实例，它是一个数组，并且是无序的\n在根组件#app上拿$parent得到的是new Vue()的实例，在这实例上再拿$parent得到的是undefined，而在最底层的子组件拿$children是个空数组\n$children 的值是数组，而$parent是个对象\n\n（5）$attrs / $listeners考虑一种场景，如果A是B组件的父组件，B是C组件的父组件。如果想要组件A给组件C传递数据，这种隔代的数据，该使用哪种方式呢？\n如果是用props/$emit来一级一级的传递，确实可以完成，但是比较复杂；如果使用事件总线，在多人开发或者项目较大的时候，维护起来很麻烦；如果使用Vuex，的确也可以，但是如果仅仅是传递数据，那可能就有点浪费了。\n针对上述情况，Vue引入了$attrs / $listeners，实现组件之间的跨代通信。\n先来看一下inheritAttrs，它的默认值true，继承所有的父组件属性除props之外的所有属性；inheritAttrs：false 只继承class属性 。\n\n$attrs：继承所有的父组件属性（除了prop传递的属性、class 和 style ），一般用在子组件的子元素上\n$listeners：该属性是一个对象，里面包含了作用在这个组件上的所有监听器，可以配合 v-on=&quot;$listeners&quot; 将所有的事件监听器指向这个组件的某个特定的子元素。（相当于子组件继承父组件的事件）\n\nA组件（APP.vue）：\n&lt;template>\n    &lt;div id=\"app\">\n        //此处监听了两个事件，可以在B组件或者C组件中直接触发 \n        &lt;child1 :p-child1=\"child1\" :p-child2=\"child2\" @test1=\"onTest1\" @test2=\"onTest2\">&lt;/child1>\n    &lt;/div>\n&lt;/template>\n&lt;script>\nimport Child1 from './Child1.vue';\nexport default &#123;\n    components: &#123; Child1 &#125;,\n    methods: &#123;\n        onTest1() &#123;\n            console.log('test1 running');\n        &#125;,\n        onTest2() &#123;\n            console.log('test2 running');\n        &#125;\n    &#125;\n&#125;;\n&lt;/script>\n复制代码\n\nB组件（Child1.vue）：\n&lt;template>\n    &lt;div class=\"child-1\">\n        &lt;p>props: &#123;&#123;pChild1&#125;&#125;&lt;/p>\n        &lt;p>$attrs: &#123;&#123;$attrs&#125;&#125;&lt;/p>\n        &lt;child2 v-bind=\"$attrs\" v-on=\"$listeners\">&lt;/child2>\n    &lt;/div>\n&lt;/template>\n&lt;script>\nimport Child2 from './Child2.vue';\nexport default &#123;\n    props: ['pChild1'],\n    components: &#123; Child2 &#125;,\n    inheritAttrs: false,\n    mounted() &#123;\n        this.$emit('test1'); // 触发APP.vue中的test1方法\n    &#125;\n&#125;;\n&lt;/script>\n复制代码\n\nC 组件 (Child2.vue)：\n&lt;template>\n    &lt;div class=\"child-2\">\n        &lt;p>props: &#123;&#123;pChild2&#125;&#125;&lt;/p>\n        &lt;p>$attrs: &#123;&#123;$attrs&#125;&#125;&lt;/p>\n    &lt;/div>\n&lt;/template>\n&lt;script>\nexport default &#123;\n    props: ['pChild2'],\n    inheritAttrs: false,\n    mounted() &#123;\n        this.$emit('test2');// 触发APP.vue中的test2方法\n    &#125;\n&#125;;\n&lt;/script>\n复制代码\n\n在上述代码中：\n\nC组件中能直接触发test的原因在于 B组件调用C组件时 使用 v-on 绑定了$listeners 属性\n在B组件中通过v-bind 绑定$attrs属性，C组件可以直接获取到A组件中传递下来的props（除了B组件中props声明的）\n\n（6）总结（1）父子组件间通信\n\n子组件通过 props 属性来接受父组件的数据，然后父组件在子组件上注册监听事件，子组件通过 emit 触发事件来向父组件发送数据。\n通过 ref 属性给子组件设置一个名字。父组件通过 $refs 组件名来获得子组件，子组件通过 $parent 获得父组件，这样也可以实现通信。\n使用 provide/inject，在父组件中通过 provide提供变量，在子组件中通过 inject 来将变量注入到组件中。不论子组件有多深，只要调用了 inject 那么就可以注入 provide中的数据。\n\n（2）兄弟组件间通信\n\n使用 eventBus 的方法，它的本质是通过创建一个空的 Vue 实例来作为消息传递的对象，通信的组件引入这个实例，通信的组件通过在这个实例上监听和触发事件，来实现消息的传递。\n通过 $parent/$refs 来获取到兄弟组件，也可以进行通信。\n\n（3）任意组件之间\n\n使用 eventBus ，其实就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。\n\n如果业务逻辑复杂，很多组件之间需要同时处理一些公共的数据，这个时候采用上面这一些方法可能不利于项目的维护。这个时候可以使用 vuex ，vuex 的思想就是将这一些公共的数据抽离出来，将它作为一个全局的变量来管理，然后其他组件就可以对这个公共数据进行读写操作，这样达到了解耦的目的。\n四、路由1. Vue-Router 的懒加载如何实现非懒加载：\nimport List from '@/components/list.vue'\nconst router = new VueRouter(&#123;\n  routes: [\n    &#123; path: '/list', component: List &#125;\n  ]\n&#125;)\n复制代码\n\n（1）方案一(常用)：使用箭头函数+import动态加载\nconst List = () => import('@/components/list.vue')\nconst router = new VueRouter(&#123;\n  routes: [\n    &#123; path: '/list', component: List &#125;\n  ]\n&#125;)\n复制代码\n\n（2）方案二：使用箭头函数+require动态加载\nconst router = new Router(&#123;\n  routes: [\n   &#123;\n     path: '/list',\n     component: resolve => require(['@/components/list'], resolve)\n   &#125;\n  ]\n&#125;)\n复制代码\n\n（3）方案三：使用webpack的require.ensure技术，也可以实现按需加载。 这种情况下，多个路由指定相同的chunkName，会合并打包成一个js文件。\n// r就是resolve\nconst List = r => require.ensure([], () => r(require('@/components/list')), 'list');\n// 路由也是正常的写法  这种是官方推荐的写的 按模块划分懒加载 \nconst router = new Router(&#123;\n  routes: [\n  &#123;\n    path: '/list',\n    component: List,\n    name: 'list'\n  &#125;\n ]\n&#125;))\n复制代码\n\n2. 路由的hash和history模式的区别Vue-Router有两种模式：hash模式和history模式。默认的路由模式是hash模式。\n1. hash模式简介： hash模式是开发中默认的模式，它的URL带着一个#，例如：www.abc.com/#/vue，它的hash值就是#/vue。\n特点：hash值会出现在URL里面，但是不会出现在HTTP请求中，对后端完全没有影响。所以改变hash值，不会重新加载页面。这种模式的浏览器支持度很好，低版本的IE浏览器也支持这种模式。hash路由被称为是前端路由，已经成为SPA（单页面应用）的标配。\n原理： hash模式的主要原理就是onhashchange()事件：\nwindow.onhashchange = function(event)&#123;\n\tconsole.log(event.oldURL, event.newURL);\n\tlet hash = location.hash.slice(1);\n&#125;\n复制代码\n\n使用onhashchange()事件的好处就是，在页面的hash值发生变化时，无需向后端发起请求，window就可以监听事件的改变，并按规则加载相应的代码。除此之外，hash值变化对应的URL都会被浏览器记录下来，这样浏览器就能实现页面的前进和后退。虽然是没有请求后端服务器，但是页面的hash值和对应的URL关联起来了。\n2. history模式简介： history模式的URL中没有#，它使用的是传统的路由分发模式，即用户在输入一个URL时，服务器会接收这个请求，并解析这个URL，然后做出相应的逻辑处理。 特点： 当使用history模式时，URL就像这样：abc.com/user/id。相比hash模式更加好看。但是，history模式需要后台配置支持。如果后台没有正确配置，访问时会返回404。 API： history api可以分为两大部分，切换历史状态和修改历史状态：\n\n修改历史状态：包括了 HTML5 History Interface 中新增的 pushState() 和 replaceState() 方法，这两个方法应用于浏览器的历史记录栈，提供了对历史记录进行修改的功能。只是当他们进行修改时，虽然修改了url，但浏览器不会立即向后端发送请求。如果要做到改变url但又不刷新页面的效果，就需要前端用上这两个API。\n切换历史状态： 包括forward()、back()、go()三个方法，对应浏览器的前进，后退，跳转操作。\n\n虽然history模式丢弃了丑陋的#。但是，它也有自己的缺点，就是在刷新页面的时候，如果没有相应的路由或资源，就会刷出404来。\n如果想要切换到history模式，就要进行以下配置（后端也要进行配置）：\nconst router = new VueRouter(&#123;\n  mode: 'history',\n  routes: [...]\n&#125;)\n复制代码\n\n3. 两种模式对比调用 history.pushState() 相比于直接修改 hash，存在以下优势:\n\npushState() 设置的新 URL 可以是与当前 URL 同源的任意 URL；而 hash 只可修改 # 后面的部分，因此只能设置与当前 URL 同文档的 URL；\npushState() 设置的新 URL 可以与当前 URL 一模一样，这样也会把记录添加到栈中；而 hash 设置的新值必须与原来不一样才会触发动作将记录添加到栈中；\npushState() 通过 stateObject 参数可以添加任意类型的数据到记录中；而 hash 只可添加短字符串；\npushState() 可额外设置 title 属性供后续使用。\nhash模式下，仅hash符号之前的url会被包含在请求中，后端如果没有做到对路由的全覆盖，也不会返回404错误；history模式下，前端的url必须和实际向后端发起请求的url一致，如果没有对用的路由处理，将返回404错误。\n\nhash模式和history模式都有各自的优势和缺陷，还是要根据实际情况选择性的使用。\n3. 如何获取页面的hash变化（1）监听$route的变化\n// 监听,当路由发生变化的时候执行\nwatch: &#123;\n  $route: &#123;\n    handler: function(val, oldVal)&#123;\n      console.log(val);\n    &#125;,\n    // 深度观察监听\n    deep: true\n  &#125;\n&#125;,\n复制代码\n\n（2）window.location.hash读取#值 window.location.hash 的值可读可写，读取来判断状态是否改变，写入时可以在不重载网页的前提下，添加一条历史访问记录。\n4. $route 和$router 的区别\n$route 是“路由信息对象”，包括 path，params，hash，query，fullPath，matched，name 等路由信息参数\n$router 是“路由实例”对象包括了路由的跳转方法，钩子函数等。\n\n5. 如何定义动态路由？如何获取传过来的动态参数？（1）param方式\n\n配置路由格式：/router/:id\n传递的方式：在path后面跟上对应的值\n传递后形成的路径：/router/123\n\n1）路由定义\n//在APP.vue中\n&lt;router-link :to=\"'/user/'+userId\" replace>用户&lt;/router-link>    \n\n//在index.js\n&#123;\n   path: '/user/:userid',\n   component: User,\n&#125;,\n复制代码\n\n2）路由跳转\n// 方法1：\n&lt;router-link :to=\"&#123; name: 'users', params: &#123; uname: wade &#125;&#125;\">按钮&lt;/router-link\n\n// 方法2：\nthis.$router.push(&#123;name:'users',params:&#123;uname:wade&#125;&#125;)\n\n// 方法3：\nthis.$router.push('/user/' + wade)\n复制代码\n\n3）参数获取 通过 $route.params.userid 获取传递的值\n（2）query方式\n\n配置路由格式：/router，也就是普通配置\n传递的方式：对象中使用query的key作为传递方式\n传递后形成的路径：/route?id=123\n\n1）路由定义\n//方式1：直接在router-link 标签上以对象的形式\n&lt;router-link :to=\"&#123;path:'/profile',query:&#123;name:'why',age:28,height:188&#125;&#125;\">档案&lt;/router-link>\n\n// 方式2：写成按钮以点击事件形式\n&lt;button @click='profileClick'>我的&lt;/button>    \n\nprofileClick()&#123;\n  this.$router.push(&#123;\n    path: \"/profile\",\n    query: &#123;\n        name: \"kobi\",\n        age: \"28\",\n        height: 198\n    &#125;\n  &#125;);\n&#125;\n复制代码\n\n2）跳转方法\n// 方法1：\n&lt;router-link :to=\"&#123; name: 'users', query: &#123; uname: james &#125;&#125;\">按钮&lt;/router-link>\n\n// 方法2：\nthis.$router.push(&#123; name: 'users', query:&#123; uname:james &#125;&#125;)\n\n// 方法3：\n&lt;router-link :to=\"&#123; path: '/user', query: &#123; uname:james &#125;&#125;\">按钮&lt;/router-link>\n\n// 方法4：\nthis.$router.push(&#123; path: '/user', query:&#123; uname:james &#125;&#125;)\n\n// 方法5：\nthis.$router.push('/user?uname=' + jsmes)\n复制代码\n\n3）获取参数\n通过$route.query 获取传递的值\n复制代码\n\n6. Vue-router 路由钩子在生命周期的体现一、Vue-Router导航守卫\n有的时候，需要通过路由来进行一些操作，比如最常见的登录权限验证，当用户满足条件时，才让其进入导航，否则就取消跳转，并跳到登录页面让其登录。 为此有很多种方法可以植入路由的导航过程：全局的，单个路由独享的，或者组件级的\n\n全局路由钩子\n\nvue-router全局有三个路由钩子;\n\nrouter.beforeEach 全局前置守卫 进入路由之前\nrouter.beforeResolve 全局解析守卫（2.5.0+）在 beforeRouteEnter 调用之后调用\nrouter.afterEach 全局后置钩子 进入路由之后\n\n具体使用∶\n\nbeforeEach（判断是否登录了，没登录就跳转到登录页）\n\nrouter.beforeEach((to, from, next) => &#123;  \n    let ifInfo = Vue.prototype.$common.getSession('userData');  // 判断是否登录的存储信息\n    if (!ifInfo) &#123; \n        // sessionStorage里没有储存user信息    \n        if (to.path == '/') &#123; \n            //如果是登录页面路径，就直接next()      \n            next();    \n        &#125; else &#123; \n            //不然就跳转到登录      \n            Message.warning(\"请重新登录！\");     \n            window.location.href = Vue.prototype.$loginUrl;    \n        &#125;  \n    &#125; else &#123;    \n        return next();  \n    &#125;\n&#125;)\n复制代码\n\n\nafterEach （跳转之后滚动条回到顶部）\n\nrouter.afterEach((to, from) => &#123;  \n    // 跳转之后滚动条回到顶部  \n    window.scrollTo(0,0);\n&#125;);\n复制代码\n\n\n单个路由独享钩子\n\nbeforeEnter 如果不想全局配置守卫的话，可以为某些路由单独配置守卫，有三个参数∶ to、from、next\nexport default [    \n    &#123;        \n        path: '/',        \n        name: 'login',        \n        component: login,        \n        beforeEnter: (to, from, next) => &#123;          \n            console.log('即将进入登录页面')          \n            next()        \n        &#125;    \n    &#125;\n]\n复制代码\n\n\n组件内钩子\n\nbeforeRouteUpdate、beforeRouteEnter、beforeRouteLeave\n这三个钩子都有三个参数∶to、from、next\n\nbeforeRouteEnter∶ 进入组件前触发\nbeforeRouteUpdate∶ 当前地址改变并且改组件被复用时触发，举例来说，带有动态参数的路径foo/∶id，在 /foo/1 和 /foo/2 之间跳转的时候，由于会渲染同样的foa组件，这个钩子在这种情况下就会被调用\nbeforeRouteLeave∶ 离开组件被调用\n\n注意点，beforeRouteEnter组件内还访问不到this，因为该守卫执行前组件实例还没有被创建，需要传一个回调给 next来访问，例如：\nbeforeRouteEnter(to, from, next) &#123;      \n    next(target => &#123;        \n        if (from.path == '/classProcess') &#123;          \n            target.isFromProcess = true        \n        &#125;      \n    &#125;)    \n&#125;\n复制代码\n\n二、Vue路由钩子在生命周期函数的体现\n\n完整的路由导航解析流程（不包括其他生命周期）\n\n\n触发进入其他路由。\n调用要离开路由的组件守卫beforeRouteLeave\n调用局前置守卫∶ beforeEach\n在重用的组件里调用 beforeRouteUpdate\n调用路由独享守卫 beforeEnter。\n解析异步路由组件。\n在将要进入的路由组件中调用 beforeRouteEnter\n调用全局解析守卫 beforeResolve\n导航被确认。\n调用全局后置钩子的 afterEach 钩子。\n触发DOM更新（mounted）。\n执行beforeRouteEnter 守卫中传给 next 的回调函数\n\n\n触发钩子的完整顺序\n\n路由导航、keep-alive、和组件生命周期钩子结合起来的，触发顺序，假设是从a组件离开，第一次进入b组件∶\n\nbeforeRouteLeave：路由组件的组件离开路由前钩子，可取消路由离开。\nbeforeEach：路由全局前置守卫，可用于登录验证、全局路由loading等。\nbeforeEnter：路由独享守卫\nbeforeRouteEnter：路由组件的组件进入路由前钩子。\nbeforeResolve：路由全局解析守卫\nafterEach：路由全局后置钩子\nbeforeCreate：组件生命周期，不能访问tAis。\ncreated;组件生命周期，可以访问tAis，不能访问dom。\nbeforeMount：组件生命周期\ndeactivated：离开缓存组件a，或者触发a的beforeDestroy和destroyed组件销毁钩子。\nmounted：访问/操作dom。\nactivated：进入缓存组件，进入a的嵌套子组件（如果有的话）。\n执行beforeRouteEnter回调函数next。\n\n\n导航行为被触发到导航完成的整个过程\n\n\n导航行为被触发，此时导航未被确认。\n在失活的组件里调用离开守卫 beforeRouteLeave。\n调用全局的 beforeEach守卫。\n在重用的组件里调用 beforeRouteUpdate 守卫(2.2+)。\n在路由配置里调用 beforeEnteY。\n解析异步路由组件（如果有）。\n在被激活的组件里调用 beforeRouteEnter。\n调用全局的 beforeResolve 守卫（2.5+），标示解析阶段完成。\n导航被确认。\n调用全局的 afterEach 钩子。\n非重用组件，开始组件实例的生命周期：beforeCreate&amp;created、beforeMount&amp;mounted\n触发 DOM 更新。\n用创建好的实例调用 beforeRouteEnter守卫中传给 next 的回调函数。\n导航完成\n\n7. Vue-router跳转和location.href有什么区别\n使用 location.href= /url 来跳转，简单方便，但是刷新了页面；\n使用 history.pushState( /url ) ，无刷新页面，静态跳转；\n引进 router ，然后使用 router.push( /url ) 来跳转，使用了 diff 算法，实现了按需加载，减少了 dom 的消耗。其实使用 router 跳转和使用 history.pushState() 没什么差别的，因为vue-router就是用了 history.pushState() ，尤其是在history模式下。\n\n8. params和query的区别用法：query要用path来引入，params要用name来引入，接收参数都是类似的，分别是 this.$route.query.name 和 this.$route.params.name 。\nurl地址显示：query更加类似于ajax中get传参，params则类似于post，说的再简单一点，前者在浏览器地址栏中显示参数，后者则不显示\n注意：query刷新不会丢失query里面的数据 params刷新会丢失 params里面的数据。\n9. Vue-router 导航守卫有哪些\n全局前置/钩子：beforeEach、beforeResolve、afterEach\n路由独享的守卫：beforeEnter\n组件内的守卫：beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave\n\n10. 对前端路由的理解在前端技术早期，一个 url 对应一个页面，如果要从 A 页面切换到 B 页面，那么必然伴随着页面的刷新。这个体验并不好，不过在最初也是无奈之举——用户只有在刷新页面的情况下，才可以重新去请求数据。\n后来，改变发生了——Ajax 出现了，它允许人们在不刷新页面的情况下发起请求；与之共生的，还有“不刷新页面即可更新页面内容”这种需求。在这样的背景下，出现了 SPA（单页面应用）。\nSPA极大地提升了用户体验，它允许页面在不刷新的情况下更新页面内容，使内容的切换更加流畅。但是在 SPA 诞生之初，人们并没有考虑到“定位”这个问题——在内容切换前后，页面的 URL 都是一样的，这就带来了两个问题：\n\nSPA 其实并不知道当前的页面“进展到了哪一步”。可能在一个站点下经过了反复的“前进”才终于唤出了某一块内容，但是此时只要刷新一下页面，一切就会被清零，必须重复之前的操作、才可以重新对内容进行定位——SPA 并不会“记住”你的操作。\n由于有且仅有一个 URL 给页面做映射，这对 SEO 也不够友好，搜索引擎无法收集全面的信息\n\n为了解决这个问题，前端路由出现了。\n前端路由可以帮助我们在仅有一个页面的情况下，“记住”用户当前走到了哪一步——为 SPA 中的各个视图匹配一个唯一标识。这意味着用户前进、后退触发的新内容，都会映射到不同的 URL 上去。此时即便他刷新页面，因为当前的 URL 可以标识出他所处的位置，因此内容也不会丢失。\n那么如何实现这个目的呢？首先要解决两个问题：\n\n当用户刷新页面时，浏览器会默认根据当前 URL 对资源进行重新定位（发送请求）。这个动作对 SPA 是不必要的，因为我们的 SPA 作为单页面，无论如何也只会有一个资源与之对应。此时若走正常的请求-刷新流程，反而会使用户的前进后退操作无法被记录。\n单页面应用对服务端来说，就是一个URL、一套资源，那么如何做到用“不同的URL”来映射不同的视图内容呢？\n\n从这两个问题来看，服务端已经完全救不了这个场景了。所以要靠咱们前端自力更生，不然怎么叫“前端路由”呢？作为前端，可以提供这样的解决思路：\n\n拦截用户的刷新操作，避免服务端盲目响应、返回不符合预期的资源内容。把刷新这个动作完全放到前端逻辑里消化掉。\n感知 URL 的变化。这里不是说要改造 URL、凭空制造出 N 个 URL 来。而是说 URL 还是那个 URL，只不过我们可以给它做一些微小的处理——这些处理并不会影响 URL 本身的性质，不会影响服务器对它的识别，只有我们前端感知的到。一旦我们感知到了，我们就根据这些变化、用 JS 去给它生成不同的内容。\n\n五、Vuex1. Vuex 的原理Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。\n\nVuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。\n改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样可以方便地跟踪每一个状态的变化。\n\n Vuex为Vue Components建立起了一个完整的生态圈，包括开发中的API调用一环。 （1）核心流程中的主要功能：\n\nVue Components 是 vue 组件，组件会触发（dispatch）一些事件或动作，也就是图中的 Actions;\n在组件中发出的动作，肯定是想获取或者改变数据的，但是在 vuex 中，数据是集中管理的，不能直接去更改数据，所以会把这个动作提交（Commit）到 Mutations 中;\n然后 Mutations 就去改变（Mutate）State 中的数据;\n当 State 中的数据被改变之后，就会重新渲染（Render）到 Vue Components 中去，组件展示更新后的数据，完成一个流程。\n\n（2）各模块在核心流程中的主要功能：\n\nVue Components∶ Vue组件。HTML页面上，负责接收用户操作等交互行为，执行dispatch方法触发对应action进行回应。\ndispatch∶操作行为触发方法，是唯一能执行action的方法。\nactions∶ 操作行为处理模块。负责处理Vue Components接收到的所有交互行为。包含同步/异步操作，支持多个同名方法，按照注册的顺序依次触发。向后台API请求的操作就在这个模块中进行，包括触发其他action以及提交mutation的操作。该模块提供了Promise的封装，以支持action的链式触发。\ncommit∶状态改变提交操作方法。对mutation进行提交，是唯一能执行mutation的方法。\nmutations∶状态改变操作方法。是Vuex修改state的唯一推荐方法，其他修改方式在严格模式下将会报错。该方法只能进行同步操作，且方法名只能全局唯一。操作之中会有一些hook暴露出来，以进行state的监控等。\nstate∶ 页面状态管理容器对象。集中存储Vuecomponents中data对象的零散数据，全局唯一，以进行统一的状态管理。页面显示所需的数据从该对象中进行读取，利用Vue的细粒度数据响应机制来进行高效的状态更新。\ngetters∶ state对象读取方法。图中没有单独列出该模块，应该被包含在了render中，Vue Components通过该方法读取全局state对象。\n\n2. Vuex中action和mutation的区别mutation中的操作是一系列的同步函数，用于修改state中的变量的的状态。当使用vuex时需要通过commit来提交需要操作的内容。mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是实际进行状态更改的地方，并且它会接受 state 作为第一个参数：\nconst store = new Vuex.Store(&#123;\n  state: &#123;\n    count: 1\n  &#125;,\n  mutations: &#123;\n    increment (state) &#123;\n      state.count++      // 变更状态\n    &#125;\n  &#125;\n&#125;)\n复制代码\n\n当触发一个类型为 increment 的 mutation 时，需要调用此函数：\nstore.commit('increment')\n复制代码\n\n而Action类似于mutation，不同点在于：\n\nAction 可以包含任意异步操作。\nAction 提交的是 mutation，而不是直接变更状态。\n\nconst store = new Vuex.Store(&#123;\n  state: &#123;\n    count: 0\n  &#125;,\n  mutations: &#123;\n    increment (state) &#123;\n      state.count++\n    &#125;\n  &#125;,\n  actions: &#123;\n    increment (context) &#123;\n      context.commit('increment')\n    &#125;\n  &#125;\n&#125;)\n复制代码\n\nAction 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个 mutation，或者通过 context.state 和 context.getters 来获取 state 和 getters。 所以，两者的不同点如下：\n\nMutation专注于修改State，理论上是修改State的唯一途径；Action业务代码、异步请求。\nMutation：必须同步执行；Action：可以异步，但不能直接操作State。\n在视图更新时，先触发actions，actions再触发mutation\nmutation的参数是state，它包含store中的数据；store的参数是context，它是 state 的父级，包含 state、getters\n\n3. Vuex 和 localStorage 的区别（1）最重要的区别\n\nvuex存储在内存中\nlocalstorage 则以文件的方式存储在本地，只能存储字符串类型的数据，存储对象需要 JSON的stringify和parse方法进行处理。 读取内存比读取硬盘速度要快\n\n（2）应用场景\n\nVuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。vuex用于组件之间的传值。\nlocalstorage是本地存储，是将数据存储到浏览器的方法，一般是在跨页面传递数据时使用 。\nVuex能做到数据的响应式，localstorage不能\n\n（3）永久性\n刷新页面时vuex存储的值会丢失，localstorage不会。\n注意： 对于不变的数据确实可以用localstorage可以代替vuex，但是当两个组件共用一个数据源（对象或数组）时，如果其中一个组件改变了该数据源，希望另一个组件响应该变化时，localstorage无法做到，原因就是区别1。\n4. Redux 和 Vuex 有什么区别，它们的共同思想（1）Redux 和 Vuex区别\n\nVuex改进了Redux中的Action和Reducer函数，以mutations变化函数取代Reducer，无需switch，只需在对应的mutation函数里改变state值即可\nVuex由于Vue自动重新渲染的特性，无需订阅重新渲染函数，只要生成新的State即可\nVuex数据流的顺序是∶View调用store.commit提交对应的请求到Store中对应的mutation函数-&gt;store改变（vue检测到数据变化自动渲染）\n\n通俗点理解就是，vuex 弱化 dispatch，通过commit进行 store状态的一次更变;取消了action概念，不必传入特定的 action形式进行指定变更;弱化reducer，基于commit参数直接对数据进行转变，使得框架更加简易;\n（2）共同思想\n\n单—的数据源\n变化可以预测\n\n本质上：redux与vuex都是对mvvm思想的服务，将数据从视图中抽离的一种方案; 形式上：vuex借鉴了redux，将store作为全局的数据中心，进行mode管理;\n5. 为什么要用 Vuex 或者 Redux由于传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。我们经常会采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致代码无法维护。\n所以需要把组件的共享状态抽取出来，以一个全局单例模式管理。在这种模式下，组件树构成了一个巨大的”视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为。\n另外，通过定义和隔离状态管理中的各种概念并强制遵守一定的规则，代码将会变得更结构化且易维护。\n6. Vuex有哪几种属性？有五种，分别是 State、 Getter、Mutation 、Action、 Module\n\nstate =&gt; 基本数据(数据源存放地)\ngetters =&gt; 从基本数据派生出来的数据\nmutations =&gt; 提交更改数据的方法，同步\nactions =&gt; 像一个装饰器，包裹mutations，使之可以异步。\nmodules =&gt; 模块化Vuex\n\n7. Vuex和单纯的全局对象有什么区别？\nVuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。\n不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样可以方便地跟踪每一个状态的变化，从而能够实现一些工具帮助更好地了解我们的应用。\n\n8. 为什么 Vuex 的 mutation 中不能做异步操作？\nVuex中所有的状态更新的唯一途径都是mutation，异步操作通过 Action 来提交 mutation实现，这样可以方便地跟踪每一个状态的变化，从而能够实现一些工具帮助更好地了解我们的应用。\n每个mutation执行完成后都会对应到一个新的状态变更，这样devtools就可以打个快照存下来，然后就可以实现 time-travel 了。如果mutation支持异步操作，就没有办法知道状态是何时更新的，无法很好的进行状态的追踪，给调试带来困难。\n\n9. Vuex的严格模式是什么,有什么作用，如何开启？在严格模式下，无论何时发生了状态变更且不是由mutation函数引起的，将会抛出错误。这能保证所有的状态变更都能被调试工具跟踪到。\n在Vuex.Store 构造器选项中开启,如下\nconst store &#x3D; new Vuex.Store(&#123;\n    strict:true,\n&#125;)\n复制代码\n\n10. 如何在组件中批量使用Vuex的getter属性使用mapGetters辅助函数, 利用对象展开运算符将getter混入computed 对象中\nimport &#123;mapGetters&#125; from 'vuex'\nexport default&#123;\n    computed:&#123;\n        ...mapGetters(['total','discountTotal'])\n    &#125;\n&#125;\n复制代码\n\n11. 如何在组件中重复使用Vuex的mutation使用mapMutations辅助函数,在组件中这么使用\nimport &#123; mapMutations &#125; from 'vuex'\nmethods:&#123;\n    ...mapMutations(&#123;\n        setNumber:'SET_NUMBER',\n    &#125;)\n&#125;\n复制代码\n\n然后调用this.setNumber(10)相当调用this.$store.commit(&#39;SET_NUMBER&#39;,10)\n六、Vue 3.01. Vue3.0有什么更新（1）监测机制的改变\n\n3.0 将带来基于代理 Proxy的 observer 实现，提供全语言覆盖的反应性跟踪。\n消除了 Vue 2 当中基于 Object.defineProperty 的实现所存在的很多限制：\n\n（2）只能监测属性，不能监测对象\n\n检测属性的添加和删除；\n检测数组索引和长度的变更；\n支持 Map、Set、WeakMap 和 WeakSet。\n\n（3）模板\n\n作用域插槽，2.x 的机制导致作用域插槽变了，父组件会重新渲染，而 3.0 把作用域插槽改成了函数的方式，这样只会影响子组件的重新渲染，提升了渲染的性能。\n同时，对于 render 函数的方面，vue3.0 也会进行一系列更改来方便习惯直接使用 api 来生成 vdom 。\n\n（4）对象式的组件声明方式\n\nvue2.x 中的组件是通过声明的方式传入一系列 option，和 TypeScript 的结合需要通过一些装饰器的方式来做，虽然能实现功能，但是比较麻烦。\n3.0 修改了组件的声明方式，改成了类式的写法，这样使得和 TypeScript 的结合变得很容易\n\n（5）其它方面的更改\n\n支持自定义渲染器，从而使得 weex 可以通过自定义渲染器的方式来扩展，而不是直接 fork 源码来改的方式。\n支持 Fragment（多个根节点）和 Protal（在 dom 其他部分渲染组建内容）组件，针对一些特殊的场景做了处理。\n基于 tree shaking 优化，提供了更多的内置功能。\n\n2. defineProperty和proxy的区别Vue 在实例初始化时遍历 data 中的所有属性，并使用 Object.defineProperty 把这些属性全部转为 getter/setter。这样当追踪数据发生变化时，setter 会被自动调用。\nObject.defineProperty 是 ES5 中一个无法 shim 的特性，这也就是 Vue 不支持 IE8 以及更低版本浏览器的原因。\n但是这样做有以下问题：\n\n添加或删除对象的属性时，Vue 检测不到。因为添加或删除的对象没有在初始化进行响应式处理，只能通过$set 来调用Object.defineProperty()处理。\n无法监控到数组下标和长度的变化。\n\nVue3 使用 Proxy 来监控数据的变化。Proxy 是 ES6 中提供的功能，其作用为：用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。相对于Object.defineProperty()，其有以下特点：\n\nProxy 直接代理整个对象而非对象属性，这样只需做一层代理就可以监听同级结构下的所有属性变化，包括新增属性和删除属性。\nProxy 可以监听数组的变化。\n\n3. Vue3.0 为什么要用 proxy？在 Vue2 中， 0bject.defineProperty 会改变原始数据，而 Proxy 是创建对象的虚拟表示，并提供 set 、get 和 deleteProperty 等处理器，这些处理器可在访问或修改原始对象上的属性时进行拦截，有以下特点∶\n\n不需用使用 Vue.$set 或 Vue.$delete 触发响应式。\n全方位的数组变化检测，消除了Vue2 无效的边界情况。\n支持 Map，Set，WeakMap 和 WeakSet。\n\nProxy 实现的响应式原理与 Vue2的实现原理相同，实现方式大同小异∶\n\nget 收集依赖\nSet、delete 等触发依赖\n对于集合类型，就是对集合对象的方法做一层包装：原方法执行后执行依赖相关的收集或触发逻辑。\n\n4.  Vue 3.0 中的 Vue Composition API？在 Vue2 中，代码是 Options API 风格的，也就是通过填充 (option) data、methods、computed 等属性来完成一个 Vue 组件。这种风格使得 Vue 相对于 React极为容易上手，同时也造成了几个问题：\n\n由于 Options API 不够灵活的开发方式，使得Vue开发缺乏优雅的方法来在组件间共用代码。\nVue 组件过于依赖this上下文，Vue 背后的一些小技巧使得 Vue 组件的开发看起来与 JavaScript 的开发原则相悖，比如在methods 中的this竟然指向组件实例来不指向methods所在的对象。这也使得 TypeScript 在Vue2 中很不好用。\n\n于是在 Vue3 中，舍弃了 Options API，转而投向 Composition API。Composition API本质上是将 Options API 背后的机制暴露给用户直接使用，这样用户就拥有了更多的灵活性，也使得 Vue3 更适合于 TypeScript 结合。\n如下，是一个使用了 Vue Composition API 的 Vue3 组件：\n&lt;template>\n  &lt;button @click=\"increment\">\n    Count: &#123;&#123; count &#125;&#125;\n  &lt;/button>\n&lt;/template>\n \n&lt;script>\n// Composition API 将组件属性暴露为函数，因此第一步是导入所需的函数\nimport &#123; ref, computed, onMounted &#125; from 'vue'\n \nexport default &#123;\n  setup() &#123;\n// 使用 ref 函数声明了称为 count 的响应属性，对应于Vue2中的data函数\n    const count = ref(0)\n \n// Vue2中需要在methods option中声明的函数，现在直接声明\n    function increment() &#123;\n      count.value++\n    &#125;\n // 对应于Vue2中的mounted声明周期\n    onMounted(() => console.log('component mounted!'))\n \n    return &#123;\n      count,\n      increment\n    &#125;\n  &#125;\n&#125;\n&lt;/script>\n复制代码\n\n显而易见，Vue Composition API 使得 Vue3 的开发风格更接近于原生 JavaScript，带给开发者更多地灵活性\n5. Composition API与React Hook很像，区别是什么从React Hook的实现角度看，React Hook是根据useState调用的顺序来确定下一次重渲染时的state是来源于哪个useState，所以出现了以下限制\n\n不能在循环、条件、嵌套函数中调用Hook\n必须确保总是在你的React函数的顶层调用Hook\nuseEffect、useMemo等函数必须手动确定依赖关系\n\n而Composition API是基于Vue的响应式系统实现的，与React Hook的相比\n\n声明在setup函数内，一次组件实例化只调用一次setup，而React Hook每次重渲染都需要调用Hook，使得React的GC比Vue更有压力，性能也相对于Vue来说也较慢\nCompositon API的调用不需要顾虑调用顺序，也可以在循环、条件、嵌套函数中使用\n响应式系统自动实现了依赖收集，进而组件的部分的性能优化由Vue内部自己完成，而React Hook需要手动传入依赖，而且必须必须保证依赖的顺序，让useEffect、useMemo等函数正确的捕获依赖变量，否则会由于依赖不正确使得组件性能下降。\n\n虽然Compositon API看起来比React Hook好用，但是其设计思想也是借鉴React Hook的。\n七、虚拟DOM1. 对虚拟DOM的理解？从本质上来说，Virtual Dom是一个JavaScript对象，通过对象的方式来表示DOM结构。将页面的状态抽象为JS对象的形式，配合不同的渲染工具，使跨平台渲染成为可能。通过事务处理机制，将多次DOM修改的结果一次性的更新到页面上，从而有效的减少页面渲染的次数，减少修改DOM的重绘重排次数，提高渲染性能。\n虚拟DOM是对DOM的抽象，这个对象是更加轻量级的对 DOM的描述。它设计的最初目的，就是更好的跨平台，比如Node.js就没有DOM，如果想实现SSR，那么一个方式就是借助虚拟DOM，因为虚拟DOM本身是js对象。 在代码渲染到页面之前，vue会把代码转换成一个对象（虚拟 DOM）。以对象的形式来描述真实DOM结构，最终渲染到页面。在每次数据发生变化前，虚拟DOM都会缓存一份，变化之时，现在的虚拟DOM会与缓存的虚拟DOM进行比较。在vue内部封装了diff算法，通过这个算法来进行比较，渲染时修改改变的变化，原先没有发生改变的通过原先的数据进行渲染。\n另外现代前端框架的一个基本要求就是无须手动操作DOM，一方面是因为手动操作DOM无法保证程序性能，多人协作的项目中如果review不严格，可能会有开发者写出性能较低的代码，另一方面更重要的是省略手动DOM操作可以大大提高开发效率。\n2. 虚拟DOM的解析过程虚拟DOM的解析过程：\n\n首先对将要插入到文档中的 DOM 树结构进行分析，使用 js 对象将其表示出来，比如一个元素对象，包含 TagName、props 和 Children 这些属性。然后将这个 js 对象树给保存下来，最后再将 DOM 片段插入到文档中。\n当页面的状态发生改变，需要对页面的 DOM 的结构进行调整的时候，首先根据变更的状态，重新构建起一棵对象树，然后将这棵新的对象树和旧的对象树进行比较，记录下两棵树的的差异。\n最后将记录的有差异的地方应用到真正的 DOM 树中去，这样视图就更新了。\n\n3. 为什么要用虚拟DOM（1）保证性能下限，在不进行手动优化的情况下，提供过得去的性能 看一下页面渲染的流程：解析HTML -&gt; 生成DOM -&gt; 生成 CSSOM -&gt; Layout -&gt; Paint -&gt; Compiler 下面对比一下修改DOM时真实DOM操作和Virtual DOM的过程，来看一下它们重排重绘的性能消耗∶\n\n真实DOM∶ 生成HTML字符串＋重建所有的DOM元素\n虚拟DOM∶ 生成vNode+ DOMDiff＋必要的dom更新\n\nVirtual DOM的更新DOM的准备工作耗费更多的时间，也就是JS层面，相比于更多的DOM操作它的消费是极其便宜的。尤雨溪在社区论坛中说道∶ 框架给你的保证是，你不需要手动优化的情况下，依然可以给你提供过得去的性能。 （2）跨平台 Virtual DOM本质上是JavaScript的对象，它可以很方便的跨平台操作，比如服务端渲染、uniapp等。\n4. 虚拟DOM真的比真实DOM性能好吗\n首次渲染大量DOM时，由于多了一层虚拟DOM的计算，会比innerHTML插入慢。\n正如它能保证性能下限，在真实DOM操作的时候进行针对性的优化时，还是更快的。\n\n5. DIFF算法的原理在新老虚拟DOM对比时：\n\n首先，对比节点本身，判断是否为同一节点，如果不为相同节点，则删除该节点重新创建节点进行替换\n如果为相同节点，进行patchVnode，判断如何对该节点的子节点进行处理，先判断一方有子节点一方没有子节点的情况(如果新的children没有子节点，将旧的子节点移除)\n比较如果都有子节点，则进行updateChildren，判断如何对这些新老节点的子节点进行操作（diff核心）。\n匹配时，找到相同的子节点，递归比较子节点\n\n在diff中，只对同层的子节点进行比较，放弃跨级的节点比较，使得时间复杂从O(n3)降低值O(n)，也就是说，只有当新旧children都为多个子节点时才需要用核心的Diff算法进行同层级比较。\n6. Vue中key的作用vue 中 key 值的作用可以分为两种情况来考虑：\n\n第一种情况是 v-if 中使用 key。由于 Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。因此当使用 v-if 来实现元素切换的时候，如果切换前后含有相同类型的元素，那么这个元素就会被复用。如果是相同的 input 元素，那么切换前后用户的输入不会被清除掉，这样是不符合需求的。因此可以通过使用 key 来唯一的标识一个元素，这个情况下，使用 key 的元素不会被复用。这个时候 key 的作用是用来标识一个独立的元素。\n第二种情况是 v-for 中使用 key。用 v-for 更新已渲染过的元素列表时，它默认使用“就地复用”的策略。如果数据项的顺序发生了改变，Vue 不会移动 DOM 元素来匹配数据项的顺序，而是简单复用此处的每个元素。因此通过为每个列表项提供一个 key 值，来以便 Vue 跟踪元素的身份，从而高效的实现复用。这个时候 key 的作用是为了高效的更新渲染虚拟 DOM。\n\nkey 是为 Vue 中 vnode 的唯一标记，通过这个 key，diff 操作可以更准确、更快速\n\n更准确：因为带 key 就不是就地复用了，在 sameNode 函数a.key === b.key对比中可以避免就地复用的情况。所以会更加准确。\n更快速：利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快\n\n7. 为什么不建议用index作为key?使用index 作为 key和没写基本上没区别，因为不管数组的顺序怎么颠倒，index 都是 0, 1, 2…这样排列，导致 Vue 会复用错误的旧子节点，做很多额外的工作。\n","slug":"vue面试题","date":"2022-04-10T12:16:33.000Z","categories_index":"知识点","tags_index":"面试","author_index":"LIYUNFU"},{"id":"2e2a8a1eab8c08452e6963881a3d432f","title":"TS面试题","content":"第一题type User = &#123;\n  id: number;\n  kind: string;\n&#125;;\n\nfunction makeCustomer&lt;T extends User>(u: T): T &#123;\n  // Error（TS 编译器版本：v4.4.2）\n  // Type '&#123; id: number; kind: string; &#125;' is not assignable to type 'T'.\n  // '&#123; id: number; kind: string; &#125;' is assignable to the constraint of type 'T', \n  // but 'T' could be instantiated with a different subtype of constraint 'User'.\n  return &#123;\n    id: u.id,\n    kind: 'customer'\n  &#125;\n&#125;\n复制代码\n\n以上代码为什么会提示错误，应该如何解决上述问题？\n第二题本道题我们希望参数 a 和 b 的类型都是一致的，即 a 和 b 同时为 number 或 string 类型。当它们的类型不一致的值，TS 类型检查器能自动提示对应的错误信息。\nfunction f(a: string | number, b: string | number) &#123;\n  if (typeof a === 'string') &#123;\n    return a + ':' + b; // no error but b can be number!\n  &#125; else &#123;\n    return a + b; // error as b can be number | string\n  &#125;\n&#125;\n\nf(2, 3); // Ok\nf(1, 'a'); // Error\nf('a', 2); // Error\nf('a', 'b') // Ok\n复制代码\n\n第三题在 掌握 TS 这些工具类型，让你开发事半功倍 这篇文章中，阿宝哥介绍了 TS 内置的工具类型：Partial&lt;T&gt;，它的作用是将某个类型里的属性全部变为可选项 ?。\ninterface Todo &#123;\n  title: string;\n  description: string;\n&#125;\n\nfunction updateTodo(todo: Todo, fieldsToUpdate: Partial&lt;Todo>) &#123;\n  return &#123; ...todo, ...fieldsToUpdate &#125;;\n&#125;\n\n// lib.es5.d.ts\ntype Partial&lt;T> = &#123;\n  [P in keyof T]?: T[P];\n&#125;;\n复制代码\n\n那么如何定义一个 SetOptional 工具类型，支持把给定的 keys 对应的属性变成可选的？对应的使用示例如下所示：\ntype Foo = &#123;\n\ta: number;\n\tb?: string;\n\tc: boolean;\n&#125;\n\n// 测试用例\ntype SomeOptional = SetOptional&lt;Foo, 'a' | 'b'>;\n\n// type SomeOptional = &#123;\n// \ta?: number; // 该属性已变成可选的\n// \tb?: string; // 保持不变\n// \tc: boolean; \n// &#125;\n复制代码\n\n在实现 SetOptional 工具类型之后，如果你感兴趣，可以继续实现 SetRequired 工具类型，利用它可以把指定的 keys 对应的属性变成必填的。对应的使用示例如下所示：\ntype Foo = &#123;\n\ta?: number;\n\tb: string;\n\tc?: boolean;\n&#125;\n\n// 测试用例\ntype SomeRequired = SetRequired&lt;Foo, 'b' | 'c'>;\n// type SomeRequired = &#123;\n// \ta?: number;\n// \tb: string; // 保持不变\n// \tc: boolean; // 该属性已变成必填\n// &#125;\n复制代码\n\n第四题Pick&lt;T, K extends keyof T&gt; 的作用是将某个类型中的子属性挑出来，变成包含这个类型部分属性的子类型。\ninterface Todo &#123;\n  title: string;\n  description: string;\n  completed: boolean;\n&#125;\n\ntype TodoPreview = Pick&lt;Todo, \"title\" | \"completed\">;\n\nconst todo: TodoPreview = &#123;\n  title: \"Clean room\",\n  completed: false\n&#125;;\n复制代码\n\n那么如何定义一个 ConditionalPick 工具类型，支持根据指定的 Condition 条件来生成新的类型，对应的使用示例如下：\ninterface Example &#123;\n\ta: string;\n\tb: string | number;\n\tc: () => void;\n\td: &#123;&#125;;\n&#125;\n\n// 测试用例：\ntype StringKeysOnly = ConditionalPick&lt;Example, string>;\n//=> &#123;a: string&#125;\n复制代码\n\n第五题定义一个工具类型 AppendArgument，为已有的函数类型增加指定类型的参数，新增的参数名是 x，将作为新函数类型的第一个参数。具体的使用示例如下所示：\ntype Fn = (a: number, b: string) => number\ntype AppendArgument&lt;F, A> = // 你的实现代码\n\ntype FinalFn = AppendArgument&lt;Fn, boolean> \n// (x: boolean, a: number, b: string) => number\n复制代码\n\n第六题定义一个 NativeFlat 工具类型，支持把数组类型拍平（扁平化）。具体的使用示例如下所示：\ntype NaiveFlat&lt;T extends any[]> = // 你的实现代码\n\n// 测试用例：\ntype NaiveResult = NaiveFlat&lt;[['a'], ['b', 'c'], ['d']]>\n// NaiveResult的结果： \"a\" | \"b\" | \"c\" | \"d\"\n复制代码\n\n在完成 NaiveFlat 工具类型之后，在继续实现 DeepFlat 工具类型，以支持多维数组类型：\ntype DeepFlat&lt;T extends any[]> = unknown // 你的实现代码\n\n// 测试用例\ntype Deep = [['a'], ['b', 'c'], [['d']], [[[['e']]]]];\ntype DeepTestResult = DeepFlat&lt;Deep>  \n// DeepTestResult: \"a\" | \"b\" | \"c\" | \"d\" | \"e\"\n复制代码\n\n第七题使用类型别名定义一个 EmptyObject 类型，使得该类型只允许空对象赋值：\ntype EmptyObject = &#123;&#125; \n\n// 测试用例\nconst shouldPass: EmptyObject = &#123;&#125;; // 可以正常赋值\nconst shouldFail: EmptyObject = &#123; // 将出现编译错误\n  prop: \"TS\"\n&#125;\n复制代码\n\n在通过 EmptyObject 类型的测试用例检测后，我们来更改以下 takeSomeTypeOnly 函数的类型定义，让它的参数只允许严格SomeType类型的值。具体的使用示例如下所示：\ntype SomeType =  &#123;\n  prop: string\n&#125;\n\n// 更改以下函数的类型定义，让它的参数只允许严格SomeType类型的值\nfunction takeSomeTypeOnly(x: SomeType) &#123; return x &#125;\n\n// 测试用例：\nconst x = &#123; prop: 'a' &#125;;\ntakeSomeTypeOnly(x) // 可以正常调用\n\nconst y = &#123; prop: 'a', addditionalProp: 'x' &#125;;\ntakeSomeTypeOnly(y) // 将出现编译错误\n复制代码\n\n第八题定义 NonEmptyArray 工具类型，用于确保数据非空数组。\ntype NonEmptyArray&lt;T> = // 你的实现代码\n\nconst a: NonEmptyArray&lt;string> = [] // 将出现编译错误\nconst b: NonEmptyArray&lt;string> = ['Hello TS'] // 非空数据，正常使用\n复制代码\n\n\n\n\n\n\n\n\n\n\n提示：该题目有多种解法，感兴趣小伙伴可以自行尝试一下。\n第九题定义一个 JoinStrArray 工具类型，用于根据指定的 Separator 分隔符，对字符串数组类型进行拼接。具体的使用示例如下所示：\ntype JoinStrArray&lt;Arr extends string[], Separator extends string, Result extends string = \"\"> = // 你的实现代码\n\n// 测试用例\ntype Names = [\"Sem\", \"Lolo\", \"Kaquko\"]\ntype NamesComma = JoinStrArray&lt;Names, \",\"> // \"Sem,Lolo,Kaquko\"\ntype NamesSpace = JoinStrArray&lt;Names, \" \"> // \"Sem Lolo Kaquko\"\ntype NamesStars = JoinStrArray&lt;Names, \"⭐️\"> // \"Sem⭐️Lolo⭐️Kaquko\"\n复制代码\n\n第十题实现一个 Trim 工具类型，用于对字符串字面量类型进行去空格处理。具体的使用示例如下所示：\ntype Trim&lt;V extends string> = // 你的实现代码\n\n// 测试用例\nTrim&lt;' semlinker '>\n//=> 'semlinker'\n复制代码\n\n\n\n\n\n\n\n\n\n\n提示：可以考虑先定义 TrimLeft 和 TrimRight 工具类型，再组合成 Trim 工具类型。\n第十一题实现一个 IsEqual 工具类型，用于比较两个类型是否相等。具体的使用示例如下所示：\ntype IsEqual&lt;A, B> = // 你的实现代码\n\n// 测试用例\ntype E0 = IsEqual&lt;1, 2>; // false\ntype E1 = IsEqual&lt;&#123; a: 1 &#125;, &#123; a: 1 &#125;> // true\ntype E2 = IsEqual&lt;[1], []>; // false\n复制代码\n\n第十二题实现一个 Head 工具类型，用于获取数组类型的第一个类型。具体的使用示例如下所示：\ntype Head&lt;T extends Array&lt;any>> = // 你的实现代码\n\n// 测试用例\ntype H0 = Head&lt;[]> // never\ntype H1 = Head&lt;[1]> // 1\ntype H2 = Head&lt;[3, 2]> // 3\n复制代码\n\n\n\n\n\n\n\n\n\n\n提示：该题目有多种解法，感兴趣小伙伴可以自行尝试一下。\n第十三题实现一个 Tail 工具类型，用于获取数组类型除了第一个类型外，剩余的类型。具体的使用示例如下所示：\ntype Tail&lt;T extends Array&lt;any>> =  // 你的实现代码\n\n// 测试用例\ntype T0 = Tail&lt;[]> // []\ntype T1 = Tail&lt;[1, 2]> // [2]\ntype T2 = Tail&lt;[1, 2, 3, 4, 5]> // [2, 3, 4, 5]\n复制代码\n\n\n\n\n\n\n\n\n\n\n提示：该题目有多种解法，感兴趣小伙伴可以自行尝试一下。\n第十四题实现一个 Unshift 工具类型，用于把指定类型 E 作为第一个元素添加到 T 数组类型中。具体的使用示例如下所示：\ntype Unshift&lt;T extends any[], E> =  // 你的实现代码\n\n// 测试用例\ntype Arr0 = Unshift&lt;[], 1>; // [1]\ntype Arr1 = Unshift&lt;[1, 2, 3], 0>; // [0, 1, 2, 3]\n复制代码\n\n\n\n\n\n\n\n\n\n\n提示：该题目有多种解法，感兴趣小伙伴可以自行尝试一下。\n第十五题实现一个 Shift 工具类型，用于移除 T 数组类型中的第一个类型。具体的使用示例如下所示：\ntype Shift&lt;T extends any[]> = // 你的实现代码\n\n// 测试用例\ntype S0 = Shift&lt;[1, 2, 3]> // [2, 3]\ntype S1 = Shift&lt;[string,number,boolean]> // [number,boolean]\n复制代码\n\n第十六题实现一个 Push 工具类型，用于把指定类型 E 作为最后一个元素添加到 T 数组类型中。具体的使用示例如下所示：\ntype Push&lt;T extends any[], V> = // 你的实现代码\n\n// 测试用例\ntype Arr0 = Push&lt;[], 1> // [1]\ntype Arr1 = Push&lt;[1, 2, 3], 4> // [1, 2, 3, 4]\n复制代码\n\n第十七题实现一个 Includes 工具类型，用于判断指定的类型 E 是否包含在 T 数组类型中。具体的使用示例如下所示：\ntype Includes&lt;T extends Array&lt;any>, E> = // 你的实现代码\n\ntype I0 = Includes&lt;[], 1> // false\ntype I1 = Includes&lt;[2, 2, 3, 1], 2> // true\ntype I2 = Includes&lt;[2, 3, 3, 1], 1> // true\n复制代码\n\n\n\n\n\n\n\n\n\n\n提示：该题目有多种解法，感兴趣小伙伴可以自行尝试一下。\n第十八题实现一个 UnionToIntersection 工具类型，用于把联合类型转换为交叉类型。具体的使用示例如下所示：\ntype UnionToIntersection&lt;U> = // 你的实现代码\n\n// 测试用例\ntype U0 = UnionToIntersection&lt;string | number> // never\ntype U1 = UnionToIntersection&lt;&#123; name: string &#125; | &#123; age: number &#125;> // &#123; name: string; &#125; &amp; &#123; age: number; &#125;\n复制代码\n\n第十九题实现一个 OptionalKeys 工具类型，用来获取对象类型中声明的可选属性。具体的使用示例如下所示：\ntype Person = &#123;\n  id: string;\n  name: string;\n  age: number;\n  from?: string;\n  speak?: string;\n&#125;;\n\ntype OptionalKeys&lt;T> = // 你的实现代码\ntype PersonOptionalKeys = OptionalKeys&lt;Person> // \"from\" | \"speak\"\n复制代码\n\n\n\n\n\n\n\n\n\n\n提示：该题目有多种解法，感兴趣小伙伴可以自行尝试一下。\n第二十题实现一个 Curry 工具类型，用来实现函数类型的柯里化处理。具体的使用示例如下所示：\ntype Curry&lt;\n  F extends (...args: any[]) => any,\n  P extends any[] = Parameters&lt;F>, \n  R = ReturnType&lt;F> \n> = // 你的实现代码\n\ntype F0 = Curry&lt;() => Date>; // () => Date\ntype F1 = Curry&lt;(a: number) => Date>; // (arg: number) => Date\ntype F2 = Curry&lt;(a: number, b: string) => Date>; //  (arg_0: number) => (b: string) => Date\n复制代码\n\n第二十一题实现一个 Merge 工具类型，用于把两个类型合并成一个新的类型。第二种类型（SecondType）的 Keys 将会覆盖第一种类型（FirstType）的 Keys。具体的使用示例如下所示：\ntype Foo = &#123;\n\ta: number;\n\tb: string;\n&#125;;\n\ntype Bar = &#123;\n\tb: number;\n&#125;;\n\ntype Merge&lt;FirstType, SecondType> = // 你的实现代码\n\nconst ab: Merge&lt;Foo, Bar> = &#123; a: 1, b: 2 &#125;;\n复制代码\n\n第二十二题实现一个 RequireAtLeastOne 工具类型，它将创建至少含有一个给定 Keys 的类型，其余的 Keys 保持原样。具体的使用示例如下所示：\ntype Responder = &#123;\n\ttext?: () => string;\n\tjson?: () => string;\n\tsecure?: boolean;\n&#125;;\n\ntype RequireAtLeastOne&lt;\n\tObjectType,\n\tKeysType extends keyof ObjectType = keyof ObjectType,\n> = // 你的实现代码\n\n// 表示当前类型至少包含 'text' 或 'json' 键\nconst responder: RequireAtLeastOne&lt;Responder, 'text' | 'json'> = &#123;\n\tjson: () => '&#123;\"message\": \"ok\"&#125;',\n\tsecure: true\n&#125;;\n复制代码\n\n第二十三题实现一个 RemoveIndexSignature 工具类型，用于移除已有类型中的索引签名。具体的使用示例如下所示：\ninterface Foo &#123;\n  [key: string]: any;\n  [key: number]: any;\n  bar(): void;\n&#125;\n\ntype RemoveIndexSignature&lt;T> = // 你的实现代码\n\ntype FooWithOnlyBar = RemoveIndexSignature&lt;Foo>; //&#123; bar: () => void; &#125;\n复制代码\n\n第二十四题实现一个 Mutable 工具类型，用于移除对象类型上所有属性或部分属性的 readonly 修饰符。具体的使用示例如下所示：\ntype Foo = &#123;\n  readonly a: number;\n  readonly b: string;\n  readonly c: boolean;\n&#125;;\n\ntype Mutable&lt;T, Keys extends keyof T = keyof T> = // 你的实现代码\n\nconst mutableFoo: Mutable&lt;Foo, 'a'> = &#123; a: 1, b: '2', c: true &#125;;\n\nmutableFoo.a = 3; // OK\nmutableFoo.b = '6'; // Cannot assign to 'b' because it is a read-only property.\n复制代码\n\n第二十五题实现一个 IsUnion 工具类型，判断指定的类型是否为联合类型。具体的使用示例如下所示：\ntype IsUnion&lt;T, U = T> = // 你的实现代码\n\ntype I0 = IsUnion&lt;string|number> // true\ntype I1 = IsUnion&lt;string|never> // false\ntype I2 =IsUnion&lt;string|unknown> // false\n复制代码\n\n第二十六题实现一个 IsNever 工具类型，判断指定的类型是否为 never 类型。具体的使用示例如下所示：\ntype I0 = IsNever&lt;never> // true\ntype I1 = IsNever&lt;never | string> // false\ntype I2 = IsNever&lt;null> // false\n复制代码\n\n第二十七题实现一个 Reverse 工具类型，用于对元组类型中元素的位置颠倒，并返回该数组。元组的第一个元素会变成最后一个，最后一个元素变成第一个。\ntype Reverse&lt;\n  T extends Array&lt;any>,\n  R extends Array&lt;any> = []\n> = // 你的实现代码\n\ntype R0 = Reverse&lt;[]> // []\ntype R1 = Reverse&lt;[1, 2, 3]> // [3, 2, 1]\n复制代码\n\n第二十八题实现一个 Split 工具类型，根据给定的分隔符（Delimiter）对包含分隔符的字符串进行切割。可用于定义 String.prototype.split 方法的返回值类型。具体的使用示例如下所示：\ntype Item = 'semlinker,lolo,kakuqo';\n\ntype Split&lt;\n\tS extends string, \n\tDelimiter extends string,\n> = // 你的实现代码\n\ntype ElementType = Split&lt;Item, ','>; // [\"semlinker\", \"lolo\", \"kakuqo\"]\n复制代码\n\n第二十九题实现一个 ToPath 工具类型，用于把属性访问（. 或 []）路径转换为元组的形式。具体的使用示例如下所示：\ntype ToPath&lt;S extends string> = // 你的实现代码\n\nToPath&lt;'foo.bar.baz'> //=> ['foo', 'bar', 'baz']\nToPath&lt;'foo[0].bar.baz'> //=> ['foo', '0', 'bar', 'baz']\n复制代码\n\n第三十题完善 Chainable 类型的定义，使得 TS 能成功推断出 result 变量的类型。调用 option 方法之后会不断扩展当前对象的类型，使得调用 get 方法后能获取正确的类型。\ndeclare const config: Chainable\n\ntype Chainable = &#123;\n  option(key: string, value: any): any\n  get(): any\n&#125;\n\nconst result = config\n  .option('age', 7)\n  .option('name', 'lolo')\n  .option('address', &#123; value: 'XiaMen' &#125;)\n  .get()\n\ntype ResultType = typeof result  \n// 期望 ResultType 的类型是：\n// &#123;\n//   age: number\n//   name: string\n//   address: &#123;\n//     value: string\n//   &#125;\n// &#125;\n复制代码\n\n\n\n\n\nts中的访问修饰符\npublic，任何地方\nprivate，只能在类的内部访问\nprotected，能在类的内部访问和子类中访问\nreadonly，属性设置为只读\n\nconst和readonly的区别\nconst用于变量，readonly用于属性\nconst在运行时检查，readonly在编译时检查\n使用const变量保存的数组，可以使用push，pop等方法。但是如果使用ReadonlyArray&lt;number&gt;声明的数组不能使用push，pop等方法。\n\n枚举和常量枚举（const枚举）的区别\n枚举会被编译时会编译成一个对象，可以被当作对象使用\nconst枚举会在ts编译期间被删除，避免额外的性能开销\n\n// 普通枚举\nenum Witcher &#123;\n  Ciri = 'Queen',\n  Geralt = 'Geralt of Rivia'\n&#125;\nfunction getGeraltMessage(arg: &#123;[key: string]: string&#125;): string &#123;\n  return arg.Geralt\n&#125;\ngetGeraltMessage(Witcher) // Geralt of Rivia\n复制代码\n// const枚举\nconst enum Witcher &#123;\n  Ciri = 'Queen',\n  Geralt = 'Geralt of Rivia'\n&#125;\nconst witchers: Witcher[] = [Witcher.Ciri, Witcher.Geralt]\n// 编译后\n// const witchers = ['Queen', 'Geralt of Rivia'\n复制代码\n\nts中interface可以给Function/Array/Class做声明吗？// 函数类型\ninterface SearchFunc &#123;\n  (source: string, subString: string): boolean;\n&#125;\nlet mySearch: SearchFunc;\nmySearch = function(source: string, subString: string) &#123;\n  let result = source.search(subString);\n  return result > -1;\n&#125;\n复制代码\n// Array\ninterface StringArray &#123;\n  [index: number]: string;\n&#125;\n\nlet myArray: StringArray;\nmyArray = [\"Bob\", \"Fred\"];\n复制代码\n// Class, constructor存在于类的静态部分，所以不会检查\ninterface ClockInterface &#123;\n    currentTime: Date;\n    setTime(d: Date);\n&#125;\n\nclass Clock implements ClockInterface &#123;\n    currentTime: Date;\n    setTime(d: Date) &#123;\n        this.currentTime = d;\n    &#125;\n    constructor(h: number, m: number) &#123; &#125;\n&#125;\n复制代码\n\nts中的this和js中的this有什么差异？不了解\nts中如何枚举联合类型的key?type Name = &#123; name: string &#125;\ntype Age = &#123; age: number &#125;\ntype Union = Name | Age\n\ntype UnionKey&lt;P> = P extends infer P ? keyof P : never\n\ntype T = UnionKey&lt;Union>\n复制代码\n\nts中 ?.、??、!.、_、** 等符号的含义？\n?.  可选链\n??  ?? 类似与短路或，??避免了一些意外情况0，NaN以及””,false被视为false值。只有undefind,null被视为false值。\n!.  在变量名后添加!，可以断言排除undefined和null类型\n_ , 声明该函数将被传递一个参数，但您并不关心它\n** 求幂\n!:，待会分配这个变量，ts不要担心\n\n// ??\nlet x = foo ?? bar();\n// 等价于\nlet x = foo !== null &amp;&amp; foo !== undefined ? foo : bar();\n\n// !.\nlet a: string | null | undefined\na.length // error\na!.length // ok\n复制代码\n\n什么是抗变、双变、协变和逆变？\nCovariant 协变，TS对象兼容性是协变，父类 &lt;= 子类，是可以的。子类 &lt;= 父类，错误。\nContravariant 逆变，禁用strictFunctionTypes编译，函数参数类型是逆变的，父类 &lt;= 子类，是错误。子类 &lt;= 父类，是可以的。\nBivariant 双向协变，函数参数的类型默认是双向协变的。父类 &lt;= 子类，是可以的。子类 &lt;= 父类，是可以的。\n\nts中同名的interface或者同名的interface和class可以合并吗？\ninterface会合并\nclass不可以合并\n\n如何使ts项目引入并识别编译为js的npm库包？\nnpm install @types/xxxx\n自己添加描述文件\n\nts如何自动生成库包的声明文件？可以配置tsconfig.json文件中的declaration和outDir\n\ndeclaration: true, 将会自动生成声明文件\noutDir: ‘’, 指定目录\n\n什么是泛型泛型用来来创建可重用的组件，一个组件可以支持多种类型的数据。这样用户就可以以自己的数据类型来使用组件。简单的说，“泛型就是把类型当成参数”。\n-?，-readonly 是什么含义用于删除修饰符\ntype A = &#123;\n    a: string;\n    b: number;\n&#125;\n\ntype B = &#123;\n    [K in keyof A]?: A[K]\n&#125;\n\ntype C = &#123;\n    [K in keyof B]-?: B[K]\n&#125;\n\ntype D = &#123;\n    readonly [K in keyof A]: A[K]\n&#125;\n\ntype E = &#123;\n    -readonly [K in keyof A]: A[K]\n&#125;\n复制代码\n\nTS是基于结构类型兼容typescript的类型兼容是基于结构的，不是基于名义的。下面的代码在ts中是完全可以的，但在java等基于名义的语言则会抛错。\ninterface Named &#123; name: string &#125;\nclass Person &#123;\n  name: string\n&#125;\nlet p: Named\n// ok\np = new Person()\n复制代码\n\nconst断言const断言，typescript会为变量添加一个自身的字面量类型\n\n对象字面量的属性，获得readonly的属性，成为只读属性\n数组字面量成为readonly tuple只读元组\n字面量类型不能被扩展（比如从hello类型到string类型）\n\n// type '\"hello\"'\nlet x = \"hello\" as const\n// type 'readonly [10, 20]'\nlet y = [10, 20] as const\n// type '&#123; readonly text: \"hello\" &#125;'\nlet z = &#123; text: \"hello\" &#125; as const\n复制代码\n\ntype 和 interface 的区别\n类型别名可以为任何类型引入名称。例如基本类型，联合类型等\n类型别名不支持继承\n类型别名不会创建一个真正的名字\n类型别名无法被实现(implements)，而接口可以被派生类实现\n类型别名重名时编译器会抛出错误，接口重名时会产生合并\n\nimplements 与 extends 的区别\nextends, 子类会继承父类的所有属性和方法。\nimplements，使用implements关键字的类将需要实现需要实现的类的所有属性和方法。\n\n枚举和 object 的区别\n枚举可以通过枚举的名称，获取枚举的值。也可以通过枚举的值获取枚举的名称。\nobject只能通过key获取value\n数字枚举在不指定初始值的情况下，枚举值会从0开始递增。\n虽然在运行时，枚举是一个真实存在的对象。但是使用keyof时的行为却和普通对象不一致。必须使用keyof typeof才可以获取枚举所有属性名。\n\nnever, void 的区别\nnever，never表示永远不存在的类型。比如一个函数总是抛出错误，而没有返回值。或者一个函数内部有死循环，永远不会有返回值。函数的返回值就是never类型。\nvoid, 没有显示的返回值的函数返回值为void类型。如果一个变量为void类型，只能赋予undefined或者null。\n\nunknown, any的区别unknown类型和any类型类似。与any类型不同的是。unknown类型可以接受任意类型赋值，但是unknown类型赋值给其他类型前，必须被断言\n如何在 window 扩展类型declare global &#123;\n  interface Window &#123;\n    myCustomFn: () => void;\n  &#125;\n&#125;\n复制代码\n\n复杂的类型推导题目implement UnionToIntersectiontype A = UnionToIntersection&lt;&#123;a: string&#125; | &#123;b: string&#125; | &#123;c: string&#125;> \n// &#123;a: string&#125; &amp; &#123;b: string&#125; &amp; &#123;c: string&#125;\n\n// 实现UnionToIntersection&lt;T>\ntype UnionToIntersection&lt;U> = \n  (U extends any ? (k: U) => void : never) extends ((k: infer I) => void) ? I : never\n// https://stackoverflow.com/questions/50374908/transform-union-type-to-intersection-type\n// https://jkchao.github.io/typescript-book-chinese/tips/infer.html#%E4%B8%80%E4%BA%9B%E7%94%A8%E4%BE%8B\n复制代码\n\nimplement ToNumbertype A = ToNumber&lt;'1'> // 1\ntype B = ToNumber&lt;'40'> // 40\ntype C = ToNumber&lt;'0'> // 0\n\n// 实现ToNumber\ntype ToNumber&lt;T extends string, R extends any[] = []> =\n    T extends `$&#123;R['length']&#125;` ? R['length'] : ToNumber&lt;T, [1, ...R]>;\n复制代码\n\nimplement Add&lt;A, B&gt;type A = Add&lt;1, 2> // 3\ntype B = Add&lt;0, 0> // 0\n\n// 实现ADD\ntype NumberToArray&lt;T, R extends any[]> = T extends R['length'] ? R : NumberToArray&lt;T, [1, ...R]>\ntype Add&lt;T, R> = [...NumberToArray&lt;T, []>, ...NumberToArray&lt;R, []>]['length']\n复制代码\n\nimplement SmallerThan&lt;A, B&gt;type A = SmallerThan&lt;0, 1> // true\ntype B = SmallerThan&lt;1, 0> // false\ntype C = SmallerThan&lt;10, 9> // false\n\n// 实现SmallerThan\ntype SmallerThan&lt;N extends number, M extends number, L extends any[] = [], R extends any[] = []> = \n    N extends L['length'] ? \n        M extends R['length'] ? false : true\n        :\n        M extends R['length'] ? false : SmallerThan&lt;N, M, [1, ...L], [1, ...R]>;\n复制代码\n\nimplement LargerThan&lt;A, B&gt;type A = LargerThan&lt;0, 1> // false\ntype B = LargerThan&lt;1, 0> // true\ntype C = LargerThan&lt;10, 9> // true\n\n// 实现LargerThan\ntype LargerThan&lt;N extends number, M extends number, L extends any[] = [], R extends any[] = []> =\n    N extends L['length'] ?\n        false : M extends R['length'] ?\n            true : LargerThan&lt;N, M, [1, ...L], [1, ...R]>;\n复制代码\n\nimplement IsAnytype A = IsAny&lt;string> // false\ntype B = IsAny&lt;any> // true\ntype C = IsAny&lt;unknown> // false\ntype D = IsAny&lt;never> // false\n\n// 实现IsAny\ntype IsAny&lt;T> = true extends (T extends never ? true : false) ?\n                  false extends (T extends never ? true : false) ?\n                    true\n                    :\n                    false\n                  :\n                  false;\n\n// 更简单的实现\ntype IsAny&lt;T> = 0 extends (T &amp; 1) ? true : false;\n复制代码\n\nimplement Filter&lt;T, A&gt;type A = Filter&lt;[1,'BFE', 2, true, 'dev'], number> // [1, 2]\ntype B = Filter&lt;[1,'BFE', 2, true, 'dev'], string> // ['BFE', 'dev']\ntype C = Filter&lt;[1,'BFE', 2, any, 'dev'], string> // ['BFE', any, 'dev']\n\n// 实现Filter\ntype Filter&lt;T extends any[], A, N extends any[] = []> =\n    T extends [infer P, ...infer Q] ?\n        0 extends (P &amp; 1) ? Filter&lt;Q, A, [...N, P]> : \n        P extends A ? Filter&lt;Q, A, [...N, P]> : Filter&lt;Q, A, N>\n        : N;\n复制代码\n\nimplement TupleToStringtype A = TupleToString&lt;['a']> // 'a'\ntype B = TupleToString&lt;['B', 'F', 'E']> // 'BFE'\ntype C = TupleToString&lt;[]> // ''\n\n// 实现TupleToString\ntype TupleToString&lt;T extends any[], S extends string = '', A extends any[] = []> =\n    A['length'] extends T['length'] ? S : TupleToString&lt;T, `$&#123;S&#125;$&#123;T[A['length']]&#125;`, [1, ...A]>\n复制代码\n\nimplement RepeatString&lt;T, C&gt;type A = RepeatString&lt;'a', 3> // 'aaa'\ntype B = RepeatString&lt;'a', 0> // ''\n\n// 实现RepeatString\ntype RepeatString&lt;T extends string, C extends number, S extends string = '', A extends any[] = []> =\n    A['length'] extends C ? S : RepeatString&lt;T, C, `$&#123;T&#125;$&#123;S&#125;`, [1, ...A]>\n复制代码\n\nimplement Push&lt;T, I&gt;type A = Push&lt;[1,2,3], 4> // [1,2,3,4]\ntype B = Push&lt;[1], 2> // [1, 2]\ntype C = Push&lt;[], string> // [string]\n\n// 实现Push\ntype Push&lt;T extends any[], I> = T extends [...infer P] ? [...P, I] : [I]\n复制代码\n\nimplement Flattype A = Flat&lt;[1,2,3]> // [1,2,3]\ntype B = Flat&lt;[1,[2,3], [4,[5,[6]]]]> // [1,2,3,4,5,6]\ntype C = Flat&lt;[]> // []\n\n// 实现Flat\ntype Flat&lt;T extends any[]> =\n    T extends [infer P, ...infer Q] ?\n        P extends any[] ? [...Flat&lt;P>, ...Flat&lt;Q>] : [P, ...Flat&lt;Q>]\n        : [];\n复制代码\n\nimplement Shifttype A = Shift&lt;[1,2,3]> // [2,3]\ntype B = Shift&lt;[1]> // []\ntype C = Shift&lt;[]> // []\n\n// 实现Shift\ntype Shift&lt;T extends any[]> = T extends [infer P, ...infer Q] ? [...Q] : [];\n复制代码\n\nimplement Repeat&lt;T, C&gt;type A = Repeat&lt;number, 3> // [number, number, number]\ntype B = Repeat&lt;string, 2> // [string, string]\ntype C = Repeat&lt;1, 1> // [1, 1]\ntype D = Repeat&lt;0, 0> // []\n\n// 实现Repeat\ntype Repeat&lt;T, C, R extends any[] = []> = \n    R['length'] extends C ? R : Repeat&lt;T, C, [...R, T]>\n复制代码\n\nimplement ReverseTupletype A = ReverseTuple&lt;[string, number, boolean]> // [boolean, number, string]\ntype B = ReverseTuple&lt;[1,2,3]> // [3,2,1]\ntype C = ReverseTuple&lt;[]> // []\n\n// 实现ReverseTuple\ntype ReverseTuple&lt;T extends any[], A extends any[] = []> =\n    T extends [...infer Q, infer P] ? \n        A['length'] extends T['length'] ? A : ReverseTuple&lt;Q, [...A, P]>\n        : A;\n复制代码\n\nimplement UnwrapPromisetype A = UnwrapPromise&lt;Promise&lt;string>> // string\ntype B = UnwrapPromise&lt;Promise&lt;null>> // null\ntype C = UnwrapPromise&lt;null> // Error\n\n// 实现UnwrapPromise\ntype UnwrapPromise&lt;T> = T extends Promise&lt;infer P> ? P : Error;\n复制代码\n\nimplement LengthOfStringtype A = LengthOfString&lt;'BFE.dev'> // 7\ntype B = LengthOfString&lt;''> // 0\n\n// 实现LengthOfString\ntype LengthOfString&lt;T extends string, A extends any[] = []> =\n    T extends `$&#123;infer P&#125;$&#123;infer Q&#125;` ? LengthOfString&lt;Q, [1, ...A]> : A['length']\n复制代码\n\nimplement StringToTupletype A = StringToTuple&lt;'BFE.dev'> // ['B', 'F', 'E', '.', 'd', 'e','v']\ntype B = StringToTuple&lt;''> // []\n\n// 实现\ntype StringToTuple&lt;T extends string, A extends any[] = []> =\n    T extends `$&#123;infer K&#125;$&#123;infer P&#125;` ? StringToTuple&lt;P, [...A, K]> : A;\n复制代码\n\nimplement LengthOfTupletype A = LengthOfTuple&lt;['B', 'F', 'E']> // 3\ntype B = LengthOfTuple&lt;[]> // 0\n\n// 实现\ntype LengthOfTuple&lt;T extends any[], R extends any[] = []> =\n    R['length'] extends T['length'] ? R['length'] : LengthOfTuple&lt;T, [...R, 1]>\n复制代码\n\nimplement LastItemtype A = LastItem&lt;[string, number, boolean]> // boolean\ntype B = LastItem&lt;['B', 'F', 'E']> // 'E'\ntype C = LastItem&lt;[]> // never\n\n// 实现LastItem\ntype LastItem&lt;T> = T extends [...infer P, infer Q] ? Q : never;\n复制代码\n\nimplement FirstItemtype A = FirstItem&lt;[string, number, boolean]> // string\ntype B = FirstItem&lt;['B', 'F', 'E']> // 'B'\n\n// 实现FirstItem\ntype FirstItem&lt;T> = T extends [infer P, ...infer Q] ? P : never;\n复制代码\n\nimplement FirstChartype A = FirstChar&lt;'BFE'> // 'B'\ntype B = FirstChar&lt;'dev'> // 'd'\ntype C = FirstChar&lt;''> // never\n\n// 实现FirstChar\ntype FirstChar&lt;T> = T extends `$&#123;infer P&#125;$&#123;infer Q&#125;` ? P : never;\n复制代码\n\nimplement Pick&lt;T, K&gt;type Foo = &#123;\n  a: string\n  b: number\n  c: boolean\n&#125;\n\ntype A = MyPick&lt;Foo, 'a' | 'b'> // &#123;a: string, b: number&#125;\ntype B = MyPick&lt;Foo, 'c'> // &#123;c: boolean&#125;\ntype C = MyPick&lt;Foo, 'd'> // Error\n\n// 实现MyPick&lt;T, K>\ntype MyPick&lt;T, K extends keyof T> = &#123;\n    [Key in K]: T[Key]\n&#125;\n复制代码\n\nimplement Readonlytype Foo = &#123;\n  a: string\n&#125;\n\nconst a:Foo = &#123;\n  a: 'BFE.dev',\n&#125;\na.a = 'bigfrontend.dev'\n// OK\n\nconst b:MyReadonly&lt;Foo> = &#123;\n  a: 'BFE.dev'\n&#125;\nb.a = 'bigfrontend.dev'\n// Error\n\n// 实现MyReadonly\ntype MyReadonly&lt;T> = &#123;\n    readonly [K in keyof T]: T[K]\n&#125;\n复制代码\n\nimplement Record&lt;K, V&gt;type Key = 'a' | 'b' | 'c'\n\nconst a: Record&lt;Key, string> = &#123;\n  a: 'BFE.dev',\n  b: 'BFE.dev',\n  c: 'BFE.dev'\n&#125;\na.a = 'bigfrontend.dev' // OK\na.b = 123 // Error\na.d = 'BFE.dev' // Error\n\ntype Foo = MyRecord&lt;&#123;a: string&#125;, string> // Error\n\n// 实现MyRecord\ntype MyRecord&lt;K extends number | string | symbol, V> = &#123;\n    [Key in K]: V\n&#125;\n复制代码\n\nimplement Excludetype Foo = 'a' | 'b' | 'c'\n\ntype A = MyExclude&lt;Foo, 'a'> // 'b' | 'c'\ntype B = MyExclude&lt;Foo, 'c'> // 'a' | 'b\ntype C = MyExclude&lt;Foo, 'c' | 'd'>  // 'a' | 'b'\ntype D = MyExclude&lt;Foo, 'a' | 'b' | 'c'>  // never\n\n// 实现 MyExclude&lt;T, K>\ntype MyExclude&lt;T, K> = T extends K ? never : T;\n复制代码\n\nimplement Extract&lt;T, U&gt;type Foo = 'a' | 'b' | 'c'\n\ntype A = MyExtract&lt;Foo, 'a'> // 'a'\ntype B = MyExtract&lt;Foo, 'a' | 'b'> // 'a' | 'b'\ntype C = MyExtract&lt;Foo, 'b' | 'c' | 'd' | 'e'>  // 'b' | 'c'\ntype D = MyExtract&lt;Foo, never>  // never\n\n// 实现MyExtract&lt;T, U>\ntype MyExtract&lt;T, U> = T extends U ? T : never\n复制代码\n\nimplement Omit&lt;T, K&gt;type Foo = &#123;\n  a: string\n  b: number\n  c: boolean\n&#125;\n\ntype A = MyOmit&lt;Foo, 'a' | 'b'> // &#123;c: boolean&#125;\ntype B = MyOmit&lt;Foo, 'c'> // &#123;a: string, b: number&#125;\ntype C = MyOmit&lt;Foo, 'c' | 'd'> // &#123;a: string, b: number&#125;\n\n// 实现MyOmit\ntype MyOmit&lt;T, K extends number | string | symbol> = &#123;\n    [Key in Exclude&lt;keyof T, K>]: T[Key]\n&#125;\n\ntype MyOmit&lt;T, K extends number | string | symbol> = Pick&lt;T, Exclude&lt;keyof T, K>>\n复制代码\n\nimplement NonNullabletype Foo = 'a' | 'b' | null | undefined\n\ntype A = MyNonNullable&lt;Foo> // 'a' | 'b'\n\n// 实现NonNullable\ntype MyNonNullable&lt;T> = T extends null | undefined ? never : T;\n复制代码\n\nimplement Parameterstype Foo = (a: string, b: number, c: boolean) => string\n\ntype A = MyParameters&lt;Foo> // [a:string, b: number, c:boolean]\ntype B = A[0] // string\ntype C = MyParameters&lt;&#123;a: string&#125;> // Error\n\n// 实现MyParameters&lt;T>\ntype MyParameters&lt;T extends (...params: any[]) => any> =\n    T extends (...params: [...infer P]) => any ? P : never\n复制代码\n\nimplement ConstructorParametersclass Foo &#123;\n  constructor (a: string, b: number, c: boolean) &#123;&#125;\n&#125;\n\ntype C = MyConstructorParameters&lt;typeof Foo> \n// [a: string, b: number, c: boolean]\n\n// 实现MyConstructorParameters&lt;T>\ntype MyConstructorParameters&lt;T extends new (...params: any[]) => any> =\n    T extends new (...params: [...infer P]) => any ? P : never\n复制代码\n\nimplement ReturnTypetype Foo = () => &#123;a: string&#125;\n\ntype A = MyReturnType&lt;Foo> // &#123;a: string&#125;\n\n// 实现MyReturnType&lt;T>\ntype MyReturnType&lt;T extends (...params: any[]) => any> =\n    T extends (...params: any[]) => infer P ? P : never;\n复制代码\n\nimplement InstanceTypeclass Foo &#123;&#125;\ntype A = MyInstanceType&lt;typeof Foo> // Foo\ntype B = MyInstanceType&lt;() => string> // Error\n\n// 实现MyInstanceType&lt;T>\ntype MyInstanceType&lt;T extends new (...params: any[]) => any> =\n    T extends new (...params: any[]) => infer P ? P : never;\n复制代码\n\nimplement ThisParameterTypefunction Foo(this: &#123;a: string&#125;) &#123;&#125;\nfunction Bar() &#123;&#125;\n\ntype A = MyThisParameterType&lt;typeof Foo> // &#123;a: string&#125;\ntype B = MyThisParameterType&lt;typeof Bar> // unknown\n\n// 实现MyThisParameterType&lt;T>\ntype MyThisParameterType&lt;T extends (this: any, ...params: any[]) => any> =\n    T extends (this: infer P, ...params: any[]) => any ? P : unknown;\n复制代码\n\nimplement TupleToUniontype Foo = [string, number, boolean]\n\ntype Bar = TupleToUnion&lt;Foo> // string | number | boolean\n\n// 实现TupleToUnion&lt;T>\ntype TupleToUnion&lt;T extends any[], R = T[0]> =\n    T extends [infer P, ...infer Q] ? TupleToUnion&lt;Q, R | P> : R;\n\n// 其他回答\ntype TupleToUnion&lt;T extends any[]> = T[number]\n复制代码\n\nimplement Partialtype Foo = &#123;\n  a: string\n  b: number\n  c: boolean\n&#125;\n\n// below are all valid\n\nconst a: MyPartial&lt;Foo> = &#123;&#125;\n\nconst b: MyPartial&lt;Foo> = &#123;\n  a: 'BFE.dev'\n&#125;\n\nconst c: MyPartial&lt;Foo> = &#123;\n  b: 123\n&#125;\n\nconst d: MyPartial&lt;Foo> = &#123;\n  b: 123,\n  c: true\n&#125;\n\nconst e: MyPartial&lt;Foo> = &#123;\n  a: 'BFE.dev',\n  b: 123,\n  c: true\n&#125;\n\n// 实现MyPartial&lt;T>\ntype MyPartial&lt;T> = &#123;\n    [K in keyof T]?: T[K]\n&#125;\n复制代码\n\nRequired// all properties are optional\ntype Foo = &#123;\n  a?: string\n  b?: number\n  c?: boolean\n&#125;\n\n\nconst a: MyRequired&lt;Foo> = &#123;&#125;\n// Error\n\nconst b: MyRequired&lt;Foo> = &#123;\n  a: 'BFE.dev'\n&#125;\n// Error\n\nconst c: MyRequired&lt;Foo> = &#123;\n  b: 123\n&#125;\n// Error\n\nconst d: MyRequired&lt;Foo> = &#123;\n  b: 123,\n  c: true\n&#125;\n// Error\n\nconst e: MyRequired&lt;Foo> = &#123;\n  a: 'BFE.dev',\n  b: 123,\n  c: true\n&#125;\n// valid\n\n// 实现MyRequired&lt;T>\ntype MyRequired&lt;T> = &#123;\n    [K in keyof T]-?: T[K]\n&#125;\n复制代码\n\nimplement LastChartype A = LastChar&lt;'BFE'> // 'E'\ntype B = LastChar&lt;'dev'> // 'v'\ntype C = LastChar&lt;''> // never\n\n// 实现FirstChar&lt;T>\ntype LastChar&lt;T extends string, A extends string[] = []> =\n    T extends `$&#123;infer P&#125;$&#123;infer Q&#125;` ?  LastChar&lt;Q, [...A, P]> :\n        A extends [...infer L, infer R] ? R : never\n;\n复制代码\n\nimplement IsNever// https://stackoverflow.com/questions/53984650/typescript-never-type-inconsistently-matched-in-conditional-type\n// https://www.typescriptlang.org/docs/handbook/advanced-types.html#v\ntype A = IsNever&lt;never> // true\ntype B = IsNever&lt;string> // false\ntype C = IsNever&lt;undefined> // false\n\n// 实现IsNever&lt;T>\ntype IsNever&lt;T> = [T] extends [never] ? true : false;\n复制代码\n\nimplement KeysToUniontype A = KeyToUnion&lt;&#123;\n  a: string;\n  b: number;\n  c: symbol;\n&#125;>\n// 'a' | 'b' | 'c'\n\n// 实现KeyToUnion\ntype KeyToUnion&lt;T> = &#123;\n  [K in keyof T]: K;\n&#125;[keyof T]\n复制代码\n\nimplement ValuesToUniontype A = ValuesToUnion&lt;&#123;\n  a: string;\n  b: number;\n  c: symbol;\n&#125;>\n// string | number | symbol\n\n// ValuesToUnion\ntype ValuesToUnion&lt;T> = T[keyof T]\n复制代码\n\nFindIndex&lt;T, E&gt;\n\n\n\n\n\n\n\n\nbigfrontend.dev/zh/typescri…\ntype IsAny&lt;T> = 0 extends (T &amp; 1) ? true : false;\ntype IsNever&lt;T> = [T] extends [never] ? true : false;\n\ntype TwoAny&lt;A, B> = IsAny&lt;A> extends IsAny&lt;B> ? IsAny&lt;A> : false;\ntype TwoNever&lt;A, B> = IsNever&lt;A> extends IsNever&lt;B> ? IsNever&lt;A> : false;\n\ntype SingleAny&lt;A, B> = IsAny&lt;A> extends true ? true : IsAny&lt;B>\ntype SingleNever&lt;A, B> = IsNever&lt;A> extends true ? true : IsNever&lt;B>\n\n\ntype FindIndex&lt;T extends any[], E, A extends any[] = []> =\n    T extends [infer P, ...infer Q] ?\n        TwoAny&lt;P, E> extends true ? \n            A['length']\n            :\n            TwoNever&lt;P, E> extends true ?\n                A['length']\n                :\n                SingleAny&lt;P, E> extends true ?\n                    FindIndex&lt;Q, E, [1, ...A]>\n                    :\n                    SingleNever&lt;P, E> extends true ?\n                        FindIndex&lt;Q, E, [1, ...A]>\n                        :\n                        P extends E ? A['length'] : FindIndex&lt;Q, E, [1, ...A]>\n        : \n        never\n复制代码\n\nimplement Trimtype A = Trim&lt;'    BFE.dev'> // 'BFE'\ntype B = Trim&lt;' BFE. dev  '> // 'BFE. dev'\ntype C = Trim&lt;'  BFE .   dev  '> // 'BFE .   dev'\n\ntype StringToTuple&lt;T extends string, A extends any[] = []> =\n    T extends `$&#123;infer K&#125;$&#123;infer P&#125;` ? StringToTuple&lt;P, [...A, K]> : A;\n\ntype TupleToString&lt;T extends any[], S extends string = '', A extends any[] = []> =\n    A['length'] extends T['length'] ? S : TupleToString&lt;T, `$&#123;S&#125;$&#123;T[A['length']]&#125;`, [1, ...A]>\n\ntype Trim&lt;T extends string, A extends any[] = StringToTuple&lt;T>> =\n    A extends [infer P, ...infer Q] ?\n        P extends ' ' ?\n            Trim&lt;T, Q>\n            :\n            A extends [...infer M, infer N] ? \n                N extends ' ' ?\n                    Trim&lt;T, M>\n                    :\n                    TupleToString&lt;A>\n                :\n                ''\n        :\n        '';\n复制代码\n","slug":"TS面试题","date":"2022-04-10T12:15:36.000Z","categories_index":"知识点","tags_index":"面试","author_index":"LIYUNFU"},{"id":"6b84c0d3e410fe11d0fe91aaed5aa6b2","title":"常见面试题","content":"1. 为什么 0.1+0.2!==0.3计算机使用二进制存储数据\n\n整数转换二进制没有误差，如 9 转换为二进制是 1001\n而小数可能无法用二进制准确表达，如 0.2 转换为 0.20000001\n可以用math.js 库解决\n\n2. Ajax-Fetch-Axios 三者有什么区别三者都用于网络请求，但是不同维度\n\nAjax 是一种技术统称\nFetch 是一个具体的 API，支持 Promise\nAxios 是第三方库\nlib 和 API 的区别\n\nfunction ajax(url, successFn) &#123;\n  const xhr = new XMLHttpRequest();\n  xhr.open(\"GET\", url, false);\n  xhr.onreadystateChange = function () &#123;\n    // 这里的函数异步执行\n    if (xhr.readyState == 4) &#123;\n      if (xhr.status == 200) &#123;\n        successFn(xhr.responseText);\n      &#125;\n    &#125;\n  &#125;;\n  xhr.send(null);\n&#125;\nfunction ajax(url) &#123;\n  return fetch(url).then((res) => res.json);\n&#125;\n\n3. 节流和防抖\n节流：限制执行频率，有节奏的执行\n防抖：限制执行次数，多次密集的触发只触发一次\n节流关注过程 ，防抖关注结果\n实际工作中可用lodash\n\n防抖 输入框\nfunction debounce(fn, delay = 200) &#123;\n  let timer = 0;\n\n  return function () &#123;\n    if (timer) clearTimeout(timer);\n\n    timer = setTimeout(() => &#123;\n      fn.apply(this, arguments); // 透传this和参数\n      timer = 0;\n    &#125;, delay);\n  &#125;;\n&#125;\n\n节流 banner，拖拽\nfunction throttle(fn, delay = 100) &#123;\n  let timer = 0;\n\n  return function () &#123;\n    if (timer) return;\n\n    timer = setTimeout(() => &#123;\n      fn.apply(this, arguments);\n      timer = 0;\n    &#125;, delay);\n  &#125;;\n&#125;\n\n4. px % em rem vw vh 有什么区别\npx 基本单位，绝对单位(其他都是相对单位)\n% 相对于父元素的宽度比例\nem 相对于当前元素的font-size\nrem 相对于根节点的font-size\nvw``vh 屏幕宽度的1%屏幕高度的1%\nvmin 两者的最小值，vmax 两者的最大值\n\n5. 箭头函数缺点\n\n没有arguments\n无法通过apply call bind 改变 this\n某些箭头函数代码难以阅读\n\n不适用的场景\n\n对象方法不能用箭头函数\n\nconst obj = &#123;\n  name: \"haha\",\n  getName: () => &#123;\n    return this.name;\n  &#125;,\n&#125;;\n\nconsole.log(obj.getName()); // 无打印\n\n\n原型方法\n\nconst obj = &#123;\n  name: \"haha\",\n&#125;;\nobj.__proto__.getName = () => &#123;\n  return this.name;\n&#125;;\n\nconsole.log(obj.getName()); // 无打印\n\n\n构造函数\n\nconst Foo = (name, city) => &#123;\n  this.name = name;\n  this.city = city;\n&#125;;\n\nconst f = new Foo(\"张三\", \"成都\"); //Foo is not a constructor\n\n\n动态上下文的回调函数\n\nconst btn1 = document.getElementById(\"btn1\");\nbtn1 = addEventListener(\"click\", () => &#123;\n  this.innerHTML = \"clicked\";\n&#125;);\n\n\nVue 生命周期和 method\n\n&#123; data()&#123; return &#123;name:&#39;张三&#39;&#125; &#125;, methods:&#123; getName:()&#x3D;&gt;&#123; return this.name &#125; &#125;,\nmounted:()&#x3D;&gt;&#123; console.log(&#39;msg&#39;,this.name) &#125; &#125;\n\n6. 请描述 TCP 三次握手和四次挥手三次握手 - 建立连接\n\nclient 发包，server 接收，server：有 client 要找我\nserver 发包，client 接收，client：server 已经收到消息\nclient 发包，server 接收，server：client 要准备发送了\n\n四次挥手 - 断开连接\n\nclient 发包，server 接收，server：知道 client 要断开了\nserver 发包，client 接收，server：我知道了，等我传输完\nserver 发包，client 接收，server：东西发送完了，可以关闭连接\nclient 发包，server 接收，server：收到可以关闭消息，关闭\n\n7. for…in 和 for…of 有什么区别答案\n\nfor...in 用于可枚举数据，如对象、数组、字符串，得到 key\nfor...of用于可迭代数据，如数组、字符串、Map、Set，得到 value\n\nkey 和 value\n\nfor...in 遍历得到 key\nfor...of 遍历得到 value\n\n适用于不同的数据对象\n\n遍历对象：for...in 可以，for...of 不可以\n遍历 Map Set：for...in 不可以，for...of 可以\n遍历 generator：for...in 不可以，for...of 可以\n\n8. for await …of 有什么用\nfor await ...of 用于异步，遍历多个 Promise\n\nasync function()&#123;\n  const p1=createPromise(100)\n  const p2=createPromise(200)\n  const p3=createPromise(300)\n\n  const list=[p1,p2,p3]\n  // 第一种访问方式\n  Promise.all(list).then(res=>console.log(res))\n\n  // 第二种访问方式\n  for await(let res of list)&#123;\n    console.log(res)\n  &#125;\n&#125;\n\n\n一个一个打印\n\nconst arr = [10, 20, 30];\nfor (let num of arr) &#123;\n  const res = await createPromise(num);\n  console.log(res);\n&#125;\n\n9. offsetHeight scrollHeight clientHeight 区别计算规则\n\noffsetHeight offsetWidth ：border + padding + content\nclientHeight clientWidth ：padding + content\nscrollHeight scrollWidth ：padding + 实际内容尺寸\n\n10. HTMLCollection 和 NodeList 区别\nNodeList 是一个静态集合，其不受 DOM 树元素变化的影响；相当于 DOM 树快照，节点数量和类型的快照，就是对节点增删，NodeList 感受不到，但是对节点内部内容修改，是可以感受到的，比如innerHTML\nHTMLCollection 是动态绑定的，是一个动态集合，DOM 树发生变化，HTMLCollection 也会随之变化，节点的增删是敏感的\n只有 NodeList 对象有包含属性节点和文本节点\nHTMLCollection 元素可以通过name id 或index 索引来获取，NodeList 只能通过index 索引来获取\nHTMLCollection 和 NodeList 本身无法使用数组的方法：pop() push() join() 等，除非把他转为一个数组\n\nconst nodelist = [...document.querySelectorAll(\"div\")];\n\nnodelist.forEach((item) => item);\nnodelist.slice();\n\n11. JS 严格模式有什么特点开启严格模式\n\"use strict\"; //全局开启\nfunction fn() &#123;\n  \"use strict\"; //某个函数开启\n&#125;\n\n特点\n\n不允许使用未声明的变量\n不允许删除变量或对象、函数\n不允许变量重名\n不允许使用八进制\n不允许使用转义字符\n不允许对只读属性赋值\n不允许对一个使用 getter()方法读取的属性进行赋值\n不允许删除一个不允许删除的属性\n变量名不能使用eval arguments 字符串\n不能使用 with 语句\n在作用域 eval()创建的变量不能被调用\n函数在浏览器全局变量中被简单调用，非严格模式下this 指向window 在use strict 指明严格模式的情况下就是undefined\n\n12. HTTP 跨域请求时为何发送 options 请求答案\n\noptions 请求，是跨域请求之前的预检查\n浏览器自动发起的，无需我们干预\n不影响实际的功能\n预检查服务端是否支持某种请求方法 如 delete patch post 等\n\nJSONP 原理：A 网页定义全局函数，请求 B 网页，B 返回一个函数调用，由于在 script 中，所以当作函数执行\n\ncors\n\n13. JS 内存垃圾回收用什么算法什么是垃圾回收\n\n回收那些函数执行完成了，再也用不到的对象和数据\n\n引用计数（以前）\n\n所谓引用计数是指语言引擎有一张“引用表”，保存了内存里面所有的资源(通常是各种值)的引用次数，如果一个值的引用次数是 0，就标识这个值不再用到了，因此可以将这块内存释放\n\n\n标记清除（现代）算法\n\n标记阶段\n遍历所有对象找标记活动的对象\n\n\n清扫阶段：遍历所有对象清除没有标记的对象，同时会清除第一阶段所作的标记，便于之后可以进行正常的工作\n\n14. 闭包是内存泄漏吗\n内存泄漏是非预期的结果\n闭包存在内存中是预期的结果，不算内存泄漏\n闭包数据不可以被回收\n\n15. JS 内存泄漏如何检测，场景有哪些检测\n\n使用浏览器开发者工具的 Performance\n勾选 memory，触发垃圾回收\n开始检测，触发页面事件\n\n场景\n\n被全局遍历、函数引用、组件销毁时未清除\n被全局事件、定时器引用，组件销毁时未清除\n被自定义事件引用，组件销毁时未清除\n\n扩展\n\n如果用 Obj 或者 map、set 定义，函数执行完，引用 obj 还在，而 weakmap 和 weakset 是弱引用，函数执行完就清除了 obj，所以 weakmap 只能使用 get 去尝试访问有没有数据\n\n\n16. 浏览器和 nodejs 的事件循环有什么区别答案\n\n浏览器和 nodejs 的 event loop 流程基本相同\nnodejs 宏任务和微任务分类型，有优先级\n\n注意事项\n\n推荐使用setImmediate 代替process.nextTick\n\n\nnodejs 异步\n\nnodejs 同样使用 ES 语法，也是单线程，也需要异步\n异步任务也分：宏任务 + 微任务\n但是它的宏任务和微任务分不同类型，有不同优先级\n宏任务优先级\ntimers\nI/O callbacks\nidls prepare\npoll\ncheck\nclose callbacks\n\n\n\nnodejs event loop\n\n执行同步任务\n执行微任务(process.nextTick 优先级更高)\n按顺序执行 6 个类型的宏任务(每个结束时都执行当前的微任务)\n\n17. VDOM 真的很快吗答案\n\nvdom 并不快，JS 直接操作 DOM 才是最快的\n但“数据驱动视图”要有合适的技术方案，不能全部 DOM 重建\nvdom 就是目前最合适的技术方案(并不是因为它块，而是合适)\n\n18. 遍历一个数组用 for 和 forEach 哪个更快答案\n\nfor 更快\nforEach 每次都要创建一个函数来调用，而 for 不会创建函数\n函数需要独立的作用域，会有额外的开销\n\n19. nodejs 如何开启线程，进程如何通讯答案\n\n开启子进程child_process.fork 和cluster.fork\n使用send 和on 传递消息\n\n进程 process vs 线程 Thread\n\n进程：OS 进行资源分配和调度的最小单位，有独立内存空间\n线程：OS 进行运算调度的最小单位，共享进程内存空间\nJS 是单线程的，但可以开启多进程执行，如 WebWorker\n\n为何需要多进程\n\n多核 CPU，更适合处理多进程\n内存较大，多个进程才能更好的利用(单进程有内存上限)\n总之，“压榨”机器资源，更快，更节省\n\nnodejs 开启多进程\n\n主进程\n\nconst http = require(\"http\");\nconst fork = require(\"child_process\").fork;\n\nconst server = http.createServer((req, res) => &#123;\n  if (req.url === \"/get-sum\") &#123;\n    console.info(\"主进程 id\", process.pid);\n\n    // 开启子进程\n    const computeProcess = fork(\"./compute.js\");\n    computeProcess.send(\"开始计算\");\n\n    computeProcess.on(\"message\", (data) => &#123;\n      console.info(\"主进程接受到的信息：\", data);\n      res.end(\"sum is \" + data);\n    &#125;);\n\n    computeProcess.on(\"close\", () => &#123;\n      console.info(\"子进程因报错而退出\");\n      computeProcess.kill();\n      res.end(\"error\");\n    &#125;);\n  &#125;\n&#125;);\nserver.listen(3000, () => &#123;\n  console.info(\"localhost: 3000\");\n&#125;);\n\n\n子进程\n\n/**\n * @description 子进程，计算\n * @author 双越老师\n */\n\nfunction getSum() &#123;\n  let sum = 0;\n  for (let i = 0; i &lt; 10000; i++) &#123;\n    sum += i;\n  &#125;\n  return sum;\n&#125;\n\nprocess.on(\"message\", (data) => &#123;\n  console.log(\"子进程 id\", process.pid);\n  console.log(\"子进程接受到的信息: \", data);\n\n  const sum = getSum();\n\n  // 发送消息给主进程\n  process.send(sum);\n&#125;);\n\n20. 请描述 JS Bridge 原理什么是 JS Bridge\n在 Hybrid 模式下，H5 经常需要使用 Native 的功能，Native 需要向 web 端发送推送更新状态，而 JS 是运行在单独的 JS Context 中，与原生运行环境相隔离，所以需要有一种机制实现 Native 和 web 端的双向通信，这就是 JSBridge\n\nJS 无法直接调用 native API\n需要一些特定的格式来调用\n这些格式统称 JS-Bridge 例如微信 JSSDK\n\n\n21. requestIdleCallback 和 requestAnimationFrame 区别区别\n\nrequestAnimationFrame 每次渲染完都会执行，高优\nrequestIdleCallback 空闲时才执行，低优\n\n它们是宏任务还是微任务\n\n两者都是宏任务\n要等待 DOM 渲染完才执行，肯定是宏任务\n\n22. Vue 每个生命周期都做了什么beforeCreate\n\n创建一个空白的 Vue 实例\ndata method 尚未被初始化，不可使用\n\ncreated\n\nVue 实例初始化完成，完成响应式绑定\ndata method 都已经初始化完成，可调用\n尚未开始渲染模板\n\nbeforeMount\n\n编译模板，调用 render 生成 vdom\n还没有开始渲染 DOM\n\nmounted\n\n完成 DOM 渲染\n组件创建完成\n开始由“创建阶段”进入“运行阶段”\n\nbeforeUpdate\n\ndata 发生变化之后\n准备更新 DOM（尚未更新 DOM）\n\nupdated\n\ndata 发生变化，且 DOM 更新完成\n（不要再 updated 中修改 data，可能会导致死循环）\n\nbeforeUnmount\n\n组件进入销毁阶段（尚未销毁，可正常使用）\n可移动、解绑一些全局事件、自定义事件\n\nunmounted\n\n组件被销毁\n所有子组件也被销毁了\n\nkeep-alive 组件\n\nonActivated 缓存组件被激活\nonDeactivated 缓存组件被隐藏\n\n连环问 vue 什么时候操作 DOM 比较合适\nmounted 和 updated 都不能保证子组件全部挂载完成\n使用$nextTick 渲染 DOM\n\n\n连环问 Ajax 应该在哪个生命周期\n有两个选择：created 和 mounted\n推荐：mounted\n\n连环问 Vue3 Composition API 生命周期有何区别\n用 setup 代替了 beforeCreate 和 created\n使用 Hooks 函数的形式，比如 mounted 改为 onMounted\n\n\n23. Vue2 Vue3 React 三者 diff 算法有何区别相同点\n\n只比较同一层级，不跨级比较\ntag 不同则删除重建\n子节点通过 key 区分\n\n区别\n\nReact diff - 仅右移\nVue2 双端比较 - 四个指针相互比较\nVue3 最长递增子序列\n\n连环问 Vue React 为何循环时必须使用 key\nvdom diff 算法会根据 key 判断元素是否要删除\n匹配了 key，则只移动元素 - 性能较好\n未匹配 key，则删除重建 - 性能较差\n\n24. Vue-router 和 MemoryHistory 是什么Vue-router 三种模式\n\nhash\n通过location.hash 实现的\n\n\nWebHistory\n通过history.pushState window.onpopState 实现\n\n\nMemoryHistory\n跳转页面 路由不变\n\n\n\n25. 移动端 H5 click 有 300ms 延迟，该如何解决初期解决方案 FastClick\n\n原理：监听 touchend 事件（touchstart touchend 会先于 click 触发）\n使用自定义 DOM事件模拟一个 click 事件\n把默认的 click 事件(300ms 之后触发)禁止掉\n\n\n现代浏览器的改进\n\n只要浏览器里面有width=device-width就不会有 300ms 延迟\n手机认为你已经做了响应式了，不需要 300ms 延迟了\n\n\n26. 网络请求中，token 和 cookie 有什么区别\ncookie :HTTP 标准，跨域限制，配合 session 使用\ntoken ：无标准，无跨域限制，用于 JWT\n\n现代浏览器开始禁止第三方 cookie 使用 samsite\n\nsamsite：stick/lax/none 严格模式，松散模式，没有限制\n\ncookie 和 session\n\ncookie 用于登录验证，存储用户标识\nsession 在服务端，存储用户详细信息，和 cookie 信息一一对应\ncookie + session 是常见登录验证解决方案\n\ntoken vs cookie\n\ncookie 是 HTTP 规范，而 token 是自定义传递\ncookie 会默认被浏览器传递，而 token 需自己传递\ntoken 默认没有跨域限制\n\nJWT（JSON Web Token）\n\n前端发起登录，后端验证成功之后，返回一个加密的 token\n前端自行存储这个 token(其中包含了用户信息)\n以后访问服务端就带上这个 token\n\n27. session 和 JWT 哪个更好答案\n\n如有严格管理用户信息的需求(保密，快速封禁)推荐 session\n如没有特殊要求，则使用 JWT\n\nsession 优点\n\n原理简单，易于学习\n用户信息存储在服务端，可快速封禁某个用户\n\nsession 缺点\n\n占用服务器内存，硬件成本高\n多进程，多服务器，不好同步 - 需使用第三方缓存，如 redis\n不同 session 存储在不同进程中，需要使用 redis 统一管理 session\n默认有跨域限制\n\nJWT 优点\n\n不占用服务端内存\n多进程，多服务器不受影响\n没有跨域限制\n\nJWT 缺点\n\n用户信息存储在客户端，无法快速封禁某用户\n万一服务端密钥被泄漏，则用户信息全部丢失\ntoken 体积一般大于 cookie，会增加请求的数据量\n\n28. 如何实现 SSO 单点登录基于 cookie\n\ncookie 默认不可跨域共享，但某些情况下可设置为共享\n主域名相同，如www.baidu.com image.baidu.com\n设置 cookie domain 为主域名，即可共享 cookie\n\nSSO\n\n浏览器访问 A，A 重定向 SSO 网站，登陆后返回 ticket\n浏览器访问 B，B 重定向 SSO 网站，登录后返回 ticket\n当客户端登陆过 A 之后，去访问 B，B 就拿到 ticket 去找 SSO 校验\n\nOAuth 2.0\n\n第三方登录\n\n29. HTTP 协议和 UDP 协议有什么区别答案\n\nHTTP 是应用层，TCP UDP 是传输层\nTCP 有连接，有断开，稳定传输\nUDP 无连接，无断开，不稳定传输，但效率高\n\n网络协议\n\nHTTP 协议在应用层\nTCP UDP 协议在传输层\n\nTCP 协议\n\n有连接(三次握手)\n有断开(四次挥手)\n稳定传输\n\nUDP 协议\n\n无连接，无断开\n不稳定传输，但效率高\n如视频会议，语音通话\n\n30. HTTP 协议 1.0 1.1 2.0 有什么区别HTTP1.0\n\n最基本的 HTTP 协议\n支持基本的 GET POST 方法\n\nHTTP1.1\n\n增加了缓存策略cache-control e-tag 等\n支持长连接Connection:keep-alive 一次 TCP 连接多次请求\n支持断点续传，状态码 206\n支持新的方法 PUT DELETE 等，可用于 Restful API\n\nHTTP2.0\n\n可压缩 header，减少体积\n多路复用，一次 TCP 连接中可以多个 HTTP 请求\n服务端推送，websocket\n\n31. 什么是 HTTPS 中间人攻击，如何预防HTTPS 加密传输\n\nhttp 明文传输\nhttos 加密传输 HTTP + TLS/SSL\n\n当使用对称加密时用的同一套密钥，会被黑客劫持解密出来\n非对称加密，公钥加密，私钥解密，但是如果有中间黑客，把自己的公钥给客户端，客户端发送的时候再劫持用自己的私钥解开\n先使用非对称加密建立连接，然后使用对称加密传输数据\n预防 ：服务器使用 CA 证书，浏览器就能知道这个公钥是不是合法的\n\n32. script 标签的 defer 和 async 有什么区别\n\ndefer 并行加载，延迟执行\nasync 并行加载，加载完立刻执行，阻塞 HTML\n\n33. prefetch 和 dns-prefetch 有什么区别答案\n\nprefetch 是资源预获取（和 preload 有关）\ndns-prefetch 是 DNS 预查询（和 preconnect 相关）\n\npreload 和 prefetch\n\npreload 资源再当前页面使用，会优先加载\nprefetch 资源在未来页面使用，空闲时加载\n\n\ndns-prefetch 和 preconnect\n\ndns-prefetch 即 DNS 预查询\npreconnect 即 DNS 预连接\n\n34. 你知道哪些前端攻击，该如何预防XSS\n\nScross Site Script 跨站脚本攻击\n手段：黑客将 JS 代码插入到网页内容中，渲染时执行 JS 代码\n预防：特殊字符替换(前端或者后端)\n只要 vue 和 react 不用 v-html 或 dangerouselySetInnerHTML 就可以预防\n\n\nCSRF\n\nCross Site Request Forgery 跨站请求伪造\n手段：黑客诱导用户去访问另一个网站的接口，伪造请求\n预防：严格的跨域限制 + 验证码机制\n\nCSRF 详细过程\n\n用户登陆了 A 网站，有了 cookie\n黑客诱导用户到 B 网站，并发起 A 网站的请求\nA 网站的 API 发现有 cookie，以为是用户自己操作的\n\n点击劫持\n\nClick Jacking\n手段：诱导界面上蒙一个透明的 iframe，诱导用户点击\n预防：让 iframe 不能跨域加载\n\n\nDDos\n\nDistribute denial-of-service 分布式拒绝服务\n手段：分布式的，大规模的流量访问，使服务器瘫痪\n预防：软件层不好做，需硬件预防(如阿里云 WAF)\n\nSQL 注入\n\n手段：黑客提交内容时写入 SQL 语句，破坏数据库\n预防：处理输入的内容，替换特殊字符\n\n\n35. WebSocket 和 HTTP 区别答案\n\nwebsocket 协议名是 ws://，可双端发送请求\nwebsocket 没有跨域限制\n通过 send 和 onmessage 通讯(http 通过 req 和 res)\n\nWebSocket\n\n支持端对端通讯\n可以有 client 发起，也可以由 server 发起\n用于：消息通知，直播间讨论区，聊天室，协同编辑\nws 可升级为 wss(像 https)\n实际项目中推荐socket.io 实现\n客户端\n\n\n\n服务端\n\n\nWebSocket 连接过程\n\n先发起一个 HTTP 请求\n成功之后再升级到 WebSocket 协议，再通讯\n\n36. WebSocket 和 HTTP 长轮询的区别\nHTTP 长轮询：客户端发送请求，服务端阻塞，不回立即返回\nWebSocket：客户端可发送请求，服务端也可发起请求\n\n注意\n\nHTTP 长轮询，需处理 timeout，即 timeout 之后重新发送请求\n\n\n37. 描述从输入 url 到页面展示的完整过程\n网络请求：DNS 解析，HTTP 请求\n解析：DOM 树，CSSDOM 树，Render Tree\n渲染：计算、绘制、同时执行 JS\n\n网络请求\n\nDNS 查询(得到 IP)，建立 TCP 连接(三次握手)\n浏览器发送 HTTP 请求\n收到请求响应，得到 HTML 源代码\n解析 HTML 过程中，遇到静态资源还会继续发起网络请求\nJS CSS 图片 视频等\n注意：静态资源可能有强缓存，此时不必请求\n\n结构化\n\n字符串-&gt;结构化数据\nHTML 构建 DOM 树\nCSS 构建 CSSDOM 树(style tree)\n两者结合，形成 render tree\n\n\n渲染：Render Tree 绘制到页面\n\n计算各个 DOM 的尺寸、定位，最后绘制到页面\n遇到 JS 可能会执行(参考 defer async)\n异步 CSS、图片加载，可能会触发重新渲染\n\n38. 网页重绘 repain 和重排 reflow 有什么区别动态网页，随时都会重绘，重排\n\n网页动画\nModal Dialog 弹窗\n增加/删除一个元素，显示/隐藏一个元素\n\n重绘 repain\n\n元素外观改变，如颜色、背景色\n但元素的尺寸、定位不变，不会影响其他元素的位置\n\n重排 reflow\n\n重新计算尺寸和布局，可能会影响其他元素的位置\n如元素高度增减，可能使相邻元素位置不变\n\n区别\n\n重排比重绘影响要大，消耗也更大\n所以，要尽量避免无意义的重排\n\n优化\n\n集中修改样式，或直接切换 css class\n修改之前先设置display:none 脱离标准文档流\n使用 BFC 特性，不影响其他元素位置\n频繁触发使用节流和防抖\n使用 createDocumentFragment 批量操作 DOM\n优化动画，使用 CSS3 和 requestAnimationFrame\n\n触发 BFC 的条件\n\n根节点&lt;html&gt;\nfloat:left/right\noverflow:auto/hidden\ndisplay:inline-block/table/table-row/table-cell\ndisplay:flex/grid 的直接子元素\nposition:absolute/fixed\n\n39. 如何实现网页多标签 tab 通讯答案\n\nWebSocket 需要服务器，成本较高\nlocalStorage 简单易用，推荐\nSharedWorker 调试不方便，不兼容 IE11\n\n使用 websocket 通讯\n\n无跨域限制\n需要服务端支持，成本高\n\n使用 localStorage 通讯\n\n同域的 A 和 B 两个页面\nA 页面设置 localStorage\nB 页面可监听到 localStorage 值的修改\n\n通过 SharedWorker 通讯\n\nSharedWorker 使 WebWorker 的一种\nWebWorker 可开启进程执行 JS，但不能操作 DOM\nSharedWorker 可单独开启一个进程，用于同域页面通讯\n\n40. 网页和 iframe 之间的通讯答案\n\n使用postMessage通讯\n注意跨域的限制和判断\n\n41. H5 页面如何进行首屏优化答案\n\n路由懒加载\n服务端渲染 SSR\nApp 预取\n分页\n图片懒加载\nHybrid\n\n重点\n\n服务端 SSR 是 H5 的终极优化方案(但成本也高)\n移动端 H5 要结合 App 能力去优化\n严格来说 hybrid 不是 H5，但这里回答出来没有问题\n性能优化要配合分析、统计、评分等，做了事情要有结果\n性能优化也要配合体验，如骨架屏，loading 动画等\n不同的形式，有不同的优化方式，要积极和面试官沟通\n\n路由懒加载\n\n适用于 SPA(不适用 MPA)\n路由拆分，优先保证首页加载\n\n服务端渲染 SSR\n\n传统的前后端分离(SPA)渲染页面的过程复杂\nSSR 渲染页面过程简单，所以性能好\n如果是纯 H5 页面，SSR 是性能优化的终极方案\n\nApp 预取\n\n如果 H5 在 App WebVIew 中展示，可使用 App 预取\n用户访问列表页时，App 预加载文章首屏内容\n用户进入 H5 页，直接从 App 中获取内容，瞬间展示首屏\n\n分页\n\n针对列表页\n默认只展示第一页内容\n上滑加载更多\n\n图片懒加载 lazyload\n\n针对详情页\n默认只展示文本内容，然后触发图片懒加载\n注意：提前设置图片尺寸，尽量只重绘不重排\n\nHybrid\n\n提前将 HTML JS CSS 下载到 App 内部\n在 App webview 中使用 file://协议加载页面卡片\n再用 Ajax 获取内容并展示(也可结合 App 获取)\n\n42. 后端一次性返回 10W 条数据，你该如何渲染设计不合理\n\n后端返回 10w 条数据，本身技术方案设计就不合理\n主动和面试官沟通此事(这也许是面试官所期待的)\n如果面试官非要这么做，那再继续寻找解决方案\n\n浏览器能否处理 10w 条数据\n\nJS 没问题\n渲染到 DOM 会非常卡顿\n\n自定义中间层\n\n自定义 nodejs 中间层，获取并拆分这 10w 条数据\n前端对接 nodejs 中间层，而不是服务端\n成本比较高\n\n虚拟列表\n\n只渲染可视区域 DOM\n其他隐藏区域不显示，只用&lt;div&gt;撑起高度\n随着浏览器滚动，创建和销毁 DOM\n借用第三方 lib Vue-virtual-scroll-list React-virtualized\n\n43. 文本超出省略，用哪个 CSS 样式\n单行文本\n\n#box &#123;\n  border: 1px solid #ccc;\n  width: 100px;\n  white-space: nowrap; // 不换行\n  overflow: hidden;\n  text-overflow: ellipsis; // 超出省略\n&#125;\n\n\n多行文本\n\n#box &#123;\n  border: 1px solid #ccc;\n  width: 100px;\n  overflow: hidden;\n  display: -webkit-box; //将对象作为弹性伸缩盒子模型显示\n  -webkit-box-orient: vertical; // 设置子元素排列方式\n  -webkit-line-clamp: 3; //显示几行，超出的省略\n&#125;\n\n44. 前端常用的设计模式和使用场景题目\n\n工厂模式\n单例模式\n代理模式\n观察者模式\n发布订阅模式\n装饰器模式\n\n设计原则\n\n最重要的思想：开放封闭原则\n对扩展开放\n对修改封闭\n\n工厂模式\n\n用一个工厂函数，来创建实例，隐藏 new\n如 jQuery $函数\n如 React createElement 函数\n\n\n单例模式\n\n全局唯一的实例(无法生成第二个)\n如 Vuex Redux 和 store\n如全局唯一的 dialog modal\n注意：JS 是单线程的，创建单例很简单，Java 是支持多线程的，创建单例要考虑锁死线程，否则多个线程同时创建，单例就重复了(多线程共享进程内容)\n\n\n代理模式\n\n使用者不能直接访问对象，而是访问一个代理层\n在代理层可以监听 get set 做很多事情\n如 ES6 Proxy 实现 vue3 响应式\n\n\n观察者模式\n\n发布订阅\n\n装饰着模式\n\n原功能不变，增加一些新功能(AOP 面向切面编程)\nES 和 Typescript 的 Decorator 语法\n类装饰器，方法装饰器\n\n\n\n45. 观察者模式和发布订阅模式的区别观察者模式\n\nSubject 和 Observer 直接绑定，没有中间媒介\n如 addEventListener 绑定事件\n\n发布订阅\n\nPublisher 和 Observer 互不相识，需要中间媒介 Event channel\n如 EventBus 自定义事件\n\n46. 你在实际工作中做过哪些 Vue 优化答案\n\nv-if 和 v-show\nv-for 使用 key\ncomputed 缓存数据\nkeep-alive 缓存组件\n异步组件 路由懒加载\nSSR\n\nv-if 和 v-show\n\nv-if 彻底销毁组件\nv-show 使用 css 隐藏组件\n大部分情况下使用 v-if 更好，不要过渡优化\n\nv-for 使用 key\n\n使用 computed 缓存\n\nkeep-alive 缓存组件\n\n频繁切换的组件，如 tabs\n不要乱用，缓存太多会占用内存，且不好 debug\n\n异步组件\n\n针对体积较大的组件，如编辑器、复杂表格、复杂表单等\n拆包，需要时异步加载，不需要时不加载\n减少主包的体积，首页会加载更快\n\n\n路由懒加载\n\n服务端渲染 SSR\n\n可使用 Nuxt.js\n按需优化，使用 SSR 的成本比较高\n\n47. 你使用 Vue 遇到过哪些坑内存泄漏\n\n由于全局变量、全局事件、全局定时器绑定之后没有销毁造成内容泄漏\n自定义事件未销毁\n\nVue2 响应式的缺陷（Vue3 不再有）\n\ndata 新增属性用 Vue.set\ndata 删除属性用 Vue.delete\n无法直接修改数据 arr[index]=value\n\n路由切换时 scroll 到顶部\n\nSPA 的通病，不仅是 Vue\n如，列表页，滚动到第二屏，点击进入详情页\n再返回到列表页(此时组件重新渲染)就 scroll 到顶部\n解决方案\n在列表页缓存数据和 scrollTop 值\n当再次返回列表时，渲染组件，执行 scrollTo(xxx)\n终极方案：MPA + APP WebView\n\n\n\n48. 实际工作中，做过哪些 React 优化答案\n\n模拟 v-show\n循环使用 key\nFragment 减少层级\nJSX 不要定义函数\n构造函数 bind this\nshouldComponentUpdate\nuseMemo\n异步组件\n路由懒加载\nSSR\n\n修改 CSS 模拟 v-show\n\n循环使用 key\n\n使用 Fragment 减少层级\n\nJSX 中不要定义函数\n\n要在构造函数中 bind this\n\n使用 shouldComponentUpdate\n\n使用shouldComponentUpdate 判断组件是否要更新\n或者使用React.PureComponent\n函数组件使用React.memo\n\nHooks 缓存数据\n\n其他\n\n异步组件\n路由懒加载\nSSR-Next.js\n\n49. 你使用 React 时遇到哪些坑自定义组件的名称首字母要大写\n\nJS 关键字的冲突\n\nJSX 数据类型\n\nsetState 是异步更新的\n\n50. 如何统一监听 Vue 组件报错答案\n\nerrorCaptured 监听下级组件错误，返回 false 阻止向上传播\nerrorHandler监听全局 Vue 组件的错误\nwindow.onerror 监听其他 JS 错误，如异步\n\nwindow.onerror\n\n全局监听所有 JS 错误\n但它是 JS 级别的，识别不了 Vue 组件信息\n捕捉一些 Vue 监听不到的错误\n\n51. 如何统一监听 React 组件的报错答案\n\nErrorBoundary 监听组件渲染报错\n事件报错使用 try-catch 或 window.onerror\n异步报错使用 window.onerror\n\nErrorBoundary 组件\n\n监听所有下级组件报错，可降级展示 UI\n只监听组件渲染时报错，不监听 DOM 事件、异步错误\nproduction 环境生效，dev会直接抛出错误\n\nimport React from \"react\";\n\nclass ErrorBoundary extends React.Component &#123;\n  constructor(props) &#123;\n    super(props);\n    this.state = &#123;\n      error: null, // 存储当前的报错信息\n    &#125;;\n  &#125;\n  static getDerivedStateFromError(error) &#123;\n    // 更新 state 使下一次渲染能够显示降级后的 UI\n    console.info(\"getDerivedStateFromError...\", error);\n    return &#123; error &#125;;\n  &#125;\n  componentDidCatch(error, errorInfo) &#123;\n    // 统计上报错误信息\n    console.info(\"componentDidCatch...\", error, errorInfo);\n  &#125;\n  render() &#123;\n    if (this.state.error) &#123;\n      // 提示错误\n      return &lt;h1>报错了&lt;/h1>;\n    &#125;\n\n    // 没有错误，就渲染子组件\n    return this.props.children;\n  &#125;\n&#125;\n\nexport default ErrorBoundary;\n\n52. 如果一个 H5 很慢，你该如何排查性能问题答案\n\n分析性能指标，找到慢的原因\n对症下药，解决问题\n持续跟进，持续优化\n\n前端性能指标\n\nFirst Paint(FP) 第一次无内容的渲染\nFirst Contentful Paint(FCP) 第一次有内容的渲染\nDomContentLoaded(DCL) DOM 内容加载完成\nLargest Contentfull Paint(LCP) 最大的一种渲染\nLoad(L)\n\n工具\n\nChrome devTools\nlight house\n\n如果是网页加载慢\n\n优化服务器硬件配置，使用 CDN\n路由懒加载，大组件异步加载 - 减少主包的体积\n优化 HTTP 缓存策略\n\n如果是网页喧染满\n\n优化服务端接口(如 Ajax 获取数据慢)\n继续分析，优化前端组件内部的逻辑(参考 Vue React 优化)\n服务端渲染 SSR\n\n持续跟进\n\n性能优化是一个循序渐进的过程，不像 bug 一次性解决\n持续跟进统计结果，再逐步分析性能瓶颈，持续优化\n可使用第三方统计服务，如阿里云 ARMS，百度统计\n\n53. 令人失眠的 promise-then 执行顺序问题then 交替执行\n\n如果有多个fulfilled promise实例，同时执行 then 链式调用\nthen 会交替执行\n这是编译器的优化，防止一个promise占据太久时间\n\nthen 中返回 promise 实例\n\n相当于多出一个 promise 实例\n也会遵守“交替执行”\n(但会直接声明一个 promise 实例，结果有些差异)\n\n慢半拍\n\nthen 中返回 promise 实例，会出现慢半拍 的效果\n第一拍，promise 需要由 pending 变为 fulfilled\n第二拍，then 函数挂载到 MicroTaskQueue(参考 Event Loop)\n\n54. setState 是微任务还是宏任务答案\n\nsetState 是同步执行，state 是同步更新\n即，在微任务 Promise.then 开始之前，state 已经计算完了\n同步，不是微任务或宏任务\n\nsetState 本质是同步\n\nsetState 是同步，只不过让 React 做成了异步的样子\n因为要考虑性能，多次 state 修改，只进行一次 DOM 渲染\n日常说的异步是不严谨的，但沟通成本低\n\n55. 对象属性类型的问题JS 对象 key 的数据类型\n\n只能是字符串和Symbol 类型\n其他类型会被转换为字符串\n就是将类型toString()之后作为 key\n\nSymbol 无论内部一样，外面都是不一样的\n\n所以一样的字符串 Symbol 都是不一样的不回覆盖\n\nMap 和 WeakMap 的 key 就不会出现这种情况\n\nMap 的 key 可以是各种类型\nWeakMap 的 key 只能是引用类型，不能是值类型\n\n\n\n第一个由于 类型转换为123 则覆盖前面，结果c\n第二个，Symbol 定义的总是不一样，所以不覆盖，结果b\n第三个，对象 toString 之后都是[object Object] 字符串，覆盖，结果c\n\n56. 何时使用 SSR，何时不用SSR 的优势\n服务端直出 html\n\n性能好\n对 SEO 优化\n\nSSR 的劣势\n前后端同构，开发成本高(学习、测试、运维等)\n是否需要 SSR\n\n你的项目是否需要 SSR ——管理后台就不需要\n你的项目是否在一极致的性能优化，或者是否有可能处于弱网环境 ——管理后台不需要\n\n如果急需要 SSR 的优势和价值，那就去承担 SSR 的成本，如果不需要这些优势，那 SSR 就成了一个累赘\nSSR 的应用场景\nC 端，以阅读为主的单页面，如新闻页，运营宣传广告页面，官网等，1.需要快 2. 需要 SEO\n57. 如何做 Code-Review如何做 Code-Review\n\n代码规范(eslint 不能全面检查，如变量命名，代码语义)\n重复的代码要抽离，复用\n单个函数内容过长，需要拆分\n算法复杂度是否可用，是否可继续优化\n是否有安全漏洞\n扩展性如何(不用为了扩展而扩展，不封闭即可)\n是否有现有的功能重复了\n是否有完整的单元测试\n组件设计是否合理\n\nCode review 的时机\n\n提交 PR 时，通过代码 diff 进行 Code review\n每周例行一次集体 Code review\n\n持续优化\n\n每次 Code review 的问题要记录下\n归纳整理，形成自己的 diamagnetic 规范体系\n新加入的成员要提前学习，提高规避\n\n之前没有做过 Code review 怎么办\n\n作为一个跳槽的理由(要求进步，想去流程规范的团队)\n\n58. 如何学习一门新语言，要考虑哪些方面考虑内容\n\n它的优势和应用场景\n语法(常量、变量、数据类型，运算符，函数等)\n内置模块和 API\n常用的第三方框架和库\n开发环境和调试工具\n线上环境和发布过程\n\n59. 你认为自己还有什么不足之处答案模板\n\n我觉得自己在 xxx 方面存在不足\n但我已经意识到，并开始学习 xxx\n我估计会在 xxx 时间把这块补齐\n\n不足不要乱说\n\n范围限定在技术方面\n非核心技术栈\n容易弥补的，后面容易翻身\n\n反转话题\n","slug":"常见面试题","date":"2022-04-10T12:13:17.000Z","categories_index":"知识点","tags_index":"面试","author_index":"LIYUNFU"},{"id":"1cfec3e13a62702637234d5f7c53b3fc","title":"Webpack配置及打包vue","content":"\n 安装webpack``webpack-cli\n\nnpm install webpack webpack-cli -D\n\n\n 配置入口出口\n\n// webpack.config.js\nmodule.exports = &#123;\n  mode: 'development',\n  entry: './src/index.js',\n  output: &#123;\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, './dist')\n  &#125;\n&#125;\n\n\n 处理sass\n\n安装sass``sass-loader``postcss-loader``css-loader``style-loader\n\n\nnpm install sass sass-loader postcss-loader css-loader style-loader -D\n\n\n添加postcss.config.js\n\nmodule.exports = &#123;\n  plugins: [\n    require('postcss-preset-env')\n  ]\n&#125;\n\n\n添加rules\n\nmodule: &#123;\n  rules: [\n    &#123;\n      test: /.(s[ac]ss|css)$/,\n      use: [\n        &#123; loader: 'style-loader' &#125;,\n        &#123; loader: 'css-loader' &#125;,\n        &#123; loader: 'postcss-loader' &#125;,\n        &#123; loader: 'sass-loader' &#125;\n      ]\n    &#125;,\n  ]\n&#125;\n\n\n 处理图片等文件资源和字体\n\n\n  v5已经可以试用asset替代file-loader url-loader``raw-loader了\n  添加rules\n\nmodule: &#123;\n  rules: [\n    &#123;\n      test: /.(png|svg|jpg|jpeg|git)$/i,\n      type: \"asset\",\n      generator: &#123;\n        filename: \"img/[name].[hash:6][ext]\"\n      &#125;,\n      parser: &#123;\n        dataUrlCondition: &#123;\n          maxSize: 100 * 1024\n        &#125;\n      &#125;\n    &#125;,\n    &#123;\n      test: /.(woff2?|eot|ttf)$/,\n      type: \"asset/resource\",\n      generator: &#123;\n        filename: \"font/[name].[hash:6][ext]\"\n      &#125;\n    &#125;\n  ]\n&#125;,\n\n\n\n 自动清理dist目录\n\nnpm install clean-webpack-plugin -D\n\nconst &#123; CleanWebpackPlugin &#125; = require('clean-webpack-plugin')\n\n  plugins: [\n    new CleanWebpackPlugin()\n  ]\n\n\n 打包html\n\nnpm install html-webpack-plugin -D\n\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nplugins:[\n  new HtmlWebpackPlugin(&#123;\n        title: 'webpack案例',\n        template: './index.html'\n  &#125;),\n]\n\n\n 自定义模板需要数据填充，需要defineplugin 已内置\n\nnew DefinePlugin(&#123;\n      BASE_URL: &#39;&quot;.&#x2F;&quot;&#39;\n&#125;),\n\n\n\n 自动复制public的内容到dist\n\nnpm install copy-webpack-plugin -D\n\n    new CopyWebpackPlugin(&#123;\n      patterns: [\n        &#123;\n          from: 'public',\n          globOptions: &#123;\n            ignore: [\n              '**/.DS_Store',\n              '**/index.html'\n            ]\n          &#125;\n        &#125;\n      ]\n    &#125;)\n\n\n 支持ES6 安装babel\n\n\n\n\n\n 安装babel\n\n\n\nnpm install babel-loader @babel/core -D\n\n\n\n 安装预设\n\n\n\nnpm install @babel/preset-env\n\n\n\n 新增rules\n\n\n\n&#123;\n  test: /.m?js$/,\n  use: &#123;\n    loader: \"babel-loader\",\n    options: &#123;\n      presets: [\n        [\"@babel/preset-env\"]\n      ]\n    &#125;\n  &#125;\n&#125;\n\n\n\n 也可以在babel.config.js配置预设\n\n\n\nmodule.exports = &#123;\n  presets: [\n    [\"@babel/preset-env\"]\n  ]\n&#125;\n\n\\\n\\\n打包vue\\\n\n 添加@vue/compiler-sfc vue-loader\n\nni @vue/compiler-sfc vue-loader -D\n\nconst &#123; VueLoaderPlugin &#125; = require('vue-loader/dist/index')\n\n\n&#123;\n  test: /.vue$/,\n  loader: \"vue-loader\"\n&#125;\n\nnew VueLoaderPlugin()\n\n\n public/index.html\n\n&lt;!DOCTYPE html>\n&lt;html lang=\"en\">\n  &lt;head>\n    &lt;meta charset=\"UTF-8\" />\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    &lt;title>hello&lt;/title>\n  &lt;/head>\n  &lt;body>\n    &lt;div id=\"app\">&lt;/div>\n  &lt;/body>\n&lt;/html>\n\n\n src/app.vue\n\n&lt;template>\n  &lt;div>\n    &lt;h1>aoo&lt;/h1>\n    &lt;p>hello&lt;/p>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\nexport default &#123;&#125;\n&lt;/script>\n\n&lt;style lang=\"scss\" scoped>&lt;/style>\n\n\n src/index.js\n\nimport &#123; createApp &#125; from 'vue/dist/vue.esm-bundler'\nimport App from './App.vue'\nimport './style.scss'\n\n// vue代码\ncreateApp(App).mount('#app')\n\n\n\\\n搭建本地服务器webpack-dev-server\n  安装\n\nnpm install webpack-dev-server -D\n\n\n  配置webpack.config.js\n\ndevServer: &#123;\n    static: &#123;\n      directory: path.join(__dirname, './')\n    &#125;,\n    compress: true,\n    hot: true,\n    //host: '0.0.0.0',  // 表示在同一个网段下所有主机\n    port: 8000,\n    open: true,\n    proxy: &#123;\n      \"/api\": &#123;\n        target: \"http://localhost:8888\",\n        pathRewrite: &#123;\n          \"^/api\": \"\"\n        &#125;,\n        secure: false,\n        changeOrigin: true   //修改源\n      &#125;\n    &#125;\n  &#125;,\n\n\n  配置package.json\n\n\"scripts\": &#123;\n    \"build\": \"webpack --watch\",\n    \"serve\": \"webpack serve\"\n  &#125;,\n\n\n  使用nr serve启动\\\n\n  开启HMR\n\n\n\n\n\n\n  修改webpack配置\n\n\n\n\n配置devServerdevServer: &#123;\n   static: &#123;\n     directory: path.join(__dirname, './')\n   &#125;,\n   compress: true,\n   hot: true,\n   //host: '0.0.0.0',  // 表示在同一个网段下所有主机\n   port: 8000,\n   open: true,\n   proxy: &#123;\n     \"/api\": &#123;\n       target: \"http://localhost:8888\",\n       pathRewrite: &#123;\n         \"^/api\": \"\"\n       &#125;,\n       secure: false,\n       changeOrigin: true   //修改源\n     &#125;\n   &#125;\n &#125;,\n\nresolve模块解析\n  extensions解析到文件时自动添加扩展名 即可以省略后缀引入\n  alias取别名\n\nresolve: &#123;\n    extensions: ['.js', '.json'],\n    alias: path.resolve(__dirname, './src/js')\n  &#125;\n\n\n\\\n分离不同环境的配置\n  webpack.comm.config.js\n\nconst path = require(\"path\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nconst &#123; DefinePlugin &#125; = require(\"webpack\");\nconst &#123; VueLoaderPlugin &#125; = require('vue-loader/dist/index');\n\nmodule.exports = &#123;\n  target: \"web\",\n  entry: \"./src/main.js\",\n  output: &#123;\n    path: path.resolve(__dirname, \"../build\"),\n    filename: \"js/bundle.js\",\n  &#125;,\n  resolve: &#123;\n    extensions: [\".js\", \".json\", \".mjs\", \".vue\", \".ts\", \".jsx\", \".tsx\"],\n    alias: &#123;\n      \"@\": path.resolve(__dirname, \"../src\"),\n      \"js\": path.resolve(__dirname, \"../src/js\")\n    &#125;\n  &#125;,\n  module: &#123;\n    rules: [\n      &#123;\n        test: /.css$/,\n        use: [\"style-loader\", \"css-loader\", \"postcss-loader\"],\n      &#125;,\n      &#123;\n        test: /.less$/,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      &#125;,\n      // &#125;,\n      &#123;\n        test: /.(jpe?g|png|gif|svg)$/,\n        type: \"asset\",\n        generator: &#123;\n          filename: \"img/[name]_[hash:6][ext]\",\n        &#125;,\n        parser: &#123;\n          dataUrlCondition: &#123;\n            maxSize: 10 * 1024,\n          &#125;,\n        &#125;,\n      &#125;,\n      &#123;\n        test: /.(eot|ttf|woff2?)$/,\n        type: \"asset/resource\",\n        generator: &#123;\n          filename: \"font/[name]_[hash:6][ext]\",\n        &#125;,\n      &#125;,\n      &#123;\n        test: /.js$/,\n        loader: \"babel-loader\"\n      &#125;,\n      &#123;\n        test: /.vue$/,\n        loader: \"vue-loader\"\n      &#125;\n    ],\n  &#125;,\n  plugins: [\n    new HtmlWebpackPlugin(&#123;\n      template: \"./public/index.html\",\n      title: \"哈哈哈哈\"\n    &#125;),\n    new DefinePlugin(&#123;\n      BASE_URL: \"'./'\",\n      __VUE_OPTIONS_API__: true,\n      __VUE_PROD_DEVTOOLS__: false\n    &#125;),\n    new VueLoaderPlugin()\n  ],\n&#125;;\n\n\n  webpack.dev.config.js\n\nconst &#123; merge &#125; = require('webpack-merge');\n\nconst commonConfig = require('./webpack.comm.config');\n\nmodule.exports = merge(commonConfig, &#123;\n  mode: \"development\",\n  devtool: \"source-map\",\n  devServer: &#123;\n    contentBase: \"./public\",\n    hot: true,\n    // host: \"0.0.0.0\",\n    port: 7777,\n    open: true,\n    // compress: true,\n    proxy: &#123;\n      \"/api\": &#123;\n        target: \"http://localhost:8888\",\n        pathRewrite: &#123;\n          \"^/api\": \"\"\n        &#125;,\n        secure: false,\n        changeOrigin: true\n      &#125;\n    &#125;\n  &#125;,\n&#125;)\n\n\n  webpack.prod.config.js\n\nconst &#123; CleanWebpackPlugin &#125; = require(\"clean-webpack-plugin\");\nconst CopyWebpackPlugin = require('copy-webpack-plugin');\nconst &#123;merge&#125; = require('webpack-merge');\n\nconst commonConfig = require('./webpack.comm.config');\n\nmodule.exports = merge(commonConfig, &#123;\n  mode: \"production\",\n  plugins: [\n    new CleanWebpackPlugin(),\n    new CopyWebpackPlugin(&#123;\n      patterns: [\n        &#123;\n          from: \"./public\",\n          globOptions: &#123;\n            ignore: [\n              \"**/index.html\"\n            ]\n          &#125;\n        &#125;\n      ]\n    &#125;),\n  ]\n&#125;)\n\n\n  package.json\n\n&quot;scripts&quot;: &#123;\n    &quot;build&quot;: &quot;webpack --config .&#x2F;config&#x2F;webpack.prod.config.js&quot;,\n    &quot;serve&quot;: &quot;webpack serve --config .&#x2F;config&#x2F;webpack.dev.config.js&quot;\n  &#125;,\n\n\\\n完整webpack配置\n  webpack.config.js\n\nconst path = require(\"path\");\nconst &#123; CleanWebpackPlugin &#125; = require(\"clean-webpack-plugin\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nconst &#123; DefinePlugin &#125; = require(\"webpack\");\nconst CopyWebpackPlugin = require('copy-webpack-plugin');\nconst &#123; VueLoaderPlugin &#125; = require('vue-loader/dist/index');\n\nmodule.exports = &#123;\n  target: \"web\",\n  mode: \"development\",\n  devtool: \"source-map\",\n  entry: \"./src/main.js\",\n  output: &#123;\n    path: path.resolve(__dirname, \"./build\"),\n    filename: \"js/bundle.js\",\n  &#125;,\n  devServer: &#123;\n    contentBase: \"./public\",\n    hot: true,\n    // host: \"0.0.0.0\",\n    port: 7777,\n    open: true,\n    // compress: true,\n    proxy: &#123;\n      \"/api\": &#123;\n        target: \"http://localhost:8888\",\n        pathRewrite: &#123;\n          \"^/api\": \"\"\n        &#125;,\n        secure: false,\n        changeOrigin: true\n      &#125;\n    &#125;\n  &#125;,\n  resolve: &#123;\n    extensions: [\".js\", \".json\", \".mjs\", \".vue\", \".ts\", \".jsx\", \".tsx\"],\n    alias: &#123;\n      \"@\": path.resolve(__dirname, \"./src\"),\n      \"js\": path.resolve(__dirname, \"./src/js\")\n    &#125;\n  &#125;,\n  module: &#123;\n    rules: [\n      &#123;\n        test: /.css$/,\n        use: [\"style-loader\", \"css-loader\", \"postcss-loader\"],\n      &#125;,\n      &#123;\n        test: /.less$/,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      &#125;,\n      // &#125;,\n      &#123;\n        test: /.(jpe?g|png|gif|svg)$/,\n        type: \"asset\",\n        generator: &#123;\n          filename: \"img/[name]_[hash:6][ext]\",\n        &#125;,\n        parser: &#123;\n          dataUrlCondition: &#123;\n            maxSize: 10 * 1024,\n          &#125;,\n        &#125;,\n      &#125;,\n      &#123;\n        test: /.(eot|ttf|woff2?)$/,\n        type: \"asset/resource\",\n        generator: &#123;\n          filename: \"font/[name]_[hash:6][ext]\",\n        &#125;,\n      &#125;,\n      &#123;\n        test: /.js$/,\n        loader: \"babel-loader\"\n      &#125;,\n      &#123;\n        test: /.vue$/,\n        loader: \"vue-loader\"\n      &#125;\n    ],\n  &#125;,\n  plugins: [\n    new CleanWebpackPlugin(),\n    new HtmlWebpackPlugin(&#123;\n      template: \"./public/index.html\",\n      title: \"哈哈哈哈\"\n    &#125;),\n    new DefinePlugin(&#123;\n      BASE_URL: \"'./'\",\n      __VUE_OPTIONS_API__: true,\n      __VUE_PROD_DEVTOOLS__: false\n    &#125;),\n    // new CopyWebpackPlugin(&#123;\n    //   patterns: [\n    //     &#123;\n    //       from: \"public\",\n    //       to: \"./\",\n    //       globOptions: &#123;\n    //         ignore: [\n    //           \"**/index.html\"\n    //         ]\n    //       &#125;\n    //     &#125;\n    //   ]\n    // &#125;),\n    new VueLoaderPlugin()\n  ],\n&#125;;\n","slug":"Webpack配置及打包vue","date":"2022-04-10T12:08:54.000Z","categories_index":"知识点","tags_index":"工程化,vue","author_index":"LIYUNFU"},{"id":"46e88b89849dba43d2b30cc4164d9a11","title":"TS基础入门","content":"类型number类型let num:number=10\nlet num:number=10.1\nlet num:number=0b110  // 二进制\nlet num:number=0o555  // 八进制\nlet num:number=0xf23  // 十六进制\n\n\n\nboolean类型let flag:boolean=true\n\n\n\nstring类型let message:string='hello world'\n\n\n\nArray类型const names:string[]=['alen','john','bob']\nconst names:Array&lt;string> =['alen','john','bob']\n\n\n\nObject类型const myInfo:object=&#123;\n  name:'john',\n  age:18\n&#125;\n\n\n我们不能从myinfo中获取数据，也不能设置数据，只用来描述一个对象\n\nSymbol类型const s1:symbol=Symbol('title')\nconst s2:symbol=Symbol('title')\n\nconst person=&#123;\n  [s1]:'程序员',\n  [s2]:'老师'\n&#125;\n\n\n\nnull和undefined类型let n:null=null\nlet u:undefined=undefined\n\n\n\nany类型\n在某些情况下，我们无法确定一个变量的类型，并且可能它会发生一些变化，这个时候我们可以用any类型\n\nlet a:any='why'\na=123\na=true\n\nconst arr:any[]=['why',18]\n\n\n\nunknown类型\n用于描述不确定的变量\n\nfunction foo():string&#123;&#125;\nfunction bar():number&#123;&#125;\n\nconst flag=true\nlet result:unknown\n\nif(flag)&#123;\n  result=foo()\n&#125;else&#123;\n  result=bar()\n&#125;\n\nif(typeof result==='string')&#123;\n  console.log(result)\n&#125;\n\n\n\nvoid类型\n指定一个函数没有返回值，可以把null和undefined赋值给void，也就是函数可以返回null或者undefined\n函数没有写任何类型，默认返回值的类型就是void\n\nfunction sum(num1:number,num2:number):void&#123;\n  console.log(num1+num2)\n&#125;\n\n\n\nnever类型\nnever表示永远不会发生值得类型\n使用never指定死循环或者抛出异常得函数得值类型\n\nfunction handleMessage(message:number|string)&#123;\n  switch(typeof message)&#123;\n    case 'string':\n      console.info('foo')\n      break\n    case 'number':\n      console.info('bar')\n      break\n    default:\n      const check:never=message\n  &#125;\n&#125;\n\n\n\ntuple类型\ntuple和数组得区别\n\n数组通常存放相同类型得元素，不同类型得元素是不推荐放在数组中\n元素每个类型都有自己特性得类型，根据索引值获取到得值可以确定对应得类型\n\nconst info:[string,number,number]=['john',18,10]\n\ntuple的应用场景\ntuple通常可以作为返回的值，在使用的时候会非常的方便\nfunction useState&lt;T>(state:T):[T,(newState:T)=>void]&#123;\n\tlet currentState=state\n  const changeState=(newState:T)=>&#123;\n    currentState=newState\n  &#125;\n\treturn [currentState,changeState]\n&#125;\n\nconst [counter,setCounter]=useState(10)\n\n函数的返回值类型function sum(num1:number , num2:number):number&#123;\n  return num1+num2\n&#125;\n\n\n\n匿名函数的参数类型\n匿名函数可以自动推断出参数的类型\n\nconst names=['abc','def','ghi']\nnames.forEach(item=>&#123;\n  console.info(item.toUpperCase())\n&#125;)\n\n\n\n对象类型function printCoordinate(point:&#123;x:number,y:number&#125;)&#123;\n  console.info('x坐标',point.x)\n  console.info('y坐标',point.y)\n&#125;\nprintCoordinate(&#123;x:10,y:30&#125;)\n\n\n\n可选类型function printCoordinate(point:&#123;x:number,y:number,z?:number&#125;)&#123;\n  console.info('x坐标',point.x)\n  console.info('y坐标',point.y)\n  if(point.z)&#123;\n    console.info('z坐标',point.z)\n  &#125;\n&#125;\nprintCoordinate(&#123;x:10,y:30&#125;)\nprintCoordinate(&#123;x:20,y:30,z:40&#125;)\n\n\n\n联合类型\n联合类型是由两个或多个其他类型组成的类型\n表示可以是这些类型中的任何一个值\n联合类型中的每一个类型被称之位联合成员\n\nfunction printId(id:number|string)&#123;\n  console.log('你的id是',id)\n&#125;\nprintId(10)\nprintId('abc')\n\n\n\n类型别名\n编写对象类型和联合类型有时需要多次在其他地方使用，可以起别名\n\ntype Point=&#123;\n  x:number,\n  y:number\n&#125;\nfunction printPoint(point:Point)&#123;\n  console.info(point.x,point.y)\n&#125;\n\nfunction sumPoint(point:Point)&#123;\n  console.info(point.x+point.y)\n&#125;\n\nprintPoint(&#123;x:20,y:30&#125;)\nsumPoint(&#123;x:20,y:20&#125;)\n\ntype ID=number|string\nfunction printId(id:ID)&#123;\n  console.info('你的id',id)\n&#125;\n\n\n\n断言类型断言as\n有时候TS无法获取具体的类型信息，这时我们就需要使用类型断言\nTS只允许类型断言转换为更具体 或不太具体 的类型版本\n\nconst el=document.getElementById('box') as HTMLImageElement\n\nel.src='图片地址'\n\n\n\n非空断言\n当我们编写可选参数的时候，执行TS的编译阶段会报错\n\n这是因为传入的message有可能是undefined\nfunction printMessage(message?:string)&#123;\n  console.info(message:toUpperCase())\n&#125;\nprintMessage('hello')\n\n\n但是，我们确定传入的参数是有值的，这个时候我们可以使用非空类型断言\n\n非空断言使用的是! 表示可以确定某个标识符是有值得，跳过TS在编译阶段对他得检测\nfunction printMessage(message?:string)&#123;\n  console.info(message!.toUpperCase())\n&#125;\n\n\n\nJS新特性可选链的使用\n可选链操作符?. \n\n作用是当对象的熟悉不存在时，会短路，直接返回undefined，如果存在，那么才会继续执行\ntype Person=&#123;\n  name:string,\n  friend?:&#123;\n    name:string,\n    age?:number,\n    girlFriend?:&#123;\n      name:string\n    &#125;\n  &#125;\n&#125;\n\nconst info:Person=&#123;\n  name:'why',\n  friend:&#123;\n    name:'kobe',\n    girlFriend:&#123;\n      name:'lily'\n    &#125;\n  &#125;\n&#125;\n\nconsole.info(info.friend?.name)\nconsole.info(info.friend?.age)\nconsole.info(info.friend?.girlFirend?.name)\n\n??和!! 的作用\n！！操作符\n\n将一个其他类型转换成boolean类型\n类似与Boolean的方式\n\n\n？？操作符\n\n空值合并操作符是一个逻辑操作符，当操作符的1左侧是null或者undefined时，返回其右侧操作数，否则返回左侧操作数\n\nconst message=\"\"\nlet flag=!!message  // true\n\nconst message='123'\nconst result=message??'321'\n\n字面量字面量类型\n多个类型联合起来，可以达到类似enum的效果\n\ntype Direction = 'TOP'|'BOTTOM'|'LEFT'|'RIGHT'\nfunction changeDeriction(direction:Direction)&#123;\n  console.info('转向',align)\n&#125;\n\nchangeDeriction('LEFT')\n\n\n\n字面量推理const info=&#123;\n  url:'https://baidu.com/abc',\n  method:'GET'\n&#125;\nfunction request(url:string,method:'GET'|'POST')&#123;\n  console.info(url,method)\n&#125;\nrequest(info.url,info.method)\n\n\n因为函数参数需要的时GET 或POST 字面量，所以不能将string赋值进去，解决方法\n\n// 方案1\nrequest(info.url,info.method as 'GET')\n\n// 方案2\nconst info=&#123;\n  url:'https://baidu.com',\n  method:'GET'\n&#125;as const\n\n\n\n函数函数类型type CalcFunc=(num1:number,num2:number)=>void\n\nfunction calc(fn:CalcFunc)&#123;\n  console.info(fn(20,30))\n&#125;\n\n\n\n参数的可选类型\n可选类型必须在必传参数的后面\n可选类型的类型是指定的类型和undefined联合\n\nfunction foo(x:number,y?:number)&#123;\n  console.info(x,y)\n&#125;\n\n\n\n默认参数function foo(x:number,y:number=6)&#123;\n  console.info(x,y)\n&#125;\nfoo(10)\n\n\n\n剩余参数function sum(...nums:number[])&#123;\n  let total=0\n  for(const num of nums)&#123;\n    total+=num\n  &#125;\n  return total\n&#125;\n\nconst result=sum(10,20,30)\n\n\n\nthis的类型\n某些时候可推导\n\nconst info=&#123;\n  name:'why',\n  asyHello()&#123;\n    console.info(this.name)\n  &#125;\n&#125;\ninfo.sayHello()\n\n\n不可推导时，需要指定\n\ntype NameType=&#123;\n  name:string\n&#125;\nfunction sayHello(this:NameType)&#123;\n  console.info(this.name)\n&#125;\n\n\n\n函数的重载function sum(a1:number,a2:number):number;\nfunction sum(a1:string,a2:string):string;\nfunction sum(a1:any,a2:any):any&#123;\n  return a1+a2\n&#125;\n\nconsole.info(sum(20,30))\nconsole.info(sum('aaa','bbb'))\n\n\n\n类类的定义class Person&#123;\n  name!:string\n  age:number\n  \n  constructor(name:string,age:number)&#123;\n    this.age=age\n  &#125;\n  \n  runing()&#123;&#125;\n&#125;\n\n\n\n如果我们不希望给属性初始化，可以使用name!:string 语法，加!\n\n类的继承class Student extends Person&#123;\n  sno:number\n  \n  constructor(name:string,age:number,sno:number)&#123;\n    super(name,age)\n    this.age=sno\n  &#125;\n  \n  studying()&#123;\n    console.info(this.name+'studying')\n  &#125;\n&#125;\n\n\n\n类的成员修饰符\npublic 任何地方可见，公有的属性或方法，默认编写的属性就是public\nprivate 修饰的是仅在同一类中可见、私有的属性或方法\nprotected 仅在自身和子类中可见\n\n只读属性readonly\n如果有一个属性我们不希望外界可以任意的修改，只希望确定值后直接使用，那么可以使用readonly\n\nclass Person&#123;\n  readonly name:string\n  \n  constructor(name:string)&#123;\n    this.name=name\n  &#125;\n&#125;\n\nconst p=new Person('why')\nconsole.info(p.name)\n\np.name='code'  // error\n\n\n\ngetters/setters\n在前面一些私有属性我们是不能直接访问的，或者某些属性我们想要监听它的获取(getter)和设置(setter)的过程，这个时候我们可以使用存取器\nclass Person&#123;\n  private _name:string\n  \n  set name(newName)&#123;\n    this._name=newName\n  &#125;\n  get name()&#123;\n    return this._name\n  &#125;\n  \n  constructor(name:string)&#123;\n    this.name=name\n  &#125;\n&#125;\n\nconst p=new Person('why')\np.name='coder'\nconsole.info(p.name)\n\n静态成员class Student&#123;\n  static time:string='20:00'\n  \n  static attendClass()&#123;\n    console.info('去上课')\n  &#125;\n&#125;\n\nconsole.info(Student.time)\nStudent.attendClass()\n\n\n\n抽象类abstract\n抽象方法，必须存在于抽象类中\n抽象类是使用abstruct声明的类\n\n特点\n抽象类是不能被实例化的(也就是不能通过new创建)\n抽象方法必须被子类实现，否则该类必须是一个抽象类\n\nabstract class Shape&#123;\n  abstract getArea():number\n&#125;\n\nclass Circle extends Shape&#123;\n  private r:number\n  constructor(r:number)&#123;\n    super()\n    this.r=r\n  &#125;\n  getArea()&#123;\n    return this.r+this.r*3.14\n  &#125;\n&#125;\n\nclass Rectangle extends Shape&#123;\n  private width:number\n  private height:number\n  \n  constructor(width:number,height:number)&#123;\n    super()\n    this.width=width\n    this.height=height\n  &#125;\n  getArea()&#123;\n    return this.width+this.height\n  &#125;\n&#125;\n\nconst circle=new Circle(10)\nconst rectangle=new Reactangle(20,30)\nfunction calcArea(shape:Shape)&#123;\n  console.info(shape.getArea())\n&#125;\ncalcArea(circle)\ncalcArea(rectangle)\n\n\n\n类的类型class Person&#123;\n  name:string\n  constructor(name:string)&#123;\n    this.name=name\n  &#125;\n  runing()&#123;\n    console.info(this.name+'running')\n  &#125;\n&#125;\n\nconst p1:Person=new Person('why')\nconst p2:Person=&#123;\n  name:'kobe',\n  runing function()&#123;\n    console.info(this.name+'runing')\n  &#125;\n&#125;\n\n\n\n接口接口的声明interfacce Point&#123;\n  x:number\n  y:number\n&#125;\n\n\n\n可选属性interface Person&#123;\n  name:string\n  age?:number\n  friend?:&#123;\n    name:string\n  &#125;\n&#125;\n\nconst person:Person=&#123;\n  name:'why',\n  age:19,\n  friend:&#123;\n    name:'kobe'\n  &#125;\n&#125;\n\nconsole.info(person.name)\nconsole.info(person.friend?.name)\n\n\n\n只读属性\n接口中也可以定义只读属性\n\n这样就意味着我们在初始化之后，这个值是不可以被修改的\n\ninterface Person&#123;\n  readonly name:string\n  age?:number\n  readonly friend?:&#123;\n    name:string\n  &#125;\n&#125;\n\nconst person:Person=&#123;\n  name:'why',\n  age:19,\n  friend:&#123;\n    name:'kobe'\n  &#125;\n&#125;\n\nperson.name='code' //不可以设置\nperson.friend=&#123;&#125;  //不可以设置\n\nif(person.friend)&#123;\n  person.friend.name='123'  // 可以\n&#125;\n\n索引类型\n前面我们使用interface来定义对象类型，这个时候其中的属性名、类型、方法都是确定的，但是有时候我们会遇到类似下面的对象\n\ninterface FrontLanguage&#123;\n  [index:number]:string\n&#125;\n\nconst frontend:FrontLanguage=&#123;\n  1:'HTML',\n  2:'CSS',\n  3:'JS'\n&#125;\n\ninterface LanguageBirth=&#123;\n  [name:string]:number\n&#125;\n\nconst language:LanguageBirth=&#123;\n  \"Java\":1999,\n  \"JavaScript\":1000,\n  \"c\":1998\n&#125;\n\n\n\n函数类型\n前面我们都是通过interface来定义对象中普通的属性和方法的，实际上它也可以用来定义函数类型\n\ninterface CalcFunc&#123;\n  (num1:number,num2:number):number\n&#125;\n\nconst add:CalcFunc=(num1,num2)=>&#123;\n  return num1+num2\n&#125;\n\nconst sub:CalcFunc=(num1,num2)=>&#123;\n  return num1-num2\n&#125;\n\n\n推荐使用类型别名来定义函数\n\ntype CalcFunc=(num1:number,num2:number)=>number\n\n\n\n接口继承\n接口和类一样是可以进行继承的，也是使用extends关键字\n\n并且我们会发现，接口是支持多继承的\n\ninterface Person&#123;\n  name:string\n  eating:()=>void\n&#125;\n\ninterface Animal&#123;\n  runing:()=>void\n&#125;\n\ninterface Student extends Person,Animal&#123;\n  sno:number\n&#125;\n\nconst stu:Student=&#123;\n  sno:100,\n  name:'why',\n  eating:function()&#123;\n    \n  &#125;,\n  runing:function()&#123;&#125;\n&#125;\n\n接口实现\n接口定义后，也是可以被类实现的\n如果被一个类实现，那么在之后需要传入接口的地方，都可以将这个类传入\n这就是面向接口开发\n\n\n\ninterface ISwim&#123;\n  swimming:()=>void\n&#125;\n\ninterface IRun&#123;\n  runing:()=>void\n&#125;\n\nclass Person implements ISwim,IRun&#123;\n  swimming()&#123;\n    console.info('swimming')\n  &#125;\n  running()&#123;\n    console.info('running')\n  &#125;\n&#125;\n\nfunction swim(swimmer:ISwim)&#123;\n  swimmer.swimming()\n&#125;\n\nconst p=new Person()\nswim(p)\n\n\n\n\n\n交叉类型\n交叉类似表示需要满足多个类型的条件\n交叉类型使用&amp;符号\n在开发中进行交叉时，通常是对对象类型进行交叉的\n\ninterface Colorful&#123;\n  color:string\n&#125;\n\ninterface IRun&#123;\n  runing:()=>void\n&#125;\n\ntype NewType=Colorful&amp;IRun\n\nconst obj:NewType=&#123;\n  color:'red',\n  running:function()&#123;&#125;\n&#125;\n\n\n\ninterface和type的区别\ninterface可以重复的对某个接口来进行属性和方法\ntype定义的是别名，别名是不能重复的\n\ninterface IPerson&#123;\n  name:string\n  running:()=>void\n&#125;\n\ninterface IPerson&#123;\n  age:number\n&#125;\n\n\n枚举枚举类型enum Direction&#123;\n  LEFT,\n  RIGHT,\n  TOP,\n  BOTTOM\n&#125;\n\nfunction turnDirection(direction:Direction)&#123;\n  switch(direction)&#123;\n    case Direction.LEFT:\n      console.info('转向左边')\n      break;\n    case Direction.RIGHT:\n      console.info('转向右边')\n      break;\n    case Direction.TOP:\n      console.info('转向上边')\n      break;\n    case Direction.BOTTOM:\n      console.info('转向下边')\n      break;\n    default:\n      const myDirection:never=direction\n  &#125;\n&#125;\n\n\n\n\n\n泛型泛型接口interface IFoo&lt;T>&#123;\n  initialValue:T,\n  valueList:T[],\n  handleValue:(value:T)=>void\n&#125;\n\nconst foo:IFoo&lt;number>=&#123;\n  initialValue:0,\n  valueList:[0,1,2],\n  handleValue:function(value:number)&#123;\n    console.info(value)\n  &#125;\n&#125;\n\ninterface IFoo&lt;T=number>&#123;\n  initialValue:T,\n  valueList:T[],\n  handleValue:(value:T)=>void\n&#125;\n\n\n\n泛型类class Point&lt;T>&#123;\n  x:T\n  y:T\n  \n  constructor(x:T,y:T)&#123;\n    this.x=x\n    this.y=y\n  &#125;\n&#125;\n\nconst p1=new Point(10,20)\nconst p2=new Point&lt;number>(10,20)\nconst p3:Point&lt;number>=new Point(10,20)\n\n\n\n泛型约束\n有时候我们希望传入的类型有某些共性，但是这些共性可能不是在同一种类型中\n\n比如string和array都是有length的，或者某些对象也是会有length属性的\n那么只要是拥有length的属性都可以作为我们的参数类型\n\ninterface ILength&#123;\n  length:number\n&#125;\n\nfunction getLength&lt;T extends ILength>(args:T)&#123;\n  return args.length\n&#125;\n\nconsole.info(getLength('abc'))\nconsole.info(getLength(['abc','cba']))\nconsole.info(getLength(&#123;length:100,name:'why'&#125;))\n\n命名空间export namespace Time&#123;\n  export function format(time:string)&#123;\n    return '2022-01-01'\n  &#125;\n&#125;\nexport namespace Price&#123;\n  export function format(price:number)&#123;\n    return '222.22'\n  &#125;\n&#125;\n\n\n\n声明当一个模块引用的是另一个模块的数据时，没有引入需要声明\n声明变量、函数、类// \nlet wName='why'\nlet mAge=19\nlet mHeight=18\n\nfunction wFoo()&#123;\n  console.info('wfoo')\n&#125;\n\nfunction wBar()&#123;\n  console.info('wBar')\n&#125;\n\nfunction Person(name,age)&#123;\n  this.name=name\n  this.age=age\n&#125;\n\ndeclare let wName:string\ndeclare let wAge:number\ndeclare let wHeight:number\n\ndeclare function wFoo():void\ndeclare function wBar():void\n\ndeclare class Person&#123;\n  name:string\n  age:number\n  \n  constructor(name:string,age:number)\n&#125;\n\n\n\n声明模块\n我们也可以声明模块，比如lodash模块默认不能使用的情况，可以自己来声明这个模块\n\ndeclare module 'lodash'&#123;\n  export function join(args:any[]):any\n&#125;\n\n\n\n","slug":"TS基础入门","date":"2022-04-08T05:52:14.000Z","categories_index":"学习记录","tags_index":"TypeScript","author_index":"LIYUNFU"},{"id":"1b47919438b08a0e56e1fac60890eb9a","title":"HTML知识点","content":"1. 如何理解HTML语义化优点\n\n对机器友好，更适合搜索引擎的爬取，有利于SEO。支持读屏软件，根据文章可以自动生成目录\n对开发者友好，增强可读性，结构更加清晰，便于维护\n\n常见语义化标签\n&lt;header>头部&lt;/header>\n&lt;nav>导航栏&lt;/nav>\n&lt;section>区块(有语义化的div)&lt;/section>\n&lt;main>主要区域&lt;/main>\n&lt;article>主要内容&lt;/article>\n&lt;aside>侧边栏&lt;/aside>\n&lt;footer>底部&lt;/footer>\n\n\n\n2. 常见块级和内联元素块级元素\n\ndiv、h1、h2、table、ul、ol、p等\n\n内联元素\n\nspan、img、input、button等\n\n3. DOCTYPE(文档类型的作用)告诉浏览器（解析器）应该以什么样的文档类型（html或xhtml）定义来解析文档\n浏览器渲染页面的两种模式（可通过document.compatMode 获取）\nCSS1Compat：标准模式(Strick mode) ，默认模式，浏览器使用W3C标准解析渲染页面，在标准模式下，浏览器以其支持的最高标准呈现页面\nBackCompat：怪异模式(Qiock mode) ，浏览器以自己的怪异模式解析渲染页面，在怪异模式中，页面以一种比较宽松的向后兼容的方式显示\n触发怪异模式的方式\n\nIE浏览器\n不写DOCTYPE\nbox-sizing:border-box \n\n4. src和href的区别\nsrc：表示对资源的引用，指向的内容会被下载并嵌入到当前标签所在位置，如js脚本，当浏览器解析到该元素时，会暂停其他资源的下载和处理，指导该资源加载、编译、执行完毕，所以一半js脚本会放在页面底部\nhref：表示超文本引用，它指向一些网络资源，建立和当前元素或当前文档的链接关系，当浏览器识别到它指向的文件时，会并行下载资源，不会停止对当前文档的处理，常用在a、link等标签上\n\n5. script标签中defer和async的区别如果没有defer或async属性，浏览器会立即加载并执行相应的脚本。它不会等待后续加载的文档元素怒，读取到就会开始加载和执行，这样就阻塞了后续文档的加载。\ndefer和async属性都是去异步加载外部的JS脚本文件，它们都不会阻塞页面的解析，区别如下：\n\n执行顺序：多个带async属性的标签，不能保证加载的顺序；多个带defer属性的标签，按照加载顺序执行\n脚本是否并行执行：async属性，并行加载，并行执行；defer属性，并行加载，等到文档所有元素解析完成之后才执行，在DOMContentLoaded触发之前\n\n6. 常用的meta标签有哪些\ncharset ，用来描述HTML文档的编码类型\n\n&lt;meta charset=\"utf-8\">\n\n\nkeywords ，页面关键词\n\n&lt;meta name=\"keywords\" content=\"关键词\" />\n\n\ndescription ，页面描述\n\n&lt;meta name=\"description\" content=\"页面描述\" />\n\n\nrefresh ，页面重定向和刷新\n\n&lt;meta http-equiv=\"refresh\" content=\"0;url=\" />\n\n\nviewport ，适配移动端，可以控制视口的大小和比例\n\n&lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1\" />\n\ncontent 参数有以下几种\n\nwidth：宽度(数值/device-width)\nheight：高度(数值/device-height)\ninitial-scale：初始缩放比例\nmaximum-scale ：最大缩放比例\nminimum-scale ：最小缩放比例\nuser-scalable：是否允许用户缩放(yes/no)\n\n\n搜索引擎索引方式\n\n&lt;meta name=\"robots\" content=\"index,follow\" />\n\ncontent 参数有以下几种\n\nall：文件将被检索，且页面上的链接可以被查询\nnone：文件不被检索，且页面上的链接不可以被查询\nindex：文件将被检索\nfollow：页面上的链接可以被查询\nnoindex：文件不被检索\nnofollow：页面上的链接不可以被查询\n\n7. HTML有哪些更新1. 语义化标签\nheader：头部\nnav：导航\nfooter：底部\narticle：文章内容\nsection：文档中的节\naside：侧边栏\n\n2. 媒体标签\naudio：音频\n\n&lt;audio src='' controls autoplay loop />\n\n属性\n\ncontrols 控制面板\nautoplay 自动播放\nloop 循环播放\n\n\nvideo：适配\n\n&lt;video src='' poster='imgs/aa.jpg' controls />\n\n属性\n\nposter 指定封面\ncontrols 控制面板\nwidth 宽度\nheight 高度\n\n\nsource标签，兼容不同的浏览器\n\n&lt;video>\n  &lt;source src='aa.flv' type='video/flv'>&lt;/source>\n  &lt;source src='aa.mp4' type='video/mp4'>&lt;/source>\n&lt;/video>\n\n3. 表单表单类型\n\nemail 能够验证当前输入的邮箱地址是否合法\nurl 验证url\nnumber 只能输入数字，自带点击增加减小箭头，max属性设置为最大值，min设置为最小值，value为默认值\nsearch 可以一键删除输入内容\nrange 可以提供一个范围，其中可以设置max和min以及value，其中value属性可以设置为默认值\ncolor 提供一个颜色拾取器\ntime 时间选择器\ndata 日期选择器\ndatatime 时间和日期\ndatatime-local 日期时间控件\nweek 周控件\nmonth 月控件\n\n表单属性\n\nplaceholder 提示信息\nautofocus 自动获取焦点\nautocomplete=&quot;on&quot;或autocomplete=&quot;off&quot; 必须有name属性，并提交过，可以自动填写\nrequired 不能为空\npattern&quot;&quot;里面写入想要的正则模式，例如手机号pattern=&quot;^(+86)?\\d&#123;10&#125;$&quot; \nmutiple 可以选择多个我呢见或者多个邮箱\nform=form表单的ID\n\n表单事件\n\n oninput 每当input里的输入库内容发生变化都会触发此事件\noninvalid 当验证不通过时触发此事件\n\n4. 进度条、度量器\nprogress 标签用来表示任务的进入，max表示最大，value表示已完成多少\n\nmeter 属性：用来显示剩余容量或剩余库存\n\nhigh/low 规定被视作高/低的范围\nmax/min 规定最大/小值\nvalue 规定当前度量值\n\n设置规则：min &lt; low &lt; hight &lt; max\n\n\n5. DOM查询操作\ndocument.querySelector()\ndocument.querySelectorAll()\n\n6. Web存储\nlocalStorage - 没有时间限制的数据存储\nsessionStorage - 针对一个session的数据存储\n\n7. 其他\n拖放：拖放是一种常见的特性，即抓取对象以后拖到另一个位置，设置元素可拖放\n\n&lt;img draggable=\"true\" />\n\n\n画布：canvas元素使用JS在网页上绘制图像。画布是一个矩形区域，可以控制其每一像素。canvas拥有多种绘制路径、矩形、字符以及添加图像的方法\n\n&lt;canvas id=\"myCanvas\" width=\"200\" height=\"100\">&lt;/canvas>\n\n\nSVG：可伸缩矢量图形，用来定义用于网络的基于矢量的图形，使用XML格式定义图形，图像的放大或改变尺寸的情况下其图像质量不会有损失，它是万维网联盟的标准\n地理位置：Geolocation用于定位用户的位置\n\n移除\n纯表现的元素：basefont，big，center，font，s，strike，tt，u\n对可用性产生负面影响的元素：frame，frameset，noframes\n\n8. img的srcset属性的作用响应式页面中经常用到根据屏幕密度设置不同的图片，这时就用到了img标签的srcset属性，srcset属性用于设置不同屏幕密度下，img会自动加载不同的图片，用法如下\n&lt;img src=\"images-128.png\" srcset=\"images-256.png 2x\" />\n\n&lt;img src=\"image-128.png\"\n     srcset=\"image-128.png 128w, image-256.png 256w, image-512.png 512w\"\n     sizes=\"(max-width: 360px) 340px, 128px\" />\n\n\n\n其中srcset指定图片的地址和对应的图片质量，sizes 设置临界点，可以按需加载\n\n9. 说一下web workerweb worker为web内容在后台线程中运行脚本提供了一种简单的方法，线程可以执行任务而不干扰用户界面\n10. HTML5的离线存储怎么使用，它的工作原理是什么离线存储指的是：在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件\n原理： HTML5的离线存储是基于一个新建的.appcache 文件的缓存机制，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储下来，之后网络处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示\n使用方法\n\n创建一个和html同名的manifest文件，然后在页面头部加入manifest属性\n\n&lt;html lang=\"en\" manifest=\"index.manifest\">\n\n\n在cache.manifest 文件中编写需要离线存储的资源\n\nCACHE MANIFEST\n    #v0.11\n    CACHE:\n    js/app.js\n    css/style.css\n    NETWORK:\n    resourse/logo.png\n    FALLBACK:\n    / /offline.html\n\n\n\nCACHE 表示需要离线存储的资源列表，由于包含manifest文件的页面将被自动离线存储，所以不需要把页面自身页列出来\nNETWORK 表示在它下面列出来的资源只有在在线的情况下才能访问，它们不会被离线存储，所以在离线情况下无法使用这些资源，不过，如果在CACHE和NETWORK中有一个相同的资源，那么这个资源还是会被离线存储，也就是说CACHE的优先级更高\nFALLBACK 表示如果访问第一个资源失败，那么就使用第二个资源来替换他，比如上面这个文件表示的就是如果访问根目录下任何一个资源失败了，那么就去访问offline.html \n\n\n在离线状态时，操作window.applicationCache 进行离线缓存的操作\n\n如何更新缓存\n\n更新manifest文件\n通过javascript操作\n清除浏览器缓存\n\n注意事项\n\n浏览器对缓存数据的容量限制可能不一样（某些浏览器设置的限制是每个站点5MD）\n如果manifest文件，或者内部列举的某一个文件不能正常下载，整个更新过程都将失败，浏览器继续全部使用老的缓存\n引用manifest的html必须与manifest文件同源，在同一个域下\nFALLBACK中的资源必须和manifest文件同源\n当一个资源被缓存后，该浏览器直接请求这个绝对路径也会访问缓存中的资源\n站点中的其他页面即使没有设置manifest属性，请求的资源如果在缓存中也从缓存中访问\n当manifest文件发生改变时，资源请求本身也会触发更新\n\n11. 浏览器是如何对HTML5的离线存储资源进行管理和加载\n在线的情况下：浏览器发i西安html头部有manifest属性，它会请求manifest文件，如果是第一次访问页面，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线缓存。如果已经访问过页面并且资源已经进行离线缓存，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件和旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，就会重新下载文件中的资源并进行离线存储\n离线的情况下浏览器会直接使用离线存储的资源\n\n12. title与h1的区别、b与strong的区别、i与em的区别\nstrong标签有语义，起到加强语气强调的效果，b标签没有语义，只是加粗标签，搜索引擎更侧重strong\ntitle属性没有明确意义只表示标题，H1则表示层次明确的标题，对页面信息的抓取有很大的影响\ni内容展示位斜体，em表示强调的文本\n\n13. iframe有哪些优点优点\n\n用来加载速度较慢的内容\n可以使脚本并行下载\n可以实现跨子域通信\n\n缺点\n\niframe会阻塞主页面的onload事件\n无法被一些搜索引擎识别\n会产生很多页面，不易管理\n\n14. label的作用是什么，如何使用用来定义表单控件的关系：点击label时，自动将焦点定位到与label相关的表单控件上\n\n使用方法  for控件的id  或者直接包裹\n\n&lt;label for=\"mobile\">Phone&lt;/label>\n&lt;input type=\"text\" id=\"mobile\" />\n\n&lt;label>\nPhone:&lt;input  type=\"text\" />\n&lt;/label>\n\n\n\n15. Canvas和SVG的区别SVG 可伸缩矢量图形，是基于XML描述的2D图形的语言，SVG基于XML就意味着SVG DOM中的每个元素都是可用的，可以为某个元素附加JS事件处理器，在SVG中，每个被绘制的图形均被视作对象，如果SVG对象的属性发生变化，那么浏览器能够自动重现图形\n特点\n\n不依赖分辨率\n支持事件处理器\n最适合带有大型渲染区域的应用程序(比如谷歌地图)\n复杂度高会减慢渲染速度(任何过度使用DOM的应用都不快)\n不适合游戏应用\n\nCanvas 画布，通过JS来绘制2D图形，是逐像素进行渲染的，其位置发生改变，就会重新进行渲染\n特点\n\n依赖分辨率\n不支持事件处理器\n弱的文本渲染能力\n能够以.png或.jpg格式保存结果图像\n最适合图像密集型的游戏，其中的许多对象会被反复重绘\n\n16. head标签有什么用，其中什么标签必不可少标签用于定义文档的头部，它是所有头部元素的容器，head中的元素可以引用脚本、指示浏览器在哪里找到样式表、提供元信息等\n可在head中用的标签\n\n&lt;base&gt;\n&lt;link&gt;\n&lt;meta&gt;\n&lt;script&gt;\n&lt;style&gt;\n&lt;title&gt; 必需\n\n17. 浏览器乱码的原因是什么，如何解决产生乱码的原因：\n\n网页源代码是gbk 的编码，而内容中的中文字是utf-8 编码的，编码不匹配乱码\nhtml 页面编码是gbk ，而程序从数据库中调出呈现是utf-8编码的内容也会造成乱码\n浏览器不能自动检测网页编码，造成乱码\n\n解决办法：\n\n使用软件编辑HTML网页内容\n使用网页涉资编码类型，如果数据库和网页不匹配编码，可以对中文进行转码，使用转码函数\n如果浏览器浏览时候出现网页乱码，在浏览器中找到转换编码的菜单进行转换\n\n18. 渐进增强和优雅降级之间的区别**渐进增强(progressice enhancement)**主要针对低版本的浏览器进行页面重构，保证基本的功能的情况下，再针对高级浏览器进行效果、交互等方面的改进和追加功能，以达到更好的用户体验\n**优雅降级(graceful degradation)**一开始就构建完整的功能，然后再针对低版本的浏览器进行兼容\n19. 说一下HTML5 drag API\ndragstart 事件主体是被拖放元素，在开始拖放被拖放元素时触发\ndrag 事件主体是被拖放元素，在正在拖放被拖放元素时触发\ndragenter 事件主体时目标元素，在被拖放元素进入某元素时触发\ndragover 事件主体是目标元素，在被拖放元素进入某元素时触发\ndragleave 事件主体时目标元素，在被拖放元素移出目标元素时触发\ndrop 事件主体时目标元素，在目标元素完全接受被拖放元素时触发\ndragend 事件主体是被拖放元素，在整个拖放操作结束时触发\n\n20. 网页开发中，如何实现图片的懒加载描述：懒加载，顾名思义，在当前网页，滑动页面到能看到图片的时候再加载图片\n直接将懒加载这事交给浏览器做，为图片加一个属性即可\n&lt;img src=\"kity.png\" loading=\"lazy\" />\n\n\n\n21. 浏览器中如何实现剪切板复制内容的功能描述：在一些博客系统中，可以复制代码，它是怎么实现的\n目前最为推荐的方式是用第三方库Clipboard API进行实现feross/clipboard-copy: Lightweight copy to clipboard for the web (github.com)\nnavigator.clipboard.writeText(text)\n\n复制\ndocument.execCommand(\"copy\")\n\n\n\n22. localhost:3000和localhost:5000的cookie信息是否共享根据同源策略，cookie是区分端口的，但是浏览器实现来说，cookie 区分域，而不区分端口，也就是说同一个ip下的cookie是共享的\n23. 什么是CSRF攻击CSRF跨站请求伪造，又称one-click-attack 顾名思义，通过恶意引导用户一次点击劫持cookie进行攻击，是一种挟制用户在当前已登录的 Web 应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。\n\n使用JSON API，当进行CSRF攻击时，请求体通过&lt;form&gt; 构建，请求头application/www-form-urlencoded 它难以发送JSON数据被服务器所理解\nCSRF Token，生成一个随机的token，切勿放在cookie中，每次请求手动携带该token进行校验\nSameSite Cookie，设置为Lax或者Strict，禁止发送第三方Cookie\n\n24. 在浏览器中如何监听剪切板中内容通过Clipboard API 可以获取剪切板中内容，但需要获取到clipboard-read 权限\n// 是否有读取权限\nconst result=await navigator.permission.query(&#123;name:'clipboard-read'&#125;)\n\n// 获取剪切板内容\nconst text=await navigator.clipboard.readText()\n\n\n\n25. 如何把json数据转化为demo.json并下载文件json视为字符串，可以使用DataURL 进行下载，Text-&gt;DataURL \n除了使用DataURL，还可以转化为Object URL进行下载\nText - &gt; Blob -&gt; Object URL \n可以把以下代码直接粘贴到控制台下载文件\nfunction download(url, name) &#123;\n  const a = document.createElement(\"a\");\n  a.download = name;\n  a.rel = \"noopener\";\n  a.href = url;\n  // 触发模拟点击\n  a.dispatchEvent(new MouseEvent(\"click\"));\n  // 或者 a.click()\n&#125;\n\nconst json = &#123;\n  a: 3,\n  b: 4,\n  c: 5,\n&#125;;\nconst str = JSON.stringify(json, null, 2);\n\n// 方案一：Text -> DataURL\nconst dataUrl = `data:,$&#123;str&#125;`;\ndownload(dataUrl, \"demo.json\");\n\n// 方案二：Text -> Blob -> ObjectURL\nconst url = URL.createObjectURL(new Blob(str.split(\"\")));\ndownload(url, \"demo1.json\");\n\n总结\n\n模拟下载，可以通过新建一个&lt;a href=&quot;url&quot; download&gt; 标签并设置url 即download 属性来下载\n可以通过把json 转化为dataurl 来构造URL\n可以通过把json转化为Blob 再转化为ObjectURL 来构造URL\n\n26. 介绍requestIdleCallback及使用场景requestIdleCallback 维护一个队列，将在浏览器空闲时间内执行，属于后台任务API，可以使用setTimeout 来模拟实现\nconst rIC = window[\"requestIdleCallback\"] || ((f) => setTimeout(f, 1));\n\n在rIC 中执行任务时需要注意以下几点：\n\n执行重计算而非紧急任务\n空闲回调任务时间应该小于50ms，最好更少\n空闲回调中不要操作DOM，因为它本来就是利用的重排重绘后的空闲时间，重新操作DOM又会造成重绘重排\n\nReact的时间分片便是基于类似rIC而实现，然而因为rIC的见同行及50ms流畅问题，React自制了一个实现scheduler \n27. 如何计算白屏时间和首屏时间白屏时间: window.performance.timing.domLoading - window.performance.timing.navigationStart\n首屏时间: window.performance.timing.domInteractive - window.performance.timing.navigationStart\n28. 什么是重排重绘，如何减少重排重绘重排（Reflow）：元素的位置发生变动时发生重排，也叫回流\n重绘（Repaint）：元素的样式发生变动，位置不变。\n重排必定造成重绘，有以下方法\n\n使用DocumentFragment 进行DOM操作，不过现在原生操作很少，基本用不到\nCSS样式尽量批量修改\n避免使用table布局\n为元素提前设置好宽高，不因多次渲染改变位置\n\n29.  什么时Data URLData URL时将图片转换为base64直接嵌入到网页中，使用&lt;img src=&quot;data:[MIME type];base 64&quot; /&gt; 这种方式引用图片，不需要再发送请求获取图片，缺点\n\nbase64编码后的图片会比原来的体积大三分之一左右\nData URL形式的图片不会缓存下来，每次访问页面都要被下载一次，可以将Data URL写入到CSS文件中随着CSS被缓存下来\n\n30. textarea如何禁止拉伸使用CSS眼视光hi可以避免拉伸\ntextarea&#123;\n  resize:none\n&#125;\n\n\n\n31. 在Canvas中如何处理跨域的图片img.setAttribute('crossOrigin','anonymous')\n\n\n\n32. 如何取消请求的发送\nXHR使用xhr.abort() \n\nconst xhr=new XMLHttpRequest(),method=\"GET\",url=\"https://www.baidu.com\";\nxhr.open(method,url,true)\n\nxhr.end()\n\n// 取消发送请求\nxhr.abort()\n\n\nfetch使用AbortController\n\nconst controller = new AbortController()\nconst signal = controller.signal\n\nconst downloadBtn = document.querySelector('.download');\nconst abortBtn = document.querySelector('.abort');\n\ndownloadBtn.addEventListener('click', fetchVideo);\n\n// 点击取消按钮时，取消请求的发送\nabortBtn.addEventListener('click', function() &#123;\n  controller.abort();\n  console.log('Download aborted');\n&#125;);\n\nfunction fetchVideo() &#123;\n  ...\n  fetch(url, &#123;signal&#125;).then(function(response) &#123;\n    ...\n  &#125;).catch(function(e) &#123;\n   // 请求被取消之后将会得到一个 AbortError\n    reports.textContent = 'Download error: ' + e.message;\n  &#125;)\n&#125;\n\n\nAxios使用cancelToken 取消\n\nconst CancelToken=axios.CancelToken\nconst source=CancelToken.source()\n\naxios\n  .get('/user/1234',&#123;\n  cancelToken:souce.token\n&#125;)\n\t.catch(function(thrown)&#123;\n  if(axios.isCancel(thrown))&#123;\n    console.log('request canceled',thrown.message)\n  &#125;else&#123;\n    // handle error\n  &#125;\n&#125;)\n\naxios.post(\n\t'/user/123',\n  &#123;\n    name:'new name'\n  &#125;,\n  &#123;\n    cancelToken:source.token\n  &#125;\n)\n\nsource.cancel('operation canceled by the user')\n\n\n","slug":"HTML知识点","date":"2022-03-15T01:13:09.000Z","categories_index":"知识点","tags_index":"HTML,面试","author_index":"LIYUNFU"},{"id":"50ba5796497ecb4fe11ec2fa6f32ff0a","title":"常用算法","content":"题目1 - 将一个数组旋转k步\n输入数组[1,2,3,4,5,6,7]\n\nk=3,即旋转3步\n\n输出[5,6,7,1,2,3,4]\n\n\nconst arr = [1, 2, 3, 4, 5, 6, 7]\nfunction rotate2(arr, k) &#123;\n  const length = arr.length\n  if (!k || length === 0) return arr\n  const step = Math.abs(k % length)   // abs 取绝对值\n\n  const part1 = arr.slice(-step)\n  const part2 = arr.slice(0, length - step)\n  const part3 = [...part1, ...part2]\n  return part3\n&#125;\n\nconst arr2 = rotate2(arr, 3)\nconsole.log(arr2)\n\n\n\n题目2 - 快速排序\n用JavaScipt 实现快速排序，并说明时间复杂度\n\n找到中间位置midValue\n\n遍历数组，小于midValue放在left，否则放在right\n\n继续递归，最后concat拼接，返回\n\n\nfunction quickSort(arr:number[]):number[]&#123;\n  const length=arr.length\n  if(length===0)return arr\n  \n  const midIndex=Math.floor(length/2)\n  const midValue=arr.slice(midIndex,midIndex+1)[0]\n  \n  const left:number[]=[]\n  const right:number[]=[]\n  \n  for(let i=0;i&lt;length;i++)&#123;\n    if(i!==midIndex)&#123;\n      const n=arr[i]\n      if(n&lt;midValue)&#123;\n        // 小于midValue 则放在left\n        left.push(n)\n      &#125;else&#123;\n        // 大于 midValue 则放在right\n        right.push(n)\n      &#125;\n    &#125;\n  &#125;\n  \n  return quickSort(left).concat([midValue],quickSort(right))\n&#125;\n\nconst arr=[1,6,2,7,3,8,4,9,5]\nconsole.log(quickSort(arr))\n\n\n\n题目3 - 判断字符串是否括号匹配\n一个字符串s可能包含{} () [] 三种括号\n\n判断s是否是括号匹配的\n\n如(a{b}c)匹配，而{a(b或{a(b}c) 就不匹配\n\n\nfunction isMatch(left, right) &#123;\n  if (left === '[' &amp;&amp; right == ']') return true\n  if (left === '&#123;' &amp;&amp; right == '&#125;') return true\n  if (left === '(' &amp;&amp; right == ')') return true\n  return false\n&#125;\nfunction matchBracket(str) &#123;\n  const length = str.length\n  if (length === 0) return true\n\n  const stack = []\n\n  const leftSymbols = '&#123;[('\n  const rightSymbols = '&#125;])'\n\n  for (let i = 0; i &lt; length; i++) &#123;\n    const s = str[i]\n    if (leftSymbols.includes(s)) &#123;\n      // 左括号\n      stack.push(s)\n    &#125; else if (rightSymbols.includes(s)) &#123;\n      // 右括号，判断栈顶\n      console.log('右括号' + s)\n      const top = stack[stack.length - 1]\n      if (isMatch(top, s)) &#123;\n        stack.pop()\n      &#125; else &#123;\n        return false\n      &#125;\n    &#125;\n  &#125;\n  return stack.length === 0\n&#125;\n\nconst str = '&#123;a(b[c])&#125;'\nconsole.log(matchBracket(str))\n\n\n\n题目4 - 反转单向链表\n输入一个单向链表，输出它的反转(头变尾，尾变头)\n\ninterface ILinkListNode &#123;\n  value: number,\n  next?: ILinkListNode\n&#125;\n // 反转链表\nfunction reverseLinkList(listNode: ILinkListNode): ILinkListNode &#123;\n  // 定义三个指针\n  let prevNode: ILinkListNode | undefined = undefined\n  let curNode: ILinkListNode | undefined = undefined\n  let nextNode: ILinkListNode | undefined = listNode\n\n  // 以nextNode为主 遍历链表\n  while (nextNode) &#123;\n    // 第一个元素 删掉next 防止循环引用\n    if (curNode &amp;&amp; !prevNode) &#123;\n      delete curNode.next\n    &#125;\n\n    // 反转指针\n    if (curNode &amp;&amp; prevNode) &#123;\n      curNode.next = prevNode\n    &#125;\n\n    // 整体向后移动\n    prevNode = curNode\n    curNode = nextNode\n    nextNode = nextNode?.next\n  &#125;\n\n  // 当nextNode空时\n  curNode!.next = prevNode\n\n  return curNode\n&#125;\n  // 创建链表\nfunction createLinkList(arr: number[]): ILinkListNode &#123;\n  const length = arr.length\n  if (length === 0) throw new Error('arr is empty')\n\n  let curNode: ILinkListNode = &#123;\n    value: arr[length - 1]\n  &#125;\n  for (let i = length - 2; i >= 0; i--) &#123;\n    curNode = &#123;\n      value: arr[i],\n      next: curNode\n    &#125;\n  &#125;\n\n  return curNode\n&#125;\n\nconst arr = [100, 200, 300, 400, 500]\nconst list = createLinkList(arr)\nconsole.log(list)\n\nconst list1 = reverseLinkList(list)\nconsole.log(list1)\n\n\n\n题目5 - 用链表实现队列interface ILinkListNode &#123;\n  value: number,\n  next?: ILinkListNode\n&#125;\n\nclass MyQueue &#123;\n  private head: ILinkListNode | null = null\n  private tail: ILinkListNode | null = null\n  private len = 0\n  // 入队 在tail位置\n  add(n: number) &#123;\n    const newNode: ILinkListNode = &#123;\n      value: n,\n      next: null\n    &#125;\n    // 处理head\n    if (this.head === null) &#123;\n      this.head = newNode\n    &#125;\n\n    // 处理tail\n    const tailNode = this.tail\n    if (tailNode) &#123;\n      tailNode.next = newNode\n    &#125;\n    this.tail = newNode\n\n    // 记录长度\n    this.len++\n  &#125;\n  // 出队 在head位置\n  delete(): number | null &#123;\n    const headNode = this.head\n    if (headNode == null) return null\n    if (this.len &lt;= 0) return null\n\n    // 取值\n    const value = headNode.value\n\n    //处理head\n    this.head = headNode.next\n\n    // 记录长度\n    this.len--\n\n    return value\n  &#125;\n  get length(): number &#123;\n    // length要单独存储 不能遍历链表来存取 \n    return this.len\n  &#125;\n&#125;\n\nconst q = new MyQueue()\n\nq.add(100)\nq.add(200)\nq.add(300)\nconsole.log('length1', q.length)\nconsole.log(q.delete())\n\n\n\n题目6 - 用两个栈实现一个队列class MyQueue &#123;\n  private stack1: number[] = []\n  private stack2: number[] = []\n\n  /**\n   * 入队\n   */\n  add(n: number) &#123;\n    this.stack1.push(n)\n  &#125;\n\n  /**\n   * 出队\n   */\n  delete(): number | null &#123;\n    let res\n\n    const stack1 = this.stack1\n    const stack2 = this.stack2\n\n    // 将stack1 所有元素移动到stack2中\n    while (stack1.length) &#123;\n      const n = stack1.pop()\n      if (n != null) &#123;\n        stack2.push(n)\n      &#125;\n    &#125;\n\n    // stack2 pop\n    res = stack2.pop()\n\n    // 将stack2所有元素还给stack1\n    while (stack2.length) &#123;\n      const n = stack2.pop()\n      if (n != null) &#123;\n        stack1.push(n)\n      &#125;\n    &#125;\n    return res || null\n  &#125;\n  get length(): number &#123;\n    return this.stack1.length\n  &#125;\n&#125;\n\n\n\n题目7 - 用JS实现二分查找\n递归 - 代码逻辑更加清晰\n\n非递归 - 性能更好\n\n时间复杂度O(logn)\n\n循环查找\n\n凡有序必二分，凡二分，时间复杂度必包含O(logn)\n\n\nfunction binarySearch1(arr: number[], target: number): number &#123;\n  const length = arr.length\n  if (length === 0) return -1\n\n  let startIndex = 0  // 开始位置\n  let endIndex = length - 1  // 结束位置\n\n  while (startIndex &lt;= endIndex) &#123;\n    const midIndex = Math.floor((startIndex + endIndex) / 2)\n    const midValue = arr[midIndex]\n    if (target &lt; midValue) &#123;\n      // 目标值较小 则继续在左侧查找\n      endIndex = midIndex - 1\n    &#125; else if (target > midValue) &#123;\n      // 目标值较大，则继续在右侧查找\n      startIndex = midIndex + 1\n    &#125; else &#123;\n      // 相等 返回\n      return midIndex\n    &#125;\n  &#125;\n  return -1\n&#125;\n\n// 功能测试\nconst nums = [10, 20, 30, 40, 50, 60]\nconsole.log(binarySearch1(nums, 50))\n\n\n递归查找\n\nfunction binarySearch2(arr: number[], target: number, startIndex?: number, endIndex?: number) &#123;\n  const length = arr.length\n  if (length === 0) return -1\n\n  // 开始和结束的范围\n  if (startIndex == null) startIndex = 0\n  if (endIndex == null) endIndex = length - 1\n\n  // 如果start 和 end相遇，则结束\n  if (startIndex > endIndex) return -1\n\n  // 中间位置\n  const midIndex = Math.floor((startIndex + endIndex) / 2)\n  const midValue = arr[midIndex]\n\n  if (target &lt; midValue) &#123;\n    // 目标值较小 则继续在左侧查找\n    return binarySearch2(arr, target, startIndex, midIndex - 1)\n  &#125; else if (target > midValue) &#123;\n    // 目标值较大 则继续在右侧查找\n    return binarySearch2(arr, target, midIndex + 1, endIndex)\n  &#125; else &#123;\n    // 相等 返回\n    return midIndex\n  &#125;\n&#125;\n\n\n\n题目8 - 给一个数组，找出其中和为n的两个元素\n有一个递增的数组[1,2,4,7,11,15] 和一个n=15\n数组中有两个数，和是n，即4+11===15\n\nfunction findTowNumber(arr: number[], n: number): number[] &#123;\n  const res: number[] = []\n\n  const length = arr.length\n\n  let i = 0  // 头\n  let j = length - 1  //尾\n\n  while (i &lt; j) &#123;\n    const n1 = arr[i]\n    const n2 = arr[j]\n    const sum = n1 + n2\n\n    if (sum > n) &#123;\n      // sum大于n 则j要向前移动\n      j--\n    &#125; else if (sum &lt; n) &#123;\n      // sum小于n 则i要向后移动\n      i++\n    &#125; else &#123;\n      // 相等\n      res.push(n1)\n      res.push(n2)\n      break\n    &#125;\n  &#125;\n  return res\n&#125;\n\nconst nums = [1, 2, 4, 7, 11, 15]\nconsole.info(findTowNumber(nums, 15))\n\n\n\n题目9 - 求二叉搜索树的第k小值\n\n二叉搜索树BST即左边小于根，右边大于根\n\ninterface ITreeNode &#123;\n  value: number\n  left: ITreeNode | null\n  right: ITreeNode | null\n&#125;\n\nconst arr: number[] = []\nfunction preOrderTraverse(node: ITreeNode) &#123;\n  if (node == null) return\n  // console.log(node.value)\n  arr.push(node.value)\n  preOrderTraverse(node.left)\n  preOrderTraverse(node.right)\n&#125;\n\nfunction inOrderTraverse(node: ITreeNode | null) &#123;\n  if (node == null) return\n  inOrderTraverse(node.left)\n  // console.log(node.value)\n  arr.push(node.value)\n  inOrderTraverse(node.right)\n&#125;\n\nfunction postOrderTraverse(node: ITreeNode | null) &#123;\n  if (node == null) return\n  postOrderTraverse(node.left)\n  postOrderTraverse(node.right)\n  // console.log(node.value)\n  arr.push(node.value)\n&#125;\n\nfunction getKthValue(node: ITreeNode, k: number): number | null &#123;\n  inOrderTraverse(node)\n  console.log(arr)\n\n  return arr[k - 1] | null\n&#125;\nconst tree: ITreeNode = &#123;\n  value: 5,\n  left: &#123;\n    value: 3,\n    left: &#123;\n      value: 2,\n      left: null,\n      right: null\n    &#125;,\n    right: &#123;\n      value: 4,\n      left: null,\n      right: null\n    &#125;\n  &#125;,\n  right: &#123;\n    value: 7,\n    left: &#123;\n      value: 6,\n      left: null,\n      right: null\n    &#125;,\n    right: &#123;\n      value: 8,\n      left: null,\n      right: null\n    &#125;\n  &#125;\n&#125;\n\nconsole.log(getKthValue(tree, 3))\n\n\n\n题目10 - 求斐波那契数列的弟n值\n用JS计算斐波那契数列的第n个值\n注意时间复杂度\n\nfunction fibonacci(n:number):number&#123;\n  if(n&lt;=0) return 0\n  if(n===1)return 1\n  \n  let n1=0\n  let n2=1\n  let res=0\n  \n  for(let i=2;i&lt;=n;i++)&#123;\n    res=n1+n2\n    \n    n1=n2\n    n2=res\n  &#125;\n  return res\n&#125;\n\nconsole.log(fibonacci(3))\n\n\n\n题目11 - 青蛙跳台阶\n一只青蛙，一次可跳1级，也可跳2级\n问：青蛙跳到n级台阶，总共有多少种方式\n\nvar numWays = function(n) &#123;\n    if(n&lt;=0)return 1\n    if(n===1) return 1\n    \n    let n1=1\n    let n2=1\n    let res=0\n\n    for(let i=2;i&lt;=n;i++)&#123;\n        res=(n1+n2)%(1e9+7)\n        n1=n2\n        n2=res\n    &#125;\n    return res\n&#125;;\n\n\n\n题目12 - 将数组中的0移动到末尾\n如输入[1,0,3,0,11,0] ， 输出[1,3,11,0,0,0]\n\n只移动0，其他顺序不变\n\n必须在原数组进行操作\n\n\nfunction moveZero(arr:number[]):void&#123;\n  const length=arr.length\n  if(length===0) return\n  \n  let i\n  j=-1  //指向第一个0\n  for(i=0;i&lt;length;i++)&#123;\n    if(arr[i]===0)&#123;\n      // 第一个0\n      if(j&lt;0)&#123;\n        j=i\n      &#125;\n    &#125;\n    if(arr[i]!==0&amp;&amp;j>=0)&#123;\n      const n=arr[i]\n      arr[i]=arr[j]\n      arr[j]=n\n      \n      j++\n    &#125;\n  &#125;\n&#125;\n\nconst arr=[1,0,1,1,4,5,0,1,0,0,0,1,2]\nmoveZero(arr)\nconsole.log(arr)\n\n\n\n题目13 - 求字符串中连续最多的字符，以及次数\n如，输入’abbccddeeee1234’ ,计算得出\n连续最多的字符是’e’ 4次\n\n双指针\n\n定义指针i和j，j不动，i继续移动\n\n如果i和 j的值一直相等，则i继续移动\n\n直到i和j的值不相等，记录处理，让j追上i，继续第一步\n\n\nfunction findContinuousChar(str:string):IRes&#123;\n  const res:IRes=&#123;\n    char:'',\n    length:0\n  &#125;\n  \n  const length=str.length\n  if(length===0)return res\n  \n  let tempLength=0  // 临时记录当前连续字符的长度\n  let i=0\n  let j=0\n  \n  for(;i&lt;length;i++)&#123;\n    if(str[i]===str[j])&#123;\n      tempLength++\n    &#125;\n    \n    if(str[i]!==str[j]||i===length-1)&#123;\n      // 不相等 或者i到了字符串的末尾\n      if(tempLength>res.length)&#123;\n        res.char=str[j]\n        res.length=tempLength\n      &#125;\n      tempLength=0  //reset\n      \n      if(i&lt;length-1)&#123;\n        j=i  //让j追上 i\n        i-- // 细节\n      &#125;\n    &#125;\n  &#125;\n  \n  return res\n&#125;\n\nconsole.log(findContinuousChar(\"abaabbbbccddee\"))\n\n\n\n题目14 - 获取1-10000之前所有的对称数(回文数)function findPalindromeNumber(max:number):number[]&#123;\n  const res:number[]=[]\n  if(max&lt;=0)return res\n  \n  for(let i=1;i&lt;=max;i++)&#123;\n    let n=i\n    let rev=0  //存储反转数\n    \n    // 生成反转数\n    while(n>0)&#123;\n      rev=rev*10+n%10\n      n=Math.floor(n/10)\n    &#125;\n    if(i===rev)res.push(i)\n  &#125;\n  return res\n&#125;\n\nconsole.log(findPalindromeNumber(200))\n\n/*\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191]\n*/\n\n\n\n题目15 - 高效的英文单词前缀匹配\n有一个英文单词库（数组），里面有几十万个英文单词\n\n输入一个字符串，快速判断是不是某一个单词的前缀\n\n（说明思路，不用写代码）\n\n\n实现方法\n\n将二十六个字母拆分匹配成一个26叉树  -  这一步很长时间才更新一次，不算进算法中\n\n使用hash key查找即可，例如str.a.c.b.c.d\n\n有明确范围的数据(如26个英文字母)，考虑使用哈希表(对象)\n\n\n题目16 - 数字千分位格式化\n将数字千分位格式化，输出字符串\n\n如输入数字12050100，输出字符串12，050，100\n\n（注意：逆序判断）\n\n\n常见思路\n\n使用数组\n\nfunction format(n: number): string &#123;\n    n = Math.floor(n) // 只考虑整数\n\n    const s = n.toString()\n    const arr = s.split('').reverse()\n    return arr.reduce((prev, val, index) => &#123;\n        if (index % 3 === 0) &#123;\n            if (prev) &#123;\n                return val + ',' + prev\n            &#125; else &#123;\n                return val\n            &#125;\n        &#125; else &#123;\n            return val + prev\n        &#125;\n    &#125;, '')\n&#125;\n\n\n使用字符串（推荐）\n\nfunction format(n: number): string &#123;\n    n = Math.floor(n) // 只考虑整数\n\n    let res = ''\n    const s = n.toString()\n    const length = s.length\n\n    for (let i = length - 1; i >= 0; i--) &#123;\n        const j = length - i\n        if (j % 3 === 0) &#123;\n            if (i === 0) &#123;\n                res = s[i] + res\n            &#125; else &#123;\n                res = ',' + s[i] + res\n            &#125;\n        &#125; else &#123;\n            res = s[i] + res\n        &#125;\n    &#125;\n\n    return res\n&#125;\n\n\n\n题目17 - 切换字母大小写\n输入一个字符串，切换其中字母的大小写\n如，输入字符串12bBc34，输出字符串12AbC34\n\n常见思路\n\n正则表达式\nASCII表\n\nfunction switchLetterCase(s:string):string&#123;\n  const res=''\n  \n  const length=s.length\n  if(length===0)return res\n  \n  for(let i=0;i&lt;length;i++)&#123;\n    const c=s[i]\n    const code=c.charCodeAt(0)\n    \n    if(code>=65&amp;&amp;code&lt;=90)&#123;\n      res+=c.toLowerCase()\n    &#125;else if(code>=97&amp;&amp;code&lt;=122)&#123;\n      res+=c.toUpperCase()\n    &#125;else&#123;\n      res+=c\n    &#125;\n  &#125;\n  \n  return res\n&#125;\n\nconsole.log(switchLetterCase('12bBc34'))\n\n\n\n题目18 - 为什么0.1+0.2!==0.3计算机使用二进制存储数据\n\n整数转换二进制没有误差，如9转换为二进制是1001\n\n而小数可能无法用二进制准确表达，如0.2转换为0.20000001\n\n可以用math.js库\n\n\n持续更新中……","slug":"常用算法","date":"2022-03-14T10:17:13.000Z","categories_index":"知识点","tags_index":"算法,数据结构","author_index":"LIYUNFU"},{"id":"ce895751a313319f06b50d562f5dd5db","title":"ES6新特性","content":"let&amp;const解构赋值数组新特性\nArray.of() ：将一组值转化为数组，返回一个新数组，并且不考虑参数的数量或类型\ncopyWithin() ：把指定位置的成员复制到其他位置，返回原数组\nfind() ：返回第一个符合条件的值\nfindIndex() ：返回第一个符合条件的索引\nkeys() ： 对键名的1遍历，返回一个遍历器对象，可用for-of 循环\nvalues() ：与keys() 用法一样，不过是对键值的遍历\nentries() ：与keys() 用法一样，不过是对 键值对的遍历\nArray.from() ： 从一个类数组或可迭代对象中新建一个新的数组实例\nfill() ： 使用定制的元素填充数组，返回原数组\nincludes() ：判断是否包含某一个元素，返回布尔值，对NaN有效，但不能定位，第二个参数开始寻找位置\nflatMap() ：方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组\nflat() ： 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回，默认值为1(应用：数组扁平化(当输入Infinity 自动解到最底层))\n\nlet arr = [1, 2, 3, 4, 5]\n\n//Array.of()\nlet arr1 = Array.of(1, 2, 3);\nconsole.log(arr1) // [1, 2, 3]\n\n//copyWithin(): 三个参数 (target, start = 0, end = this.length)\n// target: 目标的位置\n// start: 开始位置，可以省略，可以是负数。\n// end: 结束位置，可以省略，可以是负数，实际位置是end-1。\nconsole.log(arr.copyWithin(0, 3, 5)) // [4, 5, 3, 4, 5]\n\n//find()\nconsole.log(arr.find((item) => item > 3 )) // 4\n\n//findIndex()\nconsole.log(arr.findIndex((item) => item > 3 )) // 3\n\n// keys()\nfor (let index of arr.keys()) &#123;\n    console.log(index); // 一次返回 0 1 2 3 4\n&#125;\n\n// values()\nfor (let index of arr.values()) &#123;\n    console.log(index); // 一次返回 1 2 3 4 5\n&#125;\n\n// entries()\nfor (let index of arr.entries()) &#123;\n    console.log(index); // 一次返回 [0, 1] [1, 2] [2, 3] [3, 4] [4, 5]\n&#125;\n\n let arr = [1, 2, 3, 4, 5]\n\n// Array.from(): 遍历的可以是伪数组，如 String、Set结构，Node节点\nlet arr1 = Array.from([1, 3, 5], (item) => &#123;\n    return item * 2;\n&#125;)\nconsole.log(arr1) // [2, 6, 10] \n\n// fill(): 三个参数 (target, start = 0, end = this.length)\n// target: 目标的位置\n// start: 开始位置，可以省略，可以是负数。\n// end: 结束位置，可以省略，可以是负数，实际位置是end-1。\nconsole.log(arr.fill(7)) // [7, 7, 7, 7, 7]\nconsole.log(arr.fill(7, 1, 3)) // [1, 7, 7, 4, 5]\n\nlet arr = [1, 2, 3, 4]\n\n//includes()\nconsole.log(arr.includes(3)) // true\nconsole.log([1, 2, NaN].includes(NaN)); // true\n\nlet arr = [1, 2, 3, 4]\n\n// flatMap()\nconsole.log(arr.map((x) => [x * 2])); // [ [ 2 ], [ 4 ], [ 6 ], [ 8 ] ]\nconsole.log(arr.flatMap((x) => [x * 2])); // [ 2, 4, 6, 8 ]\nconsole.log(arr.flatMap((x) => [[x * 2]])); // [ [ 2 ], [ 4 ], [ 6 ], [ 8 ] ]\n\nconst arr1 = [0, 1, 2, [3, 4]];\nconst arr2 = [0, 1, 2, [[[3, 4]]]];\n\nconsole.log(arr1.flat()); // [ 0, 1, 2, 3, 4 ]\nconsole.log(arr2.flat(2)); // [ 0, 1, 2, [ 3, 4 ] ]\nconsole.log(arr2.flat(Infinity)); // [ 0, 1, 2, 3, 4 ]\n\n字符串新特性\nUnicode：大括号包含表示Unicode字符\ncodePointAt() ： 返回字符对应码点，与fromCharCode() 对应\nString.fromCharCode() ：将对应的码点返回为字符，与codePointAt() 对应\nString.raw() ：返回把字符串所有变量替换且对斜杠进行转义的结果\nstartsWith() ： 返回布尔值，表示参数字符串是否存在元字符串的头部\nendsWith ：返回布尔值，表示参数字符串是否存在源字符串的头部\nrepart() ：返回一个新字符串，表示将原字符串重复n次\nincludes() ：返回布尔值，表示是否找到了参数字符串\ntrimStart() ：方法从字符串的开头删除空格，trimLeft() 是此方法的别名\ntrimEnd() ：方法从字符串的末端删除空格，trimRight() 是此方法的别名\npadStart() ： 用于头部补全\npadEnd() ： 用于尾部补全\nJSON.stringify() : 可返回不符合UTF-8标准的字符串\nreplace() ：仅替换一个 字符串中某模式的首个实例\nreplaceAll() ： 返回一个新字符串，该字符串中用一个替换项替换了原字符串所有匹配了模式的部分\n模式可以是一个字符串或一个正则表达式，而替换项可以是一个字符串或一个应用于每个匹配项的函数\n\n//Unicode\nconsole.log(\"a\", \"\\u0061\"); // a a\nconsole.log(\"d\", \"\\u&#123;4E25&#125;\"); // d 严\n\nlet str = 'Domesy'\n\n//codePointAt()\nconsole.log(str.codePointAt(0)) // 68\n\n//String.fromCharCode()\nconsole.log(String.fromCharCode(68)) // D\n\n//String.raw()\nconsole.log(String.raw`Hi\\n$&#123;1 + 2&#125;`); // Hi\\n3\nconsole.log(`Hi\\n$&#123;1 + 2&#125;`); // Hi 3\n\nlet str = 'Domesy'\n\n//startsWith()\nconsole.log(str.startsWith(\"D\")) // true\nconsole.log(str.startsWith(\"s\")) // false\n\n//endsWith()\nconsole.log(str.endsWith(\"y\")) // true\nconsole.log(str.endsWith(\"s\")) // false\n\n//repeat(): 所传的参数会自动向上取整，如果是字符串会转化为数字\nconsole.log(str.repeat(2)) // DomesyDomesy\nconsole.log(str.repeat(2.9)) // DomesyDomesy\n\n// 遍历：for-of\n for(let code of str)&#123;\n   console.log(code) // 一次返回 D o m e s y\n &#125;\n \n //includes()\n console.log(str.includes(\"s\")) // true\n console.log(str.includes(\"a\")) // false\n \n // trimStart()\n const string = \"   Hello world!   \";\n console.log(string.trimStart()); // \"Hello world!   \"\n console.log(string.trimLeft()); // \"Hello world!   \"\n \n // trimEnd()\n const string = \"   Hello world!   \";\n console.log(string.trimEnd()); // \"   Hello world!\"\n console.log(string.trimRight()); // \"   Hello world!\"\n\nlet str = 'Domesy'\n\n//padStart(): 会以空格的形式补位吗，这里用0代替，第二个参数会定义一个模板形式，会以模板进行替换\nconsole.log(\"1\".padStart(2, \"0\")); // 01\nconsole.log(\"8-27\".padStart(10, \"YYYY-0M-0D\")); //  YYYY-08-27\n \n// padEnd()：与padStart()用法相同\nconsole.log(\"1\".padEnd(2, \"0\")); // 10\n\n//JSON.stringify() 升级\nconsole.log(JSON.stringify(\"\\uD83D\\uDE0E\")); // 😎\nconsole.log(JSON.stringify(\"\\u&#123;D800&#125;\")); // \\ud800\n\nlet str = \"Hi！，这是ES6~ES12的新特性，目前为ES12\"\n\nconsole.log(str.replace(\"ES\", \"SY\")); // Hi！，这是SY6~ES12的新特性，目前为ES12\nconsole.log(str.replace(/ES/g, \"Sy\")); // Hi！，这是Sy6~Sy12的新特性，目前为Sy12\n\nconsole.log(str.replaceAll(\"ES\", \"Sy\")); // Hi！，这是Sy6~Sy12的新特性，目前为Sy12\nconsole.log(str.replaceAll(/ES/g, \"Sy\")); // Hi！，这是Sy6~Sy12的新特性，目前为Sy12\n\n\n\n","slug":"ES6新特性","date":"2022-03-12T10:48:14.000Z","categories_index":"知识点","tags_index":"ES6,前瞻","author_index":"LIYUNFU"},{"id":"deb07f2084ce5c6636760b3189f1eaa0","title":"git命令备忘录","content":"\ngit init 初始化版本库\ngit add 每次提交前都要添加\ngit commit -m “修改信息”  \ngit log 打印提交记录\ngit diff readme  查看版本区别\ngit reset 回到某个版本  git reset --hard  版本代号\ngit reflog 打印操作记录 再使用git reset 版本号可以到未来\n工作区的文件git add之后到了暂存区，暂存区git commit一次性提交到master分支\ngit diff HEAD -- readme.txt 查看工作区和版本库里面最新版本的区别\ngit checkout -- readme.txt 丢弃工作区的修改，从暂存区恢复\ngit reset HEAD readme.txt暂存区回到上一个版本\ngit remote add origin git@github.com:michaelliao/learngit.git 关联远程仓库\ngit push -u origin master第一次推送\ngit push origin master以后推送\ngit remote -v查看远程仓库\ngit remote rm origin解除远程仓库\ngit switch -c dev创建并切换到新的dev分支\ngit switch master切换到master分支\ngit branch查看分支\ngit branch -d dev删除分支\ngit merge dev将dev分支合并到当前分支上\ngit merge --no-ff -m &quot;merge with no-ff&quot; dev合并分支并禁用快速合并\ngit stash把当前工作现场储存下来，方便下一次恢复现场继续工作 \ngit stash pop恢复现场，并把stash内容删除\ngit cherry-pick &lt;commit&gt;  如果当前也有bug 就把原先的提交复制到这儿一份\n命令git push origin &lt;tagname&gt;可以推送一个本地标签；\n命令git push origin --tags可以推送全部未推送过的本地标签；\n命令git tag -d &lt;tagname&gt;可以删除一个本地标签；\n命令git push origin :refs/tags/&lt;tagname&gt;可以删除一个远程标签。\n\n","slug":"git命令备忘录","date":"2022-03-05T03:08:36.000Z","categories_index":"知识点","tags_index":"git,备忘录","author_index":"LIYUNFU"},{"id":"6f0689131b9192e324f81c8459e5c263","title":"ajax基本使用及跨域过程","content":"ajax\n是什么：ajax是Asynchronous JavaScript and XML（异步 JavaScript 和 XMl）的简写\n异步：异步得像服务器发送请求，在等待响应的过程中，不会阻塞当前页面，浏览器可以做自己的事情。直到成功获取响应后，浏览器才开始处理响应数据\nAjax 需要服务器环境，非服务器环境下，很多浏览器无法正常使用ajax\n\nXMLHttpRequest//创建xhr对象\nconst xhr=new XMLHttpRequest();\n\n//监听事件，处理响应\nxhr.addEventListener('readystatechange',()=>&#123;&#125;,false)\n//或\nxhr.onreadystatechange=()=>&#123;&#125;\n\n//处理响应\nxhr.onreadystatechange=()=>&#123;\n    if(xhr.readyState!==4)return;\n    \n    //http code\n    //获取到响应后，响应的内容会自动填充xhr对象的属性\n    if(xhr.status>=200&amp;&amp;xhr.status&lt;300||xhr.status===304)&#123;\n        console.log(xhr.responseText)\n    &#125;\n&#125;\n\n/*\nreadystatechange 事件监听readyState这个状态的变化\n0: 未初始化，尚未调用open()\n1: 启动，已经调用open() 但尚未调用send()\n2: 发送，已经调用send() 但尚未接收到响应\n3: 接收，已经接收到部分响应数据\n4: 完成，已经接收到全部响应数据，而且已经可以在浏览器中使用了\n*/\n\n//准备发送请求\nxhr.open(\n\t'HTTP 方法 GET、POST、PUT、DELETE',\n    '地址 URL',\n    true //是否异步\n)\n\n//发送请求 send的参数是通过请求体携带的数据 只有post能携带请求体\nxhr.send(null)\n\n属性\nresponseType 和 response 属性\nxhr.onreadystatechange = () => &#123;\n  if (xhr.readyState != 4) return;\n  if ((xhr.status >= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status === 304) &#123;\n    // 文本形式的响应内容\n    // responseText 只能在没有设置 responseType 或者 responseType = '' 或 'text' 的时候才能使用\n    // console.log('responseText:', xhr.responseText);\n    // 可以用来替代 responseText\n    console.log('response:', xhr.response);\n    // console.log(JSON.parse(xhr.responseText));\n  &#125;\n&#125;;\n\nxhr.responseType = 'text';\ntimeout属性\n//设置请求的超时时间（单位ms） 在发送之前\n xhr.open('GET', url, true);\n\nxhr.timeout = 10000;\n\nxhr.send(null);\nwithCredentials属性\n//指定使用ajax发送请求时是否携带cookie\nxhr.open('GET', url, true);\n\nxhr.withCredentials = true;\n\nxhr.send(null);\n\n方法\nabort() 终止当前请求\nxhr.open('GET', url, true);\nxhr.send(null);\nxhr.abort();\n//放在发送之后\nsetRequestHeader()设置请求头消息\nxhr.setRequestHeader(头部字段的名称, 头部字段的值);\nxhr.setRequestHeader('Content-Type','application/json')\n\n事件\nload事件 响应数据可用时触发\nxhr.onload=()=>&#123;&#125;\nxhr.addEventListener('load',()=>&#123;&#125;)\n//代替readystatechange 可以有效减少判断标识为4 的状态\nerror事件 请求发生错误时触发\nxhr.addEventListener(\n  'load',\n  () => &#123;\n    if ((xhr.status >= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status === 304) &#123;\n      console.log(xhr.response);\n    &#125;\n  &#125;,\n  false\n);\nxhr.addEventListener(\n  'error',\n  () => &#123;\n    console.log('error');\n  &#125;,\n  false\n)\nabort事件 调用abort方法后触发\nxhr.addEventListener(\n  'abort',\n  () => &#123;\n    console.log('abort');\n  &#125;,\n  false\n);\n\nJson不支持undefined\n\nJSON.parse()\n将json字符串转化为JS的数据类型，对象或者数组\n\n\nJSON.stringify()\n将JS的基本数据类型，对象或者数组转化为JSON的字符串\n\n\n\nCORS\n使用CORS 跨域的过程\n① 浏览器发送请求\n② 后端在响应头中添加Access-Control-Allow-Origin 头信息\n③ 浏览器接收到响应\n④ 如果是同域下的请求，浏览器不会额外做什么，这次前后端通信就圆满了\n⑤ 如果是跨域请求，浏览器会从响应头中查找是否允许跨域访问\n⑥ 如果允许跨域，通信圆满完成\n⑦ 如果没找到或步包含想要跨域的域名，就丢弃响应结果\n\n\n","slug":"ajax基本使用及跨域过程","date":"2022-03-05T03:06:30.000Z","categories_index":"知识点","tags_index":"ajax,跨域","author_index":"LIYUNFU"},{"id":"c123efc46127ac74fdea33d3d47fa7a0","title":"远程服务器安装Docker并配置数据库","content":"Docker命令安装docker-desktop点击前往官网下载，一直下一步安装即可\n如果出现错误，说明wsl内核未更新到wsl2，点击下载安装之后重启docker-desktop即可\n查看已安装docker版本docker --version\n安装docker-compose\n\n\n\n\n\n\n\n\nDocker Compose是一个工具，旨在帮助定义和共享多容器应用程序。使用Compose，我们可以创建一个YAML文件来定义服务，并且使用单个命令，可以启动所有内容或将其全部拆解。使用 Compose的最大优点是，您可以在文件中定义应用程序堆栈，将其保留在项目存储库的根目录下（现在是受版本控制的），并轻松地让其他人能够为您的项目做出贡献。有人只需要克隆你的存储库并启动撰写应用。事实上，你现在可能会在GitHub/GitLab上看到相当多的项目在做这件事。\n简单来说就是 docker-compose能够让你自定义一个YAML配置文件，能够一键启动所有任务安装了docker desktop的自带docker-compose不需要再安装了\n\nLinux安装教程 https://docs.docker.com/compose/install/\n\n安装mongo使用Docker Hub搜索mongo 点击进入mongo-Docker Hub\ndocker pull mongo:4  #可接版本号也可不接\n\n查看本地下载了哪些镜像docker images\n\n运行mongo映射到宿主机上docker run -d --name some-mongo -p 10050:27017 mongo:4\n\n运行MYSQL映射到宿主机上docker run --name some-mysql -e MYSQL_ROOT_PASSWORD&#x3D;123456 -p 10051:3306 -d mysql:5.6\n\n查看当前运行的服务docker ps\n\n在Linux机器中需要放行端口 10050方案一 直接关闭防火墙#ubuntu\nservice ufw stop\n#centos\nservice firewalld stop\n\n方案二 放行指定端口# ubuntu\nufw allow Port 端口号\n\n#centos\nfirewall-cmd --zone&#x3D;public --add-port&#x3D;10050&#x2F;tcp --permanent\n\n重载防火墙firewall-cmd --reload\n\n提交自己的images提交到docker仓库docker commit id号  liyunfu&#x2F;mysql:1.0\ndocker push liyunfu&#x2F;mysql:1.0 \n\n拉取自己的imagesdocker pull liyunfu&#x2F;mysql:1.0\n\n删除imagesdocker image rm id号\n\n\n\ndocker-compose编写YML文件version: '3'\nservices:\n  mysql1:\n    image: mysql\n    environment:\n    - MYSQL_ROOT_PASSWORD=123456\n    ports:\n    - 10052:3306\n\n  mysql2:\n    image: mysql\n    environment:\n    - MYSQL_ROOT_PASSWORD=123456\n    ports:\n    - 10053:3306\n\n执行YMLdocker-compose up\n\n\n\nLinux连接远程服务器ssh -p 27822 root@server.bontor.cn   # ssh -p 端口  用户名@服务器地址\n\n查看操作系统版本lsb_release -a\n\n查看内核版本uname -a\n\n检查文件系统磁盘空间占用情况df -Th  # 后缀变为以G为单位 不加以字节为单位\n\n目录结构&#x2F;home  主目录\n&#x2F;etc   软件配置文件\n&#x2F;sys   系统目录\n&#x2F;usr   系统可执行文件\n&#x2F;var   日志文件 不断增长大小\n\nCPU和内存top #查看正在运行的进程 已经cpu占用情况 和内存使用情况\n\n文档型：文件相关命令(touch，cat，echo，rm，vi，cd)touch test.txt \nvi test.txt\ncd &#x2F;home\ncat test.txt\necho &quot;123123&quot;&gt;&gt;test.txt  #两个箭头追加 一个箭头覆盖  \n\n硬件型：磁盘/进程/服务/网络查看进程ps -ef | grep docker  #查询并使用grep筛选 docker进程\n\n强制关闭进程kill -9 进程的PID\n\n查看服务的状态service sshd status\n\n关闭服务service sshd stop  #关闭sshd服务\n\n重启服务service sshd restart\n\n功能型：压缩/解压，下载，远程下载wget 资源地址\n\n解压tar zxvf app.tar.gz\n\n压缩tar zcvf app.tar.gz app\n\n\n\n修改默认SSH端口查看默认监听端口netstat -anlp | grep sshd\n\n修改默认监听端口vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config\n#删除#  修改port 22 为 port 27001\n\n#centos修改之后必须运行\nsemanage port -a -t ssh_port_t -p tcp 27001   \n#提示没有该命令\nyum whatprovides semanage\n#找到拥有命令的包安装\nyum install -y policycoreutils-python\n#查看端口\nsemanage port -l | grep ssh\n\n#删除端口\nsemanage port -d -t ssh_port_t -p tcp 22\n","slug":"远程服务器安装Docker并配置数据库","date":"2022-03-05T03:02:36.000Z","categories_index":"实战","tags_index":"数据库,Docker","author_index":"LIYUNFU"},{"id":"417b0753cea51755f39f949bc1137c41","title":"Webpack5搭建标准开发环境","content":"Webpack安装&amp;使用安装npm install webpack webpack-cli -D\n\n使用方式方式一.&#x2F;node_modules&#x2F;.bin&#x2F;webpack --version\n\n方式二npx webpack --version\n\n\n\n入口(entry)\n\n\n\n\n\n\n\n\n**入口起点(entry point)*指示 webpack 应该使用哪个模块，来作为构建其内部依赖图*的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。\n出口(output)\n\n\n\n\n\n\n\n\noutput 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件，默认值为 ./dist\nconst config = &#123;\n    entry: './src/index.js',\n    output: &#123;\n        filename: 'bundle.js',\n        path: path.join(__dirname, './dist')\n    &#125;\n&#125;\n\n\nloader\n\n\n\n\n\n\n\n\nloader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。\n让webpack处理CSS文件\n\n\n\n\n\n\n\n\nwebpack 根据正则表达式，来确定应该查找哪些文件，并将其提供给指定的 loader。在这种情况下，以 .css 结尾的全部文件，都将被提供给 style-loader 和 css-loader。\n\n下载依赖loader\nnpm install --save-dev css-loader\nnpm install --save-dev style-loader\n编写规则，匹配哪些后缀使用哪些loader  webpack.config.js\nmodule:&#123;\n    rules:[\n        &#123;\n            test:/\\.css$/,\n            use:['style-loader','css-loader']\n        &#125;\n    ]\n&#125;\nloader链式传递，先从后面的loader开始\n\n\n让webpack处理scss文件\n下载依赖loader\nnpm install sass-loader node-sass -D\n编写规则\nmodule:&#123;\n    rules:[\n        &#123;\n            test:/\\.(scss|sass)$/,\n            use:['style-loader','css-loader','sass-loader']\n        &#125;\n    ]\n&#125;,\n\nfile-loader 和 url-loader 可以接收并加载任何文件，然后将其输出到构建目录。\n让webpack处理图片\n下载依赖loader\nnpm install file-loader -D\n编写规则\n&#123;\n    test: /\\.(png|jpg|svg|gif)$/,\n    use:['file-loader']\n&#125;\n可以在index.js中引入\nimport Icon from './icon.jpg';\n\n//将图像添加到我们现有的div\nconst myIcon = new Image();\nmyIcon.src = Icon;\nelement.appendChild(myIcon);\n也可在index.scss中引入\n.hello&#123;\n  color: red;\n  background: url(\"./icon.jpg\");\n&#125;\n\n让webpack处理字体\n下载依赖loader\nnpm install file-loader -D\n编写规则\n&#123;\n    test:/\\.(woff|woff2|eot|ttf|otf)$/,\n    use:['file-loader']\n&#125;\n在index.scss中引入\n@font-face &#123;\n  font-family: 'Myfont';\n  src: url(\"./myfont.TTF\") format('ttf');\n  font-weight: 600;\n  font-style: normal;\n&#125;\n.hello&#123;\n  color: red;\n  font-family: Myfont;\n&#125;\n\n让webpack处理CSV、TSV 、XML\n下载依赖loader\nnpm install csv-loader xml-loader -D\n编写规则\n&#123;\n    test:/\\.(csv|tsv)$/,\n    use:['csv-loader']\n&#125;,\n&#123;\n    test:/\\.xml$/,\n    use:['xml-loader']\n&#125;\n在src下创建data.xml并在index.js中引入\n\ndata.xml\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n&lt;note>\n    &lt;to>mary&lt;/to>\n    &lt;from>john&lt;/from>\n    &lt;heading>reminder&lt;/heading>\n    &lt;body>call cindy on tuesday&lt;/body>\n&lt;/note>\n\n\nindex.js\n\nimport Data from './data.xml';\n\nconsole.log(Data);\n\n插件(plugins)\n\n\n\n\n\n\n\n\nloader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。\n使用plugins处理html\n下载依赖plugins\nnpm install html-webpack-plugin -D\n由于插件可以携带参数/选项，所以必须在webpack配置中，向plugins属性传入new实例\n\n```js//处理src下的html文件plugins: [\n    new HtmlWebpackPlugin(&#123;template: &quot;./src/index.html&quot;&#125;)\n\n],\n\n## 模式(mode)\n\n&gt; 通过选择 &#96;development&#96; 或 &#96;production&#96; 之中的一个，来设置 &#96;mode&#96; 参数，你可以启用相应模式下的 webpack 内置的优化\n\n&#96;&#96;&#96;jsx\nmodule.exports &#x3D; &#123;\n  mode: &#39;production&#39;\n&#125;;\n\n模块热替换过程在应用程序中置换模块\n应用程序代码要求HMR runtime检查更新\nHMR runtime(异步)下载更新，然后通知应用程序代码\n应用程序代码要求HMR runtime应用更新\nHMR runtime(同步)应用更新\n\n在编译器中除了普通资源，编译器需要发出update，以允许更新之前的版本到新的版本，update由两部分组成：\n\n更新后的manifest(JSON)\n一个或多个更新后的chunk(JavaScript)\n\n配置标准开发环境ni babel-loader @babel&#x2F;core @babel&#x2F;preset-env @babel&#x2F;plugin-transform-runtime -D\nni @babel&#x2F;runtime \n\n创建.babelrc&#123;\n  \"presets\": [\n    \"@babel/preset-env\"\n  ],\n  \"plugins\": [\n    \"@babel/plugin-transform-runtime\"\n  ]\n&#125;\n\n在webpack.config.js中rules添加规则&#123;\n    test:/\\.js$/,\n    loader: \"babel-loader\"\n&#125;\n\n\n\n\n\n\n\n\n\n\n第一里程碑\n自动清理dist目录webpack5.x之后在输出中添加clean:true即可\noutput: &#123;\n    filename: &#39;bundle.js&#39;,\n    path: path.join(__dirname, &#39;.&#x2F;dist&#39;),\n    clean: true\n&#125;,\n\n\nCleanWebpackPlugin does not clean in Webpack 5 - fsou (nilmap.com)\n复制资源到dist目录\n引入对应插件\n\nnpm install --save-dev copy-webpack-plugin\n\n\n编写新的plugin语法，旧语法有问题，因为CopyWebpackPlugin构造函数还支持其他选项\n\nconst CopyWebpackPlugin = require('copy-webpack-plugin');\n\nnew CopyWebpackPlugin(\n    &#123;\n        patterns: [\n            &#123;\n                from: path.join(__dirname, 'assets')\n                to: 'assets'\n            &#125;\n        ]\n    &#125;\n)\n\n\n\n\n\n\n\n\n\n\n\n错误信息：[webpack-cli] Invalid options object. Copy Plugin has been initialized using an options object that does not match the API schema.\n对js和css压缩 丑化JS和CSS压缩css和js\n安装依赖\nni css-minimizer-webpack-plugin -D\nni terser-webpack-plugin -D   &#x2F;&#x2F;让他来增强...扩展运算符\nni mini-css-extract-plugin -D  &#x2F;&#x2F;支持头部单独引用不许安装\n引入对应插件 \nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst CssMinimizerPlugin = require('css-minimizer-webpack-plugin');\nconst TerserJSPlugin=require('terser-webpack-plugin')\nrules\n&#123;\n    test: /\\.(scss|sass)$/,\n    use: [MiniCssExtractPlugin.loader, 'css-loader', 'sass-loader']\n&#125;,\noptimization\noptimization: &#123;\n    minimize: true,  //设置开发环境可用，若不设置默认false只能支持生产环境\n    minimizer: [\n        `...`,   //使用扩展运算符增强\n        new CssMinimizerPlugin(),\n      \tnew TerserJSPlugin()\n    ]\n&#125;,\nplugins\nnew MiniCssExtractPlugin(&#123;\n    filename: '[name].css',\n    chunkFilename:'[id].css',\n&#125;),\nnew MiniCssExtractPlugin(),\nnew TerserJSPlugin()\n\n","slug":"Webpack5搭建标准开发环境","date":"2022-03-05T03:00:17.000Z","categories_index":"实战","tags_index":"Webpack,前端工程化","author_index":"LIYUNFU"},{"id":"fe45cec90ec11b72673f92c41490ffd7","title":"基于koa-generator实现验证码功能","content":"第一步\n全局安装koa-generator\n\n```shellnpm install -g koa-generator\n\n- 生成基本框架\n\n- &#96;&#96;&#96;shell\n  koa2 apiname    \n  # 使用koa2后面接目录名即可自动创建名为apiname的目录\n根据命令行提示，进入创建的文件夹，执行npm install\n\n```shellcd apinamenpm install\n\n- 下载依赖完成之后，可以启动看看\n\n- &#96;&#96;&#96;shell\n  npm run start\n打开浏览器访问3000端口\n\n```shellhttp://localhost:3000\n\n- 如果浏览器中页面显示出数据即创建成功，可以进入下一步\n\n\n\n### 第二步\n\n- 在根目录下新建&#96;src&#96;目录\n\n- 将&#96;public&#96; 、&#96;routes&#96; 、&#96;views&#96; 、&#96;app.js&#96;拖入&#96;src&#96;目录\n\n- 修改&#96;bin&#x2F;www&#96;中的&#96;var app &#x3D; require(&#39;..&#x2F;app&#39;);&#96;为&#96;var app &#x3D; require(&#39;..&#x2F;src&#x2F;app&#39;);&#96;\n\n- 改造后目录\n\n- &#96;&#96;&#96;shell\n  |- bin\n    |- www\n  |-node_modules\n  |-src\n    |-public\n    |-routes\n    |-views\n    |-app.js\n  |-package.json\n在src目录下创建目录controller\n\n\n第三步\n安装用于聚合router的包\n\n安装koa-combine-routers包\n\n```shellnpm install koa-combine-routers\n\n- 安装&#96;svg-captcha&#96;  包 用于生成&#96;svg&#96;验证码\n\n- &#96;&#96;&#96;shell\n  npm install svg-captcha\n在controller目录下创建publicController.js 用于生成验证码 并输入以下代码\n\n```jsconst svgCaptcha = require(“svg-captcha”);\nfunction  publicController(ctx) {  //创建一个新验证码svg对象  const newCaptcha = svgCaptcha.create({\nsize: 4,  //验证码长度\nignoreChars: &quot;0o1il&quot;, //排除易混淆的几个0o1il字符\ncolor: true,   //验证码有颜色\nnoise: Math.floor(Math.random() * 5), //干扰线\nwidth: 150,  \nheight: 50,\n\n  });  ctx.body = {\nmsg: newCaptcha.data,\n\n  };}\nmodule.exports = publicController;\n\n- 在&#96;routes&#96;目录下新建&#96;publicRouter.js &#96; 输入以下代码\n\n- &#96;&#96;&#96;js\n  const router &#x3D; require(&quot;koa-router&quot;)();\n  const getCaptcha &#x3D; require(&quot;..&#x2F;controller&#x2F;PublicController&quot;);\n  \n  router.get(&quot;&#x2F;getCaptcha&quot;, getCaptcha);\n  \n  module.exports &#x3D; router;\n在routes目录下新建routes.js 输入以下代码\n\n```jsconst combineRoutes=require(‘koa-combine-routers’)\nconst aRoutes=require(‘./publicRouter’)\nmodule.exports=combineRoutes(  aRoutes   //如果有多个 可以引入多个，并写在此处用逗号隔开)\n\n- 在&#96;app.js&#96;引入&#96;routes.js&#96; 并使用\n\n- &#96;&#96;&#96;js\n  const router &#x3D; require(&quot;.&#x2F;routes&#x2F;routes&quot;);\n  app.use(router())\n实现跨域请求，下载并引入koa2-cors包\n\n```shellnpm install koa2-cors\nconst cors = require(“koa2-cors”);\n//cors配置app.use(  cors({\norigin: &quot;http://localhost:8080&quot;, //前端origin\ncredentials: true, //允许跨域带cookie\n\n  }));\n\n\n\n### 第四步\n\n使用&#96;vue&#96;项目，尝试请求验证码  下载&#96;axios&#96;包\n\n&#96;&#96;&#96;vue\n&lt;template&gt;\n\t&lt;div id&#x3D;&quot;app&quot;&gt;\n    &lt;div class&#x3D;&quot;svg&quot; @click&#x3D;&quot;getCaptcha&quot; v-html&#x3D;&quot;svg&quot;&gt;验证码&lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nconst axios &#x3D; require(&#39;axios&#39;)\nexport default &#123;\n  name: &#39;app&#39;,\n  data () &#123;\n    return &#123;\n      svg: &#39;&#39;\n    &#125;\n  &#125;,\n  mounted () &#123;\n    this.getCaptcha()\n  &#125;,\n  methods: &#123;\n    getCaptcha () &#123;\n      axios.get(&#39;http:&#x2F;&#x2F;localhost:3000&#x2F;getCaptcha&#39;).then((res) &#x3D;&gt; &#123;\n        if (res.status &#x3D;&#x3D;&#x3D; 200) &#123;\n          this.svg &#x3D; res.data.msg\n        &#125;\n      &#125;)\n    &#125;\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;\n\n\n","slug":"基于koa-generator实现验证码功能","date":"2022-03-05T02:56:54.000Z","categories_index":"实战","tags_index":"Koa","author_index":"LIYUNFU"},{"id":"2dd921bc2e0b67b467ed4b61518bdc3d","title":"MongoDB的CRUD","content":"MongoDB初见\nDocker中MongoDB数据的备份与恢复#备份\ndocker exec -it 镜像名 mongodump -h 地址 -u root -p example -o 备份到的地址\ndocker exec -it some-mongo mongodump -h localhost -u root -p example -o &#x2F;temp&#x2F;test\n\n\n\n是什么\n存储文档的非关系型数据库\n\n\n\n可以将多个不同的内容添加到一个集合里面，如果想要添加字段，直接添加，不会报错\n\nMongoDB的CRUD创建文档创建一个文档\n自己提供文档主键_id值，容易出现错误，可以省略文档_id字段，让它自动生成，collection为集合\n\ndb.collection.insertOne(\n\t&#123;\n\t_id: &quot;account1&quot;,\n\tname: &quot;alice&quot;,\n\tbalance: 100\n\t&#125;\n)\n\ndb.collection.insertOne(\n\t&#123;\n\tname: &quot;alice&quot;,\n\tbalance: 100\n\t&#125;\n)\n\n创建多个文档\nordered参数用来决定mongoDB是否要按顺序来写入这些文档\nordered:false 表示可以打乱文档写入顺序，以便优化写入的操作\nordered:true(默认值)按顺序执行，如果第一条插入数据错误，那么第二天不会执行\n\n\n\ndb.accounts.insertMany(\n\t[\n\t\t&#123;\n\t\tname: &quot;alice1&quot;,\n\t\tbalance: 100\n\t\t&#125;,\n\t\t&#123;\n\t\tname: &quot;alice2&quot;,\n\t\tbalance: 200\n\t\t&#125;\n\t]\t,\n\t&#123;\n\t\tordered:false  &#x2F;&#x2F;可选\n\t&#125;\n)\n\n\n创建单个或多个文档\nsave命令运行时调用insert   db.collection.save \n\ndb.accounts.insert(\n\t&#123;\n\tname: &quot;alice1&quot;,\n\tbalance: 100\n\t&#125;,\n)\n\ndb.accounts.insert(\n\t[\n\t\t&#123;\n\t\tname: &quot;alice1&quot;,\n\t\tbalance: 100\n\t\t&#125;,\n\t\t&#123;\n\t\tname: &quot;alice2&quot;,\n\t\tbalance: 200\n\t\t&#125;\n\t]\t\n)\n\n\n\ninsertOne 、insertMany 、insert的区别\n正确和错误返回的结果不同\n\ninsertOne和insertMany命令不支持db.collection.explain()名\n\ninsert支持db.collection.explain命令\n\n\n读取文档读取全部文档\n既不筛选，也不投射\ndb.accounts.find()\n更清晰的显示文档\ndb.accounts.find().pretty()\n\n匹配查询\n读取alice的银行账户文档\ndb.accounts.find(&#123;name: &quot;alice&quot;&#125;)\n读取alice的余额为100元的银行账户文档\ndb.accounts.find(&#123;name: &quot;alice&quot;,balance: 100&#125;)\n读取复合主键的文档\ndb.accounts.find(&#123;&quot;_id.type&quot;: &quot;savings&quot;&#125;)\n\n比较操作符\n\n\n操作符\n含义\n\n\n\n$eq\n相等查询值的文档\n\n\n$ne\n不等查询值的文档\n\n\n$gt\n大于查询值的文档\n\n\n$gte\n大于或等于查询值的文档\n\n\n$lt\n小于查询值的文档\n\n\n$lte\n小于或等于查询值的文档\n\n\n$in\n与任一查询值相等的文档\n\n\n$nin\n与任何查询值都不等的文档\n\n\n\n读取不属于alice的银行账户文档\ndb.accounts.find(&#123;name: &#123;$ne:&quot;alice&quot;&#125;&#125;)\n读取余额大于500的银行账户文档\ndb.accounts.find(&#123;balance: &#123;$gt:500&#125;&#125;)\n读取用户名字排在fred之前的银行账户文档\ndb.accounts.find(&#123;name: &#123;$lt:&quot;fred&quot;&#125;&#125;)\n读取alice和charlie的银行账户文档\ndb.accounts.find(&#123;name: &#123;$in:[&quot;alice&quot;,&quot;charlie&quot;]&#125;&#125;)\n读取既不是alice和charlie的银行账户文档\ndb.accounts.find(&#123;name: &#123;$nin:[&quot;alice&quot;,&quot;charlie&quot;]&#125;&#125;)\n\n逻辑操作符\n\n\n逻辑操作符\n含义\n\n\n\n$not\n筛选条件不成立的文档\n\n\n$and\n多个条件全部成立的文档\n\n\n$or\n至少一个筛选条件成立的文档\n\n\n$nor\n多个筛选条件全部不成立的文档\n\n\n\n读取余额不小于500的银行账户文档  \ndb.accounts.find(&#123;balance:&#123;$not:&#123;$lt:500&#125;&#125;&#125;)\n读取余额大于100并且用户姓名排在fred之后的银行账户文档\ndb.accounts.find(&#123;$and:[&#123;balance:&#123;$gt:100&#125;&#125;,&#123;name:&#123;$gt:&quot;fred&quot;&#125;&#125;]&#125;)\n读取余额大于100并且小于500的银行账户文档\ndb.accounts.find(&#123;balance:&#123;$lt:500,$gt:100&#125;&#125;&#125;)\n读取属于alice或者charlie的银行账户文档\ndb.accounts.find(&#123;\n\t$or:[\n\t\t&#123;name:&#123;$eq:&quot;alice&quot;&#125;&#125;,\n\t\t&#123;name:&#123;$eq:&quot;charlie&quot;&#125;&#125;\n\t]\n&#125;)\n读取既不属于alice和charlie且余额不小于100的银行账户文档\ndb.accounts.find(&#123;\n\t$nor:[\n\t\t&#123;name:&quot;alice&quot;&#125;,\n\t\t&#123;name:&quot;charlie&quot;&#125;,\n\t\t&#123;balance:&#123;$lt:100&#125;&#125;\n\t]\n&#125;)\n\n字段操作符\n\n\n操作符\n含义\n\n\n\n$exists\n包含查询字段的文档\n\n\n$type\n字段类型符合查询值的文档\n\n\n\n读取包含账户类型字段的银行账户文档\ndb.accounts.find(&#123;&quot;_id.type&quot;:&#123;$exists:true&#125;&#125;)\n读取文档主键是字符串的银行账户文档\ndb.accounts.find(&#123;_id:&#123;$type:&quot;string&quot;&#125;&#125;)\n\n数组操作符\n\n\n操作符\n含义\n\n\n\n$all\n数组字段中包含所有查询值的文档\n\n\n$elemMatch\n数组字段中至少存在一个值满足筛选条件的文档\n\n\n\n读取联系地址位于中国北京的银行账户文档\ndb.accounts.find(&#123;contact:&#123;$all:[&quot;china&quot;,&quot;beijing&quot;]&#125;&#125;)\n读取联系电话范围在100000和200000之间的银行账户文档\ndb.accounts.find(&#123;contact:&#123;$elemMatch:&#123;$gt:&quot;100000&quot;,$lt:&quot;200000&quot;&#125;&#125;&#125;)\n\n正则操作符\n读取用户姓名以c或者j开头的银行账号文档\ndb.accounts.find(&#123;name:&#123;$in:[&#x2F;^c&#x2F;,&#x2F;^j&#x2F;]&#125;&#125;)\n读取用户姓名包含LIE(不区分大小写)的银行账户文档\ndb.accounts.find(&#123;name:&#123;$regex:&#x2F;LIE&#x2F;,$options:&#39;i&#39;&#125;&#125;)\n\n文档游标\n查询语句默认返回的是文档游标，默认只显示前二十条\n\n游标函数var cursor=db.accounts.find()\n\n\ncursor.hasNext() cursor.next()\n\n```jsvar myCursor=db.accounts.find({name:”alice”})while(myCursor.hasNext()){  printjson(myCursor.next())}  //只要还有就把剩余文档打印出来\n\n- &#96;cursor.forEach()&#96;\n\n- &#96;&#96;&#96;js\n  var myCursor&#x3D;db.accounts.find(&#123;name:&quot;alice&quot;&#125;)\n  myCursor.forEach(printjson)   &#x2F;&#x2F;每篇文档被打印\ncursor.limit()\n\ncursor.skip()\n\n```jsdb.accounts.find({name:”alice”}).limit(1)  //只返回第一篇文档db.accounts.find({name:”alice”}).skip(1)   //跳过第一篇 只显示第二篇和第三篇\n\n- &#96;cursor.count()&#96;\n\n- &#96;&#96;&#96;js\n  db.accounts.find(&#123;name:&quot;alice&quot;&#125;).limit(1).count()   &#x2F;&#x2F;返回3\n  db.accounts.find(&#123;name:&quot;alice&quot;&#125;).limit(1).count(true)  &#x2F;&#x2F;返回1\n  &#x2F;&#x2F;默认不接收limit和skip返回的结果\ncursor.sort()\n\n按照余额从大到小，用户名按字母顺序排序\n\n```jsdb.accounts.find().sort({balance:-1,name:1})\n\n\n\n#### 游标注意事件\n\n- &#96;cursor.skip()&#96;在&#96;cursor.limit()&#96;之前执行\n- &#96;cursor.sort()&#96;在&#96;cursor.skip()&#96;和&#96;cursor.limit()&#96;之前执行\n\n\n\n#### 文档投影\n\n- 只返回银行账户文档中的用户姓名\n\n- &#96;&#96;&#96;js\n  db.accounts.find(&#123;&#125;,&#123;name:1&#125;)\n\n\n只返回银行账户文档中的用户姓名(不包含文档主键)\n\ndb.accounts.find(&#123;&#125;,&#123;name:1,_id:0&#125;)\n\n\n除了文档主键之外，我们不可以在投影文档中混合使用包含和不包含这两种投影操作要么在投影文档中列出所有应该包含的字段，要么列出所有不应该包含的字段\n\n\n更新文档","slug":"MongoDB的CRUD","date":"2022-03-05T02:54:11.000Z","categories_index":"实战","tags_index":"MongoDB,数据库,Mongoose","author_index":"LIYUNFU"},{"id":"b9b69e275d0ea3fd4374ffde1f72e980","title":"JSX如何\"摇身一变\"成为DOM的","content":"JSX代码如何变成DOM抛出问题\n  JSX的本质是什么，它和JS之间到底是什么关系？\n\n  为什么要用JSX？不用会有什么后果？\n\n  JSX背后的功能模块是什么，这个功能模块都做了那些事\n\n\n尝试解答\n  JSX的本质是JS的拓展，但是浏览器不能天然支持JSX，所以需要Babel将它编译为React.createElement()的调用，语法糖返回一个叫React Element的JS对象\n\n\n\n  既然最后编译为React.createElement()的调用，为什么不直接使用React.createElement()呢？\n答：\n  由于实现同样的功能的情况下，JSX代码层次分明，语言简练，而React.createElement()代码繁重\n  JSX语法糖允许前端开发者使用我们最为熟悉的类HTML标签语法来创建虚拟DOM，在降低学习成本的同时，也提升了研发效率和研发体验\n\n\n\n\\\n\n  \n\n\\\ncreateElement解析&#x2F;**\n  React的创建元素方法\n *&#x2F;\n\nfunction createElement(type, config, children) &#123;\n  &#x2F;&#x2F; propName用于储存后面需要用到的元素属性\n  var propName;\n  &#x2F;&#x2F; props用于储存元素属性的键值对集合\n  var props &#x3D; &#123;&#125;;\n  &#x2F;&#x2F; key、ref、self、source均为React元素的属性\n  var key &#x3D; null;\n  var ref &#x3D; null;\n  var self &#x3D; null;\n  var source &#x3D; null;\n\n  &#x2F;&#x2F; config 对象中存储的是元素的属性\n  if (config !&#x3D; null) &#123;\n    &#x2F;&#x2F; 进来之后的第一件事，依次对ref、key、self和source属性赋值\n    if (hasValidRef(config)) &#123;\n      ref &#x3D; config.ref;\n\n      &#123;\n        warnIfStringRefCannotBeAutoConverted(config);\n      &#125;\n    &#125;\n\n    &#x2F;&#x2F; 此处将key 值字符串化\n    if (hasValidKey(config)) &#123;\n      key &#x3D; &#39;&#39; + config.key;\n    &#125;\n\n    self &#x3D; config.__self &#x3D;&#x3D;&#x3D; undefined ? null : config.__self;\n    source &#x3D; config.__source &#x3D;&#x3D;&#x3D; undefined ? null : config.__source; &#x2F;&#x2F; Remaining properties are added to a new props object\n\n    &#x2F;&#x2F; 接着就是要把config里面的属性都一个一个挪到props对象里面\n    for (propName in config) &#123;\n      if (hasOwnProperty.call(config, propName) &amp;&amp; !RESERVED_PROPS.hasOwnProperty(propName)) &#123;\n        props[propName] &#x3D; config[propName];\n      &#125;\n    &#125;\n  &#125;\n\n  &#x2F;&#x2F; childrenLength 指的是当前元素的子元素的个数，减去的2是type和config两个参数占用的长度\n  var childrenLength &#x3D; arguments.length - 2;\n\n  &#x2F;&#x2F; 如果抛去type和config，就只剩下一个参数，一般意味着文本节点出现了\n  if (childrenLength &#x3D;&#x3D;&#x3D; 1) &#123;\n    &#x2F;&#x2F; 直接把这个值赋值给props.children\n    props.children &#x3D; children;\n  &#125; else if (childrenLength &gt; 1) &#123;\n    &#x2F;&#x2F; 处理嵌套多个子元素的情况\n    &#x2F;&#x2F; 声明一个数组，把所有剩余对象参数都遍历传入，最后把数组赋值给props.children对象\n    var childArray &#x3D; Array(childrenLength);\n\n    for (var i &#x3D; 0; i &lt; childrenLength; i++) &#123;\n      childArray[i] &#x3D; arguments[i + 2];\n    &#125;\n\n    &#123;\n      if (Object.freeze) &#123;\n        Object.freeze(childArray);\n      &#125;\n    &#125;\n\n    props.children &#x3D; childArray;\n  &#125; &#x2F;&#x2F; Resolve default props\n\n  &#x2F;&#x2F; 处理defaultProps\n  if (type &amp;&amp; type.defaultProps) &#123;\n    var defaultProps &#x3D; type.defaultProps;\n\n    for (propName in defaultProps) &#123;\n      if (props[propName] &#x3D;&#x3D;&#x3D; undefined) &#123;\n        props[propName] &#x3D; defaultProps[propName];\n      &#125;\n    &#125;\n  &#125;\n\n  &#123;\n    if (key || ref) &#123;\n      var displayName &#x3D; typeof type &#x3D;&#x3D;&#x3D; &#39;function&#39; ? type.displayName || type.name || &#39;Unknown&#39; : type;\n\n      if (key) &#123;\n        defineKeyPropWarningGetter(props, displayName);\n      &#125;\n\n      if (ref) &#123;\n        defineRefPropWarningGetter(props, displayName);\n      &#125;\n    &#125;\n  &#125;\n  &#x2F;&#x2F; 最后返回一个调用ReactElement执行方法，并传入刚才处理过的参数\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n&#125;\n\n参数说明：\n  type:用于标识节点的类型，它可以是HTML标签字符串，也可以是React组件类型\n\n  config: 以对象形式传入，组件所有的属性都会以键值对的形式存储在config对象中\n\n  children: 以对象形式传入，它记录的是组件标签之间嵌套的内容，也就是所谓的”子节点””子元素”\n\n\n例子DOM结构\n&lt;ul className&#x3D;&quot;list&quot; id&#x3D;&quot;lis&quot;&gt;\n  &lt;li key&#x3D;&#123;1&#125;&gt;&lt;&#x2F;li&gt;\n  &lt;li key&#x3D;&#123;2&#125;&gt;&lt;&#x2F;li&gt;\n&lt;&#x2F;ul&gt;\n\nReact.createElement语法糖\nReact.createElement(&quot;ul&quot;, &#123;\n  &#x2F;&#x2F; 传入属性键值对\n  className: &quot;list&quot;,\n  id: &quot;lis&quot;\n  &#x2F;&#x2F; 从第三个入参开始往后，传入的参数都是children\n&#125;, React.createElement(&quot;li&quot;, &#123;\n  key: 1\n&#125;), React, createElement(&quot;li&quot;, &#123;\n  key: 2\n&#125;))\n\n流程\n 处理key、ref、self、source四个属性值\n\n 遍历config，筛选出可以提进props里的属性\n\n 提取子元素，推入props.children\n\n 格式化defaultProps\n\n 将以上数据作为入参，发起ReactElement调用\n\n\n总结createElement就像是开发者和ReactElement调用之间的一个“转换器”，在开发者出接收相对简单的参数，然年后将这些参数按照ReactElement的预期做一层格式化，最终通过调用ReactElement来实现元素的创建\nReactElement解析var ReactElement &#x3D; function (type, key, ref, self, source, owner, props) &#123;\n  var element &#x3D; &#123;\n    &#x2F;&#x2F; 用来标识该对象是一个ReactElement\n    $$typeof: REACT_ELEMENT_TYPE,\n    &#x2F;&#x2F; 内置属性赋值\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    &#x2F;&#x2F; 记录创建该元素的组件\n    _owner: owner\n  &#125;;\n\n  return element;\n&#125;;\n\nReactElement只做了一件事情，就是组装，把传入的参数按照一定的规范，组装进element对象里，并把它返回给React.createElement，最终React.createElement又把它交回到开发者手中\n\nrender初识function render(element, container, callback) &#123;\n  if (!isValidContainer(container)) &#123;\n    &#123;\n      throw Error( &quot;Target container is not a DOM element.&quot; );\n    &#125;\n  &#125;\n\n  &#123;\n    var isModernRoot &#x3D; isContainerMarkedAsRoot(container) &amp;&amp; container._reactRootContainer &#x3D;&#x3D;&#x3D; undefined;\n\n    if (isModernRoot) &#123;\n      error(&#39;You are calling ReactDOM.render() on a container that was previously &#39; + &#39;passed to ReactDOM.createRoot(). This is not supported. &#39; + &#39;Did you mean to call root.render(element)?&#39;);\n    &#125;\n  &#125;\n\n  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);\n&#125;\n\n参数说明\n  element:需要渲染的元素(ReactElement)\n\n  container:元素挂载的目标容器(一个真实DOM)\n\n  callback: 回调函数，可选参数，可以用来处理渲染结束后的逻辑\n\n\n总结\n","slug":"JSX如何变成DOM","date":"2022-02-27T09:46:50.000Z","categories_index":"React源码","tags_index":"React,源码","author_index":"LIYUNFU"},{"id":"bdee22d1805781f30b666804c7635df8","title":"flex布局","content":"flex容器属性改变主轴方向flex-directionflex-direction: row默认\nflex-direction: row-reverse\nflex-direction: column\nflex-direction: column-reverse\n换行flex-wrapflex-wrap: nowrap默认\nflex-wrap: wrap\nflex-wrap: wrap-reverse\n缩写flex-flow: [flex-direction] [flex-wrap]flex-flow: column wrap\n主轴对齐justify-contentjustify-content: flex-start默认\njustify-content: flex-end\njustify-content: space-around 平均分配  每个方块的margin-left+margin-right+width相等\njustify-content: space-between 两边没有空隙 中间空隙平均分配\njustify-content: space-evenly所有空隙平均分配\n交叉轴整体对齐align-content 必须要有折行属性才能生效  \nalign-content: stretch默认\n如果交叉轴上的宽度未设置则自动拉伸填满交叉轴\n\n\n\n若交叉轴上的宽度已经设置则效果和flex-start一样\n\n\n\n\nalign-content: flex-start\nalign-content: flex-end\nalign-content: center\n其他属性 space-around``space-between``space-evenly和主轴属性类似交叉轴每一行对齐 align-itemsalign-items: stretch默认align-items: flex-start\nalign-items: flex-end\nalign-items: center\nalign-items: baseline 内容以小写x为基线对齐\n内联与块的上下左右居中布局内联上下左右居中\n块级上下左右居中\n不定项居中布局\n均分列布局\n子项分组布局复杂模式 使用div嵌套\n简单方式 margin-right: auto\nflex子项属性扩展比例flex-grow一个子元素时\n默认值为0\n\n比例值大于等于1，沾满剩余所有空间\n\n比例值为0.5，占剩余空间的一半\n\n\n\n\n多个子元素时\n只有一个有flex-grow时\n\n\n\n两个都有flex-grow时\n\n\n\n当多个元素加起来小于1时，还有剩余空间\n\n\n收缩比例flex-shrink\n默认值为1，溢出部分完全收缩，小数按比例收缩\n\n\n默认情况当有两个及以上需要收缩时\nmainwidth: 400\n\nbox1width: 200\n\nbox2width: 300\n\n则，默认情况下收缩后 所占比例按照宽度计算\n\nbox1收缩后所占尺寸：200-2/5*(200+300-400)=160\n\nbox2收缩后所占尺寸：300-3/5*(200+300-400)=240\n\n\n\n不同比例收缩时\nmainwidth: 400\n\nbox1width: 200\n\nbox2width: 300\n\n则，比例情况下收缩后 所占比例按照宽度计算\n\nbox1收缩后所占尺寸：200-4/7*(200+300-400)=142\n\nbox2收缩后所占尺寸：300-3/7*(200+300-400)=257\n\n\n\n指定flex元素在主轴上的初始大小flex-basis\n当主轴方向是水平时，覆盖水平宽度\n\n当主轴方向是垂直时，覆盖垂直高度\n\n可选值：0% auto 200px 100%  0  \n\n\n\nflex-basis: auto默认值\nflex-basis: 0表示占据最小宽度，会竖起来\nflex缩写flex: 1\nflex: 0\nflex: auto\n改变某个子项的排序位置order\norder: 0当前位置保持不变\n\norder: -1向前排\n\norder: 1向后拍\n\n\n\n控制单独某一个元素交叉轴的布局align-self\n等高布局 内容填充两边也等高\n两列或三列布局  两边固定宽度 中间自适应\nSticky Footer布局 内容空页脚在最底部 内容满也在最底部\n溢出项布局\n\n","slug":"flex布局","date":"2022-02-12T13:46:33.000Z","categories_index":"","tags_index":"CSS,布局","author_index":"LIYUNFU"},{"id":"6436dbae418d43dcb9001fac6bd76e96","title":"布局中的尺寸与位置","content":"相对长度单位&emsp;&emsp;相对长度单位相对于其他一些东西，比如父元素的字体大小，或者视图端口的大小。使用相对单位的好处是，经过一些仔细的规划，您可以使文本或其他元素的大小与页面上的其他内容相对应。以下列出了常见相对单位。\n\n\n\n单位\n名称\n\n\n\nem\n在font-size中使用是相对于父元素的字体大小，在其他属性中使用是相对于自身的字体大小\n\n\nex\n字符“x”的高度\n\n\nch\n数字“0”的宽度\n\n\nrem\n根元素的字体大小\n\n\nlh\n元素的line-height\n\n\nvw\n视窗宽度的1%\n\n\nvh\n视窗高度的1%\n\n\nvmin\n视窗较小尺寸的1%\n\n\nvmax\n视图大尺寸的1%\n\n\nmargin-top传递的现象与解决方案现象：为子元素设置margin-top后，会把父元素一块带下来&lt;div class=\"box1\">\n  &lt;div class=\"box2\">&lt;/div>\n&lt;/div>\n\n.box1&#123;\n  width: 200px;\n  height: 200px;\n  background: pink;\n&#125;\n.box2&#123;\n  width: 100px;\n  height: 100px;\n  background: skyblue;\n  margin-top: 30px;\n&#125;\n\n\n解决方案1： 为父元素加边框\n解决方案2：格式化上下文BFC\n解决方案3：使用padding替代margin\n自适应盒模型的特性当子盒子不写宽度的时候，添加padding，margin，border等，向内缩\n\n标准盒模型和怪异盒模型\n标准盒模型content-box：width，height=content\n怪异盒模型border-box：width，height=content+padding+border\n\n常见清除浮动的方案clear属性 清除上下\nBFC 清除父组件塌陷\n空标签.clearfix::after{}.clearfix::after&#123;\n\tcontent:\"\";\n  clear:both;\n  display:block;\n&#125;\n\n浮动特性注意点\n只会影响后面的元素\n\n文本不会被浮动元素覆盖\n\n具备内联盒子特性：宽度由内容决定\n\n具备块级盒子特性：支持所有样式\n\n浮动放不下，会自动换行\n\n\n定位相对定位position：ralative\n相对定位的元素是在文档中的正常位置偏移给定的值\n\n不影响其他元素布局\n\n相对于自身进行偏移\n\n\n绝对定位position：absolute\n脱离标准文档流，不占据空间\n\n具备内联盒子特性：宽度由内容决定\n\n具备块级盒子特性：支持所有样式\n\n绝对定位元素相对于最近的非static祖先元素定位，当这样的祖先元素不存在时，则相对于可视区定位\n\n\n固定定位position：fixed粘性定位position：sticky\n粘性定位可以被认为是相对定位和固定定位的混合，元素在跨越特定阈值前为相对定位，之后为固定定位\n\n详解display属性display-outside外部值定义自身元素的外部表现，而不影响其内的子元素\n\nblock：表示块级盒子\ninline：表示内联盒子\n\ndisplay-inside内部值定义子元素布局的\n\ntable：带有内部表格布局的块级盒子\n\nflex：带有内部弹性布局的块级盒子\n\ngrid：带有内部网格布局的块级盒子\n\n\nglobal全局值\ninherit：继承父元素的display属性\n\ninitial：不管父元素怎么设定，恢复到浏览器最初时的display属性\n\nunset：unset混合了inherit和initial，如果父元素设值了，就用父元素的设定，如果父元素没有设值，就用浏览器的缺省设定\n\n\n书写模式与逻辑属性writing-mode书写模式\nhorizontal-tb：水平方向自上而下的书写方式\n\nvertical-lr：垂直方向自左而右的书写方式\n\nvertical-rl：垂直方向自右而左的书写方式\n\n\n\nBFC块级格式化上下文概念：\n可以把BFC理解为一个封闭的大箱子，箱子内部的元素无论如何，都不会影响到外部\n\n触发条件：\nfloat的值不是none\n\nposition的值不是static或relative\n\ndisplay的值是inline-block、table-cel、flex、table-caption或inline-flex\n\noverflow的值不是visible\n\n\nBFC的应用：\n解决margin-top传递问题   在父元素上加\n\n解决纵向margin重叠问题\n\n\n\n\n\n解决浮动高度塌陷  在父元素上加\n\n\n","slug":"布局中的尺寸与位置","date":"2022-02-11T13:28:00.000Z","categories_index":"","tags_index":"布局,css","author_index":"LIYUNFU"},{"id":"72f191bcb7ec59bd5f1454660b2b3dff","title":"西瓜音乐小程序开发第二天","content":"✅ 引入第三方 UI 库 vant✅ 封装 banner 请求✅ 实时获取组件高度解决不同屏幕中的 swiper 样式问题✅ 使用节流函数优化性能\n\n今日完成效果\n\n\n\\\n引入 vantUI 库步骤如下\n 第一步进入微信开发工具，点开详情，勾选使用 npm 模块，并调低基础库，由于当前测试基础库2.22.0无法正常显示 vant 中的van-search标签，遂调低基础库至2.21.2\n\n\n\n 打开终端，初始化package.json并且安装 vant 依赖 npm i @vant/weapp\n\n\n\n\\\n\n 点击工具菜单中的构建 npm，等待构建完成，自动产生miniprogram_npm这就是小程序依赖的包\n\n\n\n\n 最后删除 app.json 中的style:v2防止样式冲突\n\n使用第三方 UI 库\n 在pages/home-music/index.json中导入需要的search组件\n\n&#123;\n  &quot;usingComponents&quot;: &#123;\n    &quot;van-search&quot;: &quot;@vant&#x2F;weapp&#x2F;search&#x2F;index&quot;\n  &#125;\n&#125;\n\n\n 在pages/home-music/index.wxml中使用search组件\n\n&lt;!--pages&#x2F;home-music&#x2F;index.wxml--&gt;\n&lt;!-- 搜索框 --&gt;\n&lt;van-search disabled  placeholder&#x3D;&quot;搜索您喜欢的歌曲&quot; background&#x3D;&quot;#fafafa&quot; shape&#x3D;&quot;round&quot; bind:click-input&#x3D;&quot;handleSearchClick&quot; &#x2F;&gt;\n\n\n这里使搜索框无法输入，绑定了点击方法，使用户点击搜索框跳转到搜索页面，index.js 中实现方法即可，shape属性可以设置为圆角或者方角\n\n&#x2F;**\n  * 事件处理\n  *&#x2F;\n handleSearchClick: function () &#123;\n   wx.navigateTo(&#123;\n     url: &quot;&#x2F;pages&#x2F;detail-search&#x2F;index&quot;,\n   &#125;);\n &#125;,\n\n\n效果如图\n\n\n\\\n封装 banner 请求新建 service/api_music.jsimport hyRequest from &quot;.&#x2F;index&quot;;\nexport function getBanners() &#123;\n  return hyRequest.get(&quot;&#x2F;banner&quot;, &#123;\n    type: 2,\n  &#125;);\n&#125;\n\n\ntype 的值有四种：0 代表 PC 1 代表 Android 2 代表 Iphone 3 代表 pad\n\n\\\n请求数据并渲染到页面\n 根据官方文档可知，可以通过以下示例获得每次渲染完成的组件的rect\n\n\n\n 新建utils/query-rect.js用以获取组件高度\n\nexport default function (selector) &#123;\n  return new Promise((resolve) &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 获取图片的高度(如何获取组件高度)\n    const query &#x3D; wx.createSelectorQuery();\n    query.select(selector).boundingClientRect();\n    query.exec((res) &#x3D;&gt; &#123;\n      resolve(res);\n    &#125;);\n  &#125;);\n&#125;\n\n\n 在pages/home-music/index.js中定义数据和方法，并调用\n\n&#x2F;&#x2F; pages&#x2F;home-music&#x2F;index.js\nimport &#123; getBanners &#125; from &quot;..&#x2F;..&#x2F;service&#x2F;api_music&quot;;\nimport queryRect from &quot;..&#x2F;..&#x2F;utils&#x2F;query-rect&quot;;\nimport throttle from &quot;..&#x2F;..&#x2F;utils&#x2F;throttle&quot;;\n\nconst throttleQueryRect &#x3D; throttle(queryRect);\n\nPage(&#123;\n  &#x2F;**\n   * 页面的初始数据\n   *&#x2F;\n  data: &#123;\n    swiperHeight: 0,\n    banners: &#123;&#125;,\n  &#125;,\n\n  &#x2F;**\n   * 生命周期函数--监听页面加载\n   *&#x2F;\n  onLoad: function (options) &#123;\n    this.getPageData();\n  &#125;,\n\n  &#x2F;**\n   * 事件处理\n   *&#x2F;\n  handleSearchClick: function () &#123;\n    wx.navigateTo(&#123;\n      url: &quot;&#x2F;pages&#x2F;detail-search&#x2F;index&quot;,\n    &#125;);\n  &#125;,\n  &#x2F;**\n   * 网络请求\n   *&#x2F;\n  getPageData: function () &#123;\n    getBanners().then((res) &#x3D;&gt; &#123;\n      this.setData(&#123; banners: res.banners &#125;);\n    &#125;);\n  &#125;,\n\n  handleSwiperImageLoaded: function () &#123;\n    &#x2F;&#x2F; 获取图片的高度\n    throttleQueryRect(&quot;#swiper-img&quot;).then((res) &#x3D;&gt; &#123;\n      const rect &#x3D; res[0];\n      this.setData(&#123;\n        swiperHeight: rect.height,\n      &#125;);\n    &#125;);\n  &#125;,\n&#125;)\n\n\n 在pages/home-music/index.wxml中调用数据，并绑定image加载完成的方法bindonload\n\n&lt;!--pages&#x2F;home-music&#x2F;index.wxml--&gt;\n&lt;!-- 搜索框 --&gt;\n&lt;van-search disabled  placeholder&#x3D;&quot;搜索您喜欢的歌曲&quot; background&#x3D;&quot;#fafafa&quot; shape&#x3D;&quot;round&quot; bind:click-input&#x3D;&quot;handleSearchClick&quot; &#x2F;&gt;\n\n&lt;!-- 轮播图 --&gt;\n&lt;swiper class&#x3D;&quot;swiper&quot; style&#x3D;&quot;height:&#123;&#123;swiperHeight&#125;&#125;&quot; indicator-dots autoplay circular&gt;\n  &lt;block wx:for&#x3D;&quot;&#123;&#123;banners&#125;&#125;&quot; wx:key&#x3D;&quot;bannerId&quot;&gt;\n    &lt;swiper-item class&#x3D;&quot;swiper-item&quot; &gt;\n      &lt;image id&#x3D;&quot;swiper-img&quot; class&#x3D;&quot;image&quot; mode&#x3D;&quot;heightFix&quot; src&#x3D;&quot;&#123;&#123;item.pic&#125;&#125;&quot;  bindload&#x3D;&quot;handleSwiperImageLoaded&quot; &#x2F;&gt;\n    &lt;&#x2F;swiper-item&gt;\n  &lt;&#x2F;block&gt;\n&lt;&#x2F;swiper&gt;\n\n参数说明:\n\ncircular无限滑动\nmode高度自适应\n\n\n\n\nbindload当image标签加载完成时执行\nindicator-dots显示小圆点\n\n上面用到的节流函数utils/throttle.js\nexport default function throttle(\n  fn,\n  interval &#x3D; 1000,\n  options &#x3D; &#123; leading: true, trailing: false &#125;\n) &#123;\n  &#x2F;&#x2F; 1.记录上一次的开始时间\n  const &#123; leading, trailing, resultCallback &#125; &#x3D; options;\n  let lastTime &#x3D; 0;\n  let timer &#x3D; null;\n\n  &#x2F;&#x2F; 2.事件触发时, 真正执行的函数\n  const _throttle &#x3D; function (...args) &#123;\n    return new Promise((resolve, reject) &#x3D;&gt; &#123;\n      &#x2F;&#x2F; 2.1.获取当前事件触发时的时间\n      const nowTime &#x3D; new Date().getTime();\n      if (!lastTime &amp;&amp; !leading) lastTime &#x3D; nowTime;\n\n      &#x2F;&#x2F; 2.2.使用当前触发的时间和之前的时间间隔以及上一次开始的时间, 计算出还剩余多长事件需要去触发函数\n      const remainTime &#x3D; interval - (nowTime - lastTime);\n      if (remainTime &lt;&#x3D; 0) &#123;\n        if (timer) &#123;\n          clearTimeout(timer);\n          timer &#x3D; null;\n        &#125;\n\n        &#x2F;&#x2F; 2.3.真正触发函数\n        const result &#x3D; fn.apply(this, args);\n        if (resultCallback) resultCallback(result);\n        resolve(result);\n        &#x2F;&#x2F; 2.4.保留上次触发的时间\n        lastTime &#x3D; nowTime;\n        return;\n      &#125;\n\n      if (trailing &amp;&amp; !timer) &#123;\n        timer &#x3D; setTimeout(() &#x3D;&gt; &#123;\n          timer &#x3D; null;\n          lastTime &#x3D; !leading ? 0 : new Date().getTime();\n          const result &#x3D; fn.apply(this, args);\n          if (resultCallback) resultCallback(result);\n          resolve(result);\n        &#125;, remainTime);\n      &#125;\n    &#125;);\n  &#125;;\n\n  _throttle.cancel &#x3D; function () &#123;\n    if (timer) clearTimeout(timer);\n    timer &#x3D; null;\n    lastTime &#x3D; 0;\n  &#125;;\n\n  return _throttle;\n&#125;\n\n\\\n其他：\n项目地址: https://gitee.com/LUNIONT/xhumusic\n\n","slug":"西瓜音乐小程序开发第二天","date":"2022-02-10T07:54:45.000Z","categories_index":"","tags_index":"实战,小程序","author_index":"LIYUNFU"},{"id":"27fc989783c0d00e7c3b706a3747978d","title":"西瓜音乐小程序开发第一天","content":"\n✅ 初始化项目\n✅ 配置 tabbar\n✅ 封装请求函数\n✅ 分层架构二次封装请求函数\n✅ 封装格式化方法 (utils/format.wxs)\n✅ 封装视频列表 item 组件\n✅ 完成视频列表页展示\n今日完成效果如下\n\n\n\\\n初始化项目\n\n\\\n删除无关项目文件\n删除 pages 目录下的 index 和 logs，删除 utils 目录下的 util.js\n初始化 app.js 为\n\n&#x2F;&#x2F; app.js\nApp(&#123;\n\n&#125;)\n\n\n初始化 app.json 为\n\n&#123;\n  &quot;pages&quot;: [\n\n  ],\n  &quot;window&quot;: &#123;\n    &quot;backgroundTextStyle&quot;: &quot;light&quot;,\n    &quot;navigationBarBackgroundColor&quot;: &quot;#fff&quot;,\n    &quot;navigationBarTitleText&quot;: &quot;Weixin&quot;,\n    &quot;navigationBarTextStyle&quot;: &quot;black&quot;\n  &#125;,\n  &quot;style&quot;: &quot;v2&quot;,\n  &quot;sitemapLocation&quot;: &quot;sitemap.json&quot;,\n  &quot;lazyCodeLoading&quot;: &quot;requiredComponents&quot;\n&#125;\n\n\n初始化 app.wxss 为\n\n&#x2F;**app.wxss**&#x2F;\n\n\n目前为止编译器/模拟器会报错\n\n\n\\\n配置 tabbar新建两个页面\n 在 pages 右键创建文件夹home-music和home-video\n 在home-video和home-music上右键新建page为index\n\n\n\n\n 小程序开发工具会自动在目录下创建四个文件，并自动在app.json中添加 url\n \n\n\n\n\n \n\n导入静态资源 assets\n 在文件管理器中打开项目，复制已经准备好的 assets 资源到根目录\n \n\n\\\n在app.json中配置 tabbar&quot;tabBar&quot;: &#123;\n    &quot;list&quot;: [\n      &#123;\n        &quot;pagePath&quot;: &quot;pages&#x2F;home-music&#x2F;index&quot;,\n        &quot;text&quot;: &quot;音乐&quot;,\n        &quot;iconPath&quot;: &quot;assets&#x2F;images&#x2F;tabbar&#x2F;music_normal.png&quot;,\n        &quot;selectedIconPath&quot;: &quot;assets&#x2F;images&#x2F;tabbar&#x2F;music_active.png&quot;\n      &#125;,\n      &#123;\n        &quot;pagePath&quot;: &quot;pages&#x2F;home-video&#x2F;index&quot;,\n        &quot;text&quot;: &quot;视频&quot;,\n        &quot;iconPath&quot;: &quot;assets&#x2F;images&#x2F;tabbar&#x2F;video_normal.png&quot;,\n        &quot;selectedIconPath&quot;: &quot;assets&#x2F;images&#x2F;tabbar&#x2F;video_active.png&quot;\n      &#125;\n    ]\n  &#125;,\n\n\n\n效果\n\n\n\\\n封装请求函数由于微信小程序给我们提供的wx.request请求许多参数都可以复用，所以可以封装一个请求函数\n\n 在根目录下新建service文件夹\n 新建service/index.js\n\nconst BASE_URL &#x3D; &quot;http:&#x2F;&#x2F;123.207.32.32:9001&quot;;\nclass HYRequest &#123;\n  request(url, method, params) &#123;\n    return new Promise((resolve, reject) &#x3D;&gt; &#123;\n      wx.request(&#123;\n        url: BASE_URL + url,\n        method: method,\n        data: params,\n        success: function (res) &#123;\n          resolve(res.data);\n        &#125;,\n        fail: function (err) &#123;\n          reject(err);\n        &#125;,\n      &#125;);\n    &#125;);\n  &#125;\n  get(url, params) &#123;\n    return this.request(url, &quot;GET&quot;, params);\n  &#125;\n  post(url, data) &#123;\n    return this.request(url, &quot;POST&quot;, data);\n  &#125;\n&#125;\n\nconst hyRequest &#x3D; new HYRequest();\nexport default hyRequest;\n\n二次封装请求函数某些动作需要反复调用请求函数，但是有不变的参数，没必要每次传递，可以再封装一次\n\n 新建service/api_video.js\n\nimport hyRequest from &#39;.&#x2F;index&#39;\nexport function getTopMV(offset,limit&#x3D;10)&#123;\n  return hyRequest.get(&#39;&#x2F;top&#x2F;mv&#39;,&#123;\n    offset,\n    limit\n  &#125;)\n&#125;\n\n\n 由于我们的 api 后台需要接收两个参数，一个是偏移量，一个是数量，我们默认每次截取十个即可\n\n调用请求获得数据\n 在home-video/index.js中引入 getTopMV 方法\n\nimport &#123; getTopMV &#125; from &quot;..&#x2F;..&#x2F;service&#x2F;api_video&quot;;\n\n\n 在home-video/index.js的 data 中定义两个变量\n\ndata: &#123;\n   topMVs: [],   &#x2F;&#x2F;用以保存请求到的数据列表\n   hasMore: true,  &#x2F;&#x2F; 判断还有没有更多数据能够请求\n &#125;,\n\n\n 封装专属于home-video的网络请求方法，用以在不同操作下复用\n\n&#x2F;**\n   * 封装网络请求的方法\n   *&#x2F;\n  async getTopMVData(offset) &#123;\n    &#x2F;&#x2F; 判断是否可以请求\n    if (!this.data.hasMore) return;\n\n    &#x2F;&#x2F; 展示加载动画\n    wx.showNavigationBarLoading();\n    &#x2F;&#x2F; 真正请求数据\n    const res &#x3D; await getTopMV(offset);\n\n    let newData &#x3D; this.data.topMVs;\n    if (offset &#x3D;&#x3D;&#x3D; 0) &#123;\n      newData &#x3D; res.data;\n    &#125; else &#123;\n      newData &#x3D; newData.concat(res.data);\n    &#125;\n    this.setData(&#123;\n      topMVs: newData,\n    &#125;);\n    this.setData(&#123;\n      hasMore: res.hasMore,\n    &#125;);\n\n    &#x2F;&#x2F; 隐藏navigation刷新动画\n    wx.hideNavigationBarLoading();\n    &#x2F;&#x2F; 当请求数据完成 关闭下拉刷新动画\n    if (offset &#x3D;&#x3D;&#x3D; 0) &#123;\n      wx.stopPullDownRefresh();\n    &#125;\n  &#125;,\n\n\n 当生命周期 onLoad 执行时，调用请求方法\n\n&#x2F;**\n   * 生命周期函数--监听页面加载\n   * async await\n   *&#x2F;\n  onLoad: function (options) &#123;\n    this.getTopMVData(0);\n  &#125;,\n\n\n 当下拉刷新时调用请求方法\n\n&#x2F;**\n  * 下拉刷新\n  *&#x2F;\n onPullDownRefresh: function () &#123;\n   this.getTopMVData(0);\n &#125;,\n\n\n 当页面触底时调用请求方法\n\n&#x2F;**\n * 页面上拉触底事件的处理函数\n *&#x2F;\nonReachBottom: function () &#123;\n  this.getTopMVData(this.data.topMVs.length);\n&#125;,\n\n\n home-video/index.js完整代码\n\n&#x2F;&#x2F; pages&#x2F;home-video&#x2F;index.js\nimport &#123; getTopMV &#125; from &quot;..&#x2F;..&#x2F;service&#x2F;api_video&quot;;\nPage(&#123;\n  &#x2F;**\n   * 页面的初始数据\n   *&#x2F;\n  data: &#123;\n    topMVs: [],\n    hasMore: true,\n  &#125;,\n\n  &#x2F;**\n   * 生命周期函数--监听页面加载\n   * async await\n   *&#x2F;\n  onLoad: function (options) &#123;\n    this.getTopMVData(0);\n  &#125;,\n\n  &#x2F;**\n   * 封装网络请求的方法\n   *&#x2F;\n  async getTopMVData(offset) &#123;\n    &#x2F;&#x2F; 判断是否可以请求\n    if (!this.data.hasMore) return;\n\n    &#x2F;&#x2F; 展示加载动画\n    wx.showNavigationBarLoading();\n    &#x2F;&#x2F; 真正请求数据\n    const res &#x3D; await getTopMV(offset);\n\n    let newData &#x3D; this.data.topMVs;\n    if (offset &#x3D;&#x3D;&#x3D; 0) &#123;\n      newData &#x3D; res.data;\n    &#125; else &#123;\n      newData &#x3D; newData.concat(res.data);\n    &#125;\n    this.setData(&#123;\n      topMVs: newData,\n    &#125;);\n    this.setData(&#123;\n      hasMore: res.hasMore,\n    &#125;);\n\n    &#x2F;&#x2F; 隐藏navigation刷新动画\n    wx.hideNavigationBarLoading();\n    &#x2F;&#x2F; 当请求数据完成 关闭下拉刷新动画\n    if (offset &#x3D;&#x3D;&#x3D; 0) &#123;\n      wx.stopPullDownRefresh();\n    &#125;\n  &#125;,\n\n  &#x2F;**\n   * 封装事件处理的方法\n   *&#x2F;\n  handleVideoItemClick: function (event) &#123;\n    const id &#x3D; event.currentTarget.dataset.item.id;\n\n    &#x2F;&#x2F; 页面跳转\n    wx.navigateTo(&#123;\n      url: &#96;&#x2F;pages&#x2F;detail-video&#x2F;index?id&#x3D;$&#123;id&#125;&#96;,\n    &#125;);\n  &#125;,\n  &#x2F;**\n   * 下拉刷新\n   *&#x2F;\n  onPullDownRefresh: function () &#123;\n    this.getTopMVData(0);\n  &#125;,\n\n  &#x2F;**\n   * 生命周期函数--监听页面初次渲染完成\n   *&#x2F;\n  onReady: function () &#123;&#125;,\n\n  &#x2F;**\n   * 生命周期函数--监听页面显示\n   *&#x2F;\n  onShow: function () &#123;&#125;,\n\n  &#x2F;**\n   * 生命周期函数--监听页面隐藏\n   *&#x2F;\n  onHide: function () &#123;&#125;,\n\n  &#x2F;**\n   * 生命周期函数--监听页面卸载\n   *&#x2F;\n  onUnload: function () &#123;&#125;,\n\n  &#x2F;**\n   * 页面相关事件处理函数--监听用户下拉动作\n   *&#x2F;\n  onPullDownRefresh: function () &#123;&#125;,\n\n  &#x2F;**\n   * 页面上拉触底事件的处理函数\n   *&#x2F;\n  onReachBottom: function () &#123;\n    this.getTopMVData(this.data.topMVs.length);\n  &#125;,\n\n  &#x2F;**\n   * 用户点击右上角分享\n   *&#x2F;\n  onShareAppMessage: function () &#123;&#125;,\n&#125;);\n\n遍历数据到页面前面我们已经请求到数据了，可以直接在home-video/index.wxml中调用，由于列表的 item 也可以复用，我们将它封装成一个 component\n&lt;!--pages&#x2F;home-video&#x2F;index.wxml--&gt;\n&lt;view class&#x3D;&quot;video&quot;&gt;\n  &lt;view class&#x3D;&quot;item&quot; wx:for&#x3D;&quot;&#123;&#123;topMVs&#125;&#125;&quot; wx:key&#x3D;&quot;id&quot;&gt;\n     &lt;!-- &lt;video-item-v1 item&#x3D;&quot;&#123;&#123;item&#125;&#125;&quot;\n      bindtap&#x3D;&quot;handleVideoItemClick&quot;\n      data-item&#x3D;&quot;&#123;&#123;item&#125;&#125;&quot;&gt;&lt;&#x2F;video-item-v1&gt; --&gt;\n  &lt;&#x2F;view&gt;\n&lt;&#x2F;view&gt;\n\n\\\n封装 item 组件\n 在根目录下新建文件夹components/video-item-v1，右键video-item-v1新建component为 index\n \n\n\n\n\n 可以看到component的 index.js 和普通组件不同，其中有一个专门接收父组件传递过来数据的函数\n\n&#x2F;**\n  * 组件的属性列表\n  *&#x2F;\n properties: &#123;\n\n &#125;,\n\n\n 可以在这儿定义接收的数据，就可以直接在 wxml 页面中使用了\n\n&#x2F;**\n   * 组件的属性列表\n   *&#x2F;\n  properties: &#123;\n    item:&#123;\n      type:Object,\n      default:&#123;&#125;\n    &#125;\n  &#125;,\n\n\n 由于服务器返回的数据里面播放量和 时间都需要转换格式，我们可以在 utils 目录下定义一个format.wxs用于格式化数据，wxml 中只能调用 wxs 定义的方法\n\nfunction formatCount(count) &#123;\n  var counter &#x3D; parseInt(count);\n  if (counter &gt; 100000000) &#123;\n    return (counter &#x2F; 100000000).toFixed(1) + &quot;亿&quot;;\n  &#125; else if (counter &gt; 10000) &#123;\n    return (counter &#x2F; 10000).toFixed(1) + &quot;万&quot;;\n  &#125; else &#123;\n    return counter + &quot;&quot;;\n  &#125;\n&#125;\n\nfunction padLeftZero(time) &#123;\n  time &#x3D; time + &quot;&quot;;\n  return (&quot;00&quot; + time).slice(time.length);\n&#125;\nfunction formatDuration(duration) &#123;\n  duration &#x3D; duration &#x2F; 1000;\n\n  var minute &#x3D; Math.floor(duration &#x2F; 60);\n  &#x2F;&#x2F; 计算秒钟\n  var second &#x3D; duration % 60;\n\n  return padLeftZero(minute) + &quot;:&quot; + padLeftZero(second);\n&#125;\n&#x2F;&#x2F; commonjs\nmodule.exports &#x3D; &#123;\n  formatCount: formatCount,\n  formatDuration: formatDuration,\n&#125;;\n\n\n 现在我们可以在 wxml 中使用父组件传递过来的数据了\n\n&lt;!--components&#x2F;video-item-v1&#x2F;index.wxml--&gt;\n&lt;wxs src&#x3D;&quot;..&#x2F;..&#x2F;utils&#x2F;format.wxs&quot; module&#x3D;&quot;format&quot;&gt;&lt;&#x2F;wxs&gt;\n&lt;view class&#x3D;&quot;item&quot;&gt;\n  &lt;view class&#x3D;&quot;album&quot;&gt;\n    &lt;image class&#x3D;&quot;images&quot; src&#x3D;&quot;&#123;&#123;item.cover&#125;&#125;&quot; mode&#x3D;&quot;widthFix&quot; &#x2F;&gt;\n    &lt;view class&#x3D;&quot;info&quot;&gt;\n      &lt;view class&#x3D;&quot;count&quot;&gt;&#123;&#123;format.formatCount(item.playCount)&#125;&#125;&lt;&#x2F;view&gt;\n      &lt;view class&#x3D;&quot;duration&quot;&gt;&#123;&#123;format.formatDuration(item.mv.videos[0].duration)&#125;&#125;&lt;&#x2F;view&gt;\n    &lt;&#x2F;view&gt;\n  &lt;&#x2F;view&gt;\n  &lt;view class&#x3D;&quot;content&quot;&gt;\n    &#123;&#123;item.name&#125;&#125; - &#123;&#123;item.artisName&#125;&#125;\n  &lt;&#x2F;view&gt;\n&lt;&#x2F;view&gt;\n\n\n 为 item 组件配置样式\n\n&#x2F;* components&#x2F;video-item-v1&#x2F;index.wxss *&#x2F;\n.item &#123;\n  width: 100%;\n  margin-bottom: 30rpx;\n&#125;\n\n.album &#123;\n  position: relative;\n  border-radius: 12rpx;\n  overflow: hidden;\n  display: flex;\n&#125;\n\n.album .image &#123;\n  width: 100%;\n&#125;\n\n.info &#123;\n  position: absolute;\n  padding: 0 10rpx;\n  box-sizing: border-box;\n  width: 100%;\n  bottom: 8rpx;\n  display: flex;\n  justify-content: space-between;\n  color: #fff;\n  font-size: 24rpx;\n&#125;\n\n.info .count &#123;\n  padding-left: 36rpx;\n  position: relative;\n&#125;\n\n.info .count::before &#123;\n  content: &quot;&quot;;\n  position: absolute;\n  left: -2rpx;\n  top: 4rpx;\n  width: 30rpx;\n  height: 24rpx;\n  background-size: cover;\n  background-image: url(&quot;data:image&#x2F;jpeg;base64,iVBORw0KGgoAAAANSUhEUgAAAB4AAAAYCAQAAABHYIU0AAAM82lDQ1BrQ0dDb2xvclNwYWNlR2VuZXJpY0dyYXlHYW1tYTJfMgAAWIWlVwdYU8kWnluS0BJ6lRI60gwoXUqkBpBeBFGJIZBACDEFAbEhiyu4dhHBsqKiKIsdgcWGBQtrB7sLuigo6+IqNixvEopYdt&#x2F;7vnfzzb3&#x2F;nXPOnDpnbgBQ5TAFAh4KAMjki4WBUfSEKQmJVNJdIAe0gTKwB8pMlkhAj4gIhSyAn8Vng2+uV+0AkT6v2UnX+pb+rxchhS1iwedxOHJTRKxMAJCJAJC6WQKhGAB5MzhvOlsskOIgiDUyYqJ8IU4CQE5pSFZ6GQWy+Wwhl0UNFDJzqYHMzEwm1dHekRohzErl8r5j9f97ZfIkI7rhUBJlRIfApz20vzCF6SfFrhDvZzH9o4fwk2xuXBjEPgCgJgLxpCiIgyGeKcmIpUNsC3FNqjAgFmIviG9yJEFSPAEATCuPExMPsSHEwfyZYeEQu0PMYYl8EyG2griSw2ZI8wRjhp3nihkxEEN92DNhVpSU3xoAfGIK289&#x2F;cB5PzcgKkdpgAvFBUXa0&#x2F;7DNeRzfsEFdeHs6MzgCYguIX7J5gVGD6xD0BOII6ZrwneDH54WFDvpFKGWLZP7Cd0K7mBMjzZkjAEQTsTAmatA2YkwqN4ABcQDEORxhUNSgv8SjAp6szmBMiO+FkqjYQR9JAWx+rHRNaV0sYAr9AwdjRWoCcQgTsEEWmAnvLMAHnYAKRIALsmUoDTBBJhxUaIEtHIGQiw+HEHKIQIaMQwi6RujDElIZAaRkgVTIyYNyw7NUkALlB+Wka2TBIX2Trtstm2MN6bOHw9dwO5DANw7ohXQORJNBh2wmB9qXCZ++cFYCaWkQj9YyKB8hs3XQBuqQ9T1DWrJktjBH5D7b5gvpfJAHZ0TDnuHaOA0fD4cHHop74jSZlBBy5AI72fxE2dyw1s+eS33rGdE6C9o62vvR8RqO4QkoJYbvPOghfyg+ImjNeyiTMST9lZ8r9CRWAkHpskjG9KoRK6gFwhlc1qXlff+StW+1232Rt&#x2F;DRdSGrlJRv6gLqIlwlXCbcJ1wHVPj8g9BG6IboDuEu&#x2F;N36blSyRmKQBkfWSAWwv8gNG3LyZFq+tfNzzgbX+WoFBBvhpMtWkVIz4eDKeEQj+ZNALIb3VJm03Ve5C&#x2F;xab0t+kw6gti89fg5Qa1Qazn6Odhten3RNqSU&#x2F;lb9CTyCYXpU&#x2F;wBZ8pkrzwF4c9ioMFNjS9tJ6adtoNbQXtPufOWg3aH&#x2F;S2mhbIOUptho7hB3BGrBGrBVQ4VsjdgJrkKEarAn+9v1Dhad9p8KlFcMaqmgpVTxUU6Nrf3Rk6aOiJeUfjnD6P9Tr6IqRZux&#x2F;s2j0Ol92BPbnXUcxpThQSBRrihOFTkEoxvDnSPGByJRiQgmlaENqEMWS4kcZMxKP4VrnDWWY+8X+HrQ4AVKHK4Ev6y5MyCnlYA75+7WP1C+8lHrGHb2rEDLcVdxRPeF7vYj6xc6KhbJcMFsmL5Ltdr5MTvBF&#x2F;YlkXQjOIFNlOfyObbgh7oAzYAcKB1ScjjvhPkN4sCsN9yVZpnBvSPXC&#x2F;XBXaR&#x2F;7oi+w&#x2F;qv1o3cGm+hOtCT6Ey0&#x2F;04l+xCBiAHw6SOeJ44jBELtJucTsHLH0kPfNEuQKuWkcMZUOv3LYVAafZW9LdaQ5wNNN+s00+CnwIlL2LYRotbIkwuzBOVx6IwAF+D2lAXThqWoKT2s7qNUFeMAz0x+ed+EgBuZ1OvSDA+0Wwsjmg4WgCJSAFWAtKAebwTZQDWrBfnAYNMEeewZcAJdBG7gDz5Mu8BT0gVdgAEEQEkJG1BFdxAgxR2wQR8QV8UL8kVAkCklAkpE0hI9IkHxkEVKCrELKkS1INbIPaUBOIOeQK8gtpBPpQf5G3qEYqoRqoAaoBToOdUXpaAgag05D09BZaB5aiC5Dy9BKtAatQ0+gF9A2tAN9ivZjAFPEtDBjzA5zxXyxcCwRS8WE2DysGCvFKrFa2ANasGtYB9aLvcWJuDpOxe1gFoPwWJyFz8Ln4UvxcnwnXoefwq&#x2F;hnXgf&#x2F;pFAJugTbAjuBAZhCiGNMJtQRCglVBEOEU7DDt1FeEUkErVgflxg3hKI6cQ5xKXEjcQ9xOPEK8SHxH4SiaRLsiF5ksJJTJKYVERaT6ohHSNdJXWR3sgpyhnJOcoFyCXK8eUK5Erldskdlbsq91huQF5F3lzeXT5cPkU+V365&#x2F;Db5RvlL8l3yAwqqCpYKngoxCukKCxXKFGoVTivcVXihqKhoouimGKnIVVygWKa4V&#x2F;GsYqfiWyU1JWslX6UkJYnSMqUdSseVbim9IJPJFmQfciJZTF5GriafJN8nv6GoU+wpDEoKZT6lglJHuUp5piyvbK5MV56unKdcqnxA+ZJyr4q8ioWKrwpTZZ5KhUqDyg2VflV1VQfVcNVM1aWqu1TPqXarkdQs1PzVUtQK1baqnVR7qI6pm6r7qrPUF6lvUz+t3qVB1LDUYGika5Ro&#x2F;KJxUaNPU01zgmacZo5mheYRzQ4tTMtCi6HF01qutV+rXeudtoE2XZutvUS7Vvuq9mudMTo+OmydYp09Om0673Spuv66GbordQ&#x2F;r3tPD9az1IvVm623SO63XO0ZjjMcY1pjiMfvH3NZH9a31o&#x2F;Tn6G&#x2F;Vb9XvNzA0CDQQGKw3OGnQa6hl6GOYbrjG8Khhj5G6kZcR12iN0TGjJ1RNKp3Ko5ZRT1H7jPWNg4wlxluMLxoPmFiaxJoUmOwxuWeqYOpqmmq6xrTZtM&#x2F;MyGyyWb7ZbrPb5vLmruYc83XmLeavLSwt4i0WWxy26LbUsWRY5lnutrxrRbbytpplVWl1fSxxrOvYjLEbx162Rq2drDnWFdaXbFAbZxuuzUabK7YEWzdbvm2l7Q07JTu6XbbdbrtOey37UPsC+8P2z8aZjUsct3Jcy7iPNCcaD55udxzUHIIdChwaHf52tHZkOVY4Xh9PHh8wfv74+vHPJ9hMYE&#x2F;YNOGmk7rTZKfFTs1OH5xdnIXOtc49LmYuyS4bXG64arhGuC51PetGcJvkNt+tye2tu7O72H2&#x2F;+18edh4ZHrs8uidaTmRP3DbxoaeJJ9Nzi2eHF9Ur2etnrw5vY2+md6X3Ax9TnxSfKp&#x2F;H9LH0dHoN&#x2F;dkk2iThpEOTXvu6+871Pe6H+QX6Fftd9Ffzj&#x2F;Uv978fYBKQFrA7oC&#x2F;QKXBO4PEgQlBI0MqgGwwDBotRzegLdgmeG3wqRCkkOqQ85EGodagwtHEyOjl48urJd8PMw&#x2F;hhh8NBOCN8dfi9CMuIWRG&#x2F;RhIjIyIrIh9FOUTlR7VEq0fPiN4V&#x2F;SpmUszymDuxVrGS2OY45bikuOq41&#x2F;F+8aviO6aMmzJ3yoUEvQRuQn0iKTEusSqxf6r&#x2F;1LVTu5KckoqS2qdZTsuZdm663nTe9CMzlGcwZxxIJiTHJ+9Kfs8MZ1Yy+2cyZm6Y2cfyZa1jPU3xSVmT0sP2ZK9iP071TF2V2p3mmbY6rYfjzSnl9HJ9ueXc5+lB6ZvTX2eEZ+zI+MSL5+3JlMtMzmzgq&#x2F;Ez+KeyDLNysq4IbARFgo5Z7rPWzuoThgirRIhomqherAH&#x2F;YLZKrCQ&#x2F;SDqzvbIrst&#x2F;Mjpt9IEc1h5&#x2F;TmmuduyT3cV5A3vY5+BzWnOZ84&#x2F;yF+Z1z6XO3zEPmzZzXPN90fuH8rgWBC3YuVFiYsfC3AlrBqoKXi+IXNRYaFC4ofPhD4A+7iyhFwqIbiz0Wb&#x2F;4R&#x2F;5H748Ul45esX&#x2F;KxOKX4fAmtpLTk&#x2F;VLW0vM&#x2F;OfxU9tOnZanLLi53Xr5pBXEFf0X7Su+VO1eprspb9XD15NV1a6hrite8XDtj7bnSCaWb1ymsk6zrKAstq19vtn7F+vflnPK2ikkVezbob1iy4fXGlI1XN&#x2F;lsqt1ssLlk87ufuT&#x2F;f3BK4pa7SorJ0K3Fr9tZH2+K2tWx33V5dpVdVUvVhB39Hx86onaeqXaqrd+nvWr4b3S3Z3VOTVHP5F79f6mvtarfs0dpTshfslex9si95X&#x2F;v+kP3NB1wP1B40P7jhkPqh4jqkLreu7zDncEd9Qv2VhuCG5kaPxkO&#x2F;2v+6o8m4qeKI5pHlRxWOFh79dCzvWP9xwfHeE2knHjbPaL5zcsrJ66ciT108HXL67JmAMydb6C3HznqebTrnfq7hvOv5wxecL9S1OrUe+s3pt0MXnS&#x2F;WXXK5VH&#x2F;Z7XLjlYlXjl71vnrimt+1M9cZ1y+0hbVdaY9tv3kj6UbHzZSb3bd4t57fzr49cGcB&#x2F;Igvvqdyr&#x2F;S+&#x2F;v3K38f+vqfDueNIp19n64PoB3cesh4+&#x2F;UP0x&#x2F;uuwkfkR6WPjR5Xdzt2N&#x2F;UE9Fx+MvVJ11PB04Heoj9V&#x2F;9zwzOrZwb98&#x2F;mrtm9LX9Vz4&#x2F;NPfS1&#x2F;ovtjxcsLL5v6I&#x2F;vuvMl8NvC5+o&#x2F;tm51vXty3v4t89Hpj9nvS+7MPYD40fQz7e&#x2F;ZT56dN&#x2F;AC1d8BzqtvWAAAAAOGVYSWZNTQAqAAAACAABh2kABAAAAAEAAAAaAAAAAAACoAIABAAAAAEAAAAeoAMABAAAAAEAAAAYAAAAAGbJ4J8AAAElSURBVDgRnZQxTsNAEEX&#x2F;WFGUC6RDEEGFREkPihEVokoVDkDFAWgISsUZuAIFQjQUFE5Ni1NEhEjQxQegy2fsFPHKu&#x2F;Zutpr5&#x2F;u&#x2F;vFOsBwDNOVhkDjroTxlA0DqBMayxMcMJfGeEH1CyfI9jlWHYwAZcaN&#x2F;Rhyh5eKbWM0FXxu&#x2F;zBq56rqxsVVt+BN7kFsYY3YlDlgPnIJx40JTlgHGOAT96zUxfggnOmgxFSXrjxOjin9vHKF&#x2F;bsAU1wTl1iynMb7gPrG8ZqW&#x2F;gZh&#x2F;Jug1s2saR94UbeSr1R1o39hzscuVHAdfMHZriVhXFRpXHAcl1xWoS6sS12U1rDYooeXUFEyNTa+AtU4nIiayHFKR&#x2F;YDlpDexgrnIJ9c6sFdH0N0P2ZbLd6&#x2F;wF85hyuQTMxjwAAAABJRU5ErkJggg&#x3D;&#x3D;&quot;);\n&#125;\n\n.content &#123;\n  margin-top: 10rpx;\n  font-size: 28rpx;\n\n  &#x2F;* 显示两行 *&#x2F;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  display: -moz-box;\n  -moz-line-clamp: 2;\n  -moz-box-orient: vertical;\n  word-wrap: break-word;\n  word-break: break-all;\n  white-space: normal;\n  overflow: hidden;\n&#125;\n\n父组件引入子组件\n 在home-video/index.json中引入子组件\n\n&#123;\n  &quot;enablePullDownRefresh&quot;: true,\n  &quot;backgroundTextStyle&quot;: &quot;dark&quot;,\n  &quot;usingComponents&quot;: &#123;\n    &quot;video-item-v1&quot;: &quot;&#x2F;components&#x2F;video-item-v1&#x2F;index&quot;\n  &#125;\n&#125;\n\n\n 改写home-video/index.wxml使用组件\n\n&lt;!--pages&#x2F;home-video&#x2F;index.wxml--&gt;\n&lt;view class&#x3D;&quot;video&quot;&gt;\n  &lt;view class&#x3D;&quot;item&quot; wx:for&#x3D;&quot;&#123;&#123;topMVs&#125;&#125;&quot; wx:key&#x3D;&quot;id&quot;&gt;\n     &lt;video-item-v1 item&#x3D;&quot;&#123;&#123;item&#125;&#125;&quot;\n      bindtap&#x3D;&quot;handleVideoItemClick&quot;\n      data-item&#x3D;&quot;&#123;&#123;item&#125;&#125;&quot;&gt;&lt;&#x2F;video-item-v1&gt;\n  &lt;&#x2F;view&gt;\n&lt;&#x2F;view&gt;\n\n父组件传值就是通过data-item传递的\n\n\\\n\n 最后我们还需要修改home-video/index.wxss\n\n&#x2F;* pages&#x2F;home-video&#x2F;index.wxss *&#x2F;\n.video &#123;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n&#125;\n\n.item &#123;\n  width: 48%;\n&#125;\n\n\n\\\n其他：\n项目地址: https://gitee.com/LUNIONT/xhumusic\n\n","slug":"西瓜音乐小程序开发第一天","date":"2022-02-10T07:50:55.000Z","categories_index":"","tags_index":"实战,小程序","author_index":"LIYUNFU"}]